<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultProductUnitNotFound" xml:space="preserve">
    <value>Product unit was not found</value>
  </data>
  <data name="PuConversionExpressionInvalid" xml:space="preserve">
    <value>The convert expression of "{0}" of product '{1}" is invalid</value>
  </data>
  <data name="ImportNeedProductCateForProduct" xml:space="preserve">
    <value>Product category is required, product "{0}"</value>
  </data>
  <data name="ProductCateNotFound" xml:space="preserve">
    <value>Product category was not found</value>
  </data>
  <data name="DefaultProductCateNotFound" xml:space="preserve">
    <value>No default product category was found</value>
  </data>
  <data name="ProductConsumptionImportAsCateTitle" xml:space="preserve">
    <value>Consumption materials</value>
  </data>
  <data name="PuDecimalPlaceNotValid" xml:space="preserve">
    <value>The decimal place {0} is invalid, it must be in range from {1} - {2}</value>
  </data>
  <data name="ImportRowTitle" xml:space="preserve">
    <value>Row</value>
  </data>
  <data name="StockNameNotFound" xml:space="preserve">
    <value>Stock name "{0}" was not found</value>
  </data>
  <data name="CanNotDeleteProductWhichInUsed" xml:space="preserve">
    <value>Can not delete in used product</value>
  </data>
  <data name="DepartmentOfMaterialNotFound" xml:space="preserve">
    <value>The department "{0}" was not found, product "{1}"</value>
  </data>
  <data name="StepOfMaterialNotFound" xml:space="preserve">
    <value>The production step {0} was not found, product "{1}"</value>
  </data>
  <data name="ImportProductCateOfProductNotFound" xml:space="preserve">
    <value>Category "{0}" of product "{1}" was not found</value>
  </data>
  <data name="UnitOfProductNotFound" xml:space="preserve">
    <value>Unit of product "{0}" was not found</value>
  </data>
  <data name="CustomerWithCodeNotFound" xml:space="preserve">
    <value>Customer code "{0}" was not found</value>
  </data>
  <data name="CustomerWithNameNotFound" xml:space="preserve">
    <value>Customer name "{0}" was not found</value>
  </data>
  <data name="ImportProductTypeOfProductNotFound" xml:space="preserve">
    <value>Product code type "{0}" of product "{1}" was not found</value>
  </data>
  <data name="ImportProductCateDefaultOfProductNotFound" xml:space="preserve">
    <value>Default product category was not found, product "{0}"</value>
  </data>
  <data name="ImportConsumptionGroupNotFound" xml:space="preserve">
    <value>Consumption group "{0}" was not found</value>
  </data>
  <data name="PuConversionExpressionError" xml:space="preserve">
    <value>Can not convert the unit "{0}" of product "{1}". Check the convert expression</value>
  </data>
  <data name="ProductCodeAlreadyExisted" xml:space="preserve">
    <value>Product code "{0}" already existed</value>
  </data>
  <data name="ProductImportAsCateTitle" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="ProductMaterialConsumptionQuantityError" xml:space="preserve">
    <value>The quantity of consumption material "{0}" in group "{1}" must be greater than 0</value>
  </data>
  <data name="ProductNameOfCodeEmpty" xml:space="preserve">
    <value>Product name must be not empty, product code "{0}"</value>
  </data>
  <data name="ImportMultipleProductsFound" xml:space="preserve">
    <value>More than one product "{0}" was found</value>
  </data>
  <data name="ExistMoreSameCustomerProduct" xml:space="preserve">
    <value>Exists more than one customer is set</value>
  </data>
  <data name="ImportConsumBomNotExistedInProduct" xml:space="preserve">
    <value>Some parts that used consumption material do not exist in product BOM, parts: {0}</value>
  </data>
  <data name="ImportConsumDuplicateSamePartInSameGroup" xml:space="preserve">
    <value>Duplicate parts have same consumption material and group. Consumption materials: {0}</value>
  </data>
  <data name="CanNotUpdateUnitProductWhichInUsed" xml:space="preserve">
    <value>Can not update primary unit of product "{0}" that has been had reference data</value>
  </data>
</root>
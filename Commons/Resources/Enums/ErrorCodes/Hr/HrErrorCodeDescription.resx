<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HrActionNotFound" xml:space="preserve">
    <value>Không tìm thấy chức năng</value>
  </data>
  <data name="HrAreaCodeAlreadyExisted" xml:space="preserve">
    <value>Mã vùng dữ liệu đã tồn tại</value>
  </data>
  <data name="HrAreaFieldAlreadyExisted" xml:space="preserve">
    <value>Trường dữ liệu của vùng đã tồn tại</value>
  </data>
  <data name="HrAreaFieldNotFound" xml:space="preserve">
    <value>Trường dữ liệu không tồn tại</value>
  </data>
  <data name="HrAreaNotFound" xml:space="preserve">
    <value>Không tìm thấy vùng dữ liệu</value>
  </data>
  <data name="HrAreaTitleAlreadyExisted" xml:space="preserve">
    <value>Tiêu đề vùng dữ liệu đã tồn tại</value>
  </data>
  <data name="HrBillInUsed" xml:space="preserve">
    <value>Dữ liệu {0} đang được sử dụng</value>
  </data>
  <data name="HrCodeAlreadyExisted" xml:space="preserve">
    <value>Mã chứng từ hành chính nhân sự đã tồn tại</value>
  </data>
  <data name="HrFieldAlreadyExisted" xml:space="preserve">
    <value>Trường dữ liệu đã tồn tại</value>
  </data>
  <data name="HrFieldDataSizeInValid" xml:space="preserve">
    <value>DataSize của Trường dữ liệu kiểu Text không thể nhỏ hơn hoặc bằng 0, Số thực phải &gt; 1</value>
  </data>
  <data name="HrFieldIsUsed" xml:space="preserve">
    <value>Trường dữ liệu đang được sử dụng</value>
  </data>
  <data name="HrFieldNotFound" xml:space="preserve">
    <value>Trường dữ liệu không tồn tại</value>
  </data>
  <data name="HrTitleAlreadyExisted" xml:space="preserve">
    <value>Tên chứng từ hành chính nhân sự đã tồn tại</value>
  </data>
  <data name="HrTypeNotFound" xml:space="preserve">
    <value>Không tìm thấy chứng từ hành chính nhân sự</value>
  </data>
  <data name="HrValueBillNotFound" xml:space="preserve">
    <value>Chứng từ không tồn tại</value>
  </data>
  <data name="HrValueInValid" xml:space="preserve">
    <value>Giá trị {0} dòng {1} trường dữ liệu {2} không hợp lệ</value>
  </data>
  <data name="MapGenCodeConfigFail" xml:space="preserve">
    <value>Cấu hình mã tự sinh thất bại</value>
  </data>
  <data name="ReferValueNotFound" xml:space="preserve">
    <value>Thông tin giá trị dòng {0} của trường {1} không tồn tại</value>
  </data>
  <data name="ReferValueNotValidFilter" xml:space="preserve">
    <value>Thông tin giá trị dòng {0} của trường {1} không thỏa mãn điều kiện của bộ lọc {2}</value>
  </data>
  <data name="RequiredFieldIsEmpty" xml:space="preserve">
    <value>Không được phép để trống dòng {0} trường thông tin {1}</value>
  </data>
  <data name="RequireValueNotValidFilter" xml:space="preserve">
    <value>Thông tin giá trị dòng {0} của trường {1} không thỏa mãn điều kiện của bộ lọc {2}</value>
  </data>
  <data name="SourceCategoryFieldNotFound" xml:space="preserve">
    <value>Trường tham chiếu không tồn tại</value>
  </data>
  <data name="SourceHrTypeNotFound" xml:space="preserve">
    <value>Cấu hình chứng từ hành chính nhân sự nguồn không tồn tại</value>
  </data>
  <data name="UniqueValueAlreadyExisted" xml:space="preserve">
    <value>Trường thông tin {0} có giá trị đã tồn tại</value>
  </data>
</root>
USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_ConvertToDateTime] (@data nvarchar(max), @path nvarchar(255))
RETURNS nvarchar(25)
AS
BEGIN
    DECLARE @unix_number bigint;

    SET @unix_number = JSON_VALUE(@data,@path)
    RETURN (Select format(dateadd(S,@unix_number,'1970-01-01'),'dd/MM/yyyy'))
END;

GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Tinh_tong] (@data nvarchar(max), @path_1 nvarchar(255), @path_2 nvarchar(255))
RETURNS  bigint
AS
BEGIN
	DECLARE @sSQL nvarchar(500);
	DECLARE @ParmDefinition nvarchar(500);
	DECLARE @tong bigint;

	set @tong = (select sum(convert(bigint,A.B1))
			from (SELECT '$.'+TheValues.[key] as A1, TheValues.[value] B1
			FROM OPENJSON ( @data, @path_1 ) AS root
			CROSS APPLY OPENJSON ( root.value) AS TheValues) as A
			where A.A1 = @path_2
			group by A.A1);	
			
	return @tong
END;

GO

USE AccountancyDB
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE OR ALTER FUNCTION [dbo].[afn_GetPreviousPeriod]
(
	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@TimezoneOffset INT
)
RETURNS 
@DateRange TABLE 
(
	FromDate DATETIME2,
	ToDate DATETIME2
)
AS
BEGIN
	
	DECLARE @Begin DATETIME2 = @FromDate
	DECLARE @FromDateTimezone DATETIME2 = DATEADD(MINUTE, -@TimeZoneOffset, @FromDate)
	DECLARE @ToDateTimezone DATETIME2 = DATEADD(MINUTE, -@TimeZoneOffset, @ToDate)

	IF DATEDIFF(YEAR, @FromDateTimezone, @ToDateTimezone) = 0
	BEGIN
		SET @Begin = DATETIME2FROMPARTS(DATEPART(YEAR, @FromDateTimezone)-1, 1, 1, 0, 0, 0, 0, 0)
	END

	IF DATEDIFF(MONTH, @FromDateTimezone, @ToDateTimezone) = 2
	BEGIN
		SET @Begin = DATEADD(MONTH,-3, @FromDateTimezone)
		SET @Begin = DATETIME2FROMPARTS(DATEPART(YEAR, @Begin), DATEPART(MONTH, @Begin), 1, 0, 0, 0, 0, 0)
	END

	IF DATEDIFF(MONTH, @FromDateTimezone, @ToDateTimezone) = 0
	BEGIN
		SET @Begin = DATEADD(MONTH,-1, @FromDateTimezone)
		SET @Begin = DATETIME2FROMPARTS(DATEPART(YEAR, @Begin), DATEPART(MONTH, @Begin), 1, 0, 0, 0, 0, 0)
	END

	IF DATEDIFF(DAY, @FromDateTimezone, @ToDateTimezone) <28
	BEGIN
		SET @Begin = DATEADD(DAY,-DATEDIFF(DAY, @FromDateTimezone, @ToDateTimezone)-1, @FromDate)
	END

	SET @Begin = DATEADD(MINUTE,@TimeZoneOffset, @Begin)
	
	INSERT INTO @DateRange
	(
	    FromDate,
	    ToDate
	)
	VALUES
	(   @Begin, -- FromDate - datetime2
	    DATEADD(SECOND,-1,@FromDate)  -- ToDate - datetime2
	)
	RETURN 
END


GO

USE AccountancyDB
GO

CREATE OR ALTER FUNCTION [dbo].[afn_customTrim]
(	
	@Data nvarchar(512)=NULL,
	@SeparateChar nvarchar(10)=NULL
)
RETURNS nvarchar(512)
AS
BEGIN
	SET @SeparateChar = LTRIM(RTRIM(ISNULL(@SeparateChar,'')));
	SET @Data = LTRIM(RTRIM(@Data))
	IF @SeparateChar = ''
	BEGIN
		RETURN @Data;
	END

	DECLARE @SepLength INT = LEN(@SeparateChar);

	WHILE LEFT(@Data,@SepLength) = @SeparateChar
	BEGIN
		SET @Data = LTRIM(RIGHT(@Data, LEN(@Data)- @SepLength))
	END

	
	WHILE RIGHT(@Data,@SepLength) = @SeparateChar
	BEGIN
		SET @Data = RTRIM(LEFT(@Data, LEN(@Data)- @SepLength))
	END
	RETURN @Data
END


GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Convert_number2text](@data NVARCHAR(MAX), @path nvarchar(255)) 
RETURNS NVARCHAR(MAX) 
AS BEGIN 
DECLARE @con_so bigint 
DECLARE @sNumber NVARCHAR(4000) 
DECLARE @Return NVARCHAR(4000) 
DECLARE @mLen INT 
DECLARE @i INT 
DECLARE @mDigit INT 
DECLARE @mGroup INT 
DECLARE @mTemp NVARCHAR(4000) 
DECLARE @mNumText NVARCHAR(4000)

SET @con_so = JSON_VALUE(@data,@path)

SELECT @sNumber= LTRIM(STR(@con_so))
SELECT @mLen = Len(@sNumber)
SELECT @i=1
SELECT @mTemp='' WHILE @i <= @mLen BEGIN
SELECT @mDigit= SUBSTRING(@sNumber, @i, 1) IF @mDigit=0
SELECT @mNumText=N'không' ELSE BEGIN IF @mDigit=1
SELECT @mNumText=N'một' ELSE IF @mDigit=2
SELECT @mNumText=N'hai' ELSE IF @mDigit=3
SELECT @mNumText=N'ba' ELSE IF @mDigit=4
SELECT @mNumText=N'bốn' ELSE IF @mDigit=5
SELECT @mNumText=N'năm' ELSE IF @mDigit=6
SELECT @mNumText=N'sáu' ELSE IF @mDigit=7
SELECT @mNumText=N'bảy' ELSE IF @mDigit=8
SELECT @mNumText=N'tám' ELSE IF @mDigit=9
SELECT @mNumText=N'chín' END
SELECT @mTemp = @mTemp + ' ' + @mNumText IF (@mLen = @i) BREAK
SELECT @mGroup=(@mLen - @i) % 9 IF @mGroup=0 BEGIN
SELECT @mTemp = @mTemp + N' tỷ' IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 END ELSE IF @mGroup=6 BEGIN
SELECT @mTemp = @mTemp + N' triệu' IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 END ELSE IF @mGroup=3 BEGIN
SELECT @mTemp = @mTemp + N' nghìn' IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 END ELSE BEGIN
SELECT @mGroup=(@mLen - @i) % 3 IF @mGroup=2
SELECT @mTemp = @mTemp + N' trăm' ELSE IF @mGroup=1
SELECT @mTemp = @mTemp + N' mươi' END
SELECT @i=@i+1 END

--'Loại bỏ trường hợp x00

SELECT @mTemp = Replace(@mTemp, N'không mươi không', '')

--'Loại bỏ trường hợp 00x
SELECT @mTemp =
REPLACE(@mTemp, N'không mươi ', N'linh ')

--'Loại bỏ trường hợp x0, x>=2

SELECT @mTemp = Replace(@mTemp, N'mươi không', N'mươi')

--'Fix trường hợp 10
SELECT @mTemp =
REPLACE(@mTemp, N'một mươi', N'mười')

--'Fix trường hợp x4, x>=2

SELECT @mTemp = Replace(@mTemp, N'mươi bốn', N'mươi tư')

--'Fix trường hợp x04
SELECT @mTemp =
REPLACE(@mTemp, N'linh bốn', N'linh tư')

--'Fix trường hợp x5, x>=2

SELECT @mTemp = Replace(@mTemp, N'mươi năm', N'mươi nhăm')

--'Fix trường hợp x1, x>=2
SELECT @mTemp =
REPLACE(@mTemp, N'mươi một', N'mươi mốt')

--'Fix trường hợp x15 

SELECT @mTemp = Replace(@mTemp, N'mười năm', N'mười lăm')

--'Bỏ ký tự space
SELECT @mTemp = LTRIM(@mTemp)

--'Ucase ký tự đầu tiên

SELECT @Return=UPPER(Left(@mTemp, 1)) + SUBSTRING(@mTemp,2, 4000)

RETURN @Return
END

GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Comma_separated] (@data nvarchar(max), @path nvarchar(255))
RETURNS NVARCHAR(255)
AS
BEGIN
	Declare @number bigint;

	SET @number = JSON_VALUE(@data,@path);

    RETURN (SELECT Format(@number, '##,##0'))
END;

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedCalcFixExchangeRateByOrder]
	@FromDate AS datetime,
	@ToDate AS datetime,
	@Currency AS int,
	@Tk AS nvarchar(128) = NULL,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	
	SET @ResStatus = 0
END



GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedCalcFixExchangeRateByLoanConvenant]
	@FromDate AS datetime,
	@ToDate AS datetime,
	@Currency AS int,
	@Tk AS nvarchar(128) = NULL,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	
	SET @ResStatus = 0
END



GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_DeleteField]
	@TableName nvarchar(64),
	@FieldName nvarchar(64),
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		DECLARE @suffix int
			SET @suffix = 0
			WHILE (EXISTS (SELECT * FROM sys.columns 
          WHERE Name = CONCAT(@FieldName, '_Delete_' , @suffix)
          AND Object_ID = Object_ID(@TableName)))
			BEGIN
				 SET @suffix = @suffix + 1;
			END;
			SET @Sql ='sp_rename '''+ @TableName + '.' + @FieldName + ''', ''' + CONCAT(@FieldName , '_Delete_' , @suffix) + ''', ''COLUMN'''
			
		EXEC (@Sql)	

		SET @ResStatus = 1
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_RenameField]
	@TableName nvarchar(64),
	@OldFieldName nvarchar(64),
	@NewFieldName nvarchar(64),
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		SET @Sql = 'sp_rename '''+ @TableName + '.' + @OldFieldName + ''', '''+ @NewFieldName + ''', ''COLUMN'''

		PRINT @Sql
		EXEC (@Sql)	

		SET @ResStatus = 1
END

GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Tinh_tongz] (@data nvarchar(max), @path nvarchar(255))
RETURNS bigint
AS
BEGIN
	DECLARE @sSQL nvarchar(500);
	DECLARE @ParmDefinition nvarchar(500);
	DECLARE @tong bigint;

	SET @sSQL = 'SELECT @tinh_tong= sum(number)
		FROM OPENJSON('''+@data+''') 
		WITH (
			number bigint '''+@path+'''))';	
			
	SET @ParmDefinition = N'@tinh_tong bigint';


	return @tong
END;

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_DropColumnConstraist]
	@TableName nvarchar(64),
	@ColumnName nvarchar(64),	
	@ResStatus int OUTPUT
AS
BEGIN	
	  IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = @ColumnName)
	   BEGIN
		DECLARE @sql NVARCHAR(MAX)
		WHILE 1=1
			BEGIN
				SELECT TOP 1 @sql = N'alter table '+@TableName+' drop constraint ['+dc.name+N']'
				FROM sys.default_constraints dc
				JOIN sys.columns c
				ON c.default_object_id = dc.object_id
				WHERE dc.parent_object_id = OBJECT_ID(@TableName) AND c.name = @ColumnName
				IF @@ROWCOUNT = 0
					BEGIN
						PRINT 'DELETED Constraint on column ' + @ColumnName
						BREAK
					END
			EXEC (@sql)
		END;
		
	   END
	ELSE
	   PRINT 'Column LOWER_LIMIT does not exist'

	SET @ResStatus = 1
END

GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Convert_number2text_2](@data bigint) 
RETURNS NVARCHAR(MAX) 
AS BEGIN 
DECLARE @con_so bigint 
DECLARE @sNumber NVARCHAR(4000) 
DECLARE @Return NVARCHAR(4000) 
DECLARE @mLen INT 
DECLARE @i INT 
DECLARE @mDigit INT 
DECLARE @mGroup INT 
DECLARE @mTemp NVARCHAR(4000) 
DECLARE @mNumText NVARCHAR(4000)

SET @con_so = @data

SELECT @sNumber= LTRIM(STR(@con_so))
SELECT @mLen = Len(@sNumber)
SELECT @i=1
SELECT @mTemp='' WHILE @i <= @mLen BEGIN
SELECT @mDigit= SUBSTRING(@sNumber, @i, 1) IF @mDigit=0
SELECT @mNumText=N'không' ELSE BEGIN IF @mDigit=1
SELECT @mNumText=N'một' ELSE IF @mDigit=2
SELECT @mNumText=N'hai' ELSE IF @mDigit=3
SELECT @mNumText=N'ba' ELSE IF @mDigit=4
SELECT @mNumText=N'bốn' ELSE IF @mDigit=5
SELECT @mNumText=N'năm' ELSE IF @mDigit=6
SELECT @mNumText=N'sáu' ELSE IF @mDigit=7
SELECT @mNumText=N'bảy' ELSE IF @mDigit=8
SELECT @mNumText=N'tám' ELSE IF @mDigit=9
SELECT @mNumText=N'chín' END
SELECT @mTemp = @mTemp + ' ' + @mNumText IF (@mLen = @i) BREAK
SELECT @mGroup=(@mLen - @i) % 9 IF @mGroup=0 BEGIN
SELECT @mTemp = @mTemp + N' tỷ' IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 END ELSE IF @mGroup=6 BEGIN
SELECT @mTemp = @mTemp + N' triệu' IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 END ELSE IF @mGroup=3 BEGIN
SELECT @mTemp = @mTemp + N' nghìn' IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 END ELSE BEGIN
SELECT @mGroup=(@mLen - @i) % 3 IF @mGroup=2
SELECT @mTemp = @mTemp + N' trăm' ELSE IF @mGroup=1
SELECT @mTemp = @mTemp + N' mươi' END
SELECT @i=@i+1 END

--'Loại bỏ trường hợp x00

SELECT @mTemp = Replace(@mTemp, N'không mươi không', '')

--'Loại bỏ trường hợp 00x
SELECT @mTemp =
REPLACE(@mTemp, N'không mươi ', N'linh ')

--'Loại bỏ trường hợp x0, x>=2

SELECT @mTemp = Replace(@mTemp, N'mươi không', N'mươi')

--'Fix trường hợp 10
SELECT @mTemp =
REPLACE(@mTemp, N'một mươi', N'mười')

--'Fix trường hợp x4, x>=2

SELECT @mTemp = Replace(@mTemp, N'mươi bốn', N'mươi tư')

--'Fix trường hợp x04
SELECT @mTemp =
REPLACE(@mTemp, N'linh bốn', N'linh tư')

--'Fix trường hợp x5, x>=2

SELECT @mTemp = Replace(@mTemp, N'mươi năm', N'mươi nhăm')

--'Fix trường hợp x1, x>=2
SELECT @mTemp =
REPLACE(@mTemp, N'mươi một', N'mươi mốt')

--'Fix trường hợp x15 

SELECT @mTemp = Replace(@mTemp, N'mười năm', N'mười lăm')

--'Bỏ ký tự space
SELECT @mTemp = LTRIM(@mTemp)

--'Ucase ký tự đầu tiên

SELECT @Return=UPPER(Left(@mTemp, 1)) + SUBSTRING(@mTemp,2, 4000)

RETURN @Return
END

GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Comma_separated_2] (@number bigint)
RETURNS NVARCHAR(255)
AS
BEGIN
    RETURN (SELECT Format(@number, '##,##0'))
END;

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_UpdateField]
	@IsAddNew bit,
	@TableName nvarchar(64),
	@FieldName nvarchar(64),
	@DataType nvarchar(128),
	@DataSize int,
	@DecimalPlace int,
	@DefaultValue nvarchar(128),
	@IsNullable bit,
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		DECLARE @IsSetDefaultValue BIT = 0;

		IF @IsAddNew = 1
		BEGIN
			SET @Sql = 'ALTER TABLE [' + @TableName + '] ADD [' + @FieldName + '] ' + @DataType;
		END
		ELSE
		BEGIN
			EXEC asp_DropColumnConstraist @TableName = @TableName, @ColumnName = @FieldName, @ResStatus = @ResStatus OUTPUT

			SET @Sql = 'ALTER TABLE [' + @TableName + '] ALTER COLUMN [' + @FieldName + '] ' + @DataType;
		END

		IF @DataSize>0 AND @DataType IN('decimal','money','numberic','nvarchar','varchar','char')
		BEGIN
			SET @Sql += ' (' + convert(nvarchar(50),@DataSize)
			IF @DecimalPlace>0 AND @DataType IN('decimal','money','numberic')
			BEGIN
				SET @Sql += ',' + convert(nvarchar(50),@DecimalPlace)
			END
			SET @Sql += ')'
		END
		
		IF @DataSize<0 AND @DataType IN('nvarchar','varchar')
				SET @Sql += '(max)'
		
		IF @IsNullable = 1
		BEGIN
			SET @Sql+=' NULL'

			IF LEN(@DefaultValue)>0
			BEGIN				
				SET @IsSetDefaultValue = 1
			END
		END
		ELSE
		BEGIN
			SET @Sql+=' NOT NULL';

			SET @IsSetDefaultValue = 1
		END

		
		PRINT @Sql
		EXEC (@Sql)	

		IF @IsSetDefaultValue = 1
		BEGIN
			IF @DataType IN ('int','bigint','decimal','money','numberic','bit','float','double','binary','bit','real','tinyInt','smallint','smallmoney')
			BEGIN				
				IF LEN(@DefaultValue)=0
				BEGIN				
					SET @DefaultValue = '1'
				END
			END

			IF @DataType IN ('datetime','date')
			BEGIN
				
				IF LEN(@DefaultValue)=0
				BEGIN				
					SET @DefaultValue = '''1900-01-01'''
				END
				ELSE
				BEGIN
					SET @DefaultValue = '''' + @DefaultValue + '''';
				END
			END

			IF @DataType IN ('datetime2')
			BEGIN
				IF LEN(@DefaultValue)=0
				BEGIN
					SET @DefaultValue = '''0001-01-01'''
				END
				ELSE
				BEGIN
					SET @DefaultValue = '''' + @DefaultValue + '''';
				END
			END

			IF @DataType IN ('nvarchar','varchar','text','char')
			BEGIN
				SET @DefaultValue = '''' + @DefaultValue + '''';
			END
		
			
			SET @Sql =  'ALTER TABLE [' + @TableName + '] ADD CONSTRAINT [DF_' + @TableName + '_' + @FieldName+'_DefaultValue] DEFAULT ' + @DefaultValue +' FOR [' + @FieldName+']';

			PRINT @Sql
			EXEC (@Sql)	
		END

	

		
		SET @ResStatus = 1
END

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Year] AS 
							WITH tmp AS (
	SELECT YEAR(GETDATE()) [Year]
	UNION ALL
	SELECT [Year]-1 [Year] FROM tmp WHERE [Year]-1 > YEAR(GETDATE())-15
)
SELECT [Year] F_Id, [Year] FROM tmp
							;

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputType_UpdateView_Rc]
AS
BEGIN
	--RETURN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @FieldNames nvarchar(max) = '';
	DECLARE @APPROVE int = 1;

	SELECT @FieldNames += ',d.' + [COLUMN_NAME]
		FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow'		

	IF LEN(@FieldNames)>0
	BEGIN
		SET @FieldNames = SUBSTRING(@FieldNames,2,LEN(@FieldNames)-1)
	END


	DECLARE @Sql nvarchar(max) = '';


	DECLARE @MissingFields TABLE(
		FieldName nvarchar(128)
	)

	DECLARE @KhachHang_Field nvarchar(max) = 'kh0'
	DECLARE @KhachHang_Co_Field nvarchar(max) = 'ISNULL(kh_co0,kh0)'
		
	DECLARE @TransactionUnion nvarchar(max) = ''
	
	DECLARE @coupleIndex INT = 0
	DECLARE @strCoupleIndex nvarchar(max)
	
	WHILE @coupleIndex < 6
	BEGIN
		SET @strCoupleIndex = convert(nvarchar(128), @coupleIndex);

		DECLARE @Couple nvarchar(max) = ''
		
		DECLARE @IsExistsTk BIT = 1

		DECLARE @IsExistsVnd BIT = 1

		DECLARE @FieldName nvarchar(max)

		

		--1.1. Khach hang no
		SET @FieldName = 'kh'+@strCoupleIndex		

		DECLARE @kh_no_expression nvarchar(max) = ''
		DECLARE @kh_no_field nvarchar(max) = ''

		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN
			SET @kh_no_field = @FieldName

			IF LEN(@KhachHang_Field)>0
			BEGIN
				SET @kh_no_expression = 'ISNULL('+@FieldName+', ' + @KhachHang_Field +')'						
			END
			ELSE
			BEGIN
				SET @kh_no_expression = @FieldName				
			END
		END
		ELSE
		BEGIN
			SET @kh_no_field = 'NULL'

			INSERT INTO @MissingFields VALUES(@FieldName);

			IF LEN(@KhachHang_Field)>0
			BEGIN
				SET @kh_no_expression = @KhachHang_Field
			END
			ELSE
			BEGIN
				SET @kh_no_expression = 'NULL'				
			END
		END
		SET @Couple+= @kh_no_expression +' AS ' + @FieldName

		SET @Couple += ','

		--1.2. Khach hang co
		SET @FieldName = 'kh_co'+@strCoupleIndex
		
		DECLARE @kh_co_expression nvarchar(max) = ''

		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN
			IF LEN(@KhachHang_Co_Field)>0
			BEGIN
				--SET @kh_co_expression = 'ISNULL('+@FieldName+', ISNULL(' + @kh_no_expression + ',' +@KhachHang_Co_Field +'))'
				SET @kh_co_expression = 'ISNULL('+@FieldName+', ISNULL(' + @kh_no_field + ',' +@KhachHang_Co_Field +'))'
			END
			ELSE
			BEGIN
				SET @kh_co_expression = 'ISNULL('+@FieldName+', ' + @kh_no_expression + ')'
			END
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			IF LEN(@KhachHang_Co_Field)>0
			BEGIN
				SET @kh_co_expression = 'ISNULL(' + @kh_no_field + ',' +@KhachHang_Co_Field +')'
				--SET @kh_co_expression = 'ISNULL(' + @kh_no_expression + ',' +@KhachHang_Co_Field +')'
			END
			ELSE
			BEGIN
				SET @kh_co_expression = @kh_no_expression
			END
		END
		SET @Couple+= @kh_co_expression +' AS ' + @FieldName
		

		SET @Couple += ','

		--2. loai tien
		SET @FieldName = 'loai_tien'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN			
			SET @Couple += @FieldName		
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			SET @Couple += 'NULL AS ' + @FieldName			
		END

		SET @Couple += ','

		--3. tk_co
		SET @FieldName = 'tk_co'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN			
			SET @Couple += @FieldName
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			SET @Couple += ' NULL AS ' + @FieldName
			SET @IsExistsTk = 0;
		END

		SET @Couple += ','

		--4. tk_no
		SET @FieldName = 'tk_no'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN			
			SET @Couple += @FieldName
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			SET @Couple += ' NULL AS ' + @FieldName
			SET @IsExistsTk = 0;
		END

		SET @Couple += ','

		--5. ty_gia
		SET @FieldName = 'ty_gia'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN			
			SET @Couple += @FieldName		
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);
			SET @Couple += ' NULL AS ' + @FieldName			
		END


		SET @Couple += ','

		--6. don_gia
		SET @FieldName = 'don_gia'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN
			SET @Couple += @FieldName
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			SET @Couple += ' NULL AS ' + @FieldName
		END

		SET @Couple += ','

		--6. vnd
		SET @FieldName = 'vnd'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN
			SET @Couple += @FieldName
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			SET @Couple += ' NULL AS ' + @FieldName
			SET @IsExistsVnd = 0
		END

		SET @Couple += ','

		--7. ngoai_te
		SET @FieldName = 'ngoai_te'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN			
			SET @Couple += @FieldName		
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			SET @Couple += ' NULL AS ' + @FieldName			
		END

		SET @Couple += ',' + @strCoupleIndex + ' AS BUT_TOAN'
		IF @IsExistsTk = 1 AND @IsExistsVnd = 1
		BEGIN

		--WHERE Vnd' + @strCoupleIndex + '>0 OR (tk_co' + @strCoupleIndex + ' IS NOT NULL AND tk_no' + @strCoupleIndex + ' IS NOT NULL)

			SET @TransactionUnion += N'
			SELECT ' + @Couple + '			
			WHERE Vnd' + @strCoupleIndex + ' <> 0 OR (tk_co' + @strCoupleIndex + ' IS NOT NULL AND tk_no' + @strCoupleIndex + ' IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co' + @strCoupleIndex + ' IS NOT NULL OR tk_no' + @strCoupleIndex + ' IS NOT NULL))
			UNION ALL'
		END

		SET @coupleIndex = @coupleIndex+1;
	END

	IF LEN(@TransactionUnion)>0
	BEGIN
		SET @TransactionUnion = SUBSTRING(@TransactionUnion,1,LEN(@TransactionUnion)-13)
	END

	PRINT @TransactionUnion
	
	DROP VIEW IF EXISTS _rc

	DROP VIEW IF EXISTS _rc_all

	--c.loai_tien, c.ty_gia,
	
	SELECT @FieldNames = @FieldNames + ', NULL AS ' + FieldName FROM @MissingFields;
	
	IF DATALENGTH(@TransactionUnion) = 0
		SET @TransactionUnion = 'SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL'
	--CREATE VIEW _rc AS
	SET @Sql = CONCAT(N'
	
	SELECT ', @FieldNames, '

	, c.kh_no
	, c.kh_co
	, c.loai_tien_nt
	, c.tk_co
	, c.tk_no
	, c.don_gia
	, c.vnd
	, c.ngoai_te
	, c.BUT_TOAN

	FROM dbo.vInputBillRow d WITH(NOLOCK)
	
	CROSS APPLY
	(
		', @TransactionUnion, '
	) c (kh_no, kh_co, loai_tien_nt, tk_co, tk_no, ty_gia, don_gia, vnd, ngoai_te, BUT_TOAN)
	');--WHERE d.CensorStatusId = ', @APPROVE, ' ;
	PRINT @Sql


	EXEC ('CREATE VIEW _rc AS ' + @Sql + ' WHERE d.CensorStatusId = ' + @APPROVE + ' ;');

	EXEC ('CREATE VIEW _rc_all AS ' + @Sql);
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputType_UpdateView_Rc_detail]
AS
BEGIN
    DECLARE @FieldNames NVARCHAR(MAX) = N'';
    DECLARE @APPROVE INT = 1;
    SELECT @FieldNames += N',' + [COLUMN_NAME]
      FROM [INFORMATION_SCHEMA].[COLUMNS]
     WHERE [TABLE_NAME] = 'vInputBillRow';
    --AND CHARINDEX('kh', [COLUMN_NAME]) != 1
    --AND CHARINDEX('tk_co', [COLUMN_NAME]) != 1
    --AND CHARINDEX('tk_no', [COLUMN_NAME]) != 1
    --AND CHARINDEX('loai_tien', [COLUMN_NAME]) != 1
    --AND CHARINDEX('ty_gia', [COLUMN_NAME]) != 1
    --AND CHARINDEX('vnd', [COLUMN_NAME]) != 1
    --AND CHARINDEX('ngoai_te', [COLUMN_NAME]) != 1

    IF LEN(@FieldNames) > 0
    BEGIN
        SET @FieldNames = SUBSTRING(@FieldNames, 2, LEN(@FieldNames) - 1);
    END;

    DECLARE @TransactionUnion NVARCHAR(MAX) = N'';
    DECLARE @coupleIndex INT = 0;

    WHILE @coupleIndex < 6
    BEGIN
        DECLARE @TkNoName NVARCHAR(50) = CONCAT('r.tk_no', @coupleIndex);
        DECLARE @TkCoName NVARCHAR(50) = CONCAT('r.tk_co', @coupleIndex);
        DECLARE @VndName NVARCHAR(50) = CONCAT('r.vnd', @coupleIndex);
        DECLARE @NgoaiTeName NVARCHAR(50) = CONCAT('r.ngoai_te', @coupleIndex);
        DECLARE @DonGia NVARCHAR(50) = CONCAT('r.don_gia', @coupleIndex);
        DECLARE @Kh NVARCHAR(50) = CONCAT('r.kh', @coupleIndex);
        DECLARE @Khc NVARCHAR(50) = CONCAT('r.kh_co', @coupleIndex);

        IF (NOT EXISTS (   SELECT *
                             FROM sys.columns
                            WHERE name      = CONCAT('tk_no', @coupleIndex)
                              AND object_id = OBJECT_ID('vInputBillRow')))
        BEGIN
            SET @TkNoName = N'NULL';
        END;

        IF (NOT EXISTS (   SELECT *
                             FROM sys.columns
                            WHERE name      = CONCAT('tk_co', @coupleIndex)
                              AND object_id = OBJECT_ID('vInputBillRow')))
        BEGIN
            SET @TkCoName = N'NULL';
        END;

        IF (NOT EXISTS (   SELECT *
                             FROM sys.columns
                            WHERE name      = CONCAT('kh', @coupleIndex)
                              AND object_id = OBJECT_ID('vInputBillRow')))
        BEGIN
            SET @Kh = N'NULL';
        END;

        IF (NOT EXISTS (   SELECT *
                             FROM sys.columns
                            WHERE name      = CONCAT('kh_co', @coupleIndex)
                              AND object_id = OBJECT_ID('vInputBillRow')))
        BEGIN
            SET @Khc = N'NULL';
        END;

        IF (NOT EXISTS (   SELECT *
                             FROM sys.columns
                            WHERE name      = CONCAT('don_gia', @coupleIndex)
                              AND object_id = OBJECT_ID('vInputBillRow')))
        BEGIN
            SET @DonGia = N'NULL';
        END;

        IF (NOT EXISTS (   SELECT *
                             FROM sys.columns
                            WHERE name      = CONCAT('ngoai_te', @coupleIndex)
                              AND object_id = OBJECT_ID('vInputValueRow')))
        BEGIN
            SET @NgoaiTeName = N'NULL';
        END;

        IF (EXISTS (   SELECT *
                         FROM sys.columns
                        WHERE name      = CONCAT('vnd', @coupleIndex)
                          AND object_id = OBJECT_ID('vInputBillRow')))
        BEGIN
            IF (@TkNoName <> 'NULL')
            BEGIN
                SET @TransactionUnion += N'
						SELECT ' + @TkNoName + N' Tk, ' + @TkCoName + N' Tk_du, 1 AS IsDebt, ' 
										 + @DonGia + N' don_gia, ' + @VndName + N' Vnd_no, NULL Vnd_co, ' 
										 + @NgoaiTeName + N' Ngoai_te_no, NULL Ngoai_te_co, ISNULL(' + @Kh + N', r.kh0) kh, '
                                         + CONVERT(NVARCHAR(MAX), @coupleIndex) + N' AS BUT_TOAN '
										 + 'WHERE ((' + @VndName+ N' <> 0 OR InputType_IsOpenning =1) OR ' + @TkCoName + N' IS NOT NULL) AND ('
                                         + @TkNoName + N' IS NOT NULL) 
						UNION ALL';
            END;
            IF (@TkCoName <> 'NULL')
            BEGIN
                SET @TransactionUnion += N'
						SELECT ' + @TkCoName + N' Tk, ' + @TkNoName + N' Tk_du, 0 AS IsDebt, ' + @DonGia
                                         + N' don_gia, NULL Vnd_no, ' + @VndName + N' Vnd_co, NULL Ngoai_te_no,'
                                         + @NgoaiTeName + N' Ngoai_te_co, ISNULL(' + @Khc + N',ISNULL(' + @Kh
                                         + N',ISNULL(r.kh_co0, r.kh0))) kh, ' + CONVERT(NVARCHAR(MAX), @coupleIndex)
                                         + N' AS BUT_TOAN WHERE ((' + @VndName + N'<> 0 OR InputType_IsOpenning =1) OR '
                                         + @TkNoName + N' IS NOT NULL) AND (' + @TkCoName
                                         + N' IS NOT NULL)
						UNION ALL';
            END;
        END;
        SET @coupleIndex = @coupleIndex + 1;
    END;

    IF LEN(@TransactionUnion) > 0
    BEGIN
        SET @TransactionUnion = SUBSTRING(@TransactionUnion, 1, LEN(@TransactionUnion) - 9);
    END;

    IF OBJECT_ID('dbo._rc_detail') IS NOT NULL
    BEGIN
        DROP VIEW _rc_detail;
    END;

	 IF OBJECT_ID('dbo._rc_detail_all') IS NOT NULL
    BEGIN
        DROP VIEW _rc_detail_all;
    END;

    IF DATALENGTH(@TransactionUnion) = 0
        SET @TransactionUnion = N'SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL';

    DECLARE @Sql NVARCHAR(MAX) = N'';
    SET @Sql
        = CONCAT(
              N' 
    SELECT ',
              @FieldNames,
              ', c.Tk, c.Tk_du, c.IsDebt, c.don_gia, c.Vnd_no, c.Vnd_co, c.Ngoai_te_no, c.Ngoai_te_co, c.kh, c.BUT_TOAN FROM vInputBillRow r WITH(NOLOCK)
    CROSS APPLY
    ( ',
              @TransactionUnion,
              ' ) c');

   -- EXEC (@Sql);

	EXEC ('CREATE VIEW _rc_detail AS ' + @Sql + ' WHERE r.CensorStatusId = ' + @APPROVE + ' ;');

	EXEC ('CREATE VIEW _rc_detail_all AS ' + @Sql);	

END;

GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Split](@text nvarchar(max), @delimiter varchar(20) = ' ')

RETURNS @Strings TABLE

(   

  position int IDENTITY PRIMARY KEY,

  value nvarchar(max)  

)

AS

BEGIN

 

DECLARE @index int

SET @index = -1

 

WHILE (LEN(@text) > 0)

  BEGIN 

    SET @index = CHARINDEX(@delimiter , @text) 

    IF (@index = 0) AND (LEN(@text) > 0) 

      BEGIN  

        INSERT INTO @Strings VALUES (@text)

          BREAK 

      END 

    IF (@index > 1) 

      BEGIN  

        INSERT INTO @Strings VALUES (LEFT(@text, @index - 1))  

        SET @text = RIGHT(@text, (LEN(@text) - @index)) 

      END 

    ELSE

      SET @text = RIGHT(@text, (LEN(@text) - @index))

    END

  RETURN
END

GO

USE AccountancyPublicDB
GO

CREATE OR ALTER FUNCTION [dbo].[afn_customTrim]
(	
	@Data nvarchar(512)=NULL,
	@SeparateChar nvarchar(10)=NULL
)
RETURNS nvarchar(512)
AS
BEGIN
	SET @SeparateChar = LTRIM(RTRIM(ISNULL(@SeparateChar,'')));
	SET @Data = LTRIM(RTRIM(@Data))
	IF @SeparateChar = ''
	BEGIN
		RETURN @Data;
	END

	DECLARE @SepLength INT = LEN(@SeparateChar);

	WHILE LEFT(@Data,@SepLength) = @SeparateChar
	BEGIN
		SET @Data = LTRIM(RIGHT(@Data, LEN(@Data)- @SepLength))
	END

	
	WHILE RIGHT(@Data,@SepLength) = @SeparateChar
	BEGIN
		SET @Data = RTRIM(LEFT(@Data, LEN(@Data)- @SepLength))
	END
	RETURN @Data
END



GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Comma_separated] (@data nvarchar(max), @path nvarchar(255))
RETURNS NVARCHAR(255)
AS
BEGIN
	Declare @number bigint;

	SET @number = JSON_VALUE(@data,@path);

    RETURN (SELECT Format(@number, '##,##0'))
END;


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Comma_separated_2] (@number bigint)
RETURNS NVARCHAR(255)
AS
BEGIN
    RETURN (SELECT Format(@number, '##,##0'))
END;


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_ConvertToDateTime] (@data nvarchar(max), @path nvarchar(255))
RETURNS nvarchar(25)
AS
BEGIN
    DECLARE @unix_number bigint;

    SET @unix_number = JSON_VALUE(@data,@path)
    RETURN (Select format(dateadd(S,@unix_number,'1970-01-01'),'dd/MM/yyyy'))
END;


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Convert_number2text](@data NVARCHAR(MAX), @path nvarchar(255)) 
RETURNS NVARCHAR(MAX) 
AS BEGIN 
DECLARE @con_so bigint 
DECLARE @sNumber NVARCHAR(4000) 
DECLARE @Return NVARCHAR(4000) 
DECLARE @mLen INT 
DECLARE @i INT 
DECLARE @mDigit INT 
DECLARE @mGroup INT 
DECLARE @mTemp NVARCHAR(4000) 
DECLARE @mNumText NVARCHAR(4000)

SET @con_so = JSON_VALUE(@data,@path)

SELECT @sNumber= LTRIM(STR(@con_so))
SELECT @mLen = Len(@sNumber)
SELECT @i=1
SELECT @mTemp='' WHILE @i <= @mLen BEGIN
SELECT @mDigit= SUBSTRING(@sNumber, @i, 1) IF @mDigit=0
SELECT @mNumText=N'không' ELSE BEGIN IF @mDigit=1
SELECT @mNumText=N'một' ELSE IF @mDigit=2
SELECT @mNumText=N'hai' ELSE IF @mDigit=3
SELECT @mNumText=N'ba' ELSE IF @mDigit=4
SELECT @mNumText=N'bốn' ELSE IF @mDigit=5
SELECT @mNumText=N'năm' ELSE IF @mDigit=6
SELECT @mNumText=N'sáu' ELSE IF @mDigit=7
SELECT @mNumText=N'bảy' ELSE IF @mDigit=8
SELECT @mNumText=N'tám' ELSE IF @mDigit=9
SELECT @mNumText=N'chín' END
SELECT @mTemp = @mTemp + ' ' + @mNumText IF (@mLen = @i) BREAK
SELECT @mGroup=(@mLen - @i) % 9 IF @mGroup=0 BEGIN
SELECT @mTemp = @mTemp + N' tỷ' IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 END ELSE IF @mGroup=6 BEGIN
SELECT @mTemp = @mTemp + N' triệu' IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 END ELSE IF @mGroup=3 BEGIN
SELECT @mTemp = @mTemp + N' nghìn' IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 END ELSE BEGIN
SELECT @mGroup=(@mLen - @i) % 3 IF @mGroup=2
SELECT @mTemp = @mTemp + N' trăm' ELSE IF @mGroup=1
SELECT @mTemp = @mTemp + N' mươi' END
SELECT @i=@i+1 END

--'Loại bỏ trường hợp x00

SELECT @mTemp = Replace(@mTemp, N'không mươi không', '')

--'Loại bỏ trường hợp 00x
SELECT @mTemp =
REPLACE(@mTemp, N'không mươi ', N'linh ')

--'Loại bỏ trường hợp x0, x>=2

SELECT @mTemp = Replace(@mTemp, N'mươi không', N'mươi')

--'Fix trường hợp 10
SELECT @mTemp =
REPLACE(@mTemp, N'một mươi', N'mười')

--'Fix trường hợp x4, x>=2

SELECT @mTemp = Replace(@mTemp, N'mươi bốn', N'mươi tư')

--'Fix trường hợp x04
SELECT @mTemp =
REPLACE(@mTemp, N'linh bốn', N'linh tư')

--'Fix trường hợp x5, x>=2

SELECT @mTemp = Replace(@mTemp, N'mươi năm', N'mươi nhăm')

--'Fix trường hợp x1, x>=2
SELECT @mTemp =
REPLACE(@mTemp, N'mươi một', N'mươi mốt')

--'Fix trường hợp x15 

SELECT @mTemp = Replace(@mTemp, N'mười năm', N'mười lăm')

--'Bỏ ký tự space
SELECT @mTemp = LTRIM(@mTemp)

--'Ucase ký tự đầu tiên

SELECT @Return=UPPER(Left(@mTemp, 1)) + SUBSTRING(@mTemp,2, 4000)

RETURN @Return
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Convert_number2text_2](@data bigint) 
RETURNS NVARCHAR(MAX) 
AS BEGIN 
DECLARE @con_so bigint 
DECLARE @sNumber NVARCHAR(4000) 
DECLARE @Return NVARCHAR(4000) 
DECLARE @mLen INT 
DECLARE @i INT 
DECLARE @mDigit INT 
DECLARE @mGroup INT 
DECLARE @mTemp NVARCHAR(4000) 
DECLARE @mNumText NVARCHAR(4000)

SET @con_so = @data

SELECT @sNumber= LTRIM(STR(@con_so))
SELECT @mLen = Len(@sNumber)
SELECT @i=1
SELECT @mTemp='' WHILE @i <= @mLen BEGIN
SELECT @mDigit= SUBSTRING(@sNumber, @i, 1) IF @mDigit=0
SELECT @mNumText=N'không' ELSE BEGIN IF @mDigit=1
SELECT @mNumText=N'một' ELSE IF @mDigit=2
SELECT @mNumText=N'hai' ELSE IF @mDigit=3
SELECT @mNumText=N'ba' ELSE IF @mDigit=4
SELECT @mNumText=N'bốn' ELSE IF @mDigit=5
SELECT @mNumText=N'năm' ELSE IF @mDigit=6
SELECT @mNumText=N'sáu' ELSE IF @mDigit=7
SELECT @mNumText=N'bảy' ELSE IF @mDigit=8
SELECT @mNumText=N'tám' ELSE IF @mDigit=9
SELECT @mNumText=N'chín' END
SELECT @mTemp = @mTemp + ' ' + @mNumText IF (@mLen = @i) BREAK
SELECT @mGroup=(@mLen - @i) % 9 IF @mGroup=0 BEGIN
SELECT @mTemp = @mTemp + N' tỷ' IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 END ELSE IF @mGroup=6 BEGIN
SELECT @mTemp = @mTemp + N' triệu' IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 END ELSE IF @mGroup=3 BEGIN
SELECT @mTemp = @mTemp + N' nghìn' IF SUBSTRING(@sNumber, @i + 1, 3) = N'000'
SELECT @i = @i + 3 END ELSE BEGIN
SELECT @mGroup=(@mLen - @i) % 3 IF @mGroup=2
SELECT @mTemp = @mTemp + N' trăm' ELSE IF @mGroup=1
SELECT @mTemp = @mTemp + N' mươi' END
SELECT @i=@i+1 END

--'Loại bỏ trường hợp x00

SELECT @mTemp = Replace(@mTemp, N'không mươi không', '')

--'Loại bỏ trường hợp 00x
SELECT @mTemp =
REPLACE(@mTemp, N'không mươi ', N'linh ')

--'Loại bỏ trường hợp x0, x>=2

SELECT @mTemp = Replace(@mTemp, N'mươi không', N'mươi')

--'Fix trường hợp 10
SELECT @mTemp =
REPLACE(@mTemp, N'một mươi', N'mười')

--'Fix trường hợp x4, x>=2

SELECT @mTemp = Replace(@mTemp, N'mươi bốn', N'mươi tư')

--'Fix trường hợp x04
SELECT @mTemp =
REPLACE(@mTemp, N'linh bốn', N'linh tư')

--'Fix trường hợp x5, x>=2

SELECT @mTemp = Replace(@mTemp, N'mươi năm', N'mươi nhăm')

--'Fix trường hợp x1, x>=2
SELECT @mTemp =
REPLACE(@mTemp, N'mươi một', N'mươi mốt')

--'Fix trường hợp x15 

SELECT @mTemp = Replace(@mTemp, N'mười năm', N'mười lăm')

--'Bỏ ký tự space
SELECT @mTemp = LTRIM(@mTemp)

--'Ucase ký tự đầu tiên

SELECT @Return=UPPER(Left(@mTemp, 1)) + SUBSTRING(@mTemp,2, 4000)

RETURN @Return
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Tinh_tong] (@data nvarchar(max), @path_1 nvarchar(255), @path_2 nvarchar(255))
RETURNS  bigint
AS
BEGIN
	DECLARE @sSQL nvarchar(500);
	DECLARE @ParmDefinition nvarchar(500);
	DECLARE @tong bigint;

	set @tong = (select sum(convert(bigint,A.B1))
			from (SELECT '$.'+TheValues.[key] as A1, TheValues.[value] B1
			FROM OPENJSON ( @data, @path_1 ) AS root
			CROSS APPLY OPENJSON ( root.value) AS TheValues) as A
			where A.A1 = @path_2
			group by A.A1);	
			
	return @tong
END;


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Tinh_tongz] (@data nvarchar(max), @path nvarchar(255))
RETURNS bigint
AS
BEGIN
	DECLARE @sSQL nvarchar(500);
	DECLARE @ParmDefinition nvarchar(500);
	DECLARE @tong bigint;

	SET @sSQL = 'SELECT @tinh_tong= sum(number)
		FROM OPENJSON('''+@data+''') 
		WITH (
			number bigint '''+@path+'''))';	
			
	SET @ParmDefinition = N'@tinh_tong bigint';


	return @tong
END;


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_DeleteField]
	@TableName nvarchar(64),
	@FieldName nvarchar(64),
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		DECLARE @suffix int
			SET @suffix = 0
			WHILE (EXISTS (SELECT * FROM sys.columns 
          WHERE Name = CONCAT(@FieldName, '_Delete_' , @suffix)
          AND Object_ID = Object_ID(@TableName)))
			BEGIN
				 SET @suffix = @suffix + 1;
			END;
			SET @Sql ='sp_rename '''+ @TableName + '.' + @FieldName + ''', ''' + CONCAT(@FieldName , '_Delete_' , @suffix) + ''', ''COLUMN'''
			
		EXEC (@Sql)	

		SET @ResStatus = 1
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_RenameField]
	@TableName nvarchar(64),
	@OldFieldName nvarchar(64),
	@NewFieldName nvarchar(64),
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		SET @Sql = 'sp_rename '''+ @TableName + '.' + @OldFieldName + ''', '''+ @NewFieldName + ''', ''COLUMN'''

		PRINT @Sql
		EXEC (@Sql)	

		SET @ResStatus = 1
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedCalcFixExchangeRateByLoanConvenant]
	@FromDate AS datetime,
	@ToDate AS datetime,
	@Currency AS int,
	@Tk AS nvarchar(128) = NULL,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	
	SET @ResStatus = 0
END



GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedCalcFixExchangeRateByOrder]
	@FromDate AS datetime,
	@ToDate AS datetime,
	@Currency AS int,
	@Tk AS nvarchar(128) = NULL,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	
	SET @ResStatus = 0
END



GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_DropColumnConstraist]
	@TableName nvarchar(64),
	@ColumnName nvarchar(64),	
	@ResStatus int OUTPUT
AS
BEGIN	
	  IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = @ColumnName)
	   BEGIN
		DECLARE @sql NVARCHAR(MAX)
		WHILE 1=1
			BEGIN
				SELECT TOP 1 @sql = N'alter table '+@TableName+' drop constraint ['+dc.name+N']'
				FROM sys.default_constraints dc
				JOIN sys.columns c
				ON c.default_object_id = dc.object_id
				WHERE dc.parent_object_id = OBJECT_ID(@TableName) AND c.name = @ColumnName
				IF @@ROWCOUNT = 0
					BEGIN
						PRINT 'DELETED Constraint on column ' + @ColumnName
						BREAK
					END
			EXEC (@sql)
		END;
		
	   END
	ELSE
	   PRINT 'Column LOWER_LIMIT does not exist'

	SET @ResStatus = 1
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_UpdateField]
	@IsAddNew bit,
	@TableName nvarchar(64),
	@FieldName nvarchar(64),
	@DataType nvarchar(128),
	@DataSize int,
	@DecimalPlace int,
	@DefaultValue nvarchar(128),
	@IsNullable bit,
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		DECLARE @IsSetDefaultValue BIT = 0;

		IF @IsAddNew = 1
		BEGIN
			SET @Sql = 'ALTER TABLE [' + @TableName + '] ADD [' + @FieldName + '] ' + @DataType;
		END
		ELSE
		BEGIN
			EXEC asp_DropColumnConstraist @TableName = @TableName, @ColumnName = @FieldName, @ResStatus = @ResStatus OUTPUT

			SET @Sql = 'ALTER TABLE [' + @TableName + '] ALTER COLUMN [' + @FieldName + '] ' + @DataType;
		END

		IF @DataSize>0 AND @DataType IN('decimal','money','numberic','nvarchar','varchar','char')
		BEGIN
			SET @Sql += ' (' + convert(nvarchar(50),@DataSize)
			IF @DecimalPlace>0 AND @DataType IN('decimal','money','numberic')
			BEGIN
				SET @Sql += ',' + convert(nvarchar(50),@DecimalPlace)
			END
			SET @Sql += ')'
		END
		
		IF @DataSize<0 AND @DataType IN('nvarchar','varchar')
				SET @Sql += '(max)'
		
		IF @IsNullable = 1
		BEGIN
			SET @Sql+=' NULL'

			IF LEN(@DefaultValue)>0
			BEGIN				
				SET @IsSetDefaultValue = 1
			END
		END
		ELSE
		BEGIN
			SET @Sql+=' NOT NULL';

			SET @IsSetDefaultValue = 1
		END

		
		PRINT @Sql
		EXEC (@Sql)	

		IF @IsSetDefaultValue = 1
		BEGIN
			IF @DataType IN ('int','bigint','decimal','money','numberic','bit','float','double','binary','bit','real','tinyInt','smallint','smallmoney')
			BEGIN				
				IF LEN(@DefaultValue)=0
				BEGIN				
					SET @DefaultValue = '1'
				END
			END

			IF @DataType IN ('datetime','date')
			BEGIN
				
				IF LEN(@DefaultValue)=0
				BEGIN				
					SET @DefaultValue = '''1900-01-01'''
				END
				ELSE
				BEGIN
					SET @DefaultValue = '''' + @DefaultValue + '''';
				END
			END

			IF @DataType IN ('datetime2')
			BEGIN
				IF LEN(@DefaultValue)=0
				BEGIN
					SET @DefaultValue = '''0001-01-01'''
				END
				ELSE
				BEGIN
					SET @DefaultValue = '''' + @DefaultValue + '''';
				END
			END

			IF @DataType IN ('nvarchar','varchar','text','char')
			BEGIN
				SET @DefaultValue = '''' + @DefaultValue + '''';
			END
		
			
			SET @Sql =  'ALTER TABLE [' + @TableName + '] ADD CONSTRAINT [DF_' + @TableName + '_' + @FieldName+'_DefaultValue] DEFAULT ' + @DefaultValue +' FOR [' + @FieldName+']';

			PRINT @Sql
			EXEC (@Sql)	
		END

	

		
		SET @ResStatus = 1
END


GO

USE AccountancyPublicDB
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE OR ALTER FUNCTION [dbo].[afn_GetPreviousPeriod]
(
	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@TimezoneOffset INT
)
RETURNS 
@DateRange TABLE 
(
	FromDate DATETIME2,
	ToDate DATETIME2
)
AS
BEGIN
	
	DECLARE @Begin DATETIME2 = @FromDate
	DECLARE @FromDateTimezone DATETIME2 = DATEADD(MINUTE, -@TimeZoneOffset, @FromDate)
	DECLARE @ToDateTimezone DATETIME2 = DATEADD(MINUTE, -@TimeZoneOffset, @ToDate)

	IF DATEDIFF(YEAR, @FromDateTimezone, @ToDateTimezone) = 0
	BEGIN
		SET @Begin = DATETIME2FROMPARTS(DATEPART(YEAR, @FromDateTimezone)-1, 1, 1, 0, 0, 0, 0, 0)
	END

	IF DATEDIFF(MONTH, @FromDateTimezone, @ToDateTimezone) = 2
	BEGIN
		SET @Begin = DATEADD(MONTH,-3, @FromDateTimezone)
		SET @Begin = DATETIME2FROMPARTS(DATEPART(YEAR, @Begin), DATEPART(MONTH, @Begin), 1, 0, 0, 0, 0, 0)
	END

	IF DATEDIFF(MONTH, @FromDateTimezone, @ToDateTimezone) = 0
	BEGIN
		SET @Begin = DATEADD(MONTH,-1, @FromDateTimezone)
		SET @Begin = DATETIME2FROMPARTS(DATEPART(YEAR, @Begin), DATEPART(MONTH, @Begin), 1, 0, 0, 0, 0, 0)
	END

	IF DATEDIFF(DAY, @FromDateTimezone, @ToDateTimezone) <28
	BEGIN
		SET @Begin = DATEADD(DAY,-DATEDIFF(DAY, @FromDateTimezone, @ToDateTimezone)-1, @FromDate)
	END

	SET @Begin = DATEADD(MINUTE,@TimeZoneOffset, @Begin)
	
	INSERT INTO @DateRange
	(
	    FromDate,
	    ToDate
	)
	VALUES
	(   @Begin, -- FromDate - datetime2
	    DATEADD(SECOND,-1,@FromDate)  -- ToDate - datetime2
	)
	RETURN 
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Split](@text nvarchar(max), @delimiter varchar(20) = ' ')

RETURNS @Strings TABLE

(   

  position int IDENTITY PRIMARY KEY,

  value nvarchar(max)  

)

AS

BEGIN

 

DECLARE @index int

SET @index = -1

 

WHILE (LEN(@text) > 0)

  BEGIN 

    SET @index = CHARINDEX(@delimiter , @text) 

    IF (@index = 0) AND (LEN(@text) > 0) 

      BEGIN  

        INSERT INTO @Strings VALUES (@text)

          BREAK 

      END 

    IF (@index > 1) 

      BEGIN  

        INSERT INTO @Strings VALUES (LEFT(@text, @index - 1))  

        SET @text = RIGHT(@text, (LEN(@text) - @index)) 

      END 

    ELSE

      SET @text = RIGHT(@text, (LEN(@text) - @index))

    END

  RETURN
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputType_UpdateView_Rc_detail]
AS
BEGIN
    DECLARE @FieldNames NVARCHAR(MAX) = N'';
    DECLARE @APPROVE INT = 1;
    SELECT @FieldNames += N',' + [COLUMN_NAME]
      FROM [INFORMATION_SCHEMA].[COLUMNS]
     WHERE [TABLE_NAME] = 'vInputBillRow';
    --AND CHARINDEX('kh', [COLUMN_NAME]) != 1
    --AND CHARINDEX('tk_co', [COLUMN_NAME]) != 1
    --AND CHARINDEX('tk_no', [COLUMN_NAME]) != 1
    --AND CHARINDEX('loai_tien', [COLUMN_NAME]) != 1
    --AND CHARINDEX('ty_gia', [COLUMN_NAME]) != 1
    --AND CHARINDEX('vnd', [COLUMN_NAME]) != 1
    --AND CHARINDEX('ngoai_te', [COLUMN_NAME]) != 1

    IF LEN(@FieldNames) > 0
    BEGIN
        SET @FieldNames = SUBSTRING(@FieldNames, 2, LEN(@FieldNames) - 1);
    END;

    DECLARE @TransactionUnion NVARCHAR(MAX) = N'';
    DECLARE @coupleIndex INT = 0;

    WHILE @coupleIndex < 6
    BEGIN
        DECLARE @TkNoName NVARCHAR(50) = CONCAT('r.tk_no', @coupleIndex);
        DECLARE @TkCoName NVARCHAR(50) = CONCAT('r.tk_co', @coupleIndex);
        DECLARE @VndName NVARCHAR(50) = CONCAT('r.vnd', @coupleIndex);
        DECLARE @NgoaiTeName NVARCHAR(50) = CONCAT('r.ngoai_te', @coupleIndex);
        DECLARE @DonGia NVARCHAR(50) = CONCAT('r.don_gia', @coupleIndex);
        DECLARE @Kh NVARCHAR(50) = CONCAT('r.kh', @coupleIndex);
        DECLARE @Khc NVARCHAR(50) = CONCAT('r.kh_co', @coupleIndex);

        IF (NOT EXISTS (   SELECT *
                             FROM sys.columns
                            WHERE name      = CONCAT('tk_no', @coupleIndex)
                              AND object_id = OBJECT_ID('vInputBillRow')))
        BEGIN
            SET @TkNoName = N'NULL';
        END;

        IF (NOT EXISTS (   SELECT *
                             FROM sys.columns
                            WHERE name      = CONCAT('tk_co', @coupleIndex)
                              AND object_id = OBJECT_ID('vInputBillRow')))
        BEGIN
            SET @TkCoName = N'NULL';
        END;

        IF (NOT EXISTS (   SELECT *
                             FROM sys.columns
                            WHERE name      = CONCAT('kh', @coupleIndex)
                              AND object_id = OBJECT_ID('vInputBillRow')))
        BEGIN
            SET @Kh = N'NULL';
        END;

        IF (NOT EXISTS (   SELECT *
                             FROM sys.columns
                            WHERE name      = CONCAT('kh_co', @coupleIndex)
                              AND object_id = OBJECT_ID('vInputBillRow')))
        BEGIN
            SET @Khc = N'NULL';
        END;

        IF (NOT EXISTS (   SELECT *
                             FROM sys.columns
                            WHERE name      = CONCAT('don_gia', @coupleIndex)
                              AND object_id = OBJECT_ID('vInputBillRow')))
        BEGIN
            SET @DonGia = N'NULL';
        END;

        IF (NOT EXISTS (   SELECT *
                             FROM sys.columns
                            WHERE name      = CONCAT('ngoai_te', @coupleIndex)
                              AND object_id = OBJECT_ID('vInputValueRow')))
        BEGIN
            SET @NgoaiTeName = N'NULL';
        END;

        IF (EXISTS (   SELECT *
                         FROM sys.columns
                        WHERE name      = CONCAT('vnd', @coupleIndex)
                          AND object_id = OBJECT_ID('vInputBillRow')))
        BEGIN
            IF (@TkNoName <> 'NULL')
            BEGIN
                SET @TransactionUnion += N'
						SELECT ' + @TkNoName + N' Tk, ' + @TkCoName + N' Tk_du, 1 AS IsDebt, ' 
										 + @DonGia + N' don_gia, ' + @VndName + N' Vnd_no, NULL Vnd_co, ' 
										 + @NgoaiTeName + N' Ngoai_te_no, NULL Ngoai_te_co, ISNULL(' + @Kh + N', r.kh0) kh, '
                                         + CONVERT(NVARCHAR(MAX), @coupleIndex) + N' AS BUT_TOAN '
										 + 'WHERE ((' + @VndName+ N' <> 0 OR InputType_IsOpenning =1) OR ' + @TkCoName + N' IS NOT NULL) AND ('
                                         + @TkNoName + N' IS NOT NULL) 
						UNION ALL';
            END;
            IF (@TkCoName <> 'NULL')
            BEGIN
                SET @TransactionUnion += N'
						SELECT ' + @TkCoName + N' Tk, ' + @TkNoName + N' Tk_du, 0 AS IsDebt, ' + @DonGia
                                         + N' don_gia, NULL Vnd_no, ' + @VndName + N' Vnd_co, NULL Ngoai_te_no,'
                                         + @NgoaiTeName + N' Ngoai_te_co, ISNULL(' + @Khc + N',ISNULL(' + @Kh
                                         + N',ISNULL(r.kh_co0, r.kh0))) kh, ' + CONVERT(NVARCHAR(MAX), @coupleIndex)
                                         + N' AS BUT_TOAN WHERE ((' + @VndName + N'<> 0 OR InputType_IsOpenning =1) OR '
                                         + @TkNoName + N' IS NOT NULL) AND (' + @TkCoName
                                         + N' IS NOT NULL)
						UNION ALL';
            END;
        END;
        SET @coupleIndex = @coupleIndex + 1;
    END;

    IF LEN(@TransactionUnion) > 0
    BEGIN
        SET @TransactionUnion = SUBSTRING(@TransactionUnion, 1, LEN(@TransactionUnion) - 9);
    END;

    IF OBJECT_ID('dbo._rc_detail') IS NOT NULL
    BEGIN
        DROP VIEW _rc_detail;
    END;

	 IF OBJECT_ID('dbo._rc_detail_all') IS NOT NULL
    BEGIN
        DROP VIEW _rc_detail_all;
    END;

    IF DATALENGTH(@TransactionUnion) = 0
        SET @TransactionUnion = N'SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL';

    DECLARE @Sql NVARCHAR(MAX) = N'';
    SET @Sql
        = CONCAT(
              N' 
    SELECT ',
              @FieldNames,
              ', c.Tk, c.Tk_du, c.IsDebt, c.don_gia, c.Vnd_no, c.Vnd_co, c.Ngoai_te_no, c.Ngoai_te_co, c.kh, c.BUT_TOAN FROM vInputBillRow r WITH(NOLOCK)
    CROSS APPLY
    ( ',
              @TransactionUnion,
              ' ) c');

   -- EXEC (@Sql);

	EXEC ('CREATE VIEW _rc_detail AS ' + @Sql + ' WHERE r.CensorStatusId = ' + @APPROVE + ' ;');

	EXEC ('CREATE VIEW _rc_detail_all AS ' + @Sql);	

END;

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputType_UpdateView_Rc]
AS
BEGIN
	--RETURN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @FieldNames nvarchar(max) = '';
	DECLARE @APPROVE int = 1;

	SELECT @FieldNames += ',d.' + [COLUMN_NAME]
		FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow'		

	IF LEN(@FieldNames)>0
	BEGIN
		SET @FieldNames = SUBSTRING(@FieldNames,2,LEN(@FieldNames)-1)
	END


	DECLARE @Sql nvarchar(max) = '';


	DECLARE @MissingFields TABLE(
		FieldName nvarchar(128)
	)

	DECLARE @KhachHang_Field nvarchar(max) = 'kh0'
	DECLARE @KhachHang_Co_Field nvarchar(max) = 'ISNULL(kh_co0,kh0)'
		
	DECLARE @TransactionUnion nvarchar(max) = ''
	
	DECLARE @coupleIndex INT = 0
	DECLARE @strCoupleIndex nvarchar(max)
	
	WHILE @coupleIndex < 6
	BEGIN
		SET @strCoupleIndex = convert(nvarchar(128), @coupleIndex);

		DECLARE @Couple nvarchar(max) = ''
		
		DECLARE @IsExistsTk BIT = 1

		DECLARE @IsExistsVnd BIT = 1

		DECLARE @FieldName nvarchar(max)

		

		--1.1. Khach hang no
		SET @FieldName = 'kh'+@strCoupleIndex		

		DECLARE @kh_no_expression nvarchar(max) = ''
		DECLARE @kh_no_field nvarchar(max) = ''

		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN
			SET @kh_no_field = @FieldName

			IF LEN(@KhachHang_Field)>0
			BEGIN
				SET @kh_no_expression = 'ISNULL('+@FieldName+', ' + @KhachHang_Field +')'						
			END
			ELSE
			BEGIN
				SET @kh_no_expression = @FieldName				
			END
		END
		ELSE
		BEGIN
			SET @kh_no_field = 'NULL'

			INSERT INTO @MissingFields VALUES(@FieldName);

			IF LEN(@KhachHang_Field)>0
			BEGIN
				SET @kh_no_expression = @KhachHang_Field
			END
			ELSE
			BEGIN
				SET @kh_no_expression = 'NULL'				
			END
		END
		SET @Couple+= @kh_no_expression +' AS ' + @FieldName

		SET @Couple += ','

		--1.2. Khach hang co
		SET @FieldName = 'kh_co'+@strCoupleIndex
		
		DECLARE @kh_co_expression nvarchar(max) = ''

		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN
			IF LEN(@KhachHang_Co_Field)>0
			BEGIN
				--SET @kh_co_expression = 'ISNULL('+@FieldName+', ISNULL(' + @kh_no_expression + ',' +@KhachHang_Co_Field +'))'
				SET @kh_co_expression = 'ISNULL('+@FieldName+', ISNULL(' + @kh_no_field + ',' +@KhachHang_Co_Field +'))'
			END
			ELSE
			BEGIN
				SET @kh_co_expression = 'ISNULL('+@FieldName+', ' + @kh_no_expression + ')'
			END
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			IF LEN(@KhachHang_Co_Field)>0
			BEGIN
				SET @kh_co_expression = 'ISNULL(' + @kh_no_field + ',' +@KhachHang_Co_Field +')'
				--SET @kh_co_expression = 'ISNULL(' + @kh_no_expression + ',' +@KhachHang_Co_Field +')'
			END
			ELSE
			BEGIN
				SET @kh_co_expression = @kh_no_expression
			END
		END
		SET @Couple+= @kh_co_expression +' AS ' + @FieldName
		

		SET @Couple += ','

		--2. loai tien
		SET @FieldName = 'loai_tien'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN			
			SET @Couple += @FieldName		
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			SET @Couple += 'NULL AS ' + @FieldName			
		END

		SET @Couple += ','

		--3. tk_co
		SET @FieldName = 'tk_co'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN			
			SET @Couple += @FieldName
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			SET @Couple += ' NULL AS ' + @FieldName
			SET @IsExistsTk = 0;
		END

		SET @Couple += ','

		--4. tk_no
		SET @FieldName = 'tk_no'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN			
			SET @Couple += @FieldName
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			SET @Couple += ' NULL AS ' + @FieldName
			SET @IsExistsTk = 0;
		END

		SET @Couple += ','

		--5. ty_gia
		SET @FieldName = 'ty_gia'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN			
			SET @Couple += @FieldName		
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);
			SET @Couple += ' NULL AS ' + @FieldName			
		END


		SET @Couple += ','

		--6. don_gia
		SET @FieldName = 'don_gia'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN
			SET @Couple += @FieldName
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			SET @Couple += ' NULL AS ' + @FieldName
		END

		SET @Couple += ','

		--6. vnd
		SET @FieldName = 'vnd'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN
			SET @Couple += @FieldName
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			SET @Couple += ' NULL AS ' + @FieldName
			SET @IsExistsVnd = 0
		END

		SET @Couple += ','

		--7. ngoai_te
		SET @FieldName = 'ngoai_te'+@strCoupleIndex
		
		IF EXISTS (SELECT 0 FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE [TABLE_NAME] = 'vInputBillRow' AND [COLUMN_NAME] = @FieldName)
		BEGIN			
			SET @Couple += @FieldName		
		END
		ELSE
		BEGIN
			INSERT INTO @MissingFields VALUES(@FieldName);

			SET @Couple += ' NULL AS ' + @FieldName			
		END

		SET @Couple += ',' + @strCoupleIndex + ' AS BUT_TOAN'
		IF @IsExistsTk = 1 AND @IsExistsVnd = 1
		BEGIN

		--WHERE Vnd' + @strCoupleIndex + '>0 OR (tk_co' + @strCoupleIndex + ' IS NOT NULL AND tk_no' + @strCoupleIndex + ' IS NOT NULL)

			SET @TransactionUnion += N'
			SELECT ' + @Couple + '			
			WHERE Vnd' + @strCoupleIndex + ' <> 0 OR (tk_co' + @strCoupleIndex + ' IS NOT NULL AND tk_no' + @strCoupleIndex + ' IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co' + @strCoupleIndex + ' IS NOT NULL OR tk_no' + @strCoupleIndex + ' IS NOT NULL))
			UNION ALL'
		END

		SET @coupleIndex = @coupleIndex+1;
	END

	IF LEN(@TransactionUnion)>0
	BEGIN
		SET @TransactionUnion = SUBSTRING(@TransactionUnion,1,LEN(@TransactionUnion)-13)
	END

	PRINT @TransactionUnion
	
	DROP VIEW IF EXISTS _rc

	DROP VIEW IF EXISTS _rc_all

	--c.loai_tien, c.ty_gia,
	
	SELECT @FieldNames = @FieldNames + ', NULL AS ' + FieldName FROM @MissingFields;
	
	IF DATALENGTH(@TransactionUnion) = 0
		SET @TransactionUnion = 'SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL'
	--CREATE VIEW _rc AS
	SET @Sql = CONCAT(N'
	
	SELECT ', @FieldNames, '

	, c.kh_no
	, c.kh_co
	, c.loai_tien_nt
	, c.tk_co
	, c.tk_no
	, c.don_gia
	, c.vnd
	, c.ngoai_te
	, c.BUT_TOAN

	FROM dbo.vInputBillRow d WITH(NOLOCK)
	
	CROSS APPLY
	(
		', @TransactionUnion, '
	) c (kh_no, kh_co, loai_tien_nt, tk_co, tk_no, ty_gia, don_gia, vnd, ngoai_te, BUT_TOAN)
	');--WHERE d.CensorStatusId = ', @APPROVE, ' ;
	PRINT @Sql


	EXEC ('CREATE VIEW _rc AS ' + @Sql + ' WHERE d.CensorStatusId = ' + @APPROVE + ' ;');

	EXEC ('CREATE VIEW _rc_all AS ' + @Sql);
END

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_DropField]	
	@TableName nvarchar(64),
	@FieldName nvarchar(64),	
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		EXEC asp_DropColumnConstraist @TableName = @TableName, @ColumnName = @FieldName, @ResStatus = @ResStatus OUTPUT

		SET @Sql = 'ALTER TABLE '+ @TableName +' DROP COLUMN ' + @FieldName
		
		EXEC (@Sql)	

		SET @ResStatus = 1
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Year] AS 
							WITH tmp AS (
	SELECT YEAR(GETDATE()) [Year]
	UNION ALL
	SELECT [Year]-1 [Year] FROM tmp WHERE [Year]-1 > YEAR(GETDATE())-15
)
SELECT [Year] F_Id, [Year] FROM tmp
							;

GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[v_Year] AS 
							WITH tmp AS (
	SELECT YEAR(GETDATE()) [Year]
	UNION ALL
	SELECT [Year]-1 [Year] FROM tmp WHERE [Year]-1 > YEAR(GETDATE())-15
)
SELECT [Year] F_Id, [Year] FROM tmp
							;

GO

USE ManufacturingDB
GO


CREATE OR ALTER FUNCTION [dbo].[afn_Calculator_Step_Workload_Capacity_Balance_bak2] (
	@SubId INT,
	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@StepId INT)
RETURNS DECIMAL(18,5)
BEGIN 

--DECLARE @FROMDATE datetime2 = '2021-06-25 17:00:00.0000000'
--DECLARE @TODATE datetime2 = '2021-07-16 17:00:00.0000000'
--DECLARE @StepId int = 104

/*
DECLARE @WorkLoad decimal(18, 5) = 0;

DECLARE @CountWorkDay int;
DECLARE @MinDate datetime2,
        @MaxDate datetime2;
DECLARE @WorkingHoursDefault decimal(18, 5),
        @NumberOfPersonDefault int;

DECLARE @DepartmentId int;

DECLARE db_cursor CURSOR LOCAL FOR
SELECT DISTINCT
  DepartmentId
FROM ManufacturingDB.dbo.StepDetail
WHERE StepId = @StepId

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @DepartmentId
WHILE @@FETCH_STATUS = 0
BEGIN

  --SELECT
  --  @WorkingHoursDefault = d.WorkingHours,
  --  @NumberOfPersonDefault = d.NumberOfPerson
  --FROM ManufacturingDB.dbo.StepDetail d
  --WHERE d.StepId = @StepId
  --AND d.DepartmentId = @DepartmentId
  --AND d.SubsidiaryId = @SubId;

  --tmp fix for run
   SELECT
    @WorkingHoursDefault = d.ShrinkageRate,
    @NumberOfPersonDefault = d.Productivity
  FROM ManufacturingDB.dbo.Step d
  WHERE d.StepId = @StepId
  --AND d.DepartmentId = @DepartmentId
  AND d.SubsidiaryId = @SubId;

  --SELECT
  --  @MinDate = MIN(s.StartDate),
  --  @MaxDate = MAX(s.EndDate)
  --FROM ManufacturingDB.dbo.StepCapacityBalance s
  --WHERE s.StepId = @StepId
  --AND s.StartDate BETWEEN @FROMDATE AND @TODATE
  --AND s.DepartmentId = @DepartmentId
  --AND s.SubsidiaryId = @SubId

  --SELECT
  --  @MinDate,
  --  @MaxDate --log
  --SELECT
  --  @WorkingHoursDefault,
  --  @NumberOfPersonDefault --log

  IF(@MinDate IS NULL)
	 SET @WorkLoad = @WorkLoad + @WorkingHoursDefault * @NumberOfPersonDefault * (DATEDIFF(dd, @FROMDATE, @TODATE) + 1)
  --ELSE
  --BEGIN
  --SELECT
  --  @WorkLoad = SUM(
  --  (DATEDIFF(dd, s.StartDate, s.EndDate) + 1) * s.NumberOfPerson * s.WorkingHours
  --  )
  --FROM ManufacturingDB.dbo.StepCapacityBalance s
  --WHERE s.StepId = @StepId
  --AND s.StartDate BETWEEN @FROMDATE AND @TODATE
  --AND s.DepartmentId = @DepartmentId
  --AND s.SubsidiaryId = @SubId;

  --IF (@MinDate > @FROMDATE)
  --  SET @WorkLoad = @WorkLoad + @WorkingHoursDefault * @NumberOfPersonDefault * (DATEDIFF(dd, @FROMDATE, DATEADD(dd, -1, @MinDate)) + 1)

  --IF (@MaxDate < @TODATE)
  --  SET @WorkLoad = @WorkLoad + @WorkingHoursDefault * @NumberOfPersonDefault * (DATEDIFF(dd, DATEADD(dd, 1, @MaxDate), @TODATE) + 1)
  --END

  FETCH NEXT FROM db_cursor INTO @DepartmentId
END
CLOSE db_cursor
DEALLOCATE db_cursor

RETURN
  ISNULL(@WorkLoad, 0)*/
  RETURN 0
END


GO

USE MasterDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_DropColumnConstraist]
	@TableName nvarchar(64),
	@ColumnName nvarchar(64),	
	@ResStatus int OUTPUT
AS
BEGIN	
	  IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = @ColumnName)
	   BEGIN
		DECLARE @sql NVARCHAR(MAX)
		WHILE 1=1
			BEGIN
				SELECT TOP 1 @sql = N'alter table '+@TableName+' drop constraint ['+dc.name+N']'
				FROM sys.default_constraints dc
				JOIN sys.columns c
				ON c.default_object_id = dc.object_id
				WHERE dc.parent_object_id = OBJECT_ID(@TableName) AND c.name = @ColumnName
				IF @@ROWCOUNT = 0
					BEGIN
						PRINT 'DELETED Constraint on column ' + @ColumnName
						BREAK
					END
			EXEC (@sql)
		END;
		
	   END
	ELSE
	   PRINT 'Column LOWER_LIMIT does not exist'

	SET @ResStatus = 1
END

GO

USE MasterDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_DeleteField]
	@TableName nvarchar(64),
	@FieldName nvarchar(64),
	@ResStatus int OUTPUT
AS
BEGIN	
		DECLARE @Sql nvarchar(max) = ''

		IF OBJECT_ID(CONCAT('dbo.', @TableName)) IS NOT NULL
		   BEGIN
			IF COL_LENGTH(CONCAT('dbo.', @TableName),@FieldName) IS NOT NULL
				BEGIN
					DECLARE @suffix int
						SET @suffix = 0
						WHILE (EXISTS (SELECT * FROM sys.columns 
						WHERE Name = CONCAT(@FieldName, '_Delete_' , @suffix)
						AND Object_ID = Object_ID(@TableName)))
						BEGIN
								SET @suffix = @suffix + 1;
						END;
						SET @Sql ='sp_rename '''+ @TableName + '.' + @FieldName + ''', ''' + CONCAT(@FieldName , '_Delete_' , @suffix) + ''', ''COLUMN'''
			
					EXEC (@Sql)	
				END
		   END;

		SET @ResStatus = 1
END

GO

USE MasterDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_DropField]	
	@TableName nvarchar(64),
	@FieldName nvarchar(64),	
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		EXEC asp_DropColumnConstraist @TableName = @TableName, @ColumnName = @FieldName, @ResStatus = @ResStatus OUTPUT

		SET @Sql = 'ALTER TABLE '+ @TableName +' DROP COLUMN ' + @FieldName
		
		EXEC (@Sql)	

		SET @ResStatus = 1
END

GO

USE MasterDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_RenameField]
	@TableName nvarchar(64),
	@OldFieldName nvarchar(64),
	@NewFieldName nvarchar(64),
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''

		IF OBJECT_ID(CONCAT('dbo.', @TableName)) IS NOT NULL
		   BEGIN
			IF COL_LENGTH(CONCAT('dbo.', @TableName),@OldFieldName) IS NOT NULL
				BEGIN
					SET @Sql = 'sp_rename '''+ @TableName + '.' + @OldFieldName + ''', '''+ @NewFieldName + ''', ''COLUMN'''

					PRINT @Sql
					EXEC (@Sql)	
				END
		   END;
		
		SET @ResStatus = 1
END

GO

USE MasterDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_UpdateField]
	@IsAddNew bit,
	@TableName nvarchar(64),
	@FieldName nvarchar(64),
	@DataType nvarchar(128),
	@DataSize int,
	@DecimalPlace int,
	@DefaultValue nvarchar(128),
	@IsNullable bit,
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		DECLARE @IsSetDefaultValue BIT = 0;

		IF @IsAddNew = 1
		BEGIN
			SET @Sql = 'ALTER TABLE [' + @TableName + '] ADD [' + @FieldName + '] ' + @DataType;
		END
		ELSE
		BEGIN
			EXEC asp_DropColumnConstraist @TableName = @TableName, @ColumnName = @FieldName, @ResStatus = @ResStatus OUTPUT

			SET @Sql = 'ALTER TABLE [' + @TableName + '] ALTER COLUMN [' + @FieldName + '] ' + @DataType;
		END

		IF @DataSize>0 AND @DataType IN('decimal','money','numberic','nvarchar','varchar','char')
		BEGIN
			SET @Sql += ' (' + convert(nvarchar(50),@DataSize)
			IF @DecimalPlace>0 AND @DataType IN('decimal','money','numberic')
			BEGIN
				SET @Sql += ',' + convert(nvarchar(50),@DecimalPlace)
			END
			SET @Sql += ')'
		END
		
		IF @DataSize<0 AND @DataType IN('nvarchar','varchar')
		BEGIN
			SET @Sql += ' (max)'
		END

		
		IF @IsNullable = 1
		BEGIN
			SET @Sql+=' NULL'

			IF LEN(@DefaultValue)>0
			BEGIN				
				SET @IsSetDefaultValue = 1
			END
		END
		ELSE
		BEGIN
			SET @Sql+=' NOT NULL';

			SET @IsSetDefaultValue = 1
		END

		
		PRINT @Sql
		EXEC (@Sql)	

		IF @IsSetDefaultValue = 1
		BEGIN
			IF @DataType IN ('int','bigint','decimal','money','numberic','bit','float','double','binary','bit','real','tinyInt','smallint','smallmoney')
			BEGIN				
				IF LEN(@DefaultValue)=0
				BEGIN				
					SET @DefaultValue = '1'
				END
			END

			IF @DataType IN ('datetime','date')
			BEGIN
				
				IF LEN(@DefaultValue)=0
				BEGIN				
					SET @DefaultValue = '''1900-01-01'''
				END
				ELSE
				BEGIN
					SET @DefaultValue = '''' + @DefaultValue + '''';
				END
			END

			IF @DataType IN ('datetime2')
			BEGIN
				IF LEN(@DefaultValue)=0
				BEGIN
					SET @DefaultValue = '''0001-01-01'''
				END
				ELSE
				BEGIN
					SET @DefaultValue = '''' + @DefaultValue + '''';
				END
			END

			IF @DataType IN ('nvarchar','varchar','text','char')
			BEGIN
				SET @DefaultValue = '''' + @DefaultValue + '''';
			END
		
			
			SET @Sql =  'ALTER TABLE [' + @TableName + '] ADD CONSTRAINT [DF_' + @TableName + '_' + @FieldName+'_DefaultValue] DEFAULT ' + @DefaultValue +' FOR [' + @FieldName+']';

			PRINT @Sql
			EXEC (@Sql)	
		END

	

		
		SET @ResStatus = 1
END

GO

USE MasterDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Split](@text nvarchar(max), @delimiter varchar(20) = ' ')

RETURNS @Strings TABLE

(   

  position int IDENTITY PRIMARY KEY,

  value nvarchar(max)  

)

AS

BEGIN

 

DECLARE @index int

SET @index = -1

 

WHILE (LEN(@text) > 0)

  BEGIN 

    SET @index = CHARINDEX(@delimiter , @text) 

    IF (@index = 0) AND (LEN(@text) > 0) 

      BEGIN  

        INSERT INTO @Strings VALUES (@text)

          BREAK 

      END 

    IF (@index > 1) 

      BEGIN  

        INSERT INTO @Strings VALUES (LEFT(@text, @index - 1))  

        SET @text = RIGHT(@text, (LEN(@text) - @index)) 

      END 

    ELSE

      SET @text = RIGHT(@text, (LEN(@text) - @index))

    END

  RETURN
END

GO

USE MasterDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Comma_separated] (@data nvarchar(max), @path nvarchar(255))
RETURNS NVARCHAR(255)
AS
BEGIN
	Declare @number bigint;

	SET @number = JSON_VALUE(@data,@path);

    RETURN (SELECT Format(@number, '##,##0'))
END;

GO

USE MasterDB
GO
CREATE OR ALTER FUNCTION [dbo].[afn_worktime] (@StartDate DATETIME, @FinishDate DATETIME)
RETURNS VARCHAR(9)
AS
BEGIN
    DECLARE @Temp BIGINT
    SET @Temp=0

    DECLARE @FirstDay VARCHAR(9)
    SET @FirstDay = CONVERT(VARCHAR(9),@StartDate, 112)

    DECLARE @LastDay VARCHAR(9)
    SET @LastDay = CONVERT(VARCHAR(9),@FinishDate, 112)

    DECLARE @StartTime VARCHAR(9)
    SET @StartTime = CONVERT(VARCHAR(9),@StartDate, 108)

    DECLARE @FinishTime VARCHAR(9)
    SET @FinishTime = CONVERT(VARCHAR(9),@FinishDate, 108)

    DECLARE @WorkStart VARCHAR(9)
    SET @WorkStart = '09:30:00'

    DECLARE @WorkFinish VARCHAR(9)
    SET @WorkFinish = '17:30:00'

    IF (@StartTime<@WorkStart)
    BEGIN
        SET @StartTime = @WorkStart
    END
    IF (@FinishTime>@WorkFinish)
    BEGIN
        SET @FinishTime=@WorkFinish
    END

DECLARE @CurrentDate VARCHAR(9)
    SET @CurrentDate = CONVERT(VARCHAR(9),@StartDate, 112)
    DECLARE @LastDate VARCHAR(9)
    SET @LastDate = CONVERT(VARCHAR(9),@FinishDate, 112)

WHILE(@CurrentDate<=@LastDate)
BEGIN       

        IF (DATEPART(dw, @CurrentDate)!=1 AND DATEPART(dw, @CurrentDate)!=7)
        BEGIN
              IF (@CurrentDate!=@FirstDay) AND (@CurrentDate!=@LastDay)
              BEGIN
                   SET @Temp = (@Temp + (8*60))

              END

              ELSE IF (@CurrentDate=@FirstDay) AND (@CurrentDate!=@LastDay)
              BEGIN
                SET @Temp = @Temp + DATEDIFF(MINUTE, @StartTime, @WorkFinish)

              END

              ELSE IF (@CurrentDate!=@FirstDay) AND (@CurrentDate=@LastDay)
              BEGIN
                SET @Temp = @Temp + DATEDIFF(MINUTE, @WorkStart, @FinishTime)

              END

              ELSE IF (@CurrentDate=@FirstDay) AND (@CurrentDate=@LastDay)
              BEGIN
                SET @Temp = DATEDIFF(MINUTE, @StartTime, @FinishTime)

              END

             END

SET @CurrentDate = CONVERT(VARCHAR(9),DATEADD(day, 1, @CurrentDate),112)

END
        Return @TEMP

END

GO

USE MasterDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_ConvertToDateTime] (@data nvarchar(max), @path nvarchar(255), @timeZone bigint)
RETURNS nvarchar(25)
AS
BEGIN
    DECLARE @unix_number bigint;

    SET @unix_number = JSON_VALUE(@data,@path) + @timeZone;
    RETURN (Select format(dateadd(S,@unix_number,'1970-01-01'),'dd/MM/yyyy'))
END;

GO

USE MasterDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Comma_separated_2] (@number bigint)
RETURNS NVARCHAR(255)
AS
BEGIN
    RETURN (SELECT Format(@number, '##,##0'))
END;

GO

USE MasterDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Tinh_tong] (@data nvarchar(max), @path_1 nvarchar(255), @path_2 nvarchar(255))
RETURNS  bigint
AS
BEGIN
	DECLARE @sSQL nvarchar(500);
	DECLARE @ParmDefinition nvarchar(500);
	DECLARE @tong bigint;

	set @tong = (select sum(convert(bigint,A.B1))
			from (SELECT '$.'+TheValues.[key] as A1, TheValues.[value] B1
			FROM OPENJSON ( @data, @path_1 ) as root
			CROSS APPLY OPENJSON ( root.value) AS TheValues) as A
			where A.A1 = @path_2
			group by A.A1);	
			
	return @tong
END;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Year] AS 
							WITH tmp AS (
	SELECT YEAR(GETDATE()) [Year]
	UNION ALL
	SELECT [Year]-1 [Year] FROM tmp WHERE [Year]-1 > YEAR(GETDATE())-15
)
SELECT [Year] F_Id, [Year] FROM tmp
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Month] AS 
							WITH 
vMonth AS (
	SELECT 12 AS Month
	UNION ALL
	SELECT Month - 1 AS Month FROM vMonth
	WHERE Month > 1
)
SELECT vMonth.Month AS F_Id, vMonth.Month
FROM vMonth
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_MonthOfYear] AS 
							WITH 
vMonth AS (
	SELECT 12 AS Month
	UNION ALL
	SELECT Month - 1 AS Month FROM vMonth
	WHERE Month > 1
),
vYear AS (SELECT        YEAR(GETDATE()) AS Year
                               UNION ALL
                               SELECT        Year - 1 AS Year
                               FROM            vYear
                               WHERE        (Year - 1 > YEAR(GETDATE()) - 15))
    SELECT        CONCAT(vYear.Year,'-',vMonth.Month) AS F_Id, vYear.Year, vMonth.Month, CONCAT(vYear.Year,' - ',CASE WHEN vMonth.Month>=10 THEN '' ELSE '0' END, vMonth.Month) MonthOfYear
     FROM            vYear CROSS JOIN vMonth
							;

GO

USE MasterDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Category_Delete]
  @CategoryCode AS varchar(50),
	@IsTable AS bit
AS
BEGIN
	DECLARE @TableName NVARCHAR(512)
	IF(@IsTable = 1)
	BEGIN
		SET @TableName = @CategoryCode
		IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = @TableName))
		BEGIN
			DECLARE @suffix int
			SET @suffix = 0
			WHILE (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = CONCAT(@TableName , '_Delete_', @suffix)))
			BEGIN
				 SET @suffix = @suffix + 1;
			END;
			DECLARE @NewName NVARCHAR(512) = CONCAT(@TableName , '_Delete_' , @suffix)
			EXEC ('sp_rename '+ @TableName + ',' + @NewName)
		END
	END
	ELSE
	BEGIN
	
		SET @TableName = 'v' + @CategoryCode
		DECLARE @Databases TABLE 
		(
			Id int,
			Name nvarchar(256)
		)
		
		INSERT INTO @Databases VALUES 
		(1, 'MasterDB'),
		(2, 'StockDB'),
		(3, 'OrganizationDB'),
		(4, 'PurchaseOrderDB'),
		(5, 'AccountancyDB')
		
		DECLARE @DbName nvarchar(256)
		
		DECLARE dbCursor CURSOR FOR   
			SELECT Name FROM @Databases
			
		OPEN dbCursor  
		FETCH NEXT FROM dbCursor INTO @DbName
		WHILE @@FETCH_STATUS = 0  
		BEGIN  
			
			EXEC ('USE ' + @DbName  +' 
			IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ''dbo'' AND TABLE_NAME = '''+ @TableName +'''))
			BEGIN
				DROP VIEW '+ @TableName + ' 
			END')
			FETCH NEXT FROM dbCursor INTO @DbName
		END
		
		CLOSE dbCursor  
		DEALLOCATE dbCursor 
	END
	
END

GO

USE MasterDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Category_Rename]
  @OldCategoryCode AS varchar(50),
	@NewCategoryCode AS varchar(50),
	@IsTable AS bit
AS
BEGIN
	DECLARE @OldTableName NVARCHAR(512)
	DECLARE @NewTableName NVARCHAR(512)
	IF(@IsTable = 1)
	BEGIN
		SET @OldTableName = @OldCategoryCode
		SET @NewTableName = @NewCategoryCode
		IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = @OldTableName))
		BEGIN
			EXEC ('sp_rename '+ @OldTableName + ',' + @NewCategoryCode)
		END
		
	END
	ELSE
	BEGIN
		SET @OldTableName = 'v' + @OldCategoryCode
		SET @NewTableName = 'v' + @NewCategoryCode
		
		DECLARE @Databases TABLE 
		(
			Id int,
			Name nvarchar(256)
		)
		
		INSERT INTO @Databases VALUES 
		(1, 'MasterDB'),
		(2, 'StockDB'),
		(3, 'OrganizationDB'),
		(4, 'PurchaseOrderDB'),
		(5, 'AccountancyDB')
		
		DECLARE @DbName nvarchar(256)
		
		DECLARE dbCursor CURSOR FOR   
			SELECT Name FROM @Databases
			
		OPEN dbCursor  
		FETCH NEXT FROM dbCursor INTO @DbName
		WHILE @@FETCH_STATUS = 0  
		BEGIN  
			
			EXEC ('USE ' + @DbName  +' 
			IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ''dbo'' AND TABLE_NAME = '''+ @OldTableName +'''))
			BEGIN
				EXEC ('' sp_rename '+ @OldTableName + ',' + @NewCategoryCode + ''') 
			END')
			FETCH NEXT FROM dbCursor INTO @DbName
		END
		
		CLOSE dbCursor  
		DEALLOCATE dbCursor 
		
	END
END

GO

USE MasterDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Category_Table_Add]
  @CategoryCode AS varchar(50),
	@IsTreeView AS bit
AS
BEGIN
-- 		Create table
	DECLARE @TableName NVARCHAR(512) = @CategoryCode
	IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = @TableName))
	BEGIN
		DECLARE @SqlScript NVARCHAR(512)
		SET @SqlScript = 
		'CREATE TABLE ' + @TableName + ' (' +
		'F_Id INT IDENTITY (1,1) PRIMARY KEY,'
		
		IF (@IsTreeView = 1)
		BEGIN
			SET @SqlScript =  @SqlScript + 'ParentId int,'
		END;
		
		SET @SqlScript =  @SqlScript +
		'CreatedByUserId int NOT NULL,' +
		'UpdatedByUserId int NOT NULL,' +
		'CreatedDatetimeUtc datetime NOT NULL,' +
		'UpdatedDatetimeUtc datetime NOT NULL,' +
		'IsDeleted bit NOT NULL DEFAULT(0),' +
		'DeletedDatetimeUtc datetime' +
		')'
		
		EXEC (@SqlScript)
	END
END

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_Year] AS 
							WITH tmp AS (
	SELECT YEAR(GETDATE()) [Year]
	UNION ALL
	SELECT [Year]-1 [Year] FROM tmp WHERE [Year]-1 > YEAR(GETDATE())-15
)
SELECT [Year] F_Id, [Year] FROM tmp
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Split](@text nvarchar(max), @delimiter varchar(20) = ' ')

RETURNS @Strings TABLE

(   

  position int IDENTITY PRIMARY KEY,

  value nvarchar(max)  

)

AS

BEGIN

 

DECLARE @index int

SET @index = -1

 

WHILE (LEN(@text) > 0)

  BEGIN 

    SET @index = CHARINDEX(@delimiter , @text) 

    IF (@index = 0) AND (LEN(@text) > 0) 

      BEGIN  

        INSERT INTO @Strings VALUES (@text)

          BREAK 

      END 

    IF (@index > 1) 

      BEGIN  

        INSERT INTO @Strings VALUES (LEFT(@text, @index - 1))  

        SET @text = RIGHT(@text, (LEN(@text) - @index)) 

      END 

    ELSE

      SET @text = RIGHT(@text, (LEN(@text) - @index))

    END

  RETURN
END

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_Month] AS 
							WITH 
vMonth AS (
	SELECT 12 AS Month
	UNION ALL
	SELECT Month - 1 AS Month FROM vMonth
	WHERE Month > 1
)
SELECT vMonth.Month AS F_Id, vMonth.Month
FROM vMonth
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_MonthOfYear] AS 
							WITH 
vMonth AS (
	SELECT 12 AS Month
	UNION ALL
	SELECT Month - 1 AS Month FROM vMonth
	WHERE Month > 1
),
vYear AS (SELECT        YEAR(GETDATE()) AS Year
                               UNION ALL
                               SELECT        Year - 1 AS Year
                               FROM            vYear
                               WHERE        (Year - 1 > YEAR(GETDATE()) - 15))
    SELECT        CONCAT(vYear.Year,'-',vMonth.Month) AS F_Id, vYear.Year, vMonth.Month, CONCAT(vYear.Year,' - ',CASE WHEN vMonth.Month>=10 THEN '' ELSE '0' END, vMonth.Month) MonthOfYear
     FROM            vYear CROSS JOIN vMonth
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Hr_Area_Table_Add]
  @HrAreaTableName AS varchar(50)
AS
BEGIN
-- 		Create table
	DECLARE @TableName NVARCHAR(512) = @HrAreaTableName
	IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = @TableName))
	BEGIN
		DECLARE @SqlScript NVARCHAR(512)
		SET @SqlScript = 
		'CREATE TABLE ' + @TableName + ' (' +
		'F_Id bigint IDENTITY (1,1) PRIMARY KEY,' +
		'HrBill_F_Id bigint NOT NULL,' +
		'HrBillReference_F_Id bigint,'
		
		SET @SqlScript =  @SqlScript +
		'CreatedByUserId int NOT NULL,' +
		'UpdatedByUserId int NOT NULL,' +
		'CreatedDatetimeUtc datetime NOT NULL,' +
		'UpdatedDatetimeUtc datetime NOT NULL,' +
		'IsDeleted bit NOT NULL DEFAULT(0),' +
		'DeletedDatetimeUtc datetime,' +
		'SubsidiaryId int NOT NULL' +
		')'
		
		EXEC (@SqlScript)
	END
	ELSE
	BEGIN
		DECLARE @msg NVARCHAR(2048) = FORMATMESSAGE('Table %s already exists', @TableName);   
  
		THROW 60000, @msg, 1;      
	END
END

GO

USE OrganizationDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Hr_Area_Table_Rename]
  @OldHrAreaTableName AS varchar(50),
	@NewHrAreaTableName AS varchar(50)
AS
BEGIN
	DECLARE @OldTableName NVARCHAR(512)
	DECLARE @NewTableName NVARCHAR(512)

	SET @OldTableName = @OldHrAreaTableName
	SET @NewTableName = @NewHrAreaTableName

	DECLARE @msg NVARCHAR(2048)

	IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = @OldTableName))
	BEGIN
		SET @msg = FORMATMESSAGE('Table %s could not found', @OldTableName);   
  
		THROW 60000, @msg, 1;   
	END

	IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = @NewTableName))
	BEGIN
		SET @msg = FORMATMESSAGE('Table %s already exists', @NewTableName);   
  
		THROW 60000, @msg, 1;   
	END

	EXEC ('sp_rename '+ @OldTableName + ',' + @NewTableName)
END

GO

USE OrganizationDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Hr_Area_Table_Delete]
  @HrAreaTableName AS varchar(50)
AS
BEGIN
	DECLARE @TableName NVARCHAR(512)
	
	SET @TableName = @HrAreaTableName
	IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = @TableName))
	BEGIN
		DECLARE @suffix int
		SET @suffix = 0
		WHILE (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = CONCAT(@TableName , '_Delete_', @suffix)))
		BEGIN
				SET @suffix = @suffix + 1;
		END;
		DECLARE @NewName NVARCHAR(512) = CONCAT(@TableName , '_Delete_' , @suffix)
		EXEC ('sp_rename '+ @TableName + ',' + @NewName)
	END
	
END

GO

USE OrganizationDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_DropColumnConstraist]
	@TableName nvarchar(64),
	@ColumnName nvarchar(64),	
	@ResStatus int OUTPUT
AS
BEGIN	
	  IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = @ColumnName)
	   BEGIN
		DECLARE @sql NVARCHAR(MAX)
		WHILE 1=1
			BEGIN
				SELECT TOP 1 @sql = N'alter table '+@TableName+' drop constraint ['+dc.name+N']'
				FROM sys.default_constraints dc
				JOIN sys.columns c
				ON c.default_object_id = dc.object_id
				WHERE dc.parent_object_id = OBJECT_ID(@TableName) AND c.name = @ColumnName
				IF @@ROWCOUNT = 0
					BEGIN
						PRINT 'DELETED Constraint on column ' + @ColumnName
						BREAK
					END
			EXEC (@sql)
		END;
		
	   END
	ELSE
	   PRINT 'Column LOWER_LIMIT does not exist'

	SET @ResStatus = 1
END

GO

USE OrganizationDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_UpdateField]
	@IsAddNew bit,
	@TableName nvarchar(64),
	@FieldName nvarchar(64),
	@DataType nvarchar(128),
	@DataSize int,
	@DecimalPlace int,
	@DefaultValue nvarchar(128),
	@IsNullable bit,
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		DECLARE @IsSetDefaultValue BIT = 0;

		IF @IsAddNew = 1
		BEGIN
			SET @Sql = 'ALTER TABLE [' + @TableName + '] ADD [' + @FieldName + '] ' + @DataType;
		END
		ELSE
		BEGIN
			EXEC asp_DropColumnConstraist @TableName = @TableName, @ColumnName = @FieldName, @ResStatus = @ResStatus OUTPUT

			SET @Sql = 'ALTER TABLE [' + @TableName + '] ALTER COLUMN [' + @FieldName + '] ' + @DataType;
		END

		IF @DataSize>0 AND @DataType IN('decimal','money','numberic','nvarchar','varchar','char')
		BEGIN
			SET @Sql += ' (' + convert(nvarchar(50),@DataSize)
			IF @DecimalPlace>0 AND @DataType IN('decimal','money','numberic')
			BEGIN
				SET @Sql += ',' + convert(nvarchar(50),@DecimalPlace)
			END
			SET @Sql += ')'
		END
		
		IF @DataSize<0 AND @DataType IN('nvarchar','varchar')
				SET @Sql += '(max)'
		
		IF @IsNullable = 1
		BEGIN
			SET @Sql+=' NULL'

			IF LEN(@DefaultValue)>0
			BEGIN				
				SET @IsSetDefaultValue = 1
			END
		END
		ELSE
		BEGIN
			SET @Sql+=' NOT NULL';

			SET @IsSetDefaultValue = 1
		END

		
		PRINT @Sql
		EXEC (@Sql)	

		IF @IsSetDefaultValue = 1
		BEGIN
			IF @DataType IN ('int','bigint','decimal','money','numberic','bit','float','double','binary','bit','real','tinyInt','smallint','smallmoney')
			BEGIN				
				IF LEN(@DefaultValue)=0
				BEGIN				
					SET @DefaultValue = '1'
				END
			END

			IF @DataType IN ('datetime','date')
			BEGIN
				
				IF LEN(@DefaultValue)=0
				BEGIN				
					SET @DefaultValue = '''1900-01-01'''
				END
				ELSE
				BEGIN
					SET @DefaultValue = '''' + @DefaultValue + '''';
				END
			END

			IF @DataType IN ('datetime2')
			BEGIN
				IF LEN(@DefaultValue)=0
				BEGIN
					SET @DefaultValue = '''0001-01-01'''
				END
				ELSE
				BEGIN
					SET @DefaultValue = '''' + @DefaultValue + '''';
				END
			END

			IF @DataType IN ('nvarchar','varchar','text','char')
			BEGIN
				SET @DefaultValue = '''' + @DefaultValue + '''';
			END
		
			
			SET @Sql =  'ALTER TABLE [' + @TableName + '] ADD CONSTRAINT [DF_' + @TableName + '_' + @FieldName+'_DefaultValue] DEFAULT ' + @DefaultValue +' FOR [' + @FieldName+']';

			PRINT @Sql
			EXEC (@Sql)	
		END

	

		
		SET @ResStatus = 1
END

GO

USE OrganizationDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_RenameField]
	@TableName nvarchar(64),
	@OldFieldName nvarchar(64),
	@NewFieldName nvarchar(64),
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		SET @Sql = 'sp_rename '''+ @TableName + '.' + @OldFieldName + ''', '''+ @NewFieldName + ''', ''COLUMN'''

		PRINT @Sql
		EXEC (@Sql)	

		SET @ResStatus = 1
END

GO

USE OrganizationDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_DropField]	
	@TableName nvarchar(64),
	@FieldName nvarchar(64),	
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		EXEC asp_DropColumnConstraist @TableName = @TableName, @ColumnName = @FieldName, @ResStatus = @ResStatus OUTPUT

		SET @Sql = 'ALTER TABLE '+ @TableName +' DROP COLUMN ' + @FieldName
		
		EXEC (@Sql)	

		SET @ResStatus = 1
END

GO

USE OrganizationDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_DeleteField]
	@TableName nvarchar(64),
	@FieldName nvarchar(64),
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		DECLARE @suffix int
			SET @suffix = 0
			WHILE (EXISTS (SELECT * FROM sys.columns 
          WHERE Name = CONCAT(@FieldName, '_Delete_' , @suffix)
          AND Object_ID = Object_ID(@TableName)))
			BEGIN
				 SET @suffix = @suffix + 1;
			END;
			SET @Sql ='sp_rename '''+ @TableName + '.' + @FieldName + ''', ''' + CONCAT(@FieldName , '_Delete_' , @suffix) + ''', ''COLUMN'''
			
		EXEC (@Sql)	

		SET @ResStatus = 1
END

GO

USE PurchaseOrderDB
GO

CREATE OR ALTER FUNCTION [dbo].[afn_PurchaseOrderStatusName]
(
	@PurchaseOrderStatusId INT,
	@PoProcessStatusId INT,
	@IsChecked BIT,
	@IsApproved BIT,
	@PrimaryQuantity DECIMAL(18,5),
	@InvPrimaryQuantity DECIMAL(18,5),
	@DeliveryDate DATETIME2
)
RETURNS NVARCHAR(128)
AS
BEGIN
	DECLARE @NOW_UTC DATETIME2 = GETUTCDATE();
	-- Declare the return variable here
	RETURN LTRIM(CONCAT(
            CASE @PurchaseOrderStatusId
                WHEN 1 THEN N'[Nháp]'--Draff
                WHEN 2 THEN N'[Chờ duyệt]'--WaitToCensor
                WHEN 3 THEN
                    CASE WHEN @IsChecked=1 THEN N'[Đã kiểm tra]' ELSE N'[Kiểm tra từ chối]' END--Checked
                WHEN 4 THEN 
                    CASE WHEN @IsApproved=1 THEN N'[Đã duyệt]' ELSE N'[Từ chối duyệt]' END--Censored
                ELSE ''
            END
            ,
            CASE @PoProcessStatusId
                WHEN 0 THEN '' -- Normal
                WHEN 1 THEN N' - Đã gửi NCC' -- SentToProvider
                WHEN 2 THEN N' - NCC hoàn thành' -- Completed
                ELSE ''
            END
            ,
            CASE WHEN @PrimaryQuantity - @InvPrimaryQuantity > 0 THEN
                CASE WHEN @DeliveryDate < @NOW_UTC THEN N' - Chậm tiến độ'
                    ELSE N' - Nhận dở dang'
                END
                ELSE ''
            END
		))

END


GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_DropColumnConstraist]
	@TableName nvarchar(64),
	@ColumnName nvarchar(64),	
	@ResStatus int OUTPUT
AS
BEGIN	
	  IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = @ColumnName)
	   BEGIN
		DECLARE @sql NVARCHAR(MAX)
		WHILE 1=1
			BEGIN
				SELECT TOP 1 @sql = N'alter table '+@TableName+' drop constraint ['+dc.name+N']'
				FROM sys.default_constraints dc
				JOIN sys.columns c
				ON c.default_object_id = dc.object_id
				WHERE dc.parent_object_id = OBJECT_ID(@TableName) AND c.name = @ColumnName
				IF @@ROWCOUNT = 0
					BEGIN
						PRINT 'DELETED Constraint on column ' + @ColumnName
						BREAK
					END
			EXEC (@sql)
		END;
		
	   END
	ELSE
	   PRINT 'Column LOWER_LIMIT does not exist'

	SET @ResStatus = 1
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_DeleteField]
	@TableName nvarchar(64),
	@FieldName nvarchar(64),
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		DECLARE @suffix int
			SET @suffix = 0
			WHILE (EXISTS (SELECT * FROM sys.columns 
          WHERE Name = CONCAT(@FieldName, '_Delete_' , @suffix)
          AND Object_ID = Object_ID(@TableName)))
			BEGIN
				 SET @suffix = @suffix + 1;
			END;
			SET @Sql ='sp_rename '''+ @TableName + '.' + @FieldName + ''', ''' + CONCAT(@FieldName , '_Delete_' , @suffix) + ''', ''COLUMN'''
			
		EXEC (@Sql)	

		SET @ResStatus = 1
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_DropField]	
	@TableName nvarchar(64),
	@FieldName nvarchar(64),	
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		EXEC asp_DropColumnConstraist @TableName = @TableName, @ColumnName = @FieldName, @ResStatus = @ResStatus OUTPUT

		SET @Sql = 'ALTER TABLE '+ @TableName +' DROP COLUMN ' + @FieldName
		
		EXEC (@Sql)	

		SET @ResStatus = 1
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_RenameField]
	@TableName nvarchar(64),
	@OldFieldName nvarchar(64),
	@NewFieldName nvarchar(64),
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		SET @Sql = 'sp_rename '''+ @TableName + '.' + @OldFieldName + ''', '''+ @NewFieldName + ''', ''COLUMN'''

		PRINT @Sql
		EXEC (@Sql)	

		SET @ResStatus = 1
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_UpdateField]
	@IsAddNew bit,
	@TableName nvarchar(64),
	@FieldName nvarchar(64),
	@DataType nvarchar(128),
	@DataSize int,
	@DecimalPlace int,
	@DefaultValue nvarchar(128),
	@IsNullable bit,
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		DECLARE @IsSetDefaultValue BIT = 0;

		IF @IsAddNew = 1
		BEGIN
			SET @Sql = 'ALTER TABLE [' + @TableName + '] ADD [' + @FieldName + '] ' + @DataType;
		END
		ELSE
		BEGIN
			EXEC asp_DropColumnConstraist @TableName = @TableName, @ColumnName = @FieldName, @ResStatus = @ResStatus OUTPUT

			SET @Sql = 'ALTER TABLE [' + @TableName + '] ALTER COLUMN [' + @FieldName + '] ' + @DataType;
		END

		IF @DataSize>0 AND @DataType IN('decimal','money','numberic','nvarchar','varchar','char')
		BEGIN
			SET @Sql += ' (' + convert(nvarchar(50),@DataSize)
			IF @DecimalPlace>0 AND @DataType IN('decimal','money','numberic')
			BEGIN
				SET @Sql += ',' + convert(nvarchar(50),@DecimalPlace)
			END
			SET @Sql += ')'
		END
		
		IF @DataSize<0 AND @DataType IN('nvarchar','varchar')
				SET @Sql += '(max)'
			
		IF @IsNullable = 1
		BEGIN
			SET @Sql+=' NULL'

			IF LEN(@DefaultValue)>0
			BEGIN				
				SET @IsSetDefaultValue = 1
			END
		END
		ELSE
		BEGIN
			SET @Sql+=' NOT NULL';

			SET @IsSetDefaultValue = 1
		END

		
		PRINT @Sql
		EXEC (@Sql)	

		IF @IsSetDefaultValue = 1
		BEGIN
			IF @DataType IN ('int','bigint','decimal','money','numberic','bit','float','double','binary','bit','real','tinyInt','smallint','smallmoney')
			BEGIN				
				IF LEN(@DefaultValue)=0
				BEGIN				
					SET @DefaultValue = '1'
				END
			END

			IF @DataType IN ('datetime','date')
			BEGIN
				
				IF LEN(@DefaultValue)=0
				BEGIN				
					SET @DefaultValue = '''1900-01-01'''
				END
				ELSE
				BEGIN
					SET @DefaultValue = '''' + @DefaultValue + '''';
				END
			END

			IF @DataType IN ('datetime2')
			BEGIN
				IF LEN(@DefaultValue)=0
				BEGIN
					SET @DefaultValue = '''0001-01-01'''
				END
				ELSE
				BEGIN
					SET @DefaultValue = '''' + @DefaultValue + '''';
				END
			END

			IF @DataType IN ('nvarchar','varchar','text','char')
			BEGIN
				SET @DefaultValue = '''' + @DefaultValue + '''';
			END
		
			
			SET @Sql =  'ALTER TABLE [' + @TableName + '] ADD CONSTRAINT [DF_' + @TableName + '_' + @FieldName+'_DefaultValue] DEFAULT ' + @DefaultValue +' FOR [' + @FieldName+']';

			PRINT @Sql
			EXEC (@Sql)	
		END

	

		
		SET @ResStatus = 1
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_Year] AS 
							WITH tmp AS (
	SELECT YEAR(GETDATE()) [Year]
	UNION ALL
	SELECT [Year]-1 [Year] FROM tmp WHERE [Year]-1 > YEAR(GETDATE())-15
)
SELECT [Year] F_Id, [Year] FROM tmp
							;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_Split](@text nvarchar(max), @delimiter varchar(20) = ' ')

RETURNS @Strings TABLE

(   

  position int IDENTITY PRIMARY KEY,

  value nvarchar(max)  

)

AS

BEGIN

 

DECLARE @index int

SET @index = -1

 

WHILE (LEN(@text) > 0)

  BEGIN 

    SET @index = CHARINDEX(@delimiter , @text) 

    IF (@index = 0) AND (LEN(@text) > 0) 

      BEGIN  

        INSERT INTO @Strings VALUES (@text)

          BREAK 

      END 

    IF (@index > 1) 

      BEGIN  

        INSERT INTO @Strings VALUES (LEFT(@text, @index - 1))  

        SET @text = RIGHT(@text, (LEN(@text) - @index)) 

      END 

    ELSE

      SET @text = RIGHT(@text, (LEN(@text) - @index))

    END

  RETURN
END

GO

USE StockDB
GO
-- =============================================
-- Author:		tuannm
-- Create date: 2020-11-01
-- Description:	Update ufn_ConvertToDateTime
-- =============================================

CREATE OR ALTER FUNCTION [dbo].[ufn_ConvertToDateTime] (@Datetime BIGINT)
RETURNS DATETIME
AS
BEGIN
    DECLARE @LocalTimeOffset bigint
           ,@AdjustedLocalDatetime BIGINT;
    SET @LocalTimeOffset = DATEDIFF(second,GETDATE(),GETUTCDATE())
    SET @AdjustedLocalDatetime = @Datetime - @LocalTimeOffset
    RETURN (SELECT FORMAT(DATEADD(second,@AdjustedLocalDatetime, CAST('1970-01-01 00:00:00' AS datetime)),'dd/MM/yyyy'))
END;

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Cap_NSNN] AS SELECT  _Cap_NSNN.F_Id, _Cap_NSNN.UpdatedDatetimeUtc, _Cap_NSNN.Ma_cap, _Cap_NSNN.Ten_cap_QLNS FROM [MasterDB].[dbo]._Cap_NSNN WHERE _Cap_NSNN.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_CensorStatus] AS SELECT  _CensorStatus.F_Id, _CensorStatus.UpdatedDatetimeUtc, _CensorStatus.CensorStatusId, _CensorStatus.CensorStatusName, _CensorStatus.CssStyleJson FROM [MasterDB].[dbo]._CensorStatus WHERE _CensorStatus.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Category_Demo] AS SELECT * FROM [MasterDB].[dbo].Category

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_CheckStatus] AS SELECT  _CheckStatus.F_Id, _CheckStatus.UpdatedDatetimeUtc, _CheckStatus.CheckStatusId, _CheckStatus.CheckStatusName, _CheckStatus.CssStyleJson FROM [MasterDB].[dbo]._CheckStatus WHERE _CheckStatus.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_VAT_RATE] AS SELECT  _VAT_RATE.F_Id, _VAT_RATE.UpdatedDatetimeUtc, _VAT_RATE.title, _VAT_RATE.value, _VAT_RATE.easy_inv_check FROM [MasterDB].[dbo]._VAT_RATE WHERE _VAT_RATE.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Stock] AS 
							SELECT 
    StockId F_Id,
    StockName,
    SubsidiaryId
FROM [StockDB].[dbo].Stock 
WHERE IsDeleted=0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Customer] AS 
							SELECT
    CustomerId F_Id,
    CustomerCode,
    CustomerName,
    Email,
    PhoneNumber,
    TaxIdNo,
    CustomerStatusId,
    CustomerTypeId,
    Address,
    Website
FROM [OrganizationDB].[dbo].Customer
WHERE IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_ProductCate] AS 
							SELECT ProductCateId F_Id, ProductCateName
FROM [StockDB].[dbo].ProductCate
WHERE IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Subsidiary] AS 
							SELECT
    SubsidiaryId F_Id,
    SubsidiaryCode,
    SubsidiaryName,
    Fax,
    PhoneNumber,
    TaxIdNo,
    Email,
    Address,
    Description
FROM [OrganizationDB].[dbo].Subsidiary
WHERE IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_TK_nganhang_dt] AS 
							SELECT 
	ba.CustomerBankAccountId F_Id,
	c.PartnerId PartnerId,
	c.CustomerName Ten_khach,
	ba.AccountName Ten_TKNH,
	ba.AccountNumber So_TKNH,
	cur.CurrencyCode Loai_tien,
	ba.BankName Ngan_hang,
	ba.BankBranch Chi_nhanh_NH,
	ba.Province Tinh_TP,
	ba.SwiffCode Swift_code,
	ba.BankAddress NH_add
FROM [OrganizationDB].[dbo].CustomerBankAccount ba 
LEFT JOIN [OrganizationDB].[dbo].Customer c ON ba.CustomerId = c.CustomerId AND c.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo]._Currency cur ON ba.CurrencyId = cur.F_Id AND cur.IsDeleted = 0
WHERE ba.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_TestCategory] AS SELECT  _TestCategory.F_Id, _TestCategory.UpdatedDatetimeUtc, _TestCategory.Test1 FROM [MasterDB].[dbo]._TestCategory WHERE _TestCategory.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputType_Delete]
	@InputTypeId int,
	@ResStatus int OUTPUT
AS
BEGIN
	BEGIN TRANSACTION
		UPDATE top(1) dbo.InputType
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE InputTypeId = @InputTypeId AND IsDeleted = 0
		
		UPDATE dbo.InputArea
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE InputTypeId = @InputTypeId AND IsDeleted = 0
		
		UPDATE dbo.InputAreaField
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE InputTypeId = @InputTypeId AND IsDeleted = 0

		UPDATE dbo.InputBill
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE InputTypeId = @InputTypeId AND IsDeleted = 0

		UPDATE dbo.InputValueRow
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE InputTypeId = @InputTypeId AND IsDeleted = 0

		SET @ResStatus = 1
	COMMIT TRANSACTION
END

GO

USE AccountancyDB
GO

CREATE OR ALTER TRIGGER [dbo].[InputValueRow_AFTER_INSERT_UPDATE]
   ON [dbo].[InputValueRow]
   AFTER INSERT,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	UPDATE b
		SET b.BillCode = r.so_ct
	FROM dbo.InputBill b
		JOIN Inserted r ON b.F_Id = r.InputBill_F_Id
	WHERE r.IsDeleted = 0
END


GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_UpdateInputTableType]
AS
BEGIN
	
	IF (EXISTS (SELECT * FROM sys.table_types WHERE name = 'InputTableType'))
		DROP TYPE InputTableType
	
	DECLARE @sql nvarchar(max) = ''
	
	DECLARE @ViewOnlyFormTypeId INT = 6

	DECLARE @FieldName nvarchar(128)
	DECLARE @SqlType nvarchar(10);
	DECLARE @DataSize INT;
	DECLARE @DecimalPrecision INT;
	DECLARE @DecimalPlace INT;
	
	DECLARE fieldCursor CURSOR FOR   
    SELECT f.FieldName FROM InputField f
		WHERE f.FormTypeId <> @ViewOnlyFormTypeId AND f.IsDeleted = 0
  
    OPEN fieldCursor  
			FETCH NEXT FROM fieldCursor INTO @FieldName
  
    IF @@FETCH_STATUS <> 0   
        PRINT '         <<None>>'       
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
			
			SELECT @SqlType = DATA_TYPE, @DataSize = CHARACTER_MAXIMUM_LENGTH, @DecimalPrecision = NUMERIC_PRECISION, @DecimalPlace = NUMERIC_SCALE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'InputValueRow' AND COLUMN_NAME = @FieldName
			SET @sql += '
			' + @FieldName + ' ' + @SqlType
			
			IF (@SqlType = 'decimal')
				SET @sql += CONCAT('(',@DecimalPrecision, ',', @DecimalPlace ,'),') 
			ELSE
				IF @DataSize IS NOT NULL
					SET @sql += CONCAT('(',@DataSize ,'),') 
				ELSE
					SET @sql +=',' 
			FETCH NEXT FROM fieldCursor INTO @FieldName
			END  
			
			
  
    CLOSE fieldCursor  
    DEALLOCATE fieldCursor
		
		IF LEN(@sql)>0		
			SET @sql = SUBSTRING(@sql,0,LEN(@sql))	
		
		SET @sql = 'CREATE TYPE InputTableType AS TABLE
								(' + @sql + ')'
								
 		EXEC (@sql)
END;

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_ExpenseItem] AS SELECT  _ExpenseItem.F_Id, _ExpenseItem.UpdatedDatetimeUtc, _ExpenseItem.ParentId, _ExpenseItem.ExpenseItemName, _ExpenseItem.ExpenseItemCode, _ExpenseItem.Note FROM [MasterDB].[dbo]._ExpenseItem WHERE _ExpenseItem.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Employee] AS SELECT  _Employee.UserId F_Id FROM ( SELECT [OrganizationDB].[dbo].Employee.UserId UserId FROM [OrganizationDB].[dbo].Employee WHERE [OrganizationDB].[dbo].Employee.IsDeleted = 0) _Employee

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputType_Clear_FieldData]
    @InputTypeId INT,
    @FieldName NVARCHAR(128),
    @ResStatus INT OUTPUT
AS
BEGIN
    DECLARE @DATA_TYPE NVARCHAR(128) = N'';
    DECLARE @IS_NULLABLE VARCHAR(3);

    SELECT @IS_NULLABLE = [IS_NULLABLE],
           @DATA_TYPE = [DATA_TYPE]
      FROM [INFORMATION_SCHEMA].[COLUMNS]
     WHERE TABLE_NAME    = 'InputValueRow'
       AND [COLUMN_NAME] = @FieldName;

    IF @DATA_TYPE IS NULL
        RETURN;

    DECLARE @Sql NVARCHAR(MAX) = N'';
    IF @IS_NULLABLE = 'YES'
    BEGIN
        SET @Sql
            = N'UPDATE InputValueRow SET [' + @FieldName + N'] = NULL WHERE InputTypeId = '
              + CONVERT(NVARCHAR(50), @InputTypeId);

    END;
    ELSE
    BEGIN
        IF @DATA_TYPE IN ( 'int', 'bigint', 'decimal', 'money', 'numberic', 'bit', 'float', 'double', 'binary', 'bit',
                           'real', 'tinyInt', 'smallint', 'smallmoney' )
        BEGIN
            SET @Sql
                = N'UPDATE InputValueRow SET [' + @FieldName + N'] = 0 WHERE InputTypeId = '
                  + CONVERT(NVARCHAR(50), @InputTypeId);
        END;

        IF @DATA_TYPE IN ( 'datetime', 'date' )
        BEGIN
            SET @Sql
                = N'UPDATE InputValueRow SET [' + @FieldName + N'] = ''1900-01-01'' WHERE InputTypeId = '
                  + CONVERT(NVARCHAR(50), @InputTypeId);
        END;

        IF @DATA_TYPE IN ( 'datetime2' )
        BEGIN
            SET @Sql
                = N'UPDATE InputValueRow SET [' + @FieldName + N'] = ''0001-01-01'' WHERE InputTypeId = '
                  + CONVERT(NVARCHAR(50), @InputTypeId);
        END;


        IF @DATA_TYPE IN ( 'nvarchar', 'varchar', 'text', 'char' )
        BEGIN
            SET @Sql
                = N'UPDATE InputValueRow SET [' + @FieldName + N'] = '' WHERE InputTypeId = '
                  + CONVERT(NVARCHAR(50), @InputTypeId);
        END;
    END;

    --DECLARE @WAITING BIGINT = 0;
    DECLARE @APPROVE BIGINT = 1;
    --DECLARE @REJECT BIGINT = 2;



    IF @FieldName = 'CheckStatusId'
   AND EXISTS (   SELECT      0
                    FROM      dbo.InputAreaField af
                   INNER JOIN dbo.InputField f
                      ON af.InputFieldId = f.InputFieldId
                     AND f.IsDeleted     = 0
                   WHERE      af.InputTypeId = @InputTypeId
                     AND      af.IsDeleted        = 0
                     AND      f.FieldName         = 'CheckStatusId')
    BEGIN
        UPDATE dbo.InputValueRow
           SET CheckStatusId = @APPROVE
         WHERE 1 = 1;
        SET @Sql = NULL;
    END;

    IF @FieldName = 'CensorStatusId'
   AND EXISTS (   SELECT      0
                    FROM      dbo.InputAreaField af
                   INNER JOIN dbo.InputField f
                      ON af.InputFieldId = f.InputFieldId
                     AND f.IsDeleted     = 0
                   WHERE      af.InputTypeId = @InputTypeId
                     AND      af.IsDeleted        = 0
                     AND      f.FieldName         = 'CensorStatusId')
    BEGIN
        UPDATE dbo.InputValueRow
           SET CensorStatusId = @APPROVE
         WHERE 1 = 1;
        SET @Sql = NULL;
    END;

    --SELECT @Sql as SQL1
    IF (LEN(@Sql) > 0)
    BEGIN
        EXEC (@Sql);
    END;

    SET @ResStatus = 1;
END;

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputArea_Delete]
	@InputTypeId int,
	@InputAreaId int,	
	@ResStatus int OUTPUT
AS
BEGIN
	BEGIN TRANSACTION
		
		DECLARE @FieldName nvarchar(64);		

		DECLARE fieldCursor CURSOR FOR   
		SELECT FieldName
		FROM InputAreaField AS af
			JOIN InputField AS f ON af.InputFieldId = f.InputFieldId
		WHERE af.InputTypeId = @InputTypeId AND af.InputAreaId = @InputAreaId		  
		OPEN fieldCursor  
		
		FETCH NEXT FROM fieldCursor   
		INTO @FieldName
  
		WHILE @@FETCH_STATUS = 0  
		BEGIN  

			EXEC asp_InputType_Clear_FieldData @InputTypeId = @InputTypeId,
											@FieldName = @FieldName,
											@ResStatus = @ResStatus OUTPUT 			

			FETCH NEXT FROM fieldCursor   
			INTO @FieldName
		END   
		CLOSE fieldCursor;  
		DEALLOCATE fieldCursor;  
		

		UPDATE dbo.InputAreaField
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE InputTypeId = @InputTypeId
			AND InputAreaId = @InputAreaId
		
		SET @ResStatus = 1
	COMMIT TRANSACTION
END

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_ProductUnitConversion] AS 
							SELECT 
    puc.ProductUnitConversionId F_Id,
    puc.ProductUnitConversionName,
    puc.FactorExpression,
    puc.ConversionDescription,
    puc.IsDefault,
    puc.IsFreeStyle,
    puc.ProductId,
    puc.DecimalPlace,
    p.ProductName ProductId_ProductName   
FROM [StockDB].[dbo].ProductUnitConversion puc
JOIN [StockDB].[dbo].Product p ON puc.ProductId = p.ProductId

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Unit] AS 
							SELECT UnitId F_Id, UnitName, UnitStatusId, DecimalPlace
FROM [MasterDB].[dbo].Unit WHERE IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Department] AS 
							WITH tmp
AS (SELECT DepartmentId F_Id,
           DepartmentName,
           DepartmentCode,
           [Description],
           IsActived,
           WorkingHoursPerDay,
           IsProduction,
           SubsidiaryId,
           ParentId,
           IsFactory,
		   CONVERT(NVARCHAR(max),'') TitlePrefix,
		   CONVERT(NVARCHAR(max),CONCAT(DepartmentCode, ' - ', DepartmentName)) TreeTitle,
		   CONVERT(NVARCHAR(max), CONCAT('/',DepartmentCode,'/')) PathCodes,
		   CONVERT(NVARCHAR(max), CONCAT('/',DepartmentName,'/')) PathNames,
		   1 [Level],
		   DepartmentId ParentId_Level_1,
		   NULL ParentId_Level_2,
		   NULL ParentId_Level_3,
		   NULL ParentId_Level_4,
		   NULL ParentId_Level_5,
		   NULL ParentId_Level_6,
		   NULL ParentId_Level_7,
		   NULL ParentId_Level_8,
		   NULL ParentId_Level_9,
		   NULL ParentId_Level_10
    FROM [OrganizationDB].[dbo].Department
    WHERE IsDeleted = 0
          AND ParentId IS NULL
    UNION ALL
    SELECT d.DepartmentId F_Id,
           d.DepartmentName,
           d.DepartmentCode,
           d.[Description],
           d.IsActived,
           d.WorkingHoursPerDay,
           d.IsProduction,
           d.SubsidiaryId,
           d.ParentId,
           d.IsFactory,
		   CONVERT(NVARCHAR(max),CONCAT('----', tmp.TitlePrefix)) TitlePrefix,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.TitlePrefix,' ', d.DepartmentCode, ' - ', d.DepartmentName)) TreeTitle,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.PathCodes, d.DepartmentCode,'/')) PathCodes,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.PathNames, d.DepartmentName,'/')) PathNames,
		   tmp.[Level] + 1 [Level],
		   tmp.ParentId_Level_1,
		   CASE WHEN tmp.[Level] + 1 =2 THEN d.DepartmentId ELSE tmp.ParentId_Level_2 END ParentId_Level_2,
		   CASE WHEN tmp.[Level] + 1 =3 THEN d.DepartmentId ELSE tmp.ParentId_Level_3 END ParentId_Level_3,
		   CASE WHEN tmp.[Level] + 1 =4 THEN d.DepartmentId ELSE tmp.ParentId_Level_4 END ParentId_Level_4,
		   CASE WHEN tmp.[Level] + 1 =5 THEN d.DepartmentId ELSE tmp.ParentId_Level_5 END ParentId_Level_5,
		   CASE WHEN tmp.[Level] + 1 =6 THEN d.DepartmentId ELSE tmp.ParentId_Level_6 END ParentId_Level_6,
		   CASE WHEN tmp.[Level] + 1 =7 THEN d.DepartmentId ELSE tmp.ParentId_Level_7 END ParentId_Level_7,
		   CASE WHEN tmp.[Level] + 1 =8 THEN d.DepartmentId ELSE tmp.ParentId_Level_8 END ParentId_Level_8,
		   CASE WHEN tmp.[Level] + 1 =9 THEN d.DepartmentId ELSE tmp.ParentId_Level_9 END ParentId_Level_9,
		   CASE WHEN tmp.[Level] + 1 =10 THEN d.DepartmentId ELSE tmp.ParentId_Level_10 END ParentId_Level_10
    FROM [OrganizationDB].[dbo].Department d
        JOIN tmp
            ON d.ParentId = tmp.F_Id
    WHERE d.IsDeleted = 0)
SELECT *
FROM tmp
							;

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Partner] AS 
							SELECT        
	c.PartnerId F_Id,
	c.CustomerId,
	c.CustomerCode PartnerCode,
	c.CustomerName PartnerName, 
	c.Email, c.PhoneNumber, 
	c.TaxIdNo,
	c.Website,
	c.CustomerStatusId, 
	c.CustomerTypeId, 
	c.Address, 
	c.LegalRepresentative,
	c.DebtDays, 
	c.DebtLimitation, 
	c.LoanDays, 
	c.LoanLimitation,
	c.DebtManagerUserId,
	c.LogoFileId,
	--c.InformationContact,
	c.PayConditionsId,
	c.DeliveryConditionsId,
	pc.PayConditionName,
	dc.ConditionName,
	(
	SELECT TOP 1
		cc.FullName
	FROM [OrganizationDB].[dbo].CustomerContact cc
	WHERE cc.CustomerId = c.CustomerId and cc.IsDeleted = 0
	) AS FirstContactName
FROM [OrganizationDB].[dbo].Customer c
LEFT JOIN [MasterDB].[dbo]._DeliveryConditions dc ON c.DeliveryConditionsId = dc.F_Id
LEFT JOIN [MasterDB].[dbo]._PayConditions pc ON c.PayConditionsId = pc.F_Id
WHERE c.CustomerStatusId = 1 AND c.IsDeleted = 0
UNION ALL
SELECT 
	e.PartnerId F_Id,
	NULL CustomerId,
	e.EmployeeCode PartnerCode,
	e.FullName PartnerName,
	e.Email,
	e.Phone PhoneNumber,
	NULL TaxIdNo,
	NULL Website,
	1 CustomerStatusId, 
	2 CustomerTypeId,
	e.Address,
	NULL AS DebtDays,
	NULL AS DebtLimitation,
	NULL LoanDays,
	NULL LoanLimitation,
	NULL DebtManagerUserId,
	NULL LogoFileId,
	--NULL AS InformationContact,
	NULL AS PayConditionsId,
	NULL AS DeliveryConditionsId,
	NULL PayConditionName,
	NULL ConditionName,
	NULL FirstContactName,
	null LegalRepresentative
FROM [OrganizationDB].[dbo].Employee e
WHERE e.IsDeleted = 0
							;

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Product] AS 
							SELECT 
	p.ProductId F_Id,
	p.ProductCode,
	p.ProductName,
    p.MainImageFileId,
	p.UnitId,
	u.UnitName UnitId_UnitName,
	puc.Decimalplace UnitId_Decimalplace,
	p.EstimatePrice,
	pei.Specification,
	p.ProductNameEng,
	p.NetWeight,
	p.GrossWeight,
	p.Measurement,
	p.PackingHeight,
	p.PackingLong,
	p.PackingWidth,
	p.SubsidiaryId

FROM [StockDB].[dbo].Product p 
LEFT JOIN [StockDB].[dbo].ProductUnitConversion puc ON p.ProductId = puc.ProductId AND puc.IsDefault = 1 
LEFT JOIN [StockDB].[dbo].ProductExtraInfo pei ON p.ProductId = pei.ProductId AND pei.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].Unit u ON p.UnitId = u.UnitId AND u.IsDeleted = 0

WHERE p.IsDeleted = 0
							;

GO

USE AccountancyDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_sumVndByTk]
(
	@SubId int,
	@tk_no nvarchar(max),
	@tk_co nvarchar(max),	
	@FromDate datetime2,
	@ToDate datetime2,
	@Thue_suat_VAT INT = NULL,
	@IsNotVat BIT = NULL,
	@Exist_Tk_No NVARCHAR(128) = NULL,
	@exp_tk_no nvarchar(max)='',
	@exp_tk_co nvarchar(max)='',	
	@Result decimal(18,5) OUTPUT
) WITH RECOMPILE
AS
BEGIN
		
	DECLARE @WhereTkNo nvarchar(max) = ''
	DECLARE @WhereTkCo nvarchar(max) = ''

	DECLARE @WhereExpTkNo nvarchar(max) = ''
	DECLARE @WhereExpTkCo nvarchar(max) = ''

	DECLARE @Sql nvarchar(max) = ''

	IF LEN(@tk_no)>0
	BEGIN
		IF @tk_no = '-'
		BEGIN
			SELECT @WhereTkNo += ' OR (tk_no IS NOT NULL AND tk_no <> '''')';
		END
		ELSE
		BEGIN
			SELECT @WhereTkNo += ' OR tk_no LIKE ''' + LTRIM(RTRIM([Value])) + '%''' FROM dbo.ufn_Split(@tk_no,',')
		END
	END

	IF LEN(@tk_co)>0
	BEGIN
		IF @tk_co = '-'
		BEGIN
			SELECT @WhereTkCo += ' OR (tk_co IS NOT NULL AND tk_co <> '''')';
		END
		ELSE
		BEGIN
			SELECT @WhereTkCo += ' OR tk_co LIKE ''' + LTRIM(RTRIM([Value])) + '%''' FROM dbo.ufn_Split(@tk_co,',')
		END
	END


	IF LEN(@exp_tk_no)>0
	BEGIN		
		SELECT @WhereExpTkNo += ' AND tk_no NOT LIKE ''' + LTRIM(RTRIM([Value])) + '%''' FROM dbo.ufn_Split(@exp_tk_no,',')		
	END

	IF LEN(@exp_tk_co)>0
	BEGIN
		SELECT @WhereExpTkCo += ' AND tk_co NOT LIKE ''' + LTRIM(RTRIM([Value])) + '%''' FROM dbo.ufn_Split(@exp_tk_co,',')	
	END

	SET @Sql = '
	SELECT @Result = SUM(Vnd) 
	FROM dbo._rc t WITH(NOLOCK)
	WHERE t.SubsidiaryId = @SubId AND [Ngay_ct] BETWEEN @FromDate AND @ToDate	
	';

	IF (LEN(@WhereTkNo)>0)
	BEGIN		
		SET @Sql += ' AND (1=0 ' + @WhereTkNo + ')'
	END

	IF (LEN(@WhereTkCo)>0)
	BEGIN		
		SET @Sql += ' AND (1=0 ' + @WhereTkCo + ')'
	END

	 SET @Sql += @WhereExpTkNo + @WhereExpTkCo

	IF (@Thue_suat_VAT IS NOT NULL)
	BEGIN
		IF (@Thue_suat_VAT = 0)
		BEGIN
			SET @Sql += ' AND (Thue_suat_VAT IS NULL OR Thue_suat_VAT = 0)'
		END
		ELSE
		BEGIN
			SET @Sql += CONCAT(' AND Thue_suat_VAT = ', @Thue_suat_VAT)
		END
	END

	IF (@IsNotVat IS NOT NULL)
	BEGIN
		SET @Sql += CONCAT(' AND Not_VAT = ', @IsNotVat)
	END
	
	IF @Exist_Tk_No IS NOT NULL
	BEGIN
		SET @Sql += CONCAT(' AND EXISTS(SELECT 0 FROM dbo._rc c WHERE t.InputBill_F_Id = c.InputBill_F_Id AND c.tk_no LIKE ''', @Exist_Tk_No,'%'') ')
	END

	SET @Sql += ' OPTION(RECOMPILE)'
	PRINT @Sql
	EXEC sp_executesql @Sql, 
	N'	@SubId int,
		@Result DECIMAL(18,5) OUT,
		@FromDate DATETIME2,
		@ToDate DATETIME2
	'
	, @SubId = @SubId
	, @Result = @Result OUT
	, @FromDate = @FromDate
	, @ToDate = @ToDate;

END


GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Product_Search] AS 
								SELECT 
	p.ProductId F_Id,
	p.ProductCode,
	p.ProductName,
    p.MainImageFileId,
	p.UnitId,
	u.UnitName UnitId_UnitName,
	puc.Decimalplace UnitId_Decimalplace,
	p.ProductCateId,
	pc.ProductCateName ProductCateId_ProductCateName,
	p.EstimatePrice,
	pei.Specification,
	p.ProductNameEng,
	p.NetWeight,
	p.GrossWeight,
	p.Measurement,
	p.PackingHeight,
	p.PackingLong,
	p.PackingWidth,
	p.SubsidiaryId,
	sl.sl_ton

FROM [StockDB].[dbo].Product p 
LEFT JOIN [StockDB].[dbo].ProductUnitConversion puc ON p.ProductId = puc.ProductId AND puc.IsDefault = 1 
LEFT JOIN [StockDB].[dbo].ProductExtraInfo pei ON p.ProductId = pei.ProductId AND pei.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].Unit u ON p.UnitId = u.UnitId AND u.IsDeleted = 0
LEFT JOIN [StockDB].[dbo].ProductCate pc ON p.ProductCateId = pc.ProductCateId AND pc.IsDeleted = 0
LEFT JOIN (
	SELECT sp.ProductId, SUM(sp.PrimaryQuantityRemaining) sl_ton
	FROM
	[StockDB].[dbo].StockProduct sp
	WHERE sp.IsDeleted = 0
	GROUP BY sp.ProductId
) sl ON p.ProductId = sl.ProductId

WHERE p.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[RefObjectApprovalStep]
AS
SELECT        ObjectApprovalStepId, ObjectTypeId, ObjectId, ObjectApprovalStepTypeId, IsEnable, ObjectFieldEnable, UpdatedByUserId, UpdatedDatetimeUtc, 
                         SubsidiaryId
FROM            OrganizationDB.dbo.ObjectApprovalStep
WHERE        (ObjectTypeId = 34)


GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_User] AS 
							-- SELECT
--     e.UserId F_Id,
--     e.UserId UserId,
--     e.EmployeeCode,
--     e.FullName,
--     e.Email,
--     e.Phone
-- FROM [OrganizationDB].[dbo].Employee e
-- WHERE e.IsDeleted = 0

SELECT
    e.UserId F_Id,
    e.UserId UserId,
    e.EmployeeCode,
    e.FullName,
    e.Email,
    e.Phone, 
    CONCAT(e.EmployeeCode,' - ', e.FullName) DisplayName,
    STRING_AGG(d.DepartmentName, ', ') WITHIN GROUP (ORDER BY d.DepartmentId) AS Department
FROM [OrganizationDB].[dbo].Employee e
LEFT JOIN [OrganizationDB].[dbo].EmployeeDepartmentMapping ed ON e.UserId = ed.UserId AND ed.IsDeleted = 0 AND e.IsDeleted = 0 AND e.SubsidiaryId = ed.SubsidiaryId
LEFT JOIN [OrganizationDB].[dbo].Department d ON ed.DepartmentId = d.DepartmentId AND d.IsDeleted = 0 AND e.SubsidiaryId = d.SubsidiaryId
WHERE e.IsDeleted = 0
GROUP BY e.UserId, e.EmployeeCode, e.FullName, e.Email, e.Phone
							;

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_User_Search] AS 
								SELECT
    e.UserId F_Id,
    e.UserId UserId,
    e.EmployeeCode,
    e.FullName,
    e.Email,
    e.Phone, 
    CONCAT(e.EmployeeCode,' - ', e.FullName) DisplayName,
    STRING_AGG(d.DepartmentName, ', ') WITHIN GROUP (ORDER BY d.DepartmentId) AS Department
FROM [OrganizationDB].[dbo].Employee e
LEFT JOIN [OrganizationDB].[dbo].EmployeeDepartmentMapping ed ON e.UserId = ed.UserId AND ed.IsDeleted = 0 AND e.IsDeleted = 0 AND e.SubsidiaryId = ed.SubsidiaryId
LEFT JOIN [OrganizationDB].[dbo].Department d ON ed.DepartmentId = d.DepartmentId AND d.IsDeleted = 0 AND e.SubsidiaryId = d.SubsidiaryId
WHERE e.IsDeleted = 0
GROUP BY e.UserId, e.EmployeeCode, e.FullName, e.Email, e.Phone

GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_NumberToWords]
(
    @Number AS BIGINT
) RETURNS VARCHAR(MAX)
AS
BEGIN
    DECLARE @Below20 TABLE (ID INT IDENTITY(0,1), Word VARCHAR(32))
    DECLARE @Below100 TABLE (ID INT IDENTITY(2,1), Word VARCHAR(32))
    DECLARE @BelowHundred AS VARCHAR(126) 
    
    INSERT @Below20 (Word) VALUES ('không')
    INSERT @Below20 (Word) VALUES ('một')
    INSERT @Below20 (Word) VALUES ( 'hai' )
    INSERT @Below20 (Word) VALUES ( 'ba')
    INSERT @Below20 (Word) VALUES ( 'bốn' )
    INSERT @Below20 (Word) VALUES ( 'năm' )
    INSERT @Below20 (Word) VALUES ( 'sáu' )
    INSERT @Below20 (Word) VALUES ( 'bảy' )
    INSERT @Below20 (Word) VALUES ( 'tám')
    INSERT @Below20 (Word) VALUES ( 'chín')
    INSERT @Below20 (Word) VALUES ( 'mười')
    INSERT @Below20 (Word) VALUES ( 'mười một' )
    INSERT @Below20 (Word) VALUES ( 'mười hai' )
    INSERT @Below20 (Word) VALUES ( 'mười ba' )
    INSERT @Below20 (Word) VALUES ( 'mười bốn')
    INSERT @Below20 (Word) VALUES ( 'mười năm' )
    INSERT @Below20 (Word) VALUES ( 'mười sáu' )
    INSERT @Below20 (Word) VALUES ( 'mười bảy')
    INSERT @Below20 (Word) VALUES ( 'mười tám' )
    INSERT @Below20 (Word) VALUES ( 'mười chín' )
 
    INSERT @Below100 VALUES ('hai mươi')
    INSERT @Below100 VALUES ('ba mươi')
    INSERT @Below100 VALUES ('bốn mươi')
    INSERT @Below100 VALUES ('năm mươi')
    INSERT @Below100 VALUES ('sáu mươi')
    INSERT @Below100 VALUES ('bảy mươi')
    INSERT @Below100 VALUES ('tám mươi')
    INSERT @Below100 VALUES ('chín mươi')
 
    IF @Number > 99
    BEGIN
        SELECT @belowHundred = dbo.fnNumberToWords( @Number % 100)
    END
 
    DECLARE @NumberInWords VARCHAR(MAX)
    SET @NumberInWords  = 
    (
      SELECT
        CASE 
            WHEN @Number = 0 THEN  ''
 
            WHEN @Number BETWEEN 1 AND 19 
                THEN (SELECT Word FROM @Below20 WHERE ID=@Number)
 
            WHEN @Number BETWEEN 20 AND 99
                THEN (SELECT Word FROM @Below100 WHERE ID=@Number/10)+ '-' + dbo.fnNumberToWords( @Number % 10) 
 
            WHEN @Number BETWEEN 100 AND 999 
                THEN (dbo.fnNumberToWords( @Number / 100)) + ' HUNDRED '+ 
                        CASE
                            WHEN @belowHundred <> '' 
                                THEN 'AND ' + @belowHundred else @belowHundred
                        END
 
            WHEN @Number BETWEEN 1000 AND 999999 
                THEN (dbo.fnNumberToWords( @Number / 1000))+ ' nghìn '+ dbo.fnNumberToWords( @Number % 1000)  
 
            WHEN @Number BETWEEN 1000000 AND 999999999 
                THEN (dbo.fnNumberToWords( @Number / 1000000)) + ' triệu '+ dbo.fnNumberToWords( @Number % 1000000) 
 
            WHEN @Number BETWEEN 1000000000 AND 999999999999 
                THEN (dbo.fnNumberToWords( @Number / 1000000000))+' tỷ '+ dbo.fnNumberToWords( @Number % 1000000000) 
            
            ELSE ' INVALID INPUT'
        END
    )
 
    SELECT @NumberInWords = RTRIM(@NumberInWords)
 
    SELECT @NumberInWords = RTRIM(LEFT(@NumberInWords,LEN(@NumberInWords)-1)) WHERE RIGHT(@NumberInWords,1)='-'
 
    RETURN (@NumberInWords)
 
END

GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_NumberToWords_2]
(
    @Number AS BIGINT
) RETURNS VARCHAR(MAX)
AS
BEGIN
    DECLARE @Below20 TABLE (ID INT IDENTITY(0,1), Word VARCHAR(32))
    DECLARE @Below100 TABLE (ID INT IDENTITY(2,1), Word VARCHAR(32))
    DECLARE @BelowHundred AS VARCHAR(126) 
    
    INSERT @Below20 (Word) VALUES ('không')
    INSERT @Below20 (Word) VALUES ('một')
    INSERT @Below20 (Word) VALUES ( 'hai' )
    INSERT @Below20 (Word) VALUES ( 'ba')
    INSERT @Below20 (Word) VALUES ( 'bốn' )
    INSERT @Below20 (Word) VALUES ( 'năm' )
    INSERT @Below20 (Word) VALUES ( 'sáu' )
    INSERT @Below20 (Word) VALUES ( 'bảy' )
    INSERT @Below20 (Word) VALUES ( 'tám')
    INSERT @Below20 (Word) VALUES ( 'chín')
    INSERT @Below20 (Word) VALUES ( 'mười')
    INSERT @Below20 (Word) VALUES ( 'mười một' )
    INSERT @Below20 (Word) VALUES ( 'mười hai' )
    INSERT @Below20 (Word) VALUES ( 'mười ba' )
    INSERT @Below20 (Word) VALUES ( 'mười bốn')
    INSERT @Below20 (Word) VALUES ( 'mười năm' )
    INSERT @Below20 (Word) VALUES ( 'mười sáu' )
    INSERT @Below20 (Word) VALUES ( 'mười bảy')
    INSERT @Below20 (Word) VALUES ( 'mười tám' )
    INSERT @Below20 (Word) VALUES ( 'mười chín' )
 
    INSERT @Below100 VALUES ('hai mươi')
    INSERT @Below100 VALUES ('ba mươi')
    INSERT @Below100 VALUES ('bốn mươi')
    INSERT @Below100 VALUES ('năm mươi')
    INSERT @Below100 VALUES ('sáu mươi')
    INSERT @Below100 VALUES ('bảy mươi')
    INSERT @Below100 VALUES ('tám mươi')
    INSERT @Below100 VALUES ('chín mươi')
 
    IF @Number > 99
    BEGIN
        SELECT @belowHundred = dbo.ufn_NumberToWords_2( @Number % 100)
    END
 
    DECLARE @NumberInWords VARCHAR(MAX)
    SET @NumberInWords  = 
    (
      SELECT
        CASE 
            WHEN @Number = 0 THEN  ''
 
            WHEN @Number BETWEEN 1 AND 19 
                THEN (SELECT Word FROM @Below20 WHERE ID=@Number)
 
            WHEN @Number BETWEEN 20 AND 99
                THEN (SELECT Word FROM @Below100 WHERE ID=@Number/10)+ '-' + dbo.ufn_NumberToWords_2( @Number % 10) 
 
            WHEN @Number BETWEEN 100 AND 999 
                THEN (dbo.ufn_NumberToWords_2( @Number / 100)) + ' HUNDRED '+ 
                        CASE
                            WHEN @belowHundred <> '' 
                                THEN 'AND ' + @belowHundred else @belowHundred
                        END
 
            WHEN @Number BETWEEN 1000 AND 999999 
                THEN (dbo.ufn_NumberToWords_2( @Number / 1000))+ ' nghìn '+ dbo.ufn_NumberToWords_2( @Number % 1000)  
 
            WHEN @Number BETWEEN 1000000 AND 999999999 
                THEN (dbo.ufn_NumberToWords_2( @Number / 1000000)) + ' triệu '+ dbo.ufn_NumberToWords_2( @Number % 1000000) 
 
            WHEN @Number BETWEEN 1000000000 AND 999999999999 
                THEN (dbo.ufn_NumberToWords_2( @Number / 1000000000))+' tỷ '+ dbo.ufn_NumberToWords_2( @Number % 1000000000) 
            
            ELSE ' INVALID INPUT'
        END
    )
 
    SELECT @NumberInWords = RTRIM(@NumberInWords)
 
    SELECT @NumberInWords = RTRIM(LEFT(@NumberInWords,LEN(@NumberInWords)-1)) WHERE RIGHT(@NumberInWords,1)='-'
 
    RETURN (@NumberInWords)
 
END

GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[fnNumberToWords_VN]
(
    @Number AS BIGINT,
    @Exception AS INT	-- 0: @Below20, 1: @Below20_VN
) RETURNS NVARCHAR(MAX)

AS

BEGIN

    DECLARE @Below20 TABLE (ID INT IDENTITY(0,1), Word NVARCHAR(32))

    DECLARE @Below100 TABLE (ID INT IDENTITY(2,1), Word NVARCHAR(32))
    
    DECLARE @Below20_VN TABLE (ID INT IDENTITY(0,1), Word NVARCHAR(32))

    DECLARE @BelowHundred AS NVARCHAR(MAX) 

    INSERT @Below20 (Word) VALUES (N'không')
    INSERT @Below20 (Word) VALUES (N'một')
    INSERT @Below20 (Word) VALUES (N'hai')
    INSERT @Below20 (Word) VALUES (N'ba')
    INSERT @Below20 (Word) VALUES (N'bốn')
    INSERT @Below20 (Word) VALUES (N'năm')
    INSERT @Below20 (Word) VALUES (N'sáu')
    INSERT @Below20 (Word) VALUES (N'bảy')
    INSERT @Below20 (Word) VALUES (N'tám')
    INSERT @Below20 (Word) VALUES (N'chín')
    INSERT @Below20 (Word) VALUES (N'mười')
    INSERT @Below20 (Word) VALUES (N'mười một')
    INSERT @Below20 (Word) VALUES (N'mười hai')
    INSERT @Below20 (Word) VALUES (N'mười ba')
    INSERT @Below20 (Word) VALUES (N'mười bốn')
    INSERT @Below20 (Word) VALUES (N'mười lăm')
    INSERT @Below20 (Word) VALUES (N'mười sáu')
    INSERT @Below20 (Word) VALUES (N'mười bảy')
    INSERT @Below20 (Word) VALUES (N'mười tám')
    INSERT @Below20 (Word) VALUES (N'mười chín')

    INSERT @Below100 VALUES (N'hai mươi')
    INSERT @Below100 VALUES (N'ba mươi')
    INSERT @Below100 VALUES (N'bốn mươi')
    INSERT @Below100 VALUES (N'năm mươi')
    INSERT @Below100 VALUES (N'sáu mươi')
    INSERT @Below100 VALUES (N'bảy mươi')
    INSERT @Below100 VALUES (N'tám mươi')
    INSERT @Below100 VALUES (N'chín mươi')

    INSERT @Below20_VN (Word) VALUES (N'không')
    INSERT @Below20_VN (Word) VALUES (N'mốt')		-- be used
    INSERT @Below20_VN (Word) VALUES (N'hai')
    INSERT @Below20_VN (Word) VALUES (N'ba')
    INSERT @Below20_VN (Word) VALUES (N'tư')		-- be used		
    INSERT @Below20_VN (Word) VALUES (N'lăm')		-- be used

    IF @Number > 99
    BEGIN
        SELECT @belowHundred = dbo.fnNumberToWords_VN(@Number % 100, 0)
    END

    DECLARE @NumberInWords NVARCHAR(MAX)

    SET @NumberInWords  = 
    (
      SELECT
        CASE 
            WHEN @Number = 0 THEN  ''
            WHEN @Number BETWEEN 1 AND 19 
				THEN (
						CASE  
							WHEN @Exception = 0 THEN (SELECT Word FROM @Below20 WHERE ID = @Number)
							ELSE (SELECT Word FROM @Below20_VN WHERE ID = @Number)
						END
					)
            WHEN @Number BETWEEN 20 AND 99
                THEN (SELECT Word FROM @Below100 WHERE ID = @Number/10) + ' ' + dbo.fnNumberToWords_VN(@Number % 10, 1) 
            WHEN @Number BETWEEN 100 AND 999 
                THEN (dbo.fnNumberToWords_VN(@Number / 100, 0)) + N' trăm ' + 
					(
						CASE 
							WHEN (@Number % 100) < 10 THEN N'linh '
							ELSE ''
						END
					) + @belowHundred
            WHEN @Number BETWEEN 1000 AND 999999 
                THEN (dbo.fnNumberToWords_VN(@Number / 1000, 0))+ N' nghìn '+ dbo.fnNumberToWords_VN(@Number % 1000, 0)  
            WHEN @Number BETWEEN 1000000 AND 999999999 
                THEN (dbo.fnNumberToWords_VN(@Number / 1000000, 0)) + N' triệu '+ dbo.fnNumberToWords_VN(@Number % 1000000, 0) 
            WHEN @Number BETWEEN 1000000000 AND 999999999999 
                THEN (dbo.fnNumberToWords_VN(@Number / 1000000000, 0))+ N' tỷ '+ dbo.fnNumberToWords_VN(@Number % 1000000000, 0) 
            ELSE N' INVALID INPUT'
        END
    )
    
    RETURN (@NumberInWords)
    
/**
Hỏi một câu các bác đừng cười. Quả thật là mình không còn nhớ quy tắc viết số 5 trong một dãy số như thế nào cho đúng nữa rồi ~X(
Nhờ bác nào còn nhớ thì có thể nhắc lại cho biết được không
Ví dụ dãy số này chẳng hạn thì viết thế nào : 1.505.555.005
15, 205 ...

Viết? Ý bạn là "viết bằng chữ" như cái dòng ký nhận tiền khi ... ra ngân hàng ý hả ;))
1.505.555.005: Một tỉ, năm trăm linh năm triệu, năm trăm năm mươi lăm nghìn, không trăm linh năm
15: mười lăm
205: hai trăm linh năm
Còn gì nữa không? đang muốn ngủ chiều, tiện thể đỡ phải đếm cừu :))

p/s còn quy tắc ý hả, ví dụ trong cụm 3 số ***
- Nếu là 5XX: viết là năm
- Nếu là X5X: viết là năm
- Nếu là XY5: Y>0: lăm; Y=0: năm
**/

END



GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_AmountToWords_VN]
( 
	@Amount BIGINT
) RETURNS NVARCHAR(4000)

AS

BEGIN	
	DECLARE @AmountInWords NVARCHAR(4000)
	
	IF dbo.fnNumberToWords_VN(@Amount, 0) <> ''
		SELECT @AmountInWords = dbo.fnNumberToWords_VN(@Amount, 0) + N' đồng chẵn.'	
	
    IF ISNULL(@AmountInWords, '') <> ''
		SELECT @AmountInWords = UPPER(LEFT(@AmountInWords, 1)) + RIGHT(@AmountInWords, LEN(@AmountInWords) - 1)
	
	RETURN (@AmountInWords)

END

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_nations] AS SELECT  _nations.F_Id, _nations.UpdatedDatetimeUtc, _nations.NationCode, _nations.NationName FROM [MasterDB].[dbo]._nations WHERE _nations.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Construction] AS SELECT  _Construction.F_Id, _Construction.UpdatedDatetimeUtc, _Construction.ConstructionName, _Construction.ConstructionCode FROM [MasterDB].[dbo]._Construction WHERE _Construction.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputValueRow_Delete_Version]
	@InputTypeId int,
	@InputBill_F_Id bigint,
	@BillVersion INT,
	@UserId int,
	@ResStatus int OUTPUT,
	@SubId int
AS
BEGIN
	UPDATE InputValueRow 
		SET IsDeleted			= 1, 
			DeletedDatetimeUtc	= GETUTCDATE(),
			UpdatedByUserId		= @UserId
		WHERE --InputTypeId		= @InputTypeId
			--AND
			InputBill_F_Id  = @InputBill_F_Id
			AND BillVersion		<= @BillVersion
			AND IsDeleted = 0
			AND SubsidiaryId = @SubId;
			
	SET @ResStatus = 1
END

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Branch] AS SELECT  _Branch.F_Id, _Branch.UpdatedDatetimeUtc, _Branch.BranchName, _Branch.BranchCode, _Branch.TaxNumber, _Branch.BranchAddress, _Branch.BranchPhone, _Branch.BranchEmail, _Branch.BranchFax, _Branch.BranchNote FROM [MasterDB].[dbo]._Branch WHERE _Branch.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_timingType] AS SELECT  _timingType.F_Id, _timingType.UpdatedDatetimeUtc, _timingType.Code, _timingType.Name FROM [MasterDB].[dbo]._timingType WHERE _timingType.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputValueRow_UpdateView]
AS
BEGIN
	DECLARE @SelectColumn nvarchar(max) = '	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vInputBill.F_Id					AS InputBill_F_Id,
		vInputBill.CreatedByUserId		AS CreatedByUserId,
		vInputBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vInputBill.UpdatedByUserId		AS UpdatedByUserId,
		vInputBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vInputBill.LatestBillVersion	AS LatestBillVersion,
		

		row.InputTypeId					AS InputTypeId,
		vInputType.Title				AS InputType_Title,
		vInputType.IsOpenning			AS InputType_IsOpenning,
		vInputType.InputTypeCode		AS InputType_InputTypeCode
	
	';
	DECLARE @Join nvarchar(max) = '
		FROM InputValueRow as row WITH(NOLOCK)
			JOIN vInputBill WITH(NOLOCK) ON row.InputBill_F_Id		= vInputBill.F_Id
			JOIN vInputType WITH(NOLOCK) ON row.InputTypeId		= vInputType.F_Id	
	';

	DECLARE @BillRowSelectColumn nvarchar(max) = @SelectColumn;
	DECLARE @BillRowJoin nvarchar(max) = @Join;
	

	DECLARE @ViewOnlyFormTypeId INT = 6

	DECLARE @SelectFormTypeId INT = 2
	DECLARE @SearchTableFormTypeId INT = 4

	DECLARE @FieldName nvarchar(128)
	DECLARE @RefTableCode nvarchar(128)
	DECLARE @RefTableField nvarchar(128)
	DECLARE @RefTableTitle nvarchar(512)
	DECLARE @FormTypeId INT
	
	DECLARE fieldCursor CURSOR FOR   
    SELECT FieldName, RefTableCode, RefTableField, RefTableTitle, FormTypeId FROM InputField  WHERE FormTypeId <> @ViewOnlyFormTypeId AND IsDeleted = 0
  
    OPEN fieldCursor  
    FETCH NEXT FROM fieldCursor INTO @FieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
  
    IF @@FETCH_STATUS <> 0   
        PRINT '         <<None>>'       
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
		
		
		SET @SelectColumn += ',  [row].[' + @FieldName+']'
		SET @BillRowSelectColumn += ',  [row].[' + @FieldName+']'		
		
		IF LEN(@RefTableCode)>0 AND @FormTypeId IN(@SelectFormTypeId,@SearchTableFormTypeId)
		BEGIN
			IF LEN(@RefTableTitle)>0
			BEGIN
				SELECT @SelectColumn += ', [v' + @FieldName +'].[' + LTRIM(RTRIM([Value])) + '] AS [' + @FieldName + '_' + LTRIM(RTRIM([Value])) +']' FROM dbo.ufn_Split(@RefTableTitle,',');
				SET @Join += ' LEFT JOIN [v' +@RefTableCode + '] as [v'+@FieldName+'] WITH(NOLOCK) ON [row].['+@FieldName+'] = [v' + @FieldName+'].['+@RefTableField+']';
			END
		END

        FETCH NEXT FROM fieldCursor INTO @FieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
        END  
  
    CLOSE fieldCursor  
    DEALLOCATE fieldCursor     
	
	DECLARE @Sql nvarchar(max)

	DROP VIEW IF EXISTS vInputBillRow;
	SET @Sql = 'CREATE VIEW vInputBillRow AS 
	SELECT  ' + @BillRowSelectColumn + 
	@BillRowJoin + '
	WHERE [row].IsDeleted = 0
	';

	PRINT @Sql
	EXEC (@Sql)


	DROP VIEW IF EXISTS vInputValueRow;
	SET @Sql = 'CREATE VIEW vInputValueRow AS 
	SELECT ' + @SelectColumn + 
	@Join + '
	WHERE [row].IsDeleted = 0
	';

	PRINT @Sql
	EXEC (@Sql)

	DROP VIEW IF EXISTS vInputValueRowPrivate;
	SET @Sql = 'CREATE VIEW vInputValueRowPrivate
		AS
		SELECT 
			v.*,
			CASE WHEN pb.So_ct_goc IS NOT NULL THEN 1 ELSE 0 END IsPublicCreated,
			CASE WHEN pb.So_ct_goc IS NOT NULL THEN N''Đã tạo'' ELSE N''Chưa tạo'' END IsPublicCreatedTitle			
		FROM dbo.vInputValueRow v
		LEFT JOIN (
				SELECT	pb.So_ct_goc
				FROM AccountancyPublicDB.dbo.InputValueRow pb
				WHERE IsDeleted = 0
				GROUP BY pb.So_ct_goc
		) pb ON v.so_ct = pb.So_ct_goc';

	PRINT @Sql
	EXEC (@Sql)


	EXEC asp_InputType_UpdateView_Rc
	EXEC asp_InputType_UpdateView_Rc_detail
END

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[vInputBill]
AS
SELECT        F_Id, InputTypeId, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, IsDeleted, DeletedDatetimeUtc, LatestBillVersion, SubsidiaryId, BillCode
FROM            dbo.InputBill
WHERE        (IsDeleted = 0)


GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_gov_level] AS SELECT  _gov_level.F_Id, _gov_level.UpdatedDatetimeUtc, _gov_level.ParentId, _gov_level.Code, _gov_level.Name, _gov_level.Province FROM [MasterDB].[dbo]._gov_level WHERE _gov_level.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[vInputType]
AS
SELECT        InputTypeId AS F_Id, InputTypeGroupId, Title, InputTypeCode, SortOrder, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, IsDeleted, DeletedDatetimeUtc, PreLoadAction, PostLoadAction, 
                         IsOpenning
FROM            dbo.InputType


GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_category_cate] AS SELECT  _category_cate.F_Id, _category_cate.UpdatedDatetimeUtc, _category_cate.Code, _category_cate.Name, _category_cate.Note FROM [MasterDB].[dbo]._category_cate WHERE _category_cate.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_category_subcate] AS SELECT  _category_subcate.F_Id, _category_subcate.UpdatedDatetimeUtc, _category_subcate.ParentId, _category_subcate.Cate, _category_subcate.Cate_code, _category_subcate.Call_name, _category_subcate.Note FROM [MasterDB].[dbo]._category_subcate WHERE _category_subcate.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_cate_inoutcome] AS SELECT  _cate_inoutcome.F_Id, _cate_inoutcome.UpdatedDatetimeUtc, _cate_inoutcome.Code, _cate_inoutcome.Name, _cate_inoutcome.Code_no, _cate_inoutcome.Note, _cate_inoutcome.checkTkno, _cate_inoutcome.checkTkco FROM [MasterDB].[dbo]._cate_inoutcome WHERE _cate_inoutcome.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_account_nationalbank] AS SELECT  _account_nationalbank.F_Id, _account_nationalbank.UpdatedDatetimeUtc, _account_nationalbank.Acc_code, _account_nationalbank.Acc_name, _account_nationalbank.Note FROM [MasterDB].[dbo]._account_nationalbank WHERE _account_nationalbank.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Partner] AS 
							SELECT        
	c.PartnerId F_Id,
	c.CustomerId,
	c.CustomerCode PartnerCode,
	c.CustomerName PartnerName, 
	c.Email, c.PhoneNumber, 
	c.TaxIdNo,
	c.Website,
	c.CustomerStatusId, 
	c.CustomerTypeId, 
	c.Address, 
	c.LegalRepresentative,
	c.DebtDays, 
	c.DebtLimitation, 
	c.LoanDays, 
	c.LoanLimitation,
	c.DebtManagerUserId,
	c.LogoFileId,
	--c.InformationContact,
	c.PayConditionsId,
	c.DeliveryConditionsId,
	pc.PayConditionName,
	dc.ConditionName,
	(
	SELECT TOP 1
		cc.FullName
	FROM [OrganizationDB].[dbo].CustomerContact cc
	WHERE cc.CustomerId = c.CustomerId and cc.IsDeleted = 0
	) AS FirstContactName
FROM [OrganizationDB].[dbo].Customer c
LEFT JOIN [MasterDB].[dbo]._DeliveryConditions dc ON c.DeliveryConditionsId = dc.F_Id
LEFT JOIN [MasterDB].[dbo]._PayConditions pc ON c.PayConditionsId = pc.F_Id
WHERE c.CustomerStatusId = 1 AND c.IsDeleted = 0
UNION ALL
SELECT 
	e.PartnerId F_Id,
	NULL CustomerId,
	e.EmployeeCode PartnerCode,
	e.FullName PartnerName,
	e.Email,
	e.Phone PhoneNumber,
	NULL TaxIdNo,
	NULL Website,
	1 CustomerStatusId, 
	2 CustomerTypeId,
	e.Address,
	NULL AS DebtDays,
	NULL AS DebtLimitation,
	NULL LoanDays,
	NULL LoanLimitation,
	NULL DebtManagerUserId,
	NULL LogoFileId,
	--NULL AS InformationContact,
	NULL AS PayConditionsId,
	NULL AS DeliveryConditionsId,
	NULL PayConditionName,
	NULL ConditionName,
	NULL FirstContactName,
	null LegalRepresentative
FROM [OrganizationDB].[dbo].Employee e
WHERE e.IsDeleted = 0
							;

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_User] AS 
							-- SELECT
--     e.UserId F_Id,
--     e.UserId UserId,
--     e.EmployeeCode,
--     e.FullName,
--     e.Email,
--     e.Phone
-- FROM [OrganizationDB].[dbo].Employee e
-- WHERE e.IsDeleted = 0

SELECT
    e.UserId F_Id,
    e.UserId UserId,
    e.EmployeeCode,
    e.FullName,
    e.Email,
    e.Phone, 
    CONCAT(e.EmployeeCode,' - ', e.FullName) DisplayName,
    STRING_AGG(d.DepartmentName, ', ') WITHIN GROUP (ORDER BY d.DepartmentId) AS Department
FROM [OrganizationDB].[dbo].Employee e
LEFT JOIN [OrganizationDB].[dbo].EmployeeDepartmentMapping ed ON e.UserId = ed.UserId AND ed.IsDeleted = 0 AND e.IsDeleted = 0 AND e.SubsidiaryId = ed.SubsidiaryId
LEFT JOIN [OrganizationDB].[dbo].Department d ON ed.DepartmentId = d.DepartmentId AND d.IsDeleted = 0 AND e.SubsidiaryId = d.SubsidiaryId
WHERE e.IsDeleted = 0
GROUP BY e.UserId, e.EmployeeCode, e.FullName, e.Email, e.Phone
							;

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_TK_nganhang_dt] AS 
							SELECT 
	ba.CustomerBankAccountId F_Id,
	c.PartnerId PartnerId,
	c.CustomerName Ten_khach,
	ba.AccountName Ten_TKNH,
	ba.AccountNumber So_TKNH,
	cur.CurrencyCode Loai_tien,
	ba.BankName Ngan_hang,
	ba.BankBranch Chi_nhanh_NH,
	ba.Province Tinh_TP,
	ba.SwiffCode Swift_code,
	ba.BankAddress NH_add
FROM [OrganizationDB].[dbo].CustomerBankAccount ba 
LEFT JOIN [OrganizationDB].[dbo].Customer c ON ba.CustomerId = c.CustomerId AND c.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo]._Currency cur ON ba.CurrencyId = cur.F_Id AND cur.IsDeleted = 0
WHERE ba.IsDeleted = 0


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Stock] AS 
							SELECT 
    StockId F_Id,
    StockName,
    SubsidiaryId
FROM [StockDB].[dbo].Stock 
WHERE IsDeleted=0


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_ProductUnitConversion] AS 
							SELECT 
    puc.ProductUnitConversionId F_Id,
    puc.ProductUnitConversionName,
    puc.FactorExpression,
    puc.ConversionDescription,
    puc.IsDefault,
    puc.IsFreeStyle,
    puc.ProductId,
    puc.DecimalPlace,
    p.ProductName ProductId_ProductName   
FROM [StockDB].[dbo].ProductUnitConversion puc
JOIN [StockDB].[dbo].Product p ON puc.ProductId = p.ProductId


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_gov_level] AS SELECT  _gov_level.F_Id, _gov_level.UpdatedDatetimeUtc, _gov_level.ParentId, _gov_level.Code, _gov_level.Name, _gov_level.Province FROM [MasterDB].[dbo]._gov_level WHERE _gov_level.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_ExpenseItem] AS SELECT  _ExpenseItem.F_Id, _ExpenseItem.UpdatedDatetimeUtc, _ExpenseItem.ParentId, _ExpenseItem.ExpenseItemName, _ExpenseItem.ExpenseItemCode, _ExpenseItem.Note FROM [MasterDB].[dbo]._ExpenseItem WHERE _ExpenseItem.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Department] AS 
							WITH tmp
AS (SELECT DepartmentId F_Id,
           DepartmentName,
           DepartmentCode,
           [Description],
           IsActived,
           WorkingHoursPerDay,
           IsProduction,
           SubsidiaryId,
           ParentId,
           IsFactory,
		   CONVERT(NVARCHAR(max),'') TitlePrefix,
		   CONVERT(NVARCHAR(max),CONCAT(DepartmentCode, ' - ', DepartmentName)) TreeTitle,
		   CONVERT(NVARCHAR(max), CONCAT('/',DepartmentCode,'/')) PathCodes,
		   CONVERT(NVARCHAR(max), CONCAT('/',DepartmentName,'/')) PathNames,
		   1 [Level],
		   DepartmentId ParentId_Level_1,
		   NULL ParentId_Level_2,
		   NULL ParentId_Level_3,
		   NULL ParentId_Level_4,
		   NULL ParentId_Level_5,
		   NULL ParentId_Level_6,
		   NULL ParentId_Level_7,
		   NULL ParentId_Level_8,
		   NULL ParentId_Level_9,
		   NULL ParentId_Level_10
    FROM [OrganizationDB].[dbo].Department
    WHERE IsDeleted = 0
          AND ParentId IS NULL
    UNION ALL
    SELECT d.DepartmentId F_Id,
           d.DepartmentName,
           d.DepartmentCode,
           d.[Description],
           d.IsActived,
           d.WorkingHoursPerDay,
           d.IsProduction,
           d.SubsidiaryId,
           d.ParentId,
           d.IsFactory,
		   CONVERT(NVARCHAR(max),CONCAT('----', tmp.TitlePrefix)) TitlePrefix,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.TitlePrefix,' ', d.DepartmentCode, ' - ', d.DepartmentName)) TreeTitle,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.PathCodes, d.DepartmentCode,'/')) PathCodes,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.PathNames, d.DepartmentName,'/')) PathNames,
		   tmp.[Level] + 1 [Level],
		   tmp.ParentId_Level_1,
		   CASE WHEN tmp.[Level] + 1 =2 THEN d.DepartmentId ELSE tmp.ParentId_Level_2 END ParentId_Level_2,
		   CASE WHEN tmp.[Level] + 1 =3 THEN d.DepartmentId ELSE tmp.ParentId_Level_3 END ParentId_Level_3,
		   CASE WHEN tmp.[Level] + 1 =4 THEN d.DepartmentId ELSE tmp.ParentId_Level_4 END ParentId_Level_4,
		   CASE WHEN tmp.[Level] + 1 =5 THEN d.DepartmentId ELSE tmp.ParentId_Level_5 END ParentId_Level_5,
		   CASE WHEN tmp.[Level] + 1 =6 THEN d.DepartmentId ELSE tmp.ParentId_Level_6 END ParentId_Level_6,
		   CASE WHEN tmp.[Level] + 1 =7 THEN d.DepartmentId ELSE tmp.ParentId_Level_7 END ParentId_Level_7,
		   CASE WHEN tmp.[Level] + 1 =8 THEN d.DepartmentId ELSE tmp.ParentId_Level_8 END ParentId_Level_8,
		   CASE WHEN tmp.[Level] + 1 =9 THEN d.DepartmentId ELSE tmp.ParentId_Level_9 END ParentId_Level_9,
		   CASE WHEN tmp.[Level] + 1 =10 THEN d.DepartmentId ELSE tmp.ParentId_Level_10 END ParentId_Level_10
    FROM [OrganizationDB].[dbo].Department d
        JOIN tmp
            ON d.ParentId = tmp.F_Id
    WHERE d.IsDeleted = 0)
SELECT *
FROM tmp
							;

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Construction] AS SELECT  _Construction.F_Id, _Construction.UpdatedDatetimeUtc, _Construction.ConstructionName, _Construction.ConstructionCode FROM [MasterDB].[dbo]._Construction WHERE _Construction.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_CheckStatus] AS SELECT  _CheckStatus.F_Id, _CheckStatus.UpdatedDatetimeUtc, _CheckStatus.CheckStatusId, _CheckStatus.CheckStatusName, _CheckStatus.CssStyleJson FROM [MasterDB].[dbo]._CheckStatus WHERE _CheckStatus.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_CensorStatus] AS SELECT  _CensorStatus.F_Id, _CensorStatus.UpdatedDatetimeUtc, _CensorStatus.CensorStatusId, _CensorStatus.CensorStatusName, _CensorStatus.CssStyleJson FROM [MasterDB].[dbo]._CensorStatus WHERE _CensorStatus.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_category_subcate] AS SELECT  _category_subcate.F_Id, _category_subcate.UpdatedDatetimeUtc, _category_subcate.ParentId, _category_subcate.Cate, _category_subcate.Cate_code, _category_subcate.Call_name, _category_subcate.Note FROM [MasterDB].[dbo]._category_subcate WHERE _category_subcate.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_cate_inoutcome] AS SELECT  _cate_inoutcome.F_Id, _cate_inoutcome.UpdatedDatetimeUtc, _cate_inoutcome.Code, _cate_inoutcome.Name, _cate_inoutcome.Code_no, _cate_inoutcome.Note, _cate_inoutcome.checkTkno, _cate_inoutcome.checkTkco FROM [MasterDB].[dbo]._cate_inoutcome WHERE _cate_inoutcome.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_account_nationalbank] AS SELECT  _account_nationalbank.F_Id, _account_nationalbank.UpdatedDatetimeUtc, _account_nationalbank.Acc_code, _account_nationalbank.Acc_name, _account_nationalbank.Note FROM [MasterDB].[dbo]._account_nationalbank WHERE _account_nationalbank.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_NumberToWords]
(
    @Number AS BIGINT
) RETURNS VARCHAR(MAX)
AS
BEGIN
    DECLARE @Below20 TABLE (ID INT IDENTITY(0,1), Word VARCHAR(32))
    DECLARE @Below100 TABLE (ID INT IDENTITY(2,1), Word VARCHAR(32))
    DECLARE @BelowHundred AS VARCHAR(126) 
    
    INSERT @Below20 (Word) VALUES ('không')
    INSERT @Below20 (Word) VALUES ('một')
    INSERT @Below20 (Word) VALUES ( 'hai' )
    INSERT @Below20 (Word) VALUES ( 'ba')
    INSERT @Below20 (Word) VALUES ( 'bốn' )
    INSERT @Below20 (Word) VALUES ( 'năm' )
    INSERT @Below20 (Word) VALUES ( 'sáu' )
    INSERT @Below20 (Word) VALUES ( 'bảy' )
    INSERT @Below20 (Word) VALUES ( 'tám')
    INSERT @Below20 (Word) VALUES ( 'chín')
    INSERT @Below20 (Word) VALUES ( 'mười')
    INSERT @Below20 (Word) VALUES ( 'mười một' )
    INSERT @Below20 (Word) VALUES ( 'mười hai' )
    INSERT @Below20 (Word) VALUES ( 'mười ba' )
    INSERT @Below20 (Word) VALUES ( 'mười bốn')
    INSERT @Below20 (Word) VALUES ( 'mười năm' )
    INSERT @Below20 (Word) VALUES ( 'mười sáu' )
    INSERT @Below20 (Word) VALUES ( 'mười bảy')
    INSERT @Below20 (Word) VALUES ( 'mười tám' )
    INSERT @Below20 (Word) VALUES ( 'mười chín' )
 
    INSERT @Below100 VALUES ('hai mươi')
    INSERT @Below100 VALUES ('ba mươi')
    INSERT @Below100 VALUES ('bốn mươi')
    INSERT @Below100 VALUES ('năm mươi')
    INSERT @Below100 VALUES ('sáu mươi')
    INSERT @Below100 VALUES ('bảy mươi')
    INSERT @Below100 VALUES ('tám mươi')
    INSERT @Below100 VALUES ('chín mươi')
 
    IF @Number > 99
    BEGIN
        SELECT @belowHundred = dbo.fnNumberToWords( @Number % 100)
    END
 
    DECLARE @NumberInWords VARCHAR(MAX)
    SET @NumberInWords  = 
    (
      SELECT
        CASE 
            WHEN @Number = 0 THEN  ''
 
            WHEN @Number BETWEEN 1 AND 19 
                THEN (SELECT Word FROM @Below20 WHERE ID=@Number)
 
            WHEN @Number BETWEEN 20 AND 99
                THEN (SELECT Word FROM @Below100 WHERE ID=@Number/10)+ '-' + dbo.fnNumberToWords( @Number % 10) 
 
            WHEN @Number BETWEEN 100 AND 999 
                THEN (dbo.fnNumberToWords( @Number / 100)) + ' HUNDRED '+ 
                        CASE
                            WHEN @belowHundred <> '' 
                                THEN 'AND ' + @belowHundred else @belowHundred
                        END
 
            WHEN @Number BETWEEN 1000 AND 999999 
                THEN (dbo.fnNumberToWords( @Number / 1000))+ ' nghìn '+ dbo.fnNumberToWords( @Number % 1000)  
 
            WHEN @Number BETWEEN 1000000 AND 999999999 
                THEN (dbo.fnNumberToWords( @Number / 1000000)) + ' triệu '+ dbo.fnNumberToWords( @Number % 1000000) 
 
            WHEN @Number BETWEEN 1000000000 AND 999999999999 
                THEN (dbo.fnNumberToWords( @Number / 1000000000))+' tỷ '+ dbo.fnNumberToWords( @Number % 1000000000) 
            
            ELSE ' INVALID INPUT'
        END
    )
 
    SELECT @NumberInWords = RTRIM(@NumberInWords)
 
    SELECT @NumberInWords = RTRIM(LEFT(@NumberInWords,LEN(@NumberInWords)-1)) WHERE RIGHT(@NumberInWords,1)='-'
 
    RETURN (@NumberInWords)
 
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_NumberToWords_2]
(
    @Number AS BIGINT
) RETURNS VARCHAR(MAX)
AS
BEGIN
    DECLARE @Below20 TABLE (ID INT IDENTITY(0,1), Word VARCHAR(32))
    DECLARE @Below100 TABLE (ID INT IDENTITY(2,1), Word VARCHAR(32))
    DECLARE @BelowHundred AS VARCHAR(126) 
    
    INSERT @Below20 (Word) VALUES ('không')
    INSERT @Below20 (Word) VALUES ('một')
    INSERT @Below20 (Word) VALUES ( 'hai' )
    INSERT @Below20 (Word) VALUES ( 'ba')
    INSERT @Below20 (Word) VALUES ( 'bốn' )
    INSERT @Below20 (Word) VALUES ( 'năm' )
    INSERT @Below20 (Word) VALUES ( 'sáu' )
    INSERT @Below20 (Word) VALUES ( 'bảy' )
    INSERT @Below20 (Word) VALUES ( 'tám')
    INSERT @Below20 (Word) VALUES ( 'chín')
    INSERT @Below20 (Word) VALUES ( 'mười')
    INSERT @Below20 (Word) VALUES ( 'mười một' )
    INSERT @Below20 (Word) VALUES ( 'mười hai' )
    INSERT @Below20 (Word) VALUES ( 'mười ba' )
    INSERT @Below20 (Word) VALUES ( 'mười bốn')
    INSERT @Below20 (Word) VALUES ( 'mười năm' )
    INSERT @Below20 (Word) VALUES ( 'mười sáu' )
    INSERT @Below20 (Word) VALUES ( 'mười bảy')
    INSERT @Below20 (Word) VALUES ( 'mười tám' )
    INSERT @Below20 (Word) VALUES ( 'mười chín' )
 
    INSERT @Below100 VALUES ('hai mươi')
    INSERT @Below100 VALUES ('ba mươi')
    INSERT @Below100 VALUES ('bốn mươi')
    INSERT @Below100 VALUES ('năm mươi')
    INSERT @Below100 VALUES ('sáu mươi')
    INSERT @Below100 VALUES ('bảy mươi')
    INSERT @Below100 VALUES ('tám mươi')
    INSERT @Below100 VALUES ('chín mươi')
 
    IF @Number > 99
    BEGIN
        SELECT @belowHundred = dbo.ufn_NumberToWords_2( @Number % 100)
    END
 
    DECLARE @NumberInWords VARCHAR(MAX)
    SET @NumberInWords  = 
    (
      SELECT
        CASE 
            WHEN @Number = 0 THEN  ''
 
            WHEN @Number BETWEEN 1 AND 19 
                THEN (SELECT Word FROM @Below20 WHERE ID=@Number)
 
            WHEN @Number BETWEEN 20 AND 99
                THEN (SELECT Word FROM @Below100 WHERE ID=@Number/10)+ '-' + dbo.ufn_NumberToWords_2( @Number % 10) 
 
            WHEN @Number BETWEEN 100 AND 999 
                THEN (dbo.ufn_NumberToWords_2( @Number / 100)) + ' HUNDRED '+ 
                        CASE
                            WHEN @belowHundred <> '' 
                                THEN 'AND ' + @belowHundred else @belowHundred
                        END
 
            WHEN @Number BETWEEN 1000 AND 999999 
                THEN (dbo.ufn_NumberToWords_2( @Number / 1000))+ ' nghìn '+ dbo.ufn_NumberToWords_2( @Number % 1000)  
 
            WHEN @Number BETWEEN 1000000 AND 999999999 
                THEN (dbo.ufn_NumberToWords_2( @Number / 1000000)) + ' triệu '+ dbo.ufn_NumberToWords_2( @Number % 1000000) 
 
            WHEN @Number BETWEEN 1000000000 AND 999999999999 
                THEN (dbo.ufn_NumberToWords_2( @Number / 1000000000))+' tỷ '+ dbo.ufn_NumberToWords_2( @Number % 1000000000) 
            
            ELSE ' INVALID INPUT'
        END
    )
 
    SELECT @NumberInWords = RTRIM(@NumberInWords)
 
    SELECT @NumberInWords = RTRIM(LEFT(@NumberInWords,LEN(@NumberInWords)-1)) WHERE RIGHT(@NumberInWords,1)='-'
 
    RETURN (@NumberInWords)
 
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[RefObjectApprovalStep]
AS
SELECT        ObjectApprovalStepId, ObjectTypeId, ObjectId, ObjectApprovalStepTypeId, IsEnable, ObjectFieldEnable, UpdatedByUserId, UpdatedDatetimeUtc, 
                         SubsidiaryId
FROM            OrganizationDB.dbo.ObjectApprovalStep
WHERE        (ObjectTypeId = 34)



GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Branch] AS SELECT  _Branch.F_Id, _Branch.UpdatedDatetimeUtc, _Branch.BranchName, _Branch.BranchCode, _Branch.TaxNumber, _Branch.BranchAddress, _Branch.BranchPhone, _Branch.BranchEmail, _Branch.BranchFax, _Branch.BranchNote FROM [MasterDB].[dbo]._Branch WHERE _Branch.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Cap_NSNN] AS SELECT  _Cap_NSNN.F_Id, _Cap_NSNN.UpdatedDatetimeUtc, _Cap_NSNN.Ma_cap, _Cap_NSNN.Ten_cap_QLNS FROM [MasterDB].[dbo]._Cap_NSNN WHERE _Cap_NSNN.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Category_Demo] AS SELECT * FROM [MasterDB].[dbo].Category


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Employee] AS SELECT  _Employee.UserId F_Id FROM ( SELECT [OrganizationDB].[dbo].Employee.UserId UserId FROM [OrganizationDB].[dbo].Employee WHERE [OrganizationDB].[dbo].Employee.IsDeleted = 0) _Employee


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_ProductCate] AS 
							SELECT ProductCateId F_Id, ProductCateName
FROM [StockDB].[dbo].ProductCate
WHERE IsDeleted = 0


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Subsidiary] AS 
							SELECT
    SubsidiaryId F_Id,
    SubsidiaryCode,
    SubsidiaryName,
    Fax,
    PhoneNumber,
    TaxIdNo,
    Email,
    Address,
    Description
FROM [OrganizationDB].[dbo].Subsidiary
WHERE IsDeleted = 0


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_TestCategory] AS SELECT  _TestCategory.F_Id, _TestCategory.UpdatedDatetimeUtc, _TestCategory.Test1 FROM [MasterDB].[dbo]._TestCategory WHERE _TestCategory.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Unit] AS 
							SELECT UnitId F_Id, UnitName, UnitStatusId, DecimalPlace
FROM [MasterDB].[dbo].Unit WHERE IsDeleted = 0


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_VAT_RATE] AS SELECT  _VAT_RATE.F_Id, _VAT_RATE.UpdatedDatetimeUtc, _VAT_RATE.title, _VAT_RATE.value, _VAT_RATE.easy_inv_check FROM [MasterDB].[dbo]._VAT_RATE WHERE _VAT_RATE.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_category_cate] AS SELECT  _category_cate.F_Id, _category_cate.UpdatedDatetimeUtc, _category_cate.Code, _category_cate.Name, _category_cate.Note FROM [MasterDB].[dbo]._category_cate WHERE _category_cate.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_nations] AS SELECT  _nations.F_Id, _nations.UpdatedDatetimeUtc, _nations.NationCode, _nations.NationName FROM [MasterDB].[dbo]._nations WHERE _nations.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_timingType] AS SELECT  _timingType.F_Id, _timingType.UpdatedDatetimeUtc, _timingType.Code, _timingType.Name FROM [MasterDB].[dbo]._timingType WHERE _timingType.IsDeleted = 0

GO

USE AccountancyPublicDB
GO

CREATE OR ALTER TRIGGER [dbo].[InputValueRow_AFTER_INSERT_UPDATE]
   ON [dbo].[InputValueRow]
   AFTER INSERT,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	UPDATE b
		SET b.BillCode = r.so_ct
	FROM dbo.InputBill b
		JOIN Inserted r ON b.F_Id = r.InputBill_F_Id
	WHERE r.IsDeleted = 0
END



GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Product_Search] AS 
								SELECT 
	p.ProductId F_Id,
	p.ProductCode,
	p.ProductName,
    p.MainImageFileId,
	p.UnitId,
	u.UnitName UnitId_UnitName,
	puc.Decimalplace UnitId_Decimalplace,
	p.ProductCateId,
	pc.ProductCateName ProductCateId_ProductCateName,
	p.EstimatePrice,
	pei.Specification,
	p.ProductNameEng,
	p.NetWeight,
	p.GrossWeight,
	p.Measurement,
	p.PackingHeight,
	p.PackingLong,
	p.PackingWidth,
	p.SubsidiaryId,
	sl.sl_ton

FROM [StockDB].[dbo].Product p 
LEFT JOIN [StockDB].[dbo].ProductUnitConversion puc ON p.ProductId = puc.ProductId AND puc.IsDefault = 1 
LEFT JOIN [StockDB].[dbo].ProductExtraInfo pei ON p.ProductId = pei.ProductId AND pei.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].Unit u ON p.UnitId = u.UnitId AND u.IsDeleted = 0
LEFT JOIN [StockDB].[dbo].ProductCate pc ON p.ProductCateId = pc.ProductCateId AND pc.IsDeleted = 0
LEFT JOIN (
	SELECT sp.ProductId, SUM(sp.PrimaryQuantityRemaining) sl_ton
	FROM
	[StockDB].[dbo].StockProduct sp
	WHERE sp.IsDeleted = 0
	GROUP BY sp.ProductId
) sl ON p.ProductId = sl.ProductId

WHERE p.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_User_Search] AS 
								SELECT
    e.UserId F_Id,
    e.UserId UserId,
    e.EmployeeCode,
    e.FullName,
    e.Email,
    e.Phone, 
    CONCAT(e.EmployeeCode,' - ', e.FullName) DisplayName,
    STRING_AGG(d.DepartmentName, ', ') WITHIN GROUP (ORDER BY d.DepartmentId) AS Department
FROM [OrganizationDB].[dbo].Employee e
LEFT JOIN [OrganizationDB].[dbo].EmployeeDepartmentMapping ed ON e.UserId = ed.UserId AND ed.IsDeleted = 0 AND e.IsDeleted = 0 AND e.SubsidiaryId = ed.SubsidiaryId
LEFT JOIN [OrganizationDB].[dbo].Department d ON ed.DepartmentId = d.DepartmentId AND d.IsDeleted = 0 AND e.SubsidiaryId = d.SubsidiaryId
WHERE e.IsDeleted = 0
GROUP BY e.UserId, e.EmployeeCode, e.FullName, e.Email, e.Phone

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputType_Delete]
	@InputTypeId int,
	@ResStatus int OUTPUT
AS
BEGIN
	BEGIN TRANSACTION
		UPDATE top(1) dbo.InputType
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE InputTypeId = @InputTypeId AND IsDeleted = 0
		
		UPDATE dbo.InputArea
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE InputTypeId = @InputTypeId AND IsDeleted = 0
		
		UPDATE dbo.InputAreaField
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE InputTypeId = @InputTypeId AND IsDeleted = 0

		UPDATE dbo.InputBill
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE InputTypeId = @InputTypeId AND IsDeleted = 0

		UPDATE dbo.InputValueRow
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE InputTypeId = @InputTypeId AND IsDeleted = 0

		SET @ResStatus = 1
	COMMIT TRANSACTION
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_UpdateInputTableType]
AS
BEGIN
	
	IF (EXISTS (SELECT * FROM sys.table_types WHERE name = 'InputTableType'))
		DROP TYPE InputTableType
	
	DECLARE @sql nvarchar(max) = ''
	
	DECLARE @ViewOnlyFormTypeId INT = 6

	DECLARE @FieldName nvarchar(128)
	DECLARE @SqlType nvarchar(10);
	DECLARE @DataSize INT;
	DECLARE @DecimalPrecision INT;
	DECLARE @DecimalPlace INT;
	
	DECLARE fieldCursor CURSOR FOR   
    SELECT f.FieldName FROM InputField f
		WHERE f.FormTypeId <> @ViewOnlyFormTypeId AND f.IsDeleted = 0
  
    OPEN fieldCursor  
			FETCH NEXT FROM fieldCursor INTO @FieldName
  
    IF @@FETCH_STATUS <> 0   
        PRINT '         <<None>>'       
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
			
			SELECT @SqlType = DATA_TYPE, @DataSize = CHARACTER_MAXIMUM_LENGTH, @DecimalPrecision = NUMERIC_PRECISION, @DecimalPlace = NUMERIC_SCALE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'InputValueRow' AND COLUMN_NAME = @FieldName
			SET @sql += '
			' + @FieldName + ' ' + @SqlType
			
			IF (@SqlType = 'decimal')
				SET @sql += CONCAT('(',@DecimalPrecision, ',', @DecimalPlace ,'),') 
			ELSE
				IF @DataSize IS NOT NULL
					SET @sql += CONCAT('(',@DataSize ,'),') 
				ELSE
					SET @sql +=',' 
			FETCH NEXT FROM fieldCursor INTO @FieldName
			END  
			
			
  
    CLOSE fieldCursor  
    DEALLOCATE fieldCursor
		
		IF LEN(@sql)>0		
			SET @sql = SUBSTRING(@sql,0,LEN(@sql))	
		
		SET @sql = 'CREATE TYPE InputTableType AS TABLE
								(' + @sql + ')'
								
 		EXEC (@sql)
END;


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputType_Clear_FieldData]
    @InputTypeId INT,
    @FieldName NVARCHAR(128),
    @ResStatus INT OUTPUT
AS
BEGIN
    DECLARE @DATA_TYPE NVARCHAR(128) = N'';
    DECLARE @IS_NULLABLE VARCHAR(3);

    SELECT @IS_NULLABLE = [IS_NULLABLE],
           @DATA_TYPE = [DATA_TYPE]
      FROM [INFORMATION_SCHEMA].[COLUMNS]
     WHERE TABLE_NAME    = 'InputValueRow'
       AND [COLUMN_NAME] = @FieldName;

    IF @DATA_TYPE IS NULL
        RETURN;

    DECLARE @Sql NVARCHAR(MAX) = N'';
    IF @IS_NULLABLE = 'YES'
    BEGIN
        SET @Sql
            = N'UPDATE InputValueRow SET [' + @FieldName + N'] = NULL WHERE InputTypeId = '
              + CONVERT(NVARCHAR(50), @InputTypeId);

    END;
    ELSE
    BEGIN
        IF @DATA_TYPE IN ( 'int', 'bigint', 'decimal', 'money', 'numberic', 'bit', 'float', 'double', 'binary', 'bit',
                           'real', 'tinyInt', 'smallint', 'smallmoney' )
        BEGIN
            SET @Sql
                = N'UPDATE InputValueRow SET [' + @FieldName + N'] = 0 WHERE InputTypeId = '
                  + CONVERT(NVARCHAR(50), @InputTypeId);
        END;

        IF @DATA_TYPE IN ( 'datetime', 'date' )
        BEGIN
            SET @Sql
                = N'UPDATE InputValueRow SET [' + @FieldName + N'] = ''1900-01-01'' WHERE InputTypeId = '
                  + CONVERT(NVARCHAR(50), @InputTypeId);
        END;

        IF @DATA_TYPE IN ( 'datetime2' )
        BEGIN
            SET @Sql
                = N'UPDATE InputValueRow SET [' + @FieldName + N'] = ''0001-01-01'' WHERE InputTypeId = '
                  + CONVERT(NVARCHAR(50), @InputTypeId);
        END;


        IF @DATA_TYPE IN ( 'nvarchar', 'varchar', 'text', 'char' )
        BEGIN
            SET @Sql
                = N'UPDATE InputValueRow SET [' + @FieldName + N'] = '' WHERE InputTypeId = '
                  + CONVERT(NVARCHAR(50), @InputTypeId);
        END;
    END;

    --DECLARE @WAITING BIGINT = 0;
    DECLARE @APPROVE BIGINT = 1;
    --DECLARE @REJECT BIGINT = 2;



    IF @FieldName = 'CheckStatusId'
   AND EXISTS (   SELECT      0
                    FROM      dbo.InputAreaField af
                   INNER JOIN dbo.InputField f
                      ON af.InputFieldId = f.InputFieldId
                     AND f.IsDeleted     = 0
                   WHERE      af.InputTypeId = @InputTypeId
                     AND      af.IsDeleted        = 0
                     AND      f.FieldName         = 'CheckStatusId')
    BEGIN
        UPDATE dbo.InputValueRow
           SET CheckStatusId = @APPROVE
         WHERE 1 = 1;
        SET @Sql = NULL;
    END;

    IF @FieldName = 'CensorStatusId'
   AND EXISTS (   SELECT      0
                    FROM      dbo.InputAreaField af
                   INNER JOIN dbo.InputField f
                      ON af.InputFieldId = f.InputFieldId
                     AND f.IsDeleted     = 0
                   WHERE      af.InputTypeId = @InputTypeId
                     AND      af.IsDeleted        = 0
                     AND      f.FieldName         = 'CensorStatusId')
    BEGIN
        UPDATE dbo.InputValueRow
           SET CensorStatusId = @APPROVE
         WHERE 1 = 1;
        SET @Sql = NULL;
    END;

    --SELECT @Sql as SQL1
    IF (LEN(@Sql) > 0)
    BEGIN
        EXEC (@Sql);
    END;

    SET @ResStatus = 1;
END;

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputArea_Delete]
	@InputTypeId int,
	@InputAreaId int,	
	@ResStatus int OUTPUT
AS
BEGIN
	BEGIN TRANSACTION
		
		DECLARE @FieldName nvarchar(64);		

		DECLARE fieldCursor CURSOR FOR   
		SELECT FieldName
		FROM InputAreaField AS af
			JOIN InputField AS f ON af.InputFieldId = f.InputFieldId
		WHERE af.InputTypeId = @InputTypeId AND af.InputAreaId = @InputAreaId		  
		OPEN fieldCursor  
		
		FETCH NEXT FROM fieldCursor   
		INTO @FieldName
  
		WHILE @@FETCH_STATUS = 0  
		BEGIN  

			EXEC asp_InputType_Clear_FieldData @InputTypeId = @InputTypeId,
											@FieldName = @FieldName,
											@ResStatus = @ResStatus OUTPUT 			

			FETCH NEXT FROM fieldCursor   
			INTO @FieldName
		END   
		CLOSE fieldCursor;  
		DEALLOCATE fieldCursor;  
		

		UPDATE dbo.InputAreaField
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE InputTypeId = @InputTypeId
			AND InputAreaId = @InputAreaId
		
		SET @ResStatus = 1
	COMMIT TRANSACTION
END


GO

USE AccountancyPublicDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_sumVndByTk]
(
	@SubId int,
	@tk_no nvarchar(max),
	@tk_co nvarchar(max),	
	@FromDate datetime2,
	@ToDate datetime2,
	@Thue_suat_VAT INT = NULL,
	@IsNotVat BIT = NULL,
	@Exist_Tk_No NVARCHAR(128) = NULL,
	@exp_tk_no nvarchar(max)='',
	@exp_tk_co nvarchar(max)='',	
	@Result decimal(18,5) OUTPUT
) WITH RECOMPILE
AS
BEGIN
		
	DECLARE @WhereTkNo nvarchar(max) = ''
	DECLARE @WhereTkCo nvarchar(max) = ''

	DECLARE @WhereExpTkNo nvarchar(max) = ''
	DECLARE @WhereExpTkCo nvarchar(max) = ''

	DECLARE @Sql nvarchar(max) = ''

	IF LEN(@tk_no)>0
	BEGIN
		IF @tk_no = '-'
		BEGIN
			SELECT @WhereTkNo += ' OR (tk_no IS NOT NULL AND tk_no <> '''')';
		END
		ELSE
		BEGIN
			SELECT @WhereTkNo += ' OR tk_no LIKE ''' + LTRIM(RTRIM([Value])) + '%''' FROM dbo.ufn_Split(@tk_no,',')
		END
	END

	IF LEN(@tk_co)>0
	BEGIN
		IF @tk_co = '-'
		BEGIN
			SELECT @WhereTkCo += ' OR (tk_co IS NOT NULL AND tk_co <> '''')';
		END
		ELSE
		BEGIN
			SELECT @WhereTkCo += ' OR tk_co LIKE ''' + LTRIM(RTRIM([Value])) + '%''' FROM dbo.ufn_Split(@tk_co,',')
		END
	END


	IF LEN(@exp_tk_no)>0
	BEGIN		
		SELECT @WhereExpTkNo += ' AND tk_no NOT LIKE ''' + LTRIM(RTRIM([Value])) + '%''' FROM dbo.ufn_Split(@exp_tk_no,',')		
	END

	IF LEN(@exp_tk_co)>0
	BEGIN
		SELECT @WhereExpTkCo += ' AND tk_co NOT LIKE ''' + LTRIM(RTRIM([Value])) + '%''' FROM dbo.ufn_Split(@exp_tk_co,',')	
	END

	SET @Sql = '
	SELECT @Result = SUM(Vnd) 
	FROM dbo._rc t WITH(NOLOCK)
	WHERE t.SubsidiaryId = @SubId AND [Ngay_ct] BETWEEN @FromDate AND @ToDate	
	';

	IF (LEN(@WhereTkNo)>0)
	BEGIN		
		SET @Sql += ' AND (1=0 ' + @WhereTkNo + ')'
	END

	IF (LEN(@WhereTkCo)>0)
	BEGIN		
		SET @Sql += ' AND (1=0 ' + @WhereTkCo + ')'
	END

	 SET @Sql += @WhereExpTkNo + @WhereExpTkCo

	IF (@Thue_suat_VAT IS NOT NULL)
	BEGIN
		IF (@Thue_suat_VAT = 0)
		BEGIN
			SET @Sql += ' AND (Thue_suat_VAT IS NULL OR Thue_suat_VAT = 0)'
		END
		ELSE
		BEGIN
			SET @Sql += CONCAT(' AND Thue_suat_VAT = ', @Thue_suat_VAT)
		END
	END

	IF (@IsNotVat IS NOT NULL)
	BEGIN
		SET @Sql += CONCAT(' AND Not_VAT = ', @IsNotVat)
	END
	
	IF @Exist_Tk_No IS NOT NULL
	BEGIN
		SET @Sql += CONCAT(' AND EXISTS(SELECT 0 FROM dbo._rc c WHERE t.InputBill_F_Id = c.InputBill_F_Id AND c.tk_no LIKE ''', @Exist_Tk_No,'%'') ')
	END

	SET @Sql += ' OPTION(RECOMPILE)'
	PRINT @Sql
	EXEC sp_executesql @Sql, 
	N'	@SubId int,
		@Result DECIMAL(18,5) OUT,
		@FromDate DATETIME2,
		@ToDate DATETIME2
	'
	, @SubId = @SubId
	, @Result = @Result OUT
	, @FromDate = @FromDate
	, @ToDate = @ToDate;

END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[fnNumberToWords_VN]
(
    @Number AS BIGINT,
    @Exception AS INT	-- 0: @Below20, 1: @Below20_VN
) RETURNS NVARCHAR(MAX)

AS

BEGIN

    DECLARE @Below20 TABLE (ID INT IDENTITY(0,1), Word NVARCHAR(32))

    DECLARE @Below100 TABLE (ID INT IDENTITY(2,1), Word NVARCHAR(32))
    
    DECLARE @Below20_VN TABLE (ID INT IDENTITY(0,1), Word NVARCHAR(32))

    DECLARE @BelowHundred AS NVARCHAR(MAX) 

    INSERT @Below20 (Word) VALUES (N'không')
    INSERT @Below20 (Word) VALUES (N'một')
    INSERT @Below20 (Word) VALUES (N'hai')
    INSERT @Below20 (Word) VALUES (N'ba')
    INSERT @Below20 (Word) VALUES (N'bốn')
    INSERT @Below20 (Word) VALUES (N'năm')
    INSERT @Below20 (Word) VALUES (N'sáu')
    INSERT @Below20 (Word) VALUES (N'bảy')
    INSERT @Below20 (Word) VALUES (N'tám')
    INSERT @Below20 (Word) VALUES (N'chín')
    INSERT @Below20 (Word) VALUES (N'mười')
    INSERT @Below20 (Word) VALUES (N'mười một')
    INSERT @Below20 (Word) VALUES (N'mười hai')
    INSERT @Below20 (Word) VALUES (N'mười ba')
    INSERT @Below20 (Word) VALUES (N'mười bốn')
    INSERT @Below20 (Word) VALUES (N'mười lăm')
    INSERT @Below20 (Word) VALUES (N'mười sáu')
    INSERT @Below20 (Word) VALUES (N'mười bảy')
    INSERT @Below20 (Word) VALUES (N'mười tám')
    INSERT @Below20 (Word) VALUES (N'mười chín')

    INSERT @Below100 VALUES (N'hai mươi')
    INSERT @Below100 VALUES (N'ba mươi')
    INSERT @Below100 VALUES (N'bốn mươi')
    INSERT @Below100 VALUES (N'năm mươi')
    INSERT @Below100 VALUES (N'sáu mươi')
    INSERT @Below100 VALUES (N'bảy mươi')
    INSERT @Below100 VALUES (N'tám mươi')
    INSERT @Below100 VALUES (N'chín mươi')

    INSERT @Below20_VN (Word) VALUES (N'không')
    INSERT @Below20_VN (Word) VALUES (N'mốt')		-- be used
    INSERT @Below20_VN (Word) VALUES (N'hai')
    INSERT @Below20_VN (Word) VALUES (N'ba')
    INSERT @Below20_VN (Word) VALUES (N'tư')		-- be used		
    INSERT @Below20_VN (Word) VALUES (N'lăm')		-- be used

    IF @Number > 99
    BEGIN
        SELECT @belowHundred = dbo.fnNumberToWords_VN(@Number % 100, 0)
    END

    DECLARE @NumberInWords NVARCHAR(MAX)

    SET @NumberInWords  = 
    (
      SELECT
        CASE 
            WHEN @Number = 0 THEN  ''
            WHEN @Number BETWEEN 1 AND 19 
				THEN (
						CASE  
							WHEN @Exception = 0 THEN (SELECT Word FROM @Below20 WHERE ID = @Number)
							ELSE (SELECT Word FROM @Below20_VN WHERE ID = @Number)
						END
					)
            WHEN @Number BETWEEN 20 AND 99
                THEN (SELECT Word FROM @Below100 WHERE ID = @Number/10) + ' ' + dbo.fnNumberToWords_VN(@Number % 10, 1) 
            WHEN @Number BETWEEN 100 AND 999 
                THEN (dbo.fnNumberToWords_VN(@Number / 100, 0)) + N' trăm ' + 
					(
						CASE 
							WHEN (@Number % 100) < 10 THEN N'linh '
							ELSE ''
						END
					) + @belowHundred
            WHEN @Number BETWEEN 1000 AND 999999 
                THEN (dbo.fnNumberToWords_VN(@Number / 1000, 0))+ N' nghìn '+ dbo.fnNumberToWords_VN(@Number % 1000, 0)  
            WHEN @Number BETWEEN 1000000 AND 999999999 
                THEN (dbo.fnNumberToWords_VN(@Number / 1000000, 0)) + N' triệu '+ dbo.fnNumberToWords_VN(@Number % 1000000, 0) 
            WHEN @Number BETWEEN 1000000000 AND 999999999999 
                THEN (dbo.fnNumberToWords_VN(@Number / 1000000000, 0))+ N' tỷ '+ dbo.fnNumberToWords_VN(@Number % 1000000000, 0) 
            ELSE N' INVALID INPUT'
        END
    )
    
    RETURN (@NumberInWords)
    
/**
Hỏi một câu các bác đừng cười. Quả thật là mình không còn nhớ quy tắc viết số 5 trong một dãy số như thế nào cho đúng nữa rồi ~X(
Nhờ bác nào còn nhớ thì có thể nhắc lại cho biết được không
Ví dụ dãy số này chẳng hạn thì viết thế nào : 1.505.555.005
15, 205 ...

Viết? Ý bạn là "viết bằng chữ" như cái dòng ký nhận tiền khi ... ra ngân hàng ý hả ;))
1.505.555.005: Một tỉ, năm trăm linh năm triệu, năm trăm năm mươi lăm nghìn, không trăm linh năm
15: mười lăm
205: hai trăm linh năm
Còn gì nữa không? đang muốn ngủ chiều, tiện thể đỡ phải đếm cừu :))

p/s còn quy tắc ý hả, ví dụ trong cụm 3 số ***
- Nếu là 5XX: viết là năm
- Nếu là X5X: viết là năm
- Nếu là XY5: Y>0: lăm; Y=0: năm
**/

END




GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_AmountToWords_VN]
( 
	@Amount BIGINT
) RETURNS NVARCHAR(4000)

AS

BEGIN	
	DECLARE @AmountInWords NVARCHAR(4000)
	
	IF dbo.fnNumberToWords_VN(@Amount, 0) <> ''
		SELECT @AmountInWords = dbo.fnNumberToWords_VN(@Amount, 0) + N' đồng chẵn.'	
	
    IF ISNULL(@AmountInWords, '') <> ''
		SELECT @AmountInWords = UPPER(LEFT(@AmountInWords, 1)) + RIGHT(@AmountInWords, LEN(@AmountInWords) - 1)
	
	RETURN (@AmountInWords)

END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputValueRow_Delete_Version]
	@InputTypeId int,
	@InputBill_F_Id bigint,
	@BillVersion INT,
	@UserId int,
	@ResStatus int OUTPUT,
	@SubId int
AS
BEGIN
	UPDATE InputValueRow 
		SET IsDeleted			= 1, 
			DeletedDatetimeUtc	= GETUTCDATE(),
			UpdatedByUserId		= @UserId
		WHERE --InputTypeId		= @InputTypeId
			--AND
			InputBill_F_Id  = @InputBill_F_Id
			AND BillVersion		<= @BillVersion
			AND IsDeleted = 0
			AND SubsidiaryId = @SubId;
			
	SET @ResStatus = 1
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_InputValueRow_UpdateView]
AS
BEGIN
	DECLARE @SelectColumn nvarchar(max) = '	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vInputBill.F_Id					AS InputBill_F_Id,
		vInputBill.CreatedByUserId		AS CreatedByUserId,
		vInputBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vInputBill.UpdatedByUserId		AS UpdatedByUserId,
		vInputBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vInputBill.LatestBillVersion	AS LatestBillVersion,
		

		row.InputTypeId					AS InputTypeId,
		vInputType.Title				AS InputType_Title,
		vInputType.IsOpenning			AS InputType_IsOpenning,
		vInputType.InputTypeCode		AS InputType_InputTypeCode
	
	';
	DECLARE @Join nvarchar(max) = '
		FROM InputValueRow as row WITH(NOLOCK)
			JOIN vInputBill WITH(NOLOCK) ON row.InputBill_F_Id		= vInputBill.F_Id
			JOIN vInputType WITH(NOLOCK) ON row.InputTypeId		= vInputType.F_Id	
	';

	DECLARE @BillRowSelectColumn nvarchar(max) = @SelectColumn;
	DECLARE @BillRowJoin nvarchar(max) = @Join;
	

	DECLARE @ViewOnlyFormTypeId INT = 6

	DECLARE @SelectFormTypeId INT = 2
	DECLARE @SearchTableFormTypeId INT = 4

	DECLARE @FieldName nvarchar(128)
	DECLARE @RefTableCode nvarchar(128)
	DECLARE @RefTableField nvarchar(128)
	DECLARE @RefTableTitle nvarchar(512)
	DECLARE @FormTypeId INT
	
	DECLARE fieldCursor CURSOR FOR   
    SELECT FieldName, RefTableCode, RefTableField, RefTableTitle, FormTypeId FROM InputField  WHERE FormTypeId <> @ViewOnlyFormTypeId AND IsDeleted = 0
  
    OPEN fieldCursor  
    FETCH NEXT FROM fieldCursor INTO @FieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
  
    IF @@FETCH_STATUS <> 0   
        PRINT '         <<None>>'       
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
		
		
		SET @SelectColumn += ',  [row].[' + @FieldName+']'
		SET @BillRowSelectColumn += ',  [row].[' + @FieldName+']'		
		
		IF LEN(@RefTableCode)>0 AND @FormTypeId IN(@SelectFormTypeId,@SearchTableFormTypeId)
		BEGIN
			IF LEN(@RefTableTitle)>0
			BEGIN
				SELECT @SelectColumn += ', [v' + @FieldName +'].[' + LTRIM(RTRIM([Value])) + '] AS [' + @FieldName + '_' + LTRIM(RTRIM([Value])) +']' FROM dbo.ufn_Split(@RefTableTitle,',');
				SET @Join += ' LEFT JOIN [v' +@RefTableCode + '] as [v'+@FieldName+'] WITH(NOLOCK) ON [row].['+@FieldName+'] = [v' + @FieldName+'].['+@RefTableField+']';
			END
		END

        FETCH NEXT FROM fieldCursor INTO @FieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
        END  
  
    CLOSE fieldCursor  
    DEALLOCATE fieldCursor     
	
	DECLARE @Sql nvarchar(max)

	DROP VIEW IF EXISTS vInputBillRow;
	SET @Sql = 'CREATE VIEW vInputBillRow AS 
	SELECT  ' + @BillRowSelectColumn + 
	@BillRowJoin + '
	WHERE [row].IsDeleted = 0
	';

	PRINT @Sql
	EXEC (@Sql)


	DROP VIEW IF EXISTS vInputValueRow;
	SET @Sql = 'CREATE VIEW vInputValueRow AS 
	SELECT ' + @SelectColumn + 
	@Join + '
	WHERE [row].IsDeleted = 0
	';

	PRINT @Sql
	EXEC (@Sql)

	DROP VIEW IF EXISTS vInputValueRowPrivate;
	SET @Sql = 'CREATE VIEW vInputValueRowPrivate
		AS
		SELECT 
			v.*,
			CASE WHEN pb.So_ct_goc IS NOT NULL THEN 1 ELSE 0 END IsPublicCreated,
			CASE WHEN pb.So_ct_goc IS NOT NULL THEN N''Đã tạo'' ELSE N''Chưa tạo'' END IsPublicCreatedTitle			
		FROM dbo.vInputValueRow v
		LEFT JOIN (
				SELECT	pb.So_ct_goc
				FROM AccountancyPublicDB.dbo.InputValueRow pb
				WHERE IsDeleted = 0
				GROUP BY pb.So_ct_goc
		) pb ON v.so_ct = pb.So_ct_goc';

	PRINT @Sql
	EXEC (@Sql)


	EXEC asp_InputType_UpdateView_Rc
	EXEC asp_InputType_UpdateView_Rc_detail
END

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[vInputBill]
AS
SELECT        F_Id, InputTypeId, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, IsDeleted, DeletedDatetimeUtc, LatestBillVersion, SubsidiaryId, BillCode
FROM            dbo.InputBill
WHERE        (IsDeleted = 0)


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[vInputType]
AS
SELECT        InputTypeId AS F_Id, InputTypeGroupId, Title, InputTypeCode, SortOrder, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, IsDeleted, DeletedDatetimeUtc, PreLoadAction, PostLoadAction, 
                         IsOpenning
FROM            dbo.InputType



GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Customer] AS 
							SELECT
    CustomerId F_Id,
    CustomerCode,
    CustomerName,
    Email,
    PhoneNumber,
    TaxIdNo,
    CustomerStatusId,
    CustomerTypeId,
    Address,
    Website
FROM [OrganizationDB].[dbo].Customer
WHERE IsDeleted = 0


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_Tonghopcongno]
  @FromDate AS datetime2 ,
  @ToDate AS datetime2 
AS
BEGIN
	SELECT chung.Ma_kh0, c.CustomerCode, chung.Ten_kh0, dau_ky.Du_no_dau_ky , dau_ky.Du_co_dau_ky , trong_ky.Phat_sinh_no, trong_ky.Phat_sinh_co, 
	CASE 
		WHEN (ISNULL(dau_ky.Du_no_dau_ky, 0) + ISNULL(trong_ky.Phat_sinh_no, 0)) = 0 THEN NULL
		ELSE (ISNULL(dau_ky.Du_no_dau_ky, 0) + ISNULL(trong_ky.Phat_sinh_no, 0))
	END AS Du_no_cuoi_ky,
	CASE 
		WHEN (ISNULL(dau_ky.Du_co_dau_ky, 0) + ISNULL(trong_ky.Phat_sinh_co, 0)) = 0 THEN NULL
		ELSE (ISNULL(dau_ky.Du_co_dau_ky, 0) + ISNULL(trong_ky.Phat_sinh_co, 0))
	END AS Du_co_cuoi_ky  
	FROM
	(SELECT DISTINCT d.Ma_kh0, d.Ten_kh0 FROM vDetailReport d WHERE d.Tk_AccountNumber LIKE '131%') chung
	LEFT JOIN v_Customer c ON chung.Ma_kh0 = c.F_Id
	LEFT JOIN
	(SELECT d1.Ma_kh0, SUM(d1.Vnd_no) Du_no_dau_ky, SUM(d1.Vnd_co) Du_co_dau_ky FROM vDetailReport d1 WHERE d1.Tk_AccountNumber LIKE '131%' AND d1.Ngay_ct <  @FromDate GROUP BY d1.Ma_kh0) dau_ky ON chung.Ma_kh0 = dau_ky.Ma_kh0
	LEFT JOIN
	(SELECT d2.Ma_kh0, SUM(d2.Vnd_no) Phat_sinh_no, SUM(d2.Vnd_co) Phat_sinh_co FROM vDetailReport d2 WHERE d2.Tk_AccountNumber LIKE '131%' AND d2.Ngay_ct >=  @FromDate AND d2.Ngay_ct <= @ToDate GROUP BY d2.Ma_kh0) trong_ky ON chung.Ma_kh0 = trong_ky.Ma_kh0

END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[vInputBillRow] AS 
	SELECT  	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vInputBill.F_Id					AS InputBill_F_Id,
		vInputBill.CreatedByUserId		AS CreatedByUserId,
		vInputBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vInputBill.UpdatedByUserId		AS UpdatedByUserId,
		vInputBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vInputBill.LatestBillVersion	AS LatestBillVersion,
		

		row.InputTypeId					AS InputTypeId,
		vInputType.Title				AS InputType_Title,
		vInputType.IsOpenning			AS InputType_IsOpenning,
		vInputType.InputTypeCode		AS InputType_InputTypeCode
	
	,  [row].[ngay_ct],  [row].[so_ct],  [row].[mau_hd],  [row].[seri_hd],  [row].[ngay_hd],  [row].[attachment],  [row].[loai_tien],  [row].[ty_gia],  [row].[tk_no0],  [row].[tk_co0],  [row].[ong_ba],  [row].[dia_chi],  [row].[bo_phan],  [row].[kh0],  [row].[kh_co0],  [row].[stt],  [row].[noi_dung],  [row].[vthhtp],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[thue_suat_vat],  [row].[ghi_chu],  [row].[kho],  [row].[kho_lc],  [row].[khe_uoc_vay],  [row].[tk_thu_kbnn],  [row].[ma_chuong_nsnn],  [row].[ma_muc_nsnn],  [row].[cong_trinh],  [row].[phan_xuong],  [row].[khoan_muc_cp],  [row].[khoan_muc_tc],  [row].[po_code],  [row].[order_code],  [row].[ma_lsx],  [row].[dien_giai],  [row].[thue_suat_xnk],  [row].[vnd3],  [row].[vnd1],  [row].[sl_po],  [row].[sl_od],  [row].[sl_ycvt],  [row].[tk_no1],  [row].[tk_co1],  [row].[tk_no2],  [row].[tk_co2],  [row].[tk_no3],  [row].[tk_co3],  [row].[tscd],  [row].[kh1],  [row].[kh3],  [row].[tknh],  [row].[tknh_kh],  [row].[ky_hieu_hd],  [row].[ma_link_hd],  [row].[constrain_ty_gia],  [row].[vthhtp_dvt2],  [row].[so_luong_dv2],  [row].[don_gia_dv2_0],  [row].[dv_ql_hc],  [row].[constrain_sl_dg],  [row].[vnd2],  [row].[tk_no4],  [row].[tk_co4],  [row].[vnd4],  [row].[sum_vnd0],  [row].[sum_vnd1],  [row].[sum_vnd2],  [row].[sum_vnd3],  [row].[sum_vnd4],  [row].[sum_vnd5],  [row].[test01],  [row].[don_gia1],  [row].[don_gia2],  [row].[don_gia3],  [row].[don_gia4],  [row].[don_gia5],  [row].[don_gia_dvt2_1],  [row].[don_gia_dvt2_2],  [row].[don_gia_dvt2_3],  [row].[don_gia_dvt2_4],  [row].[Not_VAT],  [row].[CensorStatusId],  [row].[CheckStatusId],  [row].[sl_lsx],  [row].[CensorUserId],  [row].[CensorDatetimeUtc],  [row].[cptt],  [row].[kh4],  [row].[Mat_hang_VAT],  [row].[kh_co1],  [row].[ngoai_te1],  [row].[So_ct_goc]
		FROM InputValueRow as row WITH(NOLOCK)
			JOIN vInputBill WITH(NOLOCK) ON row.InputBill_F_Id		= vInputBill.F_Id
			JOIN vInputType WITH(NOLOCK) ON row.InputTypeId		= vInputType.F_Id	
	
	WHERE [row].IsDeleted = 0
	

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[_rc] AS 
	
	SELECT d.F_Id,d.IsBillEntry,d.SubsidiaryId,d.InputBill_F_Id,d.CreatedByUserId,d.CreatedDatetimeUtc,d.UpdatedByUserId,d.UpdatedDatetimeUtc,d.LatestBillVersion,d.InputTypeId,d.InputType_Title,d.InputType_IsOpenning,d.InputType_InputTypeCode,d.ngay_ct,d.so_ct,d.mau_hd,d.seri_hd,d.ngay_hd,d.attachment,d.loai_tien,d.ty_gia,d.tk_no0,d.tk_co0,d.ong_ba,d.dia_chi,d.bo_phan,d.kh0,d.kh_co0,d.stt,d.noi_dung,d.vthhtp,d.so_luong,d.don_gia0,d.ngoai_te0,d.vnd0,d.thue_suat_vat,d.ghi_chu,d.kho,d.kho_lc,d.khe_uoc_vay,d.tk_thu_kbnn,d.ma_chuong_nsnn,d.ma_muc_nsnn,d.cong_trinh,d.phan_xuong,d.khoan_muc_cp,d.khoan_muc_tc,d.po_code,d.order_code,d.ma_lsx,d.dien_giai,d.thue_suat_xnk,d.vnd3,d.vnd1,d.sl_po,d.sl_od,d.sl_ycvt,d.tk_no1,d.tk_co1,d.tk_no2,d.tk_co2,d.tk_no3,d.tk_co3,d.tscd,d.kh1,d.kh3,d.tknh,d.tknh_kh,d.ky_hieu_hd,d.ma_link_hd,d.constrain_ty_gia,d.vthhtp_dvt2,d.so_luong_dv2,d.don_gia_dv2_0,d.dv_ql_hc,d.constrain_sl_dg,d.vnd2,d.tk_no4,d.tk_co4,d.vnd4,d.sum_vnd0,d.sum_vnd1,d.sum_vnd2,d.sum_vnd3,d.sum_vnd4,d.sum_vnd5,d.test01,d.don_gia1,d.don_gia2,d.don_gia3,d.don_gia4,d.don_gia5,d.don_gia_dvt2_1,d.don_gia_dvt2_2,d.don_gia_dvt2_3,d.don_gia_dvt2_4,d.Not_VAT,d.CensorStatusId,d.CheckStatusId,d.sl_lsx,d.CensorUserId,d.CensorDatetimeUtc,d.cptt,d.kh4,d.Mat_hang_VAT,d.kh_co1,d.ngoai_te1,d.So_ct_goc, NULL AS loai_tien0, NULL AS ty_gia0, NULL AS loai_tien1, NULL AS ty_gia1, NULL AS kh2, NULL AS kh_co2, NULL AS loai_tien2, NULL AS ty_gia2, NULL AS ngoai_te2, NULL AS kh_co3, NULL AS loai_tien3, NULL AS ty_gia3, NULL AS ngoai_te3, NULL AS kh_co4, NULL AS loai_tien4, NULL AS ty_gia4, NULL AS ngoai_te4, NULL AS kh5, NULL AS kh_co5, NULL AS loai_tien5, NULL AS tk_co5, NULL AS tk_no5, NULL AS ty_gia5, NULL AS vnd5, NULL AS ngoai_te5

	, c.kh_no
	, c.kh_co
	, c.loai_tien_nt
	, c.tk_co
	, c.tk_no
	, c.don_gia
	, c.vnd
	, c.ngoai_te
	, c.BUT_TOAN

	FROM dbo.vInputBillRow d WITH(NOLOCK)
	
	CROSS APPLY
	(
		
			SELECT ISNULL(kh0, kh0) AS kh0,ISNULL(kh_co0, ISNULL(kh0,ISNULL(kh_co0,kh0))) AS kh_co0,NULL AS loai_tien0,tk_co0,tk_no0, NULL AS ty_gia0,don_gia0,vnd0,ngoai_te0,0 AS BUT_TOAN			
			WHERE Vnd0 <> 0 OR (tk_co0 IS NOT NULL AND tk_no0 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co0 IS NOT NULL OR tk_no0 IS NOT NULL))
			UNION ALL
			SELECT ISNULL(kh1, kh0) AS kh1,ISNULL(kh_co1, ISNULL(kh1,ISNULL(kh_co0,kh0))) AS kh_co1,NULL AS loai_tien1,tk_co1,tk_no1, NULL AS ty_gia1,don_gia1,vnd1,ngoai_te1,1 AS BUT_TOAN			
			WHERE Vnd1 <> 0 OR (tk_co1 IS NOT NULL AND tk_no1 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co1 IS NOT NULL OR tk_no1 IS NOT NULL))
			UNION ALL
			SELECT kh0 AS kh2,ISNULL(NULL,ISNULL(kh_co0,kh0)) AS kh_co2,NULL AS loai_tien2,tk_co2,tk_no2, NULL AS ty_gia2,don_gia2,vnd2, NULL AS ngoai_te2,2 AS BUT_TOAN			
			WHERE Vnd2 <> 0 OR (tk_co2 IS NOT NULL AND tk_no2 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co2 IS NOT NULL OR tk_no2 IS NOT NULL))
			UNION ALL
			SELECT ISNULL(kh3, kh0) AS kh3,ISNULL(kh3,ISNULL(kh_co0,kh0)) AS kh_co3,NULL AS loai_tien3,tk_co3,tk_no3, NULL AS ty_gia3,don_gia3,vnd3, NULL AS ngoai_te3,3 AS BUT_TOAN			
			WHERE Vnd3 <> 0 OR (tk_co3 IS NOT NULL AND tk_no3 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co3 IS NOT NULL OR tk_no3 IS NOT NULL))
			UNION ALL
			SELECT ISNULL(kh4, kh0) AS kh4,ISNULL(kh4,ISNULL(kh_co0,kh0)) AS kh_co4,NULL AS loai_tien4,tk_co4,tk_no4, NULL AS ty_gia4,don_gia4,vnd4, NULL AS ngoai_te4,4 AS BUT_TOAN			
			WHERE Vnd4 <> 0 OR (tk_co4 IS NOT NULL AND tk_no4 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co4 IS NOT NULL OR tk_no4 IS NOT NULL))

	) c (kh_no, kh_co, loai_tien_nt, tk_co, tk_no, ty_gia, don_gia, vnd, ngoai_te, BUT_TOAN)
	 WHERE d.CensorStatusId = 1 ;

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[_rc_all] AS 
	
	SELECT d.F_Id,d.IsBillEntry,d.SubsidiaryId,d.InputBill_F_Id,d.CreatedByUserId,d.CreatedDatetimeUtc,d.UpdatedByUserId,d.UpdatedDatetimeUtc,d.LatestBillVersion,d.InputTypeId,d.InputType_Title,d.InputType_IsOpenning,d.InputType_InputTypeCode,d.ngay_ct,d.so_ct,d.mau_hd,d.seri_hd,d.ngay_hd,d.attachment,d.loai_tien,d.ty_gia,d.tk_no0,d.tk_co0,d.ong_ba,d.dia_chi,d.bo_phan,d.kh0,d.kh_co0,d.stt,d.noi_dung,d.vthhtp,d.so_luong,d.don_gia0,d.ngoai_te0,d.vnd0,d.thue_suat_vat,d.ghi_chu,d.kho,d.kho_lc,d.khe_uoc_vay,d.tk_thu_kbnn,d.ma_chuong_nsnn,d.ma_muc_nsnn,d.cong_trinh,d.phan_xuong,d.khoan_muc_cp,d.khoan_muc_tc,d.po_code,d.order_code,d.ma_lsx,d.dien_giai,d.thue_suat_xnk,d.vnd3,d.vnd1,d.sl_po,d.sl_od,d.sl_ycvt,d.tk_no1,d.tk_co1,d.tk_no2,d.tk_co2,d.tk_no3,d.tk_co3,d.tscd,d.kh1,d.kh3,d.tknh,d.tknh_kh,d.ky_hieu_hd,d.ma_link_hd,d.constrain_ty_gia,d.vthhtp_dvt2,d.so_luong_dv2,d.don_gia_dv2_0,d.dv_ql_hc,d.constrain_sl_dg,d.vnd2,d.tk_no4,d.tk_co4,d.vnd4,d.sum_vnd0,d.sum_vnd1,d.sum_vnd2,d.sum_vnd3,d.sum_vnd4,d.sum_vnd5,d.test01,d.don_gia1,d.don_gia2,d.don_gia3,d.don_gia4,d.don_gia5,d.don_gia_dvt2_1,d.don_gia_dvt2_2,d.don_gia_dvt2_3,d.don_gia_dvt2_4,d.Not_VAT,d.CensorStatusId,d.CheckStatusId,d.sl_lsx,d.CensorUserId,d.CensorDatetimeUtc,d.cptt,d.kh4,d.Mat_hang_VAT,d.kh_co1,d.ngoai_te1,d.So_ct_goc, NULL AS loai_tien0, NULL AS ty_gia0, NULL AS loai_tien1, NULL AS ty_gia1, NULL AS kh2, NULL AS kh_co2, NULL AS loai_tien2, NULL AS ty_gia2, NULL AS ngoai_te2, NULL AS kh_co3, NULL AS loai_tien3, NULL AS ty_gia3, NULL AS ngoai_te3, NULL AS kh_co4, NULL AS loai_tien4, NULL AS ty_gia4, NULL AS ngoai_te4, NULL AS kh5, NULL AS kh_co5, NULL AS loai_tien5, NULL AS tk_co5, NULL AS tk_no5, NULL AS ty_gia5, NULL AS vnd5, NULL AS ngoai_te5

	, c.kh_no
	, c.kh_co
	, c.loai_tien_nt
	, c.tk_co
	, c.tk_no
	, c.don_gia
	, c.vnd
	, c.ngoai_te
	, c.BUT_TOAN

	FROM dbo.vInputBillRow d WITH(NOLOCK)
	
	CROSS APPLY
	(
		
			SELECT ISNULL(kh0, kh0) AS kh0,ISNULL(kh_co0, ISNULL(kh0,ISNULL(kh_co0,kh0))) AS kh_co0,NULL AS loai_tien0,tk_co0,tk_no0, NULL AS ty_gia0,don_gia0,vnd0,ngoai_te0,0 AS BUT_TOAN			
			WHERE Vnd0 <> 0 OR (tk_co0 IS NOT NULL AND tk_no0 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co0 IS NOT NULL OR tk_no0 IS NOT NULL))
			UNION ALL
			SELECT ISNULL(kh1, kh0) AS kh1,ISNULL(kh_co1, ISNULL(kh1,ISNULL(kh_co0,kh0))) AS kh_co1,NULL AS loai_tien1,tk_co1,tk_no1, NULL AS ty_gia1,don_gia1,vnd1,ngoai_te1,1 AS BUT_TOAN			
			WHERE Vnd1 <> 0 OR (tk_co1 IS NOT NULL AND tk_no1 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co1 IS NOT NULL OR tk_no1 IS NOT NULL))
			UNION ALL
			SELECT kh0 AS kh2,ISNULL(NULL,ISNULL(kh_co0,kh0)) AS kh_co2,NULL AS loai_tien2,tk_co2,tk_no2, NULL AS ty_gia2,don_gia2,vnd2, NULL AS ngoai_te2,2 AS BUT_TOAN			
			WHERE Vnd2 <> 0 OR (tk_co2 IS NOT NULL AND tk_no2 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co2 IS NOT NULL OR tk_no2 IS NOT NULL))
			UNION ALL
			SELECT ISNULL(kh3, kh0) AS kh3,ISNULL(kh3,ISNULL(kh_co0,kh0)) AS kh_co3,NULL AS loai_tien3,tk_co3,tk_no3, NULL AS ty_gia3,don_gia3,vnd3, NULL AS ngoai_te3,3 AS BUT_TOAN			
			WHERE Vnd3 <> 0 OR (tk_co3 IS NOT NULL AND tk_no3 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co3 IS NOT NULL OR tk_no3 IS NOT NULL))
			UNION ALL
			SELECT ISNULL(kh4, kh0) AS kh4,ISNULL(kh4,ISNULL(kh_co0,kh0)) AS kh_co4,NULL AS loai_tien4,tk_co4,tk_no4, NULL AS ty_gia4,don_gia4,vnd4, NULL AS ngoai_te4,4 AS BUT_TOAN			
			WHERE Vnd4 <> 0 OR (tk_co4 IS NOT NULL AND tk_no4 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co4 IS NOT NULL OR tk_no4 IS NOT NULL))

	) c (kh_no, kh_co, loai_tien_nt, tk_co, tk_no, ty_gia, don_gia, vnd, ngoai_te, BUT_TOAN)
	

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[_rc_detail] AS  
    SELECT F_Id,IsBillEntry,SubsidiaryId,InputBill_F_Id,CreatedByUserId,CreatedDatetimeUtc,UpdatedByUserId,UpdatedDatetimeUtc,LatestBillVersion,InputTypeId,InputType_Title,InputType_IsOpenning,InputType_InputTypeCode,ngay_ct,so_ct,mau_hd,seri_hd,ngay_hd,attachment,loai_tien,ty_gia,tk_no0,tk_co0,ong_ba,dia_chi,bo_phan,kh0,kh_co0,stt,noi_dung,vthhtp,so_luong,don_gia0,ngoai_te0,vnd0,thue_suat_vat,ghi_chu,kho,kho_lc,khe_uoc_vay,tk_thu_kbnn,ma_chuong_nsnn,ma_muc_nsnn,cong_trinh,phan_xuong,khoan_muc_cp,khoan_muc_tc,po_code,order_code,ma_lsx,dien_giai,thue_suat_xnk,vnd3,vnd1,sl_po,sl_od,sl_ycvt,tk_no1,tk_co1,tk_no2,tk_co2,tk_no3,tk_co3,tscd,kh1,kh3,tknh,tknh_kh,ky_hieu_hd,ma_link_hd,constrain_ty_gia,vthhtp_dvt2,so_luong_dv2,don_gia_dv2_0,dv_ql_hc,constrain_sl_dg,vnd2,tk_no4,tk_co4,vnd4,sum_vnd0,sum_vnd1,sum_vnd2,sum_vnd3,sum_vnd4,sum_vnd5,test01,don_gia1,don_gia2,don_gia3,don_gia4,don_gia5,don_gia_dvt2_1,don_gia_dvt2_2,don_gia_dvt2_3,don_gia_dvt2_4,Not_VAT,CensorStatusId,CheckStatusId,sl_lsx,CensorUserId,CensorDatetimeUtc,cptt,kh4,Mat_hang_VAT,kh_co1,ngoai_te1,So_ct_goc, c.Tk, c.Tk_du, c.IsDebt, c.don_gia, c.Vnd_no, c.Vnd_co, c.Ngoai_te_no, c.Ngoai_te_co, c.kh, c.BUT_TOAN FROM vInputBillRow r WITH(NOLOCK)
    CROSS APPLY
    ( 
						SELECT r.tk_no0 Tk, r.tk_co0 Tk_du, 1 AS IsDebt, r.don_gia0 don_gia, r.vnd0 Vnd_no, NULL Vnd_co, r.ngoai_te0 Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh0, r.kh0) kh, 0 AS BUT_TOAN WHERE ((r.vnd0 <> 0 OR InputType_IsOpenning =1) OR r.tk_co0 IS NOT NULL) AND (r.tk_no0 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co0 Tk, r.tk_no0 Tk_du, 0 AS IsDebt, r.don_gia0 don_gia, NULL Vnd_no, r.vnd0 Vnd_co, NULL Ngoai_te_no,r.ngoai_te0 Ngoai_te_co, ISNULL(r.kh_co0,ISNULL(r.kh0,ISNULL(r.kh_co0, r.kh0))) kh, 0 AS BUT_TOAN WHERE ((r.vnd0<> 0 OR InputType_IsOpenning =1) OR r.tk_no0 IS NOT NULL) AND (r.tk_co0 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no1 Tk, r.tk_co1 Tk_du, 1 AS IsDebt, r.don_gia1 don_gia, r.vnd1 Vnd_no, NULL Vnd_co, r.ngoai_te1 Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh1, r.kh0) kh, 1 AS BUT_TOAN WHERE ((r.vnd1 <> 0 OR InputType_IsOpenning =1) OR r.tk_co1 IS NOT NULL) AND (r.tk_no1 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co1 Tk, r.tk_no1 Tk_du, 0 AS IsDebt, r.don_gia1 don_gia, NULL Vnd_no, r.vnd1 Vnd_co, NULL Ngoai_te_no,r.ngoai_te1 Ngoai_te_co, ISNULL(r.kh_co1,ISNULL(r.kh1,ISNULL(r.kh_co0, r.kh0))) kh, 1 AS BUT_TOAN WHERE ((r.vnd1<> 0 OR InputType_IsOpenning =1) OR r.tk_no1 IS NOT NULL) AND (r.tk_co1 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no2 Tk, r.tk_co2 Tk_du, 1 AS IsDebt, r.don_gia2 don_gia, r.vnd2 Vnd_no, NULL Vnd_co, NULL Ngoai_te_no, NULL Ngoai_te_co, ISNULL(NULL, r.kh0) kh, 2 AS BUT_TOAN WHERE ((r.vnd2 <> 0 OR InputType_IsOpenning =1) OR r.tk_co2 IS NOT NULL) AND (r.tk_no2 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co2 Tk, r.tk_no2 Tk_du, 0 AS IsDebt, r.don_gia2 don_gia, NULL Vnd_no, r.vnd2 Vnd_co, NULL Ngoai_te_no,NULL Ngoai_te_co, ISNULL(NULL,ISNULL(NULL,ISNULL(r.kh_co0, r.kh0))) kh, 2 AS BUT_TOAN WHERE ((r.vnd2<> 0 OR InputType_IsOpenning =1) OR r.tk_no2 IS NOT NULL) AND (r.tk_co2 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no3 Tk, r.tk_co3 Tk_du, 1 AS IsDebt, r.don_gia3 don_gia, r.vnd3 Vnd_no, NULL Vnd_co, NULL Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh3, r.kh0) kh, 3 AS BUT_TOAN WHERE ((r.vnd3 <> 0 OR InputType_IsOpenning =1) OR r.tk_co3 IS NOT NULL) AND (r.tk_no3 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co3 Tk, r.tk_no3 Tk_du, 0 AS IsDebt, r.don_gia3 don_gia, NULL Vnd_no, r.vnd3 Vnd_co, NULL Ngoai_te_no,NULL Ngoai_te_co, ISNULL(NULL,ISNULL(r.kh3,ISNULL(r.kh_co0, r.kh0))) kh, 3 AS BUT_TOAN WHERE ((r.vnd3<> 0 OR InputType_IsOpenning =1) OR r.tk_no3 IS NOT NULL) AND (r.tk_co3 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no4 Tk, r.tk_co4 Tk_du, 1 AS IsDebt, r.don_gia4 don_gia, r.vnd4 Vnd_no, NULL Vnd_co, NULL Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh4, r.kh0) kh, 4 AS BUT_TOAN WHERE ((r.vnd4 <> 0 OR InputType_IsOpenning =1) OR r.tk_co4 IS NOT NULL) AND (r.tk_no4 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co4 Tk, r.tk_no4 Tk_du, 0 AS IsDebt, r.don_gia4 don_gia, NULL Vnd_no, r.vnd4 Vnd_co, NULL Ngoai_te_no,NULL Ngoai_te_co, ISNULL(NULL,ISNULL(r.kh4,ISNULL(r.kh_co0, r.kh0))) kh, 4 AS BUT_TOAN WHERE ((r.vnd4<> 0 OR InputType_IsOpenning =1) OR r.tk_no4 IS NOT NULL) AND (r.tk_co4 IS NOT NULL)
						 ) c WHERE r.CensorStatusId = 1 ;

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[_rc_detail_all] AS  
    SELECT F_Id,IsBillEntry,SubsidiaryId,InputBill_F_Id,CreatedByUserId,CreatedDatetimeUtc,UpdatedByUserId,UpdatedDatetimeUtc,LatestBillVersion,InputTypeId,InputType_Title,InputType_IsOpenning,InputType_InputTypeCode,ngay_ct,so_ct,mau_hd,seri_hd,ngay_hd,attachment,loai_tien,ty_gia,tk_no0,tk_co0,ong_ba,dia_chi,bo_phan,kh0,kh_co0,stt,noi_dung,vthhtp,so_luong,don_gia0,ngoai_te0,vnd0,thue_suat_vat,ghi_chu,kho,kho_lc,khe_uoc_vay,tk_thu_kbnn,ma_chuong_nsnn,ma_muc_nsnn,cong_trinh,phan_xuong,khoan_muc_cp,khoan_muc_tc,po_code,order_code,ma_lsx,dien_giai,thue_suat_xnk,vnd3,vnd1,sl_po,sl_od,sl_ycvt,tk_no1,tk_co1,tk_no2,tk_co2,tk_no3,tk_co3,tscd,kh1,kh3,tknh,tknh_kh,ky_hieu_hd,ma_link_hd,constrain_ty_gia,vthhtp_dvt2,so_luong_dv2,don_gia_dv2_0,dv_ql_hc,constrain_sl_dg,vnd2,tk_no4,tk_co4,vnd4,sum_vnd0,sum_vnd1,sum_vnd2,sum_vnd3,sum_vnd4,sum_vnd5,test01,don_gia1,don_gia2,don_gia3,don_gia4,don_gia5,don_gia_dvt2_1,don_gia_dvt2_2,don_gia_dvt2_3,don_gia_dvt2_4,Not_VAT,CensorStatusId,CheckStatusId,sl_lsx,CensorUserId,CensorDatetimeUtc,cptt,kh4,Mat_hang_VAT,kh_co1,ngoai_te1,So_ct_goc, c.Tk, c.Tk_du, c.IsDebt, c.don_gia, c.Vnd_no, c.Vnd_co, c.Ngoai_te_no, c.Ngoai_te_co, c.kh, c.BUT_TOAN FROM vInputBillRow r WITH(NOLOCK)
    CROSS APPLY
    ( 
						SELECT r.tk_no0 Tk, r.tk_co0 Tk_du, 1 AS IsDebt, r.don_gia0 don_gia, r.vnd0 Vnd_no, NULL Vnd_co, r.ngoai_te0 Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh0, r.kh0) kh, 0 AS BUT_TOAN WHERE ((r.vnd0 <> 0 OR InputType_IsOpenning =1) OR r.tk_co0 IS NOT NULL) AND (r.tk_no0 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co0 Tk, r.tk_no0 Tk_du, 0 AS IsDebt, r.don_gia0 don_gia, NULL Vnd_no, r.vnd0 Vnd_co, NULL Ngoai_te_no,r.ngoai_te0 Ngoai_te_co, ISNULL(r.kh_co0,ISNULL(r.kh0,ISNULL(r.kh_co0, r.kh0))) kh, 0 AS BUT_TOAN WHERE ((r.vnd0<> 0 OR InputType_IsOpenning =1) OR r.tk_no0 IS NOT NULL) AND (r.tk_co0 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no1 Tk, r.tk_co1 Tk_du, 1 AS IsDebt, r.don_gia1 don_gia, r.vnd1 Vnd_no, NULL Vnd_co, r.ngoai_te1 Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh1, r.kh0) kh, 1 AS BUT_TOAN WHERE ((r.vnd1 <> 0 OR InputType_IsOpenning =1) OR r.tk_co1 IS NOT NULL) AND (r.tk_no1 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co1 Tk, r.tk_no1 Tk_du, 0 AS IsDebt, r.don_gia1 don_gia, NULL Vnd_no, r.vnd1 Vnd_co, NULL Ngoai_te_no,r.ngoai_te1 Ngoai_te_co, ISNULL(r.kh_co1,ISNULL(r.kh1,ISNULL(r.kh_co0, r.kh0))) kh, 1 AS BUT_TOAN WHERE ((r.vnd1<> 0 OR InputType_IsOpenning =1) OR r.tk_no1 IS NOT NULL) AND (r.tk_co1 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no2 Tk, r.tk_co2 Tk_du, 1 AS IsDebt, r.don_gia2 don_gia, r.vnd2 Vnd_no, NULL Vnd_co, NULL Ngoai_te_no, NULL Ngoai_te_co, ISNULL(NULL, r.kh0) kh, 2 AS BUT_TOAN WHERE ((r.vnd2 <> 0 OR InputType_IsOpenning =1) OR r.tk_co2 IS NOT NULL) AND (r.tk_no2 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co2 Tk, r.tk_no2 Tk_du, 0 AS IsDebt, r.don_gia2 don_gia, NULL Vnd_no, r.vnd2 Vnd_co, NULL Ngoai_te_no,NULL Ngoai_te_co, ISNULL(NULL,ISNULL(NULL,ISNULL(r.kh_co0, r.kh0))) kh, 2 AS BUT_TOAN WHERE ((r.vnd2<> 0 OR InputType_IsOpenning =1) OR r.tk_no2 IS NOT NULL) AND (r.tk_co2 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no3 Tk, r.tk_co3 Tk_du, 1 AS IsDebt, r.don_gia3 don_gia, r.vnd3 Vnd_no, NULL Vnd_co, NULL Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh3, r.kh0) kh, 3 AS BUT_TOAN WHERE ((r.vnd3 <> 0 OR InputType_IsOpenning =1) OR r.tk_co3 IS NOT NULL) AND (r.tk_no3 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co3 Tk, r.tk_no3 Tk_du, 0 AS IsDebt, r.don_gia3 don_gia, NULL Vnd_no, r.vnd3 Vnd_co, NULL Ngoai_te_no,NULL Ngoai_te_co, ISNULL(NULL,ISNULL(r.kh3,ISNULL(r.kh_co0, r.kh0))) kh, 3 AS BUT_TOAN WHERE ((r.vnd3<> 0 OR InputType_IsOpenning =1) OR r.tk_no3 IS NOT NULL) AND (r.tk_co3 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no4 Tk, r.tk_co4 Tk_du, 1 AS IsDebt, r.don_gia4 don_gia, r.vnd4 Vnd_no, NULL Vnd_co, NULL Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh4, r.kh0) kh, 4 AS BUT_TOAN WHERE ((r.vnd4 <> 0 OR InputType_IsOpenning =1) OR r.tk_co4 IS NOT NULL) AND (r.tk_no4 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co4 Tk, r.tk_no4 Tk_du, 0 AS IsDebt, r.don_gia4 don_gia, NULL Vnd_no, r.vnd4 Vnd_co, NULL Ngoai_te_no,NULL Ngoai_te_co, ISNULL(NULL,ISNULL(r.kh4,ISNULL(r.kh_co0, r.kh0))) kh, 4 AS BUT_TOAN WHERE ((r.vnd4<> 0 OR InputType_IsOpenning =1) OR r.tk_no4 IS NOT NULL) AND (r.tk_co4 IS NOT NULL)
						 ) c

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Product] AS 
							SELECT 
	p.ProductId F_Id,
	p.ProductCode,
	p.ProductName,
    p.MainImageFileId,
	p.UnitId,
	u.UnitName UnitId_UnitName,
	puc.Decimalplace UnitId_Decimalplace,
	p.EstimatePrice,
	pei.Specification,
	p.ProductNameEng,
	p.NetWeight,
	p.GrossWeight,
	p.Measurement,
	p.PackingHeight,
	p.PackingLong,
	p.PackingWidth,
	p.SubsidiaryId

FROM [StockDB].[dbo].Product p 
LEFT JOIN [StockDB].[dbo].ProductUnitConversion puc ON p.ProductId = puc.ProductId AND puc.IsDefault = 1 
LEFT JOIN [StockDB].[dbo].ProductExtraInfo pei ON p.ProductId = pei.ProductId AND pei.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].Unit u ON p.UnitId = u.UnitId AND u.IsDeleted = 0

WHERE p.IsDeleted = 0
							;

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_ProductByQuantity]
	@SubId int,
	@Tk nvarchar(128),
	@FromDate datetime2,
	@ToDate datetime2,
	@ProductCode nvarchar(128),
	@StockId int	
AS
BEGIN

	SELECT
		p.F_Id, 
		p.ProductCode, 
		p.ProductName, 
		p.UnitId_UnitName,

		SUM(CASE WHEN d.ngay_ct < @FromDate THEN
				CASE WHEN d.IsDebt = 1 THEN d.so_luong ELSE -d.so_luong END
			ELSE NULL
			END) AS dau_ky,

		SUM(CASE WHEN d.IsDebt = 1 THEN d.so_luong ELSE NULL END) AS nhap_trong_ky,

		SUM(CASE WHEN d.IsDebt = 0 THEN d.so_luong ELSE NULL END) AS xuat_trong_ky,

		SUM(CASE WHEN d.IsDebt = 1 THEN d.so_luong ELSE -d.so_luong END) AS cuoi_ky

		FROM dbo._rc_detail d

		JOIN dbo.v_Product p ON d.vthhtp = p.F_Id

	WHERE d.SubsidiaryId = @SubId
		AND d.ngay_ct BETWEEN @FromDate AND @ToDate
		AND (LEN(ISNULL(@Tk,''))=0 OR d.Tk LIKE @Tk + '%')
		AND (ISNULL(@StockId,0)= 0 OR  d.kho = @StockId)
		AND (LEN(ISNULL(@ProductCode,'')) = 0 OR p.ProductCode = @ProductCode)
	GROUP BY p.F_Id, p.ProductCode, p.ProductName, p.UnitId_UnitName
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedCostTransfer]
    @FromDate AS datetime,
    @ToDate AS datetime,
	@Type AS int,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	SET @ResStatus = 0

	IF (@Type = 1 AND EXISTS (
		SELECT 1 
			FROM [dbo].[_rc] tk 
			WHERE (tk.tk_co LIKE '621%' OR tk.tk_co LIKE '622%' OR tk.tk_co LIKE '627%') AND tk.tk_no LIKE '154%' 
				AND tk.InputType_InputTypeCode = 'CTGS_KCPB_COST' 
				AND tk.ngay_ct BETWEEN @FromDate AND @ToDate 
				AND tk.SubsidiaryId = @SubId
		)
	)
	BEGIN
	    SET @ResStatus = 1
	END
	
	IF ((@Type = 2 OR @Type = 3) AND EXISTS (
		SELECT 1 
			FROM [dbo].[_rc] tk 
			WHERE tk.tk_co LIKE '154%' AND tk.tk_no LIKE '155%' 
				AND tk.InputType_InputTypeCode = 'CTGS_KCPB_COST' 
				AND tk.ngay_ct BETWEEN @FromDate AND @ToDate 
				AND tk.SubsidiaryId = @SubId
		)
	)
	BEGIN
	    SET @ResStatus = 1
	END
		
END

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedCostTransferBalanceZero]
  @FromDate AS datetime,
  @ToDate AS datetime,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	SET @ResStatus = 0

	IF (EXISTS (SELECT 1 FROM [dbo].[_rc] tk WHERE tk.InputType_InputTypeCode = 'CTGS_KCPB_BALANCE_ZERO' AND tk.ngay_ct BETWEEN @FromDate AND @ToDate AND tk.SubsidiaryId = @SubId))
		SET @ResStatus = 1
		
END


GO

USE ManufacturingDB
GO
-- =============================================
-- Author:		trung.vo
-- Create date: 2022-11-30
-- Description:	Get input detail allowcation from handover
-- =============================================
CREATE OR ALTER FUNCTION [dbo].[afn_ProductionOrder_GetHandoverByInOut]
(
	@ProductionOrderId BIGINT
)
RETURNS @result_detail TABLE 
(
	AssignId INT,
	IsHanoverWithStock BIT,
	StepId INT,
	SortOrder INT,
	ProductionStepLinkDataId BIGINT,
	ProductionStepId INT,
	LinkDataObjectId BIGINT,
	LinkDataObjectTypeId INT,
	RequireQuantity DECIMAL(32,12),
	FromDepartmentId INT,
	ToDepartmentId INT,
	DoneQuantity  DECIMAL(32,12),
	RemainingQuantity DECIMAL(32,12),
	RoleTypeId INT,
	EndDate DATETIME2,
	LastHandoverDate DATETIME2,

	Detail_InventoryDetailId BIGINT,
	Detail_HandoverId BIGINT,
	Detail_Quantity DECIMAL(32,12),
	Detail_FromProductionStepId INT,
	Detail_FromDepartmentId INT,
	Detail_ToProductionStepId INT,
	Detail_ToDepartmentId INT
)
AS
BEGIN
	
	DECLARE @result TABLE 
	(
		AssignId INT IDENTITY(1,1) PRIMARY KEY,
		IsHanoverWithStock BIT,
		StepId INT,
		SortOrder INT,
		ProductionStepLinkDataId BIGINT,
		ProductionStepId INT,
		LinkDataObjectId BIGINT,
		LinkDataObjectTypeId INT,
		RequireQuantity DECIMAL(32,12),
		FromDepartmentId INT,
		ToDepartmentId INT,
		DoneQuantity  DECIMAL(32,12),
		RemainingQuantity DECIMAL(32,12),
		RoleTypeId INT,
		EndDate DATETIME2,
		LastHandoverDate DATETIME2
	)

	DECLARE @DATATYPE_DECIMAL INT = 9;
	DECLARE @DATATYPE_DATE INT = 3;

	DECLARE @ProductionOrderCode NVARCHAR(128)
	SELECT @ProductionOrderCode = ProductionOrderCode FROM dbo.ProductionOrder WHERE ProductionOrderId = @ProductionOrderId

	DECLARE @CONTAINER_TYPE_PRODUCTION_ORDER INT = 2;
	DECLARE @CENSOR_STATUS_APPROVED INT = 2;
	DECLARE @INVENTORY_TYPE_INPUT INT = 1;
	DECLARE @INVENTORY_TYPE_OUT INT = 2;

	DECLARE @LINK_DATA_OBJECT_TYPE_PRODUCT INT = 1;

	DECLARE @LINK_DATA_OBJECT_TYPE_SEMI INT = 2;

	DECLARE @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN INT = 1;
	DECLARE @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT INT = 2;

	DECLARE @PRODUCTION_ORDER_STATUS_NOTREADY INT = 9;
	DECLARE @PRODUCTION_ORDER_STATUS_WAITING INT = 100;
	DECLARE @PRODUCTION_ORDER_STATUS_PROCESSING_FULL INT = 200;
	DECLARE @PRODUCTION_ORDER_STATUS_PROCESSING_LESS INT = 210;
	DECLARE @PRODUCTION_ORDER_STATUS_OVERDEADLINE INT = 300;
	DECLARE @PRODUCTION_ORDER_STATUS_MISSHANDOVER INT = 320;
	DECLARE @PRODUCTION_ORDER_STATUS_FINISHED INT = 350;
	DECLARE @PRODUCTION_ORDER_STATUS_COMPLETED INT = 400;

	DECLARE @HANDOVER_STATUS_ACCEPT INT = 1

	DECLARE @assignData TABLE(	
		ProductionStepId BIGINT,
		DepartmentId INT,
		Rate DECIMAL(32,12),
		EndDate	DATETIME2
	)
	INSERT INTO @assignData
	(
		ProductionStepId,
		DepartmentId,
		Rate,
		EndDate
	)
	SELECT 
			a.ProductionStepId,
			a.DepartmentId,
			a.AssignmentQuantity/d.Quantity Rate,
			a.EndDate
		FROM [ManufacturingDB].[dbo].ProductionAssignment a
		JOIN [ManufacturingDB].[dbo].ProductionStepLinkData d on a.ProductionStepLinkDataId = d.ProductionStepLinkDataId
		JOIN [ManufacturingDB].[dbo].ProductionStep ps ON a.ProductionStepId = ps.ProductionStepId AND ps.IsDeleted = 0	
		JOIN [ManufacturingDB].[dbo].ProductionStep parent ON ps.ParentId = parent.ProductionStepId
		WHERE --ps.StepId = @StepId AND 
		ps.ContainerId = @ProductionOrderId;

	INSERT INTO @result
	(   
		IsHanoverWithStock,
		StepId,
		SortOrder,
		ProductionStepLinkDataId,
		ProductionStepId,
		LinkDataObjectId,
		LinkDataObjectTypeId,
		RequireQuantity,
		FromDepartmentId,
		ToDepartmentId,
		DoneQuantity,
		RemainingQuantity,
		RoleTypeId,
		EndDate,
		LastHandoverDate
	)
	SELECT
		d.IsHanoverWithStock,
		d.StepId,
		s.SortOrder,
		d.ProductionStepLinkDataId,
		d.ProductionStepId,
		d.LinkDataObjectId,
		d.LinkDataObjectTypeId,
		d.Quantity * a.Rate			RequireQuantity,		
		NULL			FromDepartmentId,
		a.DepartmentId	ToDepartmentId,
		CONVERT(DECIMAL(32,12),0)	DoneQuantity,
		d.Quantity * a.Rate			RemainingQuantity,
		d.RoleTypeId,
		a.EndDate,
		NULL
	FROM 
	(
		SELECT
				parent.StepId,
				ps.ProductionStepId,
				ld.ProductionStepLinkDataId,
				ld.LinkDataObjectId,
				ld.LinkDataObjectTypeId,
				ld.Quantity,
				CASE WHEN f.IsNotFromStock = 1 THEN 0 ELSE 1 END IsHanoverWithStock,
				@PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN RoleTypeId,
				ps.SortOrder
			FROM [ManufacturingDB].[dbo].ProductionStep ps 
			JOIN [ManufacturingDB].[dbo].ProductionStepLinkDataRole lr ON ps.ProductionStepId = lr.ProductionStepId AND lr.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN
			JOIN [ManufacturingDB].[dbo].ProductionStepLinkData ld ON lr.ProductionStepLinkDataId = ld.ProductionStepLinkDataId AND ld.IsDeleted = 0
			JOIN [ManufacturingDB].[dbo].ProductionStep parent ON ps.ParentId = parent.ProductionStepId
			OUTER APPLY (
				SELECT TOP(1) 1 AS IsNotFromStock 
					FROM [ManufacturingDB].[dbo].ProductionStepLinkDataRole r 
					WHERE r.ProductionStepLinkDataId = lr.ProductionStepLinkDataId
						AND r.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT
			) f
			WHERE ps.IsDeleted = 0 
				AND parent.IsDeleted = 0
				AND ps.ContainerId = @ProductionOrderId AND ps.ContainerTypeId = @CONTAINER_TYPE_PRODUCTION_ORDER
				AND ld.IsDeleted = 0
	) d
		JOIN @assignData a ON d.ProductionStepId = a.ProductionStepId
		LEFT JOIN dbo.Step s ON s.StepId = d.StepId
	ORDER BY s.SortOrder, d.SortOrder


	INSERT INTO @result
	(   
		IsHanoverWithStock,
		StepId,
		SortOrder,
		ProductionStepLinkDataId,
		ProductionStepId,
		LinkDataObjectId,
		LinkDataObjectTypeId,
		RequireQuantity,
		FromDepartmentId,
		ToDepartmentId,
		DoneQuantity,
		RemainingQuantity,
		RoleTypeId,
		EndDate,
		LastHandoverDate
	)
	SELECT
		d.IsHanoverWithStock,			
		d.StepId,
		s.SortOrder,
		d.ProductionStepLinkDataId,
		d.ProductionStepId,
		d.LinkDataObjectId,
		d.LinkDataObjectTypeId,
		d.Quantity * a.Rate			RequireQuantity,
		a.DepartmentId				FromDepartmentId,
		NULL						ToDepartmentId,
		CONVERT(DECIMAL(32,12),0)	DoneQuantity,
		d.Quantity * a.Rate			RemainingQuantity,
		d.RoleTypeId,
		a.EndDate,
		NULL
	FROM 
	(
		SELECT
				parent.StepId,
				ps.ProductionStepId,
				ld.ProductionStepLinkDataId,
				ld.LinkDataObjectId,
				ld.LinkDataObjectTypeId,
				ld.Quantity,
				CASE WHEN f.IsNotToStock = 1 THEN 0 ELSE 1 END IsHanoverWithStock,
				@PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT RoleTypeId,
				ps.SortOrder
			FROM [ManufacturingDB].[dbo].ProductionStep ps 
			JOIN [ManufacturingDB].[dbo].ProductionStepLinkDataRole lr ON ps.ProductionStepId = lr.ProductionStepId AND lr.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT
			JOIN [ManufacturingDB].[dbo].ProductionStepLinkData ld ON lr.ProductionStepLinkDataId = ld.ProductionStepLinkDataId AND ld.IsDeleted = 0
			JOIN [ManufacturingDB].[dbo].ProductionStep parent ON ps.ParentId = parent.ProductionStepId
			OUTER APPLY (
				SELECT TOP(1) 1 AS IsNotToStock 
					FROM [ManufacturingDB].[dbo].ProductionStepLinkDataRole r 
					WHERE r.ProductionStepLinkDataId = lr.ProductionStepLinkDataId
						AND r.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN
			) f
			WHERE ps.IsDeleted = 0 
				AND parent.IsDeleted = 0
				AND ps.ContainerId = @ProductionOrderId AND ps.ContainerTypeId = @CONTAINER_TYPE_PRODUCTION_ORDER
				AND ld.IsDeleted = 0
				--AND parent.StepId = @StepId
	) d JOIN @assignData a ON d.ProductionStepId = a.ProductionStepId
		LEFT JOIN dbo.Step s ON s.StepId = d.StepId
	
	ORDER BY s.SortOrder, d.SortOrder;


   
   DECLARE @tblInOutBill TABLE (
		AssignId INT,
		InventoryDetailId BIGINT,
		HandoverId BIGINT,
		Quantity DECIMAL(32,12),
		FromProductionStepId INT,
		FromDepartmentId INT,
		ToProductionStepId INT,
		ToDepartmentId INT
   )

   	DECLARE @Inv_Date  DATETIME2
	DECLARE @Inv_InventoryCode NVARCHAR(128)
	DECLARE @Inv_InventoryTypeId INT
	DECLARE @Inv_InventoryId BIGINT
	DECLARE @Inv_DepartmentId INT
	DECLARE @Inv_ProductId BIGINT
	DECLARE @Inv_PrimaryQuantity DECIMAL(32,12)
	DECLARE @Inv_ProductionStepId BIGINT
	DECLARE @Inv_InventoryDetailId BIGINT

	DECLARE @FromDepartmentId INT
	DECLARE @FromProductionStepId BIGINT
	DECLARE @ToDepartmentId INT
	DECLARE @ToProductionStepId BIGINT

--export material to input	
    DECLARE inv_cursor CURSOR READ_ONLY FORWARD_ONLY LOCAL FOR 
    SELECT 
		iv.[Date],
		iv.InventoryCode,
		iv.InventoryTypeId,
		iv.InventoryId,
		iv.DepartmentId,
		d.ProductId,
		d.PrimaryQuantity,
		rd.ProductionStepId,
		d.InventoryDetailId
    FROM StockDB.dbo.Inventory iv
	JOIN StockDB.dbo.InventoryDetail d ON d.InventoryId = iv.InventoryId
	LEFT JOIN StockDB.dbo.InventoryRequirementDetail rd ON d.InventoryRequirementDetailId = rd.InventoryRequirementDetailId AND rd.IsDeleted = 0
	
    WHERE iv.IsDeleted = 0 AND d.IsDeleted = 0 AND iv.IsApproved = 1
		--AND iv.InventoryTypeId = @INVENTORY_TYPE_INPUT
		AND d.ProductionOrderCode = @ProductionOrderCode
  
    OPEN inv_cursor  
    FETCH NEXT FROM inv_cursor INTO		@Inv_Date,
										@Inv_InventoryCode,
										@Inv_InventoryTypeId,
										@Inv_InventoryId,
										@Inv_DepartmentId,
										@Inv_ProductId,
										@Inv_PrimaryQuantity,
										@Inv_ProductionStepId,
										@Inv_InventoryDetailId
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  		       
	   
	    DECLARE @RemainQuantity DECIMAL(32,12) = @Inv_PrimaryQuantity;
		
		IF @Inv_InventoryTypeId = @INVENTORY_TYPE_OUT
		BEGIN
		    SET @FromDepartmentId = 0
			SET @FromProductionStepId = 0			
		END
		ELSE
		BEGIN
			SET @ToDepartmentId = 0
			SET @ToProductionStepId = 0		   
		END

		IF @Inv_DepartmentId >0 AND @Inv_ProductionStepId > 0 
		BEGIN
			DECLARE @AssignId INT = NULL;

			SELECT @AssignId = a.AssignId 
				FROM @result a 
				WHERE (a.FromDepartmentId			= @Inv_DepartmentId OR a.ToDepartmentId			= @Inv_DepartmentId)
					AND a.ProductionStepId		= @Inv_ProductionStepId
					AND a.LinkDataObjectTypeId	= @LINK_DATA_OBJECT_TYPE_PRODUCT
					AND a.LinkDataObjectId		= @Inv_ProductId
					AND a.IsHanoverWithStock = 1
					AND (
						(a.RoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN AND @Inv_InventoryTypeId = @INVENTORY_TYPE_OUT)
						OR
						(a.RoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT AND @Inv_InventoryTypeId = @INVENTORY_TYPE_INPUT)
					);
			IF @AssignId > 0
			BEGIN
			    UPDATE a
					SET a.RemainingQuantity = a.RemainingQuantity - @RemainQuantity, 
						a.DoneQuantity = a.DoneQuantity + @RemainQuantity,
						a.LastHandoverDate = CASE WHEN a.LastHandoverDate IS NULL OR @Inv_Date > a.LastHandoverDate THEN @Inv_Date ELSE a.LastHandoverDate END
					FROM @result a
					WHERE a.AssignId = @AssignId;

				IF @Inv_InventoryTypeId = @INVENTORY_TYPE_OUT
				BEGIN				   
					SELECT
						@ToDepartmentId = a.ToDepartmentId,
						@ToProductionStepId = a.ProductionStepId
					FROM @result a
					WHERE a.AssignId = @AssignId;
				END
				ELSE
				BEGIN					
				    SELECT
						@FromDepartmentId = a.FromDepartmentId,
						@FromProductionStepId = a.ProductionStepId
					FROM @result a
					WHERE a.AssignId = @AssignId;
				END
			
				INSERT INTO @tblInOutBill
				(
				    AssignId,
				    InventoryDetailId,
				    HandoverId,
				    Quantity,
				    FromProductionStepId,
				    FromDepartmentId,
				    ToProductionStepId,
				    ToDepartmentId
				)
				VALUES
				(   @AssignId, -- RowNumber - int
				    @Inv_InventoryDetailId, -- InventoryDetailId - bigint
				    NULL, -- HandoverId - bigint
				    @RemainQuantity, -- Quantity - decimal(32, 12)
				    @FromProductionStepId, -- FromProductionStepId - int
				    @FromDepartmentId, -- FromDepartmentId - int
				    @ToProductionStepId, -- ToProductionStepId - int
				    @ToDepartmentId  -- ToDepartmentId - int
				    )
				
				SET @RemainQuantity = 0
			END			
		END

		
		DECLARE @AllocationProcessQuantity DECIMAL(32,12) = NULL;
		DECLARE @AllocationInvQuantity DECIMAL(32,12) = NULL;
		DECLARE @AllocationAssignId INT = NULL;


		SELECT @AllocationAssignId				= a.AssignId,
					@AllocationProcessQuantity	= al.SourceQuantity,
					@AllocationInvQuantity		= al.AllocationQuantity
		FROM dbo.MaterialAllocation al 
			JOIN @result a ON al.ProductionStepId = a.ProductionStepId 
				AND (al.DepartmentId = a.FromDepartmentId OR al.DepartmentId = a.ToDepartmentId) 
				AND a.LinkDataObjectTypeId = @LINK_DATA_OBJECT_TYPE_PRODUCT
				AND a.LinkDataObjectId = al.ProductId
		WHERE al.InventoryDetailId = @Inv_InventoryDetailId;

		IF @AllocationAssignId > 0
		BEGIN
		    UPDATE a
				SET a.RemainingQuantity = a.RemainingQuantity - @AllocationProcessQuantity, 
					a.DoneQuantity = a.DoneQuantity + @AllocationProcessQuantity,
					a.LastHandoverDate = CASE WHEN a.LastHandoverDate IS NULL OR @Inv_Date > a.LastHandoverDate THEN @Inv_Date ELSE a.LastHandoverDate END
				FROM @result a
				WHERE a.AssignId = @AllocationAssignId;

			IF @Inv_InventoryTypeId = @INVENTORY_TYPE_OUT
				BEGIN				   
					SELECT
						@ToDepartmentId = a.ToDepartmentId,
						@ToProductionStepId = a.ProductionStepId
					FROM @result a
					WHERE a.AssignId = @AllocationAssignId;
				END
				ELSE
				BEGIN					
				    SELECT
						@FromDepartmentId = a.FromDepartmentId,
						@FromProductionStepId = a.ProductionStepId
					FROM @result a
					WHERE a.AssignId = @AllocationAssignId;
				END

			INSERT INTO @tblInOutBill
			(
			    AssignId,
			    InventoryDetailId,
			    HandoverId,
			    Quantity,
			    FromProductionStepId,
			    FromDepartmentId,
			    ToProductionStepId,
			    ToDepartmentId
			)
			VALUES
			(   @AllocationAssignId, -- RowNumber - int
			    @Inv_InventoryDetailId, -- InventoryDetailId - bigint
			    NULL, -- HandoverId - bigint
			    @AllocationProcessQuantity, -- Quantity - decimal(32, 12)
			    @FromProductionStepId, -- FromProductionStepId - int
			    @FromDepartmentId, -- FromDepartmentId - int
			    @ToProductionStepId, -- ToProductionStepId - int
			    @ToDepartmentId  -- ToDepartmentId - int
			    )
			
			SET @RemainQuantity = @RemainQuantity - @AllocationInvQuantity
		END

		DECLARE @A_AssignId INT
		DECLARE @A_IsHanoverWithStock INT
		DECLARE @A_StepId INT
		DECLARE @A_ProductionStepId BIGINT
		DECLARE @A_LinkDataObjectId BIGINT
		DECLARE @A_LinkDataObjectTypeId INT
		DECLARE @A_RequireQuantity DECIMAL(32,12)
		DECLARE @A_FromDepartmentId INT
		DECLARE @A_ToDepartmentId INT
		DECLARE @A_DoneQuantity  DECIMAL(32,12)
		DECLARE @A_RemainingQuantity  DECIMAL(32,12)
		DECLARE @A_RoleTypeId INT


		DECLARE @Last_AssignId INT;

		DECLARE inputdata_cursor CURSOR READ_ONLY FORWARD_ONLY LOCAL FOR 
		SELECT 
				AssignId,
				IsHanoverWithStock,
				StepId,
				ProductionStepId,
				LinkDataObjectId,
				LinkDataObjectTypeId,
				RequireQuantity,
				FromDepartmentId,
				ToDepartmentId,
				DoneQuantity,
				RemainingQuantity,
                RoleTypeId
		FROM @result
		WHERE IsHanoverWithStock = 1 AND LinkDataObjectTypeId = @LINK_DATA_OBJECT_TYPE_PRODUCT
			AND (
						(RoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN AND @Inv_InventoryTypeId = @INVENTORY_TYPE_OUT)
						OR
						(RoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT AND @Inv_InventoryTypeId = @INVENTORY_TYPE_INPUT)
				)
		ORDER BY CASE	WHEN @Inv_ProductionStepId = ProductionStepId AND @Inv_DepartmentId = ISNULL(FromDepartmentId, ToDepartmentId) THEN 0
						WHEN @Inv_DepartmentId =  ISNULL(FromDepartmentId, ToDepartmentId) THEN 1
						ELSE 2
					END
		OPEN inputdata_cursor  
		FETCH NEXT FROM inputdata_cursor INTO   @A_AssignId,
												@A_IsHanoverWithStock,
												@A_StepId,
												@A_ProductionStepId ,
												@A_LinkDataObjectId ,
												@A_LinkDataObjectTypeId ,
												@A_RequireQuantity,
												@A_FromDepartmentId,
												@A_ToDepartmentId,
												@A_DoneQuantity,
												@A_RemainingQuantity,
												@A_RoleTypeId
  
  
		WHILE @@FETCH_STATUS = 0  
		BEGIN  
			
			
			IF @Inv_ProductId = @A_LinkDataObjectId
			BEGIN
				
				DECLARE @Min DECIMAL(32,12) = @RemainQuantity;

			    IF @Inv_ProductionStepId = @A_ProductionStepId AND @Inv_DepartmentId = ISNULL(@A_FromDepartmentId, @A_ToDepartmentId)
				BEGIN
				   SET @Min = @RemainQuantity;
				END
				ELSE
				BEGIN
				    SET @Min = @RemainQuantity;
					IF @A_RemainingQuantity < @RemainQuantity
					BEGIN
					    SET @Min = @A_RemainingQuantity
					END
				END
				IF @Min > 0
				BEGIN
					SET @A_RemainingQuantity = @A_RemainingQuantity - @Min
					SET @A_DoneQuantity = @A_DoneQuantity + @Min
					SET @RemainQuantity = @RemainQuantity - @Min;

					UPDATE @result 
						SET RemainingQuantity = @A_RemainingQuantity,
							DoneQuantity = @A_DoneQuantity,
							LastHandoverDate = CASE WHEN LastHandoverDate IS NULL OR @Inv_Date > LastHandoverDate THEN @Inv_Date ELSE LastHandoverDate END
						WHERE AssignId = @A_AssignId;


					IF @Inv_InventoryTypeId = @INVENTORY_TYPE_OUT
					BEGIN				   
						SELECT
							@ToDepartmentId = a.ToDepartmentId,
							@ToProductionStepId = a.ProductionStepId
						FROM @result a
						WHERE a.AssignId = @A_AssignId;
					END
					ELSE
					BEGIN					
						SELECT
							@FromDepartmentId = a.FromDepartmentId,
							@FromProductionStepId = a.ProductionStepId
						FROM @result a
						WHERE a.AssignId = @A_AssignId;
					END


					INSERT INTO @tblInOutBill
					(
						AssignId,
						InventoryDetailId,
						HandoverId,
						Quantity,
						FromProductionStepId,
						FromDepartmentId,
						ToProductionStepId,
						ToDepartmentId
					)
					VALUES
					(   @A_AssignId, -- RowNumber - int
						@Inv_InventoryDetailId, -- InventoryDetailId - bigint
						NULL, -- HandoverId - bigint
						@Min, -- Quantity - decimal(32, 12)
						@FromProductionStepId, -- FromProductionStepId - int
						@FromDepartmentId, -- FromDepartmentId - int
						@ToProductionStepId, -- ToProductionStepId - int
						@ToDepartmentId  -- ToDepartmentId - int
					)
						
				SET @Last_AssignId = @A_AssignId
					
				END
			END
			

			FETCH NEXT FROM inputdata_cursor INTO	@A_AssignId,
													@A_IsHanoverWithStock,
													@A_StepId,
													@A_ProductionStepId ,
													@A_LinkDataObjectId ,
													@A_LinkDataObjectTypeId ,
													@A_RequireQuantity,
													@A_FromDepartmentId,
													@A_ToDepartmentId,
													@A_DoneQuantity,
													@A_RemainingQuantity,
													@A_RoleTypeId
		END  
  
		IF @Last_AssignId > 0 AND @RemainQuantity > 0
		BEGIN
		    UPDATE @result 
				SET RemainingQuantity = RemainingQuantity - @RemainQuantity,
					DoneQuantity = DoneQuantity + @RemainQuantity
				WHERE AssignId = @Last_AssignId;

			UPDATE @tblInOutBill
				SET Quantity = Quantity + @RemainQuantity
				WHERE AssignId = @Last_AssignId AND InventoryDetailId = @Inv_InventoryDetailId;
		END
	
		CLOSE inputdata_cursor  
		DEALLOCATE inputdata_cursor  


        FETCH NEXT FROM inv_cursor INTO @Inv_Date,
										@Inv_InventoryCode,
										@Inv_InventoryTypeId,
										@Inv_InventoryId,
										@Inv_DepartmentId,
										@Inv_ProductId,
										@Inv_PrimaryQuantity,
										@Inv_ProductionStepId,
										@Inv_InventoryDetailId
    END  
  
    CLOSE inv_cursor  
    DEALLOCATE inv_cursor  


	
	--handover
	DECLARE @H_HandoverId BIGINT;
	DECLARE @H_HandoverDate DATETIME2
	DECLARE @H_FromDepartmentId INT;
	DECLARE	@H_ToDepartmentId INT;
	DECLARE	@H_FromProductionStepId INT;
	DECLARE	@H_ToProductionStepId INT;
	DECLARE	@H_ObjectTypeId INT;
	DECLARE	@H_ObjectId BIGINT;
	DECLARE	@H_HandoverQuantity DECIMAL(32,12);

	DECLARE handover_cursor CURSOR READ_ONLY FORWARD_ONLY LOCAL FOR 
		SELECT
			h.ProductionHandoverId,
			h.HandoverDatetime,
			h.FromDepartmentId,
			h.ToDepartmentId,
			h.FromProductionStepId,
			h.ToProductionStepId,
			h.ObjectTypeId,
			h.ObjectId,
			h.HandoverQuantity
		FROM dbo.ProductionHandover h
			JOIN dbo.ProductionHandoverReceipt r ON r.ProductionHandoverReceiptId = h.ProductionHandoverReceiptId
		WHERE r.HandoverStatusId = @HANDOVER_STATUS_ACCEPT
			AND h.ProductionOrderId = @ProductionOrderId
			AND r.IsDeleted = 0
			AND h.IsDeleted = 0
  
    OPEN handover_cursor  
    FETCH NEXT FROM handover_cursor INTO @H_HandoverId,
										@H_HandoverDate,
										@H_FromDepartmentId,
										@H_ToDepartmentId,
										@H_FromProductionStepId,
										@H_ToProductionStepId,
										@H_ObjectTypeId,
										@H_ObjectId,
										@H_HandoverQuantity;   
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
  
		DECLARE @SentRowNumber INT
		DECLARE @ReceivedRowNumber INT

		SELECT @SentRowNumber = a.AssignId 
		FROM @result a
		WHERE a.FromDepartmentId = @H_FromDepartmentId
			AND a.ProductionStepId = @H_FromProductionStepId
			AND a.LinkDataObjectTypeId = @H_ObjectTypeId
			AND a.LinkDataObjectId = @H_ObjectId
			AND a.RoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT;

		UPDATE a
					SET a.RemainingQuantity = a.RemainingQuantity - @H_HandoverQuantity, 
						a.DoneQuantity = @H_HandoverQuantity,
						a.LastHandoverDate = CASE WHEN a.LastHandoverDate IS NULL OR @H_HandoverDate > a.LastHandoverDate THEN @H_HandoverDate ELSE a.LastHandoverDate END
					FROM @result a
					WHERE a.AssignId = @SentRowNumber;

		
		INSERT INTO @tblInOutBill
						(
							AssignId,
							InventoryDetailId,
							HandoverId,
							Quantity,
							FromProductionStepId,
							FromDepartmentId,
							ToProductionStepId,
							ToDepartmentId
						)
						VALUES
						(   @SentRowNumber, -- RowNumber - int
							NULL, -- InventoryDetailId - bigint
							@H_HandoverId, -- HandoverId - bigint
							@H_HandoverQuantity, -- Quantity - decimal(32, 12)
							@H_FromProductionStepId, -- FromProductionStepId - int
							@H_FromDepartmentId, -- FromDepartmentId - int
							@H_ToProductionStepId, -- ToProductionStepId - int
							@H_ToDepartmentId  -- ToDepartmentId - int
						)
						
		SET @RemainQuantity = 0



		SELECT @ReceivedRowNumber = a.AssignId 
		FROM @result a
		WHERE a.ToDepartmentId = @H_ToDepartmentId
			AND a.ProductionStepId = @H_ToProductionStepId
			AND a.LinkDataObjectTypeId = @H_ObjectTypeId
			AND a.LinkDataObjectId = @H_ObjectId
			AND a.RoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN

		UPDATE a
					SET a.RemainingQuantity = a.RemainingQuantity - @H_HandoverQuantity, 
						a.DoneQuantity = a.DoneQuantity + @H_HandoverQuantity
					FROM @result a
					WHERE a.AssignId = @ReceivedRowNumber;

		INSERT INTO @tblInOutBill
						(
							AssignId,
							InventoryDetailId,
							HandoverId,
							Quantity,
							FromProductionStepId,
							FromDepartmentId,
							ToProductionStepId,
							ToDepartmentId
						)
						VALUES
						(   @ReceivedRowNumber, -- RowNumber - int
							NULL, -- InventoryDetailId - bigint
							@H_HandoverId, -- HandoverId - bigint
							@H_HandoverQuantity, -- Quantity - decimal(32, 12)
							@H_FromProductionStepId, -- FromProductionStepId - int
							@H_FromDepartmentId, -- FromDepartmentId - int
							@H_ToProductionStepId, -- ToProductionStepId - int
							@H_ToDepartmentId  -- ToDepartmentId - int
						)

		SET @RemainQuantity = 0

        FETCH NEXT FROM handover_cursor INTO @H_HandoverId,
											@H_HandoverDate,
											@H_FromDepartmentId,
											@H_ToDepartmentId,
											@H_FromProductionStepId,
											@H_ToProductionStepId,
											@H_ObjectTypeId,
											@H_ObjectId,
											@H_HandoverQuantity;
        END  
  
    CLOSE handover_cursor  
    DEALLOCATE handover_cursor  

	
	INSERT INTO @result_detail
	(
		AssignId,
	    IsHanoverWithStock,
	    StepId,
	    SortOrder,
	    ProductionStepLinkDataId,
	    ProductionStepId,
	    LinkDataObjectId,
	    LinkDataObjectTypeId,
	    RequireQuantity,
	    FromDepartmentId,
	    ToDepartmentId,
	    DoneQuantity,
	    RemainingQuantity,
	    RoleTypeId,
	    EndDate,
	    LastHandoverDate,
	    Detail_InventoryDetailId,
	    Detail_HandoverId,
	    Detail_Quantity,
	    Detail_FromProductionStepId,
	    Detail_FromDepartmentId,
	    Detail_ToProductionStepId,
	    Detail_ToDepartmentId
	)
	SELECT
		r.AssignId,
		r.IsHanoverWithStock,
		r.StepId,
		r.SortOrder,
		r.ProductionStepLinkDataId,
		r.ProductionStepId,
		r.LinkDataObjectId,
		r.LinkDataObjectTypeId,
		r.RequireQuantity,
		r.FromDepartmentId,
		r.ToDepartmentId,
		r.DoneQuantity,
		r.RemainingQuantity,
		r.RoleTypeId,
		r.EndDate,
		r.LastHandoverDate,	

		b.InventoryDetailId,
		b.HandoverId,
		b.Quantity,
		b.FromProductionStepId,
		b.FromDepartmentId,
		b.ToProductionStepId,
		b.ToDepartmentId
	FROM @result r
	LEFT JOIN @tblInOutBill b ON b.AssignId = r.AssignId
	
	RETURN 
END


GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[v_DepartmentAndStock] AS 
							SELECT 
DepartmentId F_Id,
DepartmentName,
DepartmentCode,
[Description]
FROM [OrganizationDB].[dbo].Department 
WHERE IsDeleted=0 AND IsProduction = 1

UNION ALL
SELECT
0 F_Id,
N'Kho' DepartmentName,
'' DepartmentCode,
'Phân hệ kho' [Description]
							;

GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[v_Step] AS 
							SELECT
    s.StepId F_Id,
    s.StepName StepName,
    s.SubsidiaryId
FROM [ManufacturingDB].[dbo].Step s
WHERE s.IsDeleted = 0

GO

USE ManufacturingDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_Step_GetTopUsed_ByList]
	@SubId INT,
	@StepIds _INTVALUES READONLY,
	@IsCheckExistOnly BIT = 0
AS
BEGIN	
	DROP TABLE IF EXISTS #result;
	CREATE TABLE #result(
		Id BIGINT NULL,
		ObjectTypeId INT NULL,
		BillTypeId INT NULL,
		BillId BIGINT NULL,
		BillCode NVARCHAR(128) NULL,
		[Description] NVARCHAR(512) NULL
	)	
	
	--Production

	--ProductionProcessMold
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		st.[Value],
		324,--ProductionProcessMold,
		NULL,
		sm.ProductionProcessMoldId,
		sm.Title,
		CONCAT(N'Quy trình sản xuất mẫu ', N'. Tên: ', sm.Title)		
	FROM ManufacturingDB.dbo.ProductionStepMold m 
		JOIN ManufacturingDB.dbo.ProductionProcessMold sm ON sm.ProductionProcessMoldId = m.ProductionProcessMoldId
		JOIN @StepIds st ON m.StepId = st.[Value]
	WHERE sm.IsDeleted=0 AND m.IsDeleted = 0
	ORDER BY sm.ProductionProcessMoldId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--TargetProductivity
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		st.[Value],
		1012,--TargetProductivity,
		NULL,
		sm.TargetProductivityId,
		sm.TargetProductivityCode,
		CONCAT(N'Năng suất mục tiêu ', N'. Mã: ', sm.TargetProductivityCode)		
	FROM ManufacturingDB.dbo.TargetProductivityDetail m 
		JOIN ManufacturingDB.dbo.TargetProductivity sm ON sm.TargetProductivityId = m.TargetProductivityId
		JOIN @StepIds st ON m.ProductionStepId = st.[Value]
	WHERE sm.IsDeleted=0 AND m.IsDeleted = 0
	ORDER BY sm.TargetProductivityId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--Production order process
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		st.[Value],
		70,--ProductionOrder,
		NULL,
		po.ProductionOrderId,
		po.ProductionOrderCode,
		CONCAT(N'Quy trình sản xuất của lệnh ', N'. Mã lệnh sản xuất: ', po.ProductionOrderCode)		
	FROM ManufacturingDB.dbo.ProductionOrder po 
		JOIN ManufacturingDB.dbo.ProductionStep s ON po.ProductionOrderId = s.ContainerId		
		JOIN @StepIds st ON s.StepId = st.[Value]
	WHERE po.IsDeleted=0 AND s.IsDeleted = 0 AND s.ContainerTypeId=2--ProductionOrder
	ORDER BY po.ProductionOrderId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--Product proceess
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		st.[Value],
		6,--Product,
		NULL,
		p.ProductId,
		p.ProductCode,
		CONCAT(N'Quy trình sản xuất của mặt hàng ', N'. Mã: ', p.ProductCode)		
	FROM StockDB.dbo.Product p 
		JOIN ManufacturingDB.dbo.ProductionStep s ON p.ProductId = s.ContainerId		
		JOIN @StepIds st ON s.StepId = st.[Value]
	WHERE p.IsDeleted=0 AND s.IsDeleted = 0 AND s.ContainerTypeId=1--Product
	ORDER BY p.ProductId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END


	--product bom
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		st.[Value],
		6,--Product,
		NULL,
		p.ProductId,
		p.ProductCode,
		CONCAT(N'BOM của mặt hàng ', N'. Mã: ', p.ProductCode)		
	FROM StockDB.dbo.Product p 
		JOIN StockDB.dbo.ProductBom s ON p.ProductId = s.ProductId		
		JOIN @StepIds st ON s.OutputStepId = st.[Value] OR s.InputStepId = st.[Value]
	WHERE p.IsDeleted=0 AND s.IsDeleted = 0
	ORDER BY p.ProductId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END
	
	SELECT * FROM #result
	
END

GO

USE ManufacturingDB
GO

CREATE OR ALTER VIEW [dbo].[vProductionHandoverHistoryReceipt]
AS
WITH handovers AS
(
	SELECT
		r.ProductionHandoverReceiptId
	  ,r.ProductionHandoverReceiptCode
	  ,r.SubsidiaryId
	  ,r.HandoverStatusId
	  ,r.CreatedByUserId
	  ,r.AcceptByUserId
	  ,r.CreatedDatetimeUtc	  
	  ,h.[ProductionHandoverId]
      ,h.[FromDepartmentId]
      ,h.[HandoverQuantity]
      ,h.[ObjectId]
      ,h.[ObjectTypeId]    
      ,h.[FromProductionStepId]              
      ,h.[ToDepartmentId]
      ,h.[ToProductionStepId]
      ,h.[HandoverDatetime]
      ,h.[ProductionOrderId]
      ,h.[Note]	        
      ,h.[RowIndex]
	FROM dbo.ProductionHandover h
		JOIN dbo.ProductionHandoverReceipt r ON r.ProductionHandoverReceiptId = h.ProductionHandoverReceiptId
		JOIN dbo.ProductionOrder o ON h.ProductionOrderId = o.ProductionOrderId
	WHERE h.IsDeleted = 0 AND r.IsDeleted = 0 AND o.IsDeleted = 0
), histories AS
(
	SELECT
	  r.ProductionHandoverReceiptId
	  ,r.ProductionHandoverReceiptCode
	  ,r.SubsidiaryId
	  ,r.HandoverStatusId
	  ,r.CreatedByUserId
	  ,r.AcceptByUserId
	  ,r.CreatedDatetimeUtc
	  ,h.[ProductionHistoryId]
      ,h.[DepartmentId]
      ,h.[ProductionQuantity]
      ,h.[ObjectId]
      ,h.[ObjectTypeId]
      ,h.[ProductionStepId]
      ,h.[Date]
      ,h.[ProductionOrderId]
      ,h.[Note]
      ,h.[OvertimeProductionQuantity]
      ,h.[RowIndex]
	FROM dbo.ProductionHistory h
		JOIN dbo.ProductionHandoverReceipt r ON r.ProductionHandoverReceiptId = h.ProductionHandoverReceiptId
		JOIN dbo.ProductionOrder o ON h.ProductionOrderId = o.ProductionOrderId
	WHERE h.IsDeleted = 0 AND r.IsDeleted = 0 AND o.IsDeleted = 0
)
SELECT
	v.SubsidiaryId,
	v.ProductionHandoverReceiptId,
	v.ProductionHandoverReceiptCode,
	v.HandoverStatusId,
	v.CreatedByUserId,
	createUser.FullName CreatedByUserFullName,
	v.AcceptByUserId,
	acceptUser.FullName AcceptByUserFullName,
	v.CreatedDatetimeUtc,
	v.[Date],
	v.DepartmentId,
	department.DepartmentCode,
	department.DepartmentName,
	v.ProductionStepId,
	ps.Title ProductionStepTitle,
	step.StepId,
	step.StepName,
	v.ProductionOrderId,
	po.ProductionOrderCode,
	v.ObjectTypeId,
	v.ObjectId,
	p.ProductCode,
	ISNULL(p.ProductName, se.Title) ProductName,
	v.HandoverNote,
	v.ProductionNote,

	v.HandoverQuantity,
	v.ProductionQuantity,
	v.OvertimeProductionQuantity
FROM
(
	SELECT
		ISNULL(ho.SubsidiaryId, hi.SubsidiaryId) SubsidiaryId,
		ISNULL(ho.ProductionHandoverReceiptId,hi.ProductionHandoverReceiptId) ProductionHandoverReceiptId,
		ISNULL(ho.ProductionHandoverReceiptCode, hi.ProductionHandoverReceiptCode) ProductionHandoverReceiptCode,
		ISNULL(ho.HandoverStatusId, hi.HandoverStatusId) HandoverStatusId,
		ISNULL(ho.CreatedByUserId, hi.CreatedByUserId) CreatedByUserId,
		ISNULL(ho.AcceptByUserId, hi.AcceptByUserId) AcceptByUserId,
		ISNULL(ho.CreatedDatetimeUtc, hi.CreatedDatetimeUtc) CreatedDatetimeUtc,
		ISNULL(ho.HandoverDatetime, hi.[Date]) [Date],
		ISNULL(ho.FromDepartmentId, hi.DepartmentId) DepartmentId,
		ISNULL(ho.FromProductionStepId, hi.ProductionStepId) ProductionStepId,
		ISNULL(ho.ProductionOrderId, hi.ProductionOrderId) ProductionOrderId,
		ISNULL(ho.ObjectTypeId, hi.ObjectTypeId) ObjectTypeId,
		ISNULL(ho.ObjectId, hi.ObjectId) ObjectId,
		ho.Note HandoverNote,
		hi.Note ProductionNote,

		ho.HandoverQuantity,
		hi.ProductionQuantity,
		hi.OvertimeProductionQuantity

	FROM
		handovers ho
		FULL OUTER JOIN histories hi
			ON hi.ProductionHandoverReceiptId = ho.ProductionHandoverReceiptId
			AND hi.Date = ho.HandoverDatetime
			AND hi.DepartmentId = ho.FromDepartmentId
			AND hi.ProductionStepId = ho.FromProductionStepId
			AND hi.ProductionOrderId = ho.ProductionOrderId
			AND hi.ObjectTypeId = ho.ObjectTypeId
			AND hi.ObjectId = ho.ObjectId
			AND hi.RowIndex = ho.RowIndex
) v
LEFT JOIN [OrganizationDB].dbo.Employee createUser ON v.CreatedByUserId = createUser.UserId
LEFT JOIN [OrganizationDB].dbo.Employee acceptUser ON v.AcceptByUserId = acceptUser.UserId
LEFT JOIN [OrganizationDB].dbo.Department department ON v.DepartmentId = department.DepartmentId
LEFT JOIN dbo.ProductionStep ps ON v.ProductionStepId = ps.ProductionStepId
LEFT JOIN dbo.ProductionStep parentPs ON ps.ParentId = parentPs.ProductionStepId
LEFT JOIN dbo.Step step ON ps.StepId = step.StepId
LEFT JOIN dbo.ProductionOrder po ON v.ProductionOrderId = po.ProductionOrderId
LEFT JOIN dbo.ProductSemi se ON v.ObjectId = se.ProductSemiId AND v.ObjectTypeId = 2 --EnumProductionStepLinkDataObjectType.Product = 1, ProductSemi = 2
LEFT JOIN [StockDB].dbo.Product p ON v.ObjectId = p.ProductId AND v.ObjectTypeId = 1 --EnumProductionStepLinkDataObjectType.Product = 1, ProductSemi = 2


GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[v_GroupStep] AS 
							SELECT
    sg.StepGroupId F_Id,
    sg.StepGroupName StepGroupName,
    sg.SubsidiaryId
FROM [ManufacturingDB].[dbo].StepGroup sg
WHERE sg.IsDeleted = 0

GO

USE ManufacturingDB
GO


CREATE OR ALTER VIEW [dbo].[v_StepGroup] AS 
SELECT
    sg.StepGroupId F_Id,
    sg.StepGroupName StepGroupName,
    sg.SubsidiaryId
FROM [ManufacturingDB].[dbo].StepGroup sg
WHERE sg.IsDeleted = 0


GO

USE ManufacturingDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_ProductionDepartmentHandover_old_04082022]
	@Keyword AS nvarchar(255),	
  @DepartmentId AS int,
	@Size AS int,
	@Page AS int,
  @SubId AS int,
	@FromDate As datetime,
	@ToDate AS datetime,
	@StepId AS int,
	@ProductId AS int
AS
BEGIN
	DECLARE @PRODUCT_TYPE int = 1;
	DECLARE @INPUT_TYPE int = 1;
	DECLARE @OUTPUT_TYPE int = 2;
	DECLARE @IMPORT_TYPE int = 1;
	DECLARE @EXPORT_TYPE int = 2;
	DECLARE @HANDOVER_VIA_STOCK int = 2;
	
	SET @Keyword = CONCAT(N'%', @Keyword, N'%');
	
	
	-- 	Tính danh sách các LSX thỏa mãn
	DECLARE @Productions TABLE (
		ProductionOrderId bigint,
		ProductionOrderCode nvarchar(256)
	);
	
	INSERT INTO @Productions
		SELECT po.ProductionOrderId, po.ProductionOrderCode
		FROM ProductionAssignment pa
			INNER JOIN ProductionStep ps ON pa.ProductionStepId = ps.ProductionStepId AND ps.IsDeleted = 0
			INNER JOIN ProductionStep gps ON ps.ParentId = gps.ProductionStepId AND gps.IsDeleted = 0 AND ps.ContainerId = gps.ContainerId AND ps.ContainerTypeId = gps.ContainerTypeId
			INNER JOIN ProductionOrder po ON pa.ProductionOrderId = po.ProductionOrderId AND po.IsDeleted = 0 AND ps.SubsidiaryId = po.SubsidiaryId
			INNER JOIN ProductionOrderDetail pod ON po.ProductionOrderId = pod.ProductionOrderId AND pod.IsDeleted = 0 AND po.SubsidiaryId = pod.SubsidiaryId
			WHERE 
				ps.SubsidiaryId = @SubId 
				AND pa.DepartmentId = @DepartmentId 
				AND po.Date BETWEEN @FromDate AND @ToDate 
				AND po.ProductionOrderCode LIKE @Keyword
				AND (@StepId = 0 OR gps.StepId = @StepId)
				AND (@ProductId = 0 OR pod.ProductId = @ProductId)
			GROUP BY po.ProductionOrderId, po.ProductionOrderCode;
			
	DECLARE @AllData TABLE (
		RowNumber int NOT NULL IDENTITY(1,1),
		ProductionOrderId bigint,
		ProductionOrderCode nvarchar(256),
		StartDate datetime2,
		EndDate datetime2,
		ProductionStepId bigint,
		ProductionStepName nvarchar(256),
		GroupId bigint,
		StepId int,
		SubsidiaryId int,
		DepartmentId int,
		InOutType nvarchar(25),
		ProductionStepLinkDataRoleTypeId int,
		AssignmentQuantity decimal(18,5),
		HandoveredQuantity decimal(18,5),
		AllocatedHandoverStockQuantity decimal(18,5),
		AssignedProgressStatus int,
		HandoverStockQuantity decimal(18,5),
		ObjectId bigint,
		ObjectTypeId int
	);

	WITH handover AS (
		SELECT 
			h.ProductionOrderId,
			h.ObjectTypeId,
			h.ObjectId,
			h.FromProductionStepId ProductionStepId,
			h.FromDepartmentId DepartmentId,
			ISNULL(SUM(ISNULL(h.HandoverQuantity,0)),0) Quantity
		FROM ProductionHandover h
		INNER JOIN @Productions po ON h.ProductionOrderId = po.ProductionOrderId
		WHERE h.Status = 1 AND h.FromDepartmentId = @DepartmentId
		GROUP BY h.ProductionOrderId, h.ObjectTypeId, h.ObjectId, h.FromProductionStepId, h.FromDepartmentId
	),
	receive AS (
		SELECT 
			h.ProductionOrderId,
			h.ObjectTypeId,
			h.ObjectId,
			h.ToProductionStepId ProductionStepId,
			h.ToDepartmentId DepartmentId,
			ISNULL(SUM(ISNULL(h.HandoverQuantity,0)),0) Quantity
		FROM ProductionHandover h
		INNER JOIN @Productions po ON h.ProductionOrderId = po.ProductionOrderId
		WHERE h.Status = 1 AND h.ToDepartmentId = @DepartmentId
		GROUP BY h.ProductionOrderId, h.ObjectTypeId, h.ObjectId, h.ToProductionStepId, h.ToDepartmentId
	),
	inv AS (
		SELECT 
			v.ProductionOrderCode,
			v.ProductionStepId,
			v.DepartmentId,
			v.InventoryTypeId,
			v.ProductId,
			ISNULL(SUM(v.PrimaryQuantity),0) Quantity
		FROM ( 
			SELECT 
				ISNULL(ird.ProductionOrderCode, id.ProductionOrderCode) ProductionOrderCode,
				ir.ProductionStepId,
				ISNULL(ird.DepartmentId, i.DepartmentId) DepartmentId,
				i.InventoryTypeId,
				id.ProductId,
				ISNULL(id.PrimaryQuantity,0) PrimaryQuantity
			FROM StockDB.dbo.InventoryDetail id
			INNER JOIN StockDB.dbo.Inventory i ON id.InventoryId = i.InventoryId AND id.IsDeleted = 0 AND i.IsDeleted = 0 AND id.SubsidiaryId = i.SubsidiaryId 
			LEFT JOIN StockDB.dbo.InventoryRequirement ir ON ir.IsDeleted = 0 AND id.SubsidiaryId = ir.SubsidiaryId AND id.InventoryRequirementCode = ir.InventoryRequirementCode AND i.DepartmentId = ir.DepartmentId
			LEFT JOIN StockDB.dbo.InventoryRequirementDetail ird ON ird.InventoryRequirementId = ir.InventoryRequirementId AND id.ProductId = ird.ProductId AND id.ProductionOrderCode = ird.ProductionOrderCode AND ird.IsDeleted = 0 AND id.SubsidiaryId = ird.SubsidiaryId 
			INNER JOIN @Productions po ON ISNULL(ird.ProductionOrderCode, id.ProductionOrderCode) = po.ProductionOrderCode
			WHERE i.IsApproved = 1 
				AND ir.CensorStatus = 2 
				AND ird.ProductionOrderCode IS NOT NULL 
				AND ird.ProductionStepId > 0 
				AND ird.DepartmentId = @DepartmentId 
				AND i.SubsidiaryId = @SubId
			) v
		GROUP BY v.ProductionOrderCode, v.ProductionStepId, v.DepartmentId, v.InventoryTypeId, v.ProductId
	),
	ld AS (
		SELECT 
			ldr.ProductionStepLinkDataRoleTypeId,
			ldr.ProductionStepId,
			ld.LinkDataObjectTypeId,
			ld.LinkDataObjectId,
			SUM(ld.QuantityOrigin - ISNULL(ld.OutsourcePartQuantity,0)) Quantity,
			SUM(CASE WHEN ildr.ProductionStepLinkDataId IS NULL OR ips.IsFinish = 1 OR ld.ProductionStepLinkTypeId = @HANDOVER_VIA_STOCK THEN ld.QuantityOrigin - ISNULL(ld.OutsourcePartQuantity,0) ELSE 0 END) HandoverStockQuantity
		FROM ProductionStepLinkDataRole ldr 
		INNER JOIN ProductionStepLinkData ld ON ldr.ProductionStepLinkDataId = ld.ProductionStepLinkDataId AND ld.IsDeleted = 0 
		LEFT JOIN ProductionStepLinkDataRole ildr ON ldr.ProductionStepLinkDataRoleTypeId != ildr.ProductionStepLinkDataRoleTypeId AND ldr.ProductionStepLinkDataId = ildr.ProductionStepLinkDataId
		LEFT JOIN ProductionStep ips ON ildr.ProductionStepId = ips.ProductionStepId
		WHERE ld.SubsidiaryId = @SubId
		GROUP BY ldr.ProductionStepLinkDataRoleTypeId, ldr.ProductionStepId, ld.LinkDataObjectTypeId, ld.LinkDataObjectId
	)
	INSERT INTO @AllData
	SELECT 
		po.ProductionOrderId,
		po.ProductionOrderCode,
		po.StartDate,
		po.EndDate,
		ps.ProductionStepId,
		ps.Title ProductionStepName,
		ps.ParentId GroupId,
		gps.StepId,
		ps.SubsidiaryId,
		pa.DepartmentId,
		CASE 
			WHEN ld.ProductionStepLinkDataRoleTypeId = @INPUT_TYPE THEN N'Đầu vào'
			ELSE N'Đầu ra'
		END InOutType,
		ld.ProductionStepLinkDataRoleTypeId,
		pa.AssignmentQuantity * ld.Quantity / (lda.QuantityOrigin - ISNULL(lda.OutsourcePartQuantity,0)) AssignmentQuantity,
		CASE 
			WHEN ld.ProductionStepLinkDataRoleTypeId = @INPUT_TYPE THEN ISNULL(rc.Quantity,0) + ISNULL(inv.Quantity, 0)
			ELSE ISNULL(ho.Quantity, 0) + ISNULL(inv.Quantity, 0)
		END HandoveredQuantity,
		ISNULL(inv.Quantity, 0) AllocatedHandoverStockQuantity,
		pa.AssignedProgressStatus,
		pa.AssignmentQuantity * ld.HandoverStockQuantity / (lda.QuantityOrigin - ISNULL(lda.OutsourcePartQuantity,0)) HandoverStockQuantity,
		ld.LinkDataObjectId,
		ld.LinkDataObjectTypeId
	FROM ProductionAssignment pa
	INNER JOIN @Productions spo ON pa.ProductionOrderId = spo.ProductionOrderId
	INNER JOIN ProductionStep ps ON pa.ProductionStepId = ps.ProductionStepId AND ps.IsDeleted = 0
	INNER JOIN ProductionStep gps ON ps.ParentId = gps.ProductionStepId AND gps.IsDeleted = 0 AND ps.ContainerId = gps.ContainerId AND ps.ContainerTypeId = gps.ContainerTypeId
	INNER JOIN ProductionOrder po ON pa.ProductionOrderId = po.ProductionOrderId AND po.IsDeleted = 0 AND ps.SubsidiaryId = po.SubsidiaryId
	INNER JOIN ld ld ON ps.ProductionStepId = ld.ProductionStepId 
	INNER JOIN ProductionStepLinkData lda ON pa.ProductionStepLinkDataId = lda.ProductionStepLinkDataId AND lda.IsDeleted = 0
	LEFT JOIN handover ho ON pa.ProductionOrderId = ho.ProductionOrderId AND ld.LinkDataObjectTypeId = ho.ObjectTypeId AND ld.LinkDataObjectId = ho.ObjectId AND pa.ProductionStepId = ho.ProductionStepId AND pa.DepartmentId = ho.DepartmentId
	LEFT JOIN receive rc ON pa.ProductionOrderId = rc.ProductionOrderId AND ld.LinkDataObjectTypeId = rc.ObjectTypeId AND ld.LinkDataObjectId = rc.ObjectId AND pa.ProductionStepId = rc.ProductionStepId AND pa.DepartmentId = rc.DepartmentId
	LEFT JOIN inv inv ON po.ProductionOrderCode = inv.ProductionOrderCode AND ld.LinkDataObjectTypeId = 1 AND ld.LinkDataObjectId = inv.ProductId AND pa.ProductionStepId = inv.ProductionStepId AND pa.DepartmentId = inv.DepartmentId AND ((inv.InventoryTypeId = 1 AND ld.ProductionStepLinkDataRoleTypeId = 2) OR (inv.InventoryTypeId = 2 AND ld.ProductionStepLinkDataRoleTypeId = 1))
	WHERE ps.SubsidiaryId = @SubId AND pa.DepartmentId = @DepartmentId AND po.Date BETWEEN @FromDate AND @ToDate AND po.ProductionOrderCode LIKE @Keyword;

	
	
	DECLARE @ProductionOrderId bigint;
	DECLARE @ProductionOrderCode nvarchar(255);
	DECLARE @MaterialId bigint;
	DECLARE @HandoverType bigint;
		
	IF (SELECT CURSOR_STATUS('global','ProductionOrderCursor')) >= -1
	BEGIN
		CLOSE ProductionOrderCursor;  
		DEALLOCATE ProductionOrderCursor;
	END
	  
	DECLARE ProductionOrderCursor CURSOR FOR 
		SELECT d.ProductionOrderId, d.ProductionOrderCode, d.ObjectId MaterialId, d.ProductionStepLinkDataRoleTypeId HandoverType
		FROM @AllData d 
		WHERE d.HandoverStockQuantity > 0 AND d.ObjectTypeId = @PRODUCT_TYPE
		GROUP BY d.ProductionOrderId, d.ProductionOrderCode, d.ObjectId, d.ProductionStepLinkDataRoleTypeId
	OPEN ProductionOrderCursor    
	FETCH NEXT FROM ProductionOrderCursor INTO @ProductionOrderId, @ProductionOrderCode, @MaterialId, @HandoverType
			
	WHILE(@@FETCH_STATUS=0)  
	BEGIN  
		
		-- Tính tổng số lượng xuất / nhập kho chưa phân bổ công đoạn theo lệnh và sản phẩm
		DECLARE @TotalUnallocatedQuantity decimal(18,5) = 0;
		
		SELECT 
			@TotalUnallocatedQuantity = @TotalUnallocatedQuantity + ISNULL(id.PrimaryQuantity, 0)
		FROM StockDB.dbo.InventoryDetail id
		INNER JOIN StockDB.dbo.Inventory i ON id.InventoryId = i.InventoryId AND id.IsDeleted = 0 AND i.IsDeleted = 0 AND i.SubsidiaryId = @SubId AND id.SubsidiaryId = @SubId
		LEFT JOIN StockDB.dbo.InventoryRequirement ir ON ir.IsDeleted = 0 AND id.SubsidiaryId = ir.SubsidiaryId AND id.InventoryRequirementCode = ir.InventoryRequirementCode	AND i.DepartmentId = ir.DepartmentId
		LEFT JOIN StockDB.dbo.InventoryRequirementDetail ird ON ird.InventoryRequirementId = ir.InventoryRequirementId AND id.ProductId = ird.ProductId AND id.ProductionOrderCode = ird.ProductionOrderCode AND ird.IsDeleted = 0 AND id.SubsidiaryId = ird.SubsidiaryId 
		WHERE ird.ProductionStepId IS NULL
			AND id.ProductionOrderCode = @ProductionOrderCode 
			AND i.IsApproved = 1
			AND ((@HandoverType = @INPUT_TYPE AND i.InventoryTypeId = @EXPORT_TYPE) OR (@HandoverType = @OUTPUT_TYPE AND i.InventoryTypeId = @IMPORT_TYPE))
			AND id.ProductId = @MaterialId
			AND i.DepartmentId = @DepartmentId
		
		-- Duyệt cộng thêm số lượng đã hoàn thành chưa phân bổ cho các bàn giao
		DECLARE @RowIndex int = -1;
		DECLARE @HandoverStockQuantity decimal(18,5) = 0;
		DECLARE @AllocatedHandoverStockQuantity decimal(18,5) = 0;
		DECLARE @LastIndex int = -1;
		IF (SELECT CURSOR_STATUS('global','DataCursor')) >= -1
		BEGIN
			CLOSE DataCursor;  
			DEALLOCATE DataCursor;
		END
		DECLARE DataCursor CURSOR FOR 
			SELECT d.RowNumber, d.HandoverStockQuantity, d.AllocatedHandoverStockQuantity
			FROM @AllData d
			WHERE d.HandoverStockQuantity > 0 
				AND d.ObjectTypeId = @PRODUCT_TYPE
				AND d.ProductionOrderCode = @ProductionOrderCode
				AND d.ObjectId = @MaterialId
				AND d.ProductionStepLinkDataRoleTypeId = @HandoverType
		OPEN DataCursor    
		FETCH NEXT FROM DataCursor INTO @RowIndex, @HandoverStockQuantity, @AllocatedHandoverStockQuantity
		WHILE(@@FETCH_STATUS=0 AND @TotalUnallocatedQuantity > 0)  
		BEGIN  
			DECLARE @UnallocatedQuantity decimal(18,5);
			IF @TotalUnallocatedQuantity > @HandoverStockQuantity - @AllocatedHandoverStockQuantity
				SET @UnallocatedQuantity = @HandoverStockQuantity - @AllocatedHandoverStockQuantity;
			ELSE 
				SET @UnallocatedQuantity = @TotalUnallocatedQuantity;
			
			UPDATE @AllData
			SET HandoveredQuantity = HandoveredQuantity + @UnallocatedQuantity
			FROM @AllData d
			WHERE d.RowNumber = @RowIndex
				
			SET @LastIndex = @RowIndex;
			SET @TotalUnallocatedQuantity = @TotalUnallocatedQuantity - @UnallocatedQuantity;
			FETCH NEXT FROM DataCursor INTO @RowIndex, @HandoverStockQuantity, @AllocatedHandoverStockQuantity
		END  
		
		IF(@TotalUnallocatedQuantity > 0 AND @LastIndex > 0)
			UPDATE @AllData
			SET HandoveredQuantity = HandoveredQuantity + @TotalUnallocatedQuantity
			FROM @AllData d
			WHERE d.RowNumber = @LastIndex
			
		CLOSE DataCursor;
		DEALLOCATE DataCursor;  
		
		
		FETCH NEXT FROM ProductionOrderCursor INTO @ProductionOrderId, @ProductionOrderCode, @MaterialId, @HandoverType
	END  
		
	CLOSE ProductionOrderCursor;  
	DEALLOCATE ProductionOrderCursor;  
	
	-- Tổng số lượng
	SELECT 
		COUNT(*) Total, 
		SUM(ISNULL(g.InAssignmentQuantity,0)) InAssignmentQuantity,
		SUM(ISNULL(g.OutAssignmentQuantity,0)) OutAssignmentQuantity,
		SUM(ISNULL(g.InHandoveredQuantity,0)) InHandoveredQuantity,
		SUM(ISNULL(g.OutHandoveredQuantity,0)) OutHandoveredQuantity
	FROM (
		SELECT 
			ProductionOrderId,
			GroupId,
			SUM(CASE WHEN InOutType = N'Đầu vào' THEN ISNULL(AssignmentQuantity,0) ELSE 0 END) InAssignmentQuantity,
			SUM(CASE WHEN InOutType = N'Đầu ra' THEN ISNULL(AssignmentQuantity,0) ELSE 0 END) OutAssignmentQuantity,
			SUM(CASE WHEN InOutType = N'Đầu vào' THEN ISNULL(HandoveredQuantity,0) ELSE 0 END) InHandoveredQuantity,
			SUM(CASE WHEN InOutType = N'Đầu ra' THEN ISNULL(HandoveredQuantity,0) ELSE 0 END) OutHandoveredQuantity
		FROM @AllData
		WHERE @StepId = 0 OR StepId = @StepId
		GROUP BY ProductionOrderId, GroupId
	) g;
	
	
	-- Data hiển thị
	;WITH tmp AS (
		SELECT g.ProductionOrderId, g.GroupId, g.EndDate
		FROM(
			SELECT * FROM @AllData 
			WHERE @StepId = 0 OR StepId = @StepId
		) g
		GROUP BY g.ProductionOrderId, g.GroupId, g.EndDate
		ORDER BY g.EndDate
		OFFSET (@Page -1) * @Size
		ROWS FETCH NEXT @Size ROWS ONLY
	)
	SELECT v.* FROM tmp t
	LEFT JOIN @AllData v ON t.ProductionOrderId = v.ProductionOrderId AND t.GroupId = v.GroupId
	ORDER BY v.EndDate;
	

END


GO

USE ManufacturingDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_ProductionDepartmentHandover_bak_2022_04_13]
	@Keyword AS NVARCHAR(255),	
  @DepartmentId AS INT,
	@Size AS INT,
	@Page AS INT,
  @SubId AS INT,
	@FromDate AS DATETIME,
	@ToDate AS DATETIME,
	@StepId AS INT,
	@ProductId AS INT
AS
BEGIN
	DECLARE @PRODUCT_TYPE int = 1;
	DECLARE @INPUT_TYPE int = 1;
	DECLARE @OUTPUT_TYPE int = 2;
	DECLARE @IMPORT_TYPE int = 1;
	DECLARE @EXPORT_TYPE int = 2;
	DECLARE @HANDOVER_VIA_STOCK int = 2;
	
	SET @Keyword = CONCAT(N'%', @Keyword, N'%');
	
	
	-- 	Tính danh sách các LSX thỏa mãn
	DECLARE @Productions TABLE (
		ProductionOrderId bigint,
		ProductionOrderCode nvarchar(256)
	);
	
	INSERT INTO @Productions
		SELECT po.ProductionOrderId, po.ProductionOrderCode
		FROM ProductionAssignment pa
			INNER JOIN ProductionStep ps ON pa.ProductionStepId = ps.ProductionStepId AND ps.IsDeleted = 0
			INNER JOIN ProductionStep gps ON ps.ParentId = gps.ProductionStepId AND gps.IsDeleted = 0 AND ps.ContainerId = gps.ContainerId AND ps.ContainerTypeId = gps.ContainerTypeId
			INNER JOIN ProductionOrder po ON pa.ProductionOrderId = po.ProductionOrderId AND po.IsDeleted = 0 AND ps.SubsidiaryId = po.SubsidiaryId
			INNER JOIN ProductionOrderDetail pod ON po.ProductionOrderId = pod.ProductionOrderId AND pod.IsDeleted = 0 AND po.SubsidiaryId = pod.SubsidiaryId
			WHERE 
				ps.SubsidiaryId = @SubId 
				AND pa.DepartmentId = @DepartmentId 
				AND po.Date BETWEEN @FromDate AND @ToDate 
				AND po.ProductionOrderCode LIKE @Keyword
				AND (@StepId = 0 OR gps.StepId = @StepId)
				AND (@ProductId = 0 OR pod.ProductId = @ProductId)
			GROUP BY po.ProductionOrderId, po.ProductionOrderCode;
			
	DECLARE @AllData TABLE (
		RowNumber int NOT NULL IDENTITY(1,1),
		ProductionOrderId bigint,
		ProductionOrderCode nvarchar(256),
		StartDate datetime2,
		EndDate datetime2,
		ProductionStepId bigint,
		ProductionStepName nvarchar(256),
		GroupId bigint,
		StepId int,
		SubsidiaryId int,
		DepartmentId int,
		InOutType nvarchar(25),
		ProductionStepLinkDataRoleTypeId int,
		AssignmentQuantity decimal(18,5),
		HandoveredQuantity decimal(18,5),
		AllocatedHandoverStockQuantity decimal(18,5),
		AssignedProgressStatus int,
		HandoverStockQuantity decimal(18,5),
		ObjectId bigint,
		ObjectTypeId int
	);

	WITH handover AS (
		SELECT 
			h.ProductionOrderId,
			h.ObjectTypeId,
			h.ObjectId,
			h.FromProductionStepId ProductionStepId,
			h.FromDepartmentId DepartmentId,
			ISNULL(SUM(ISNULL(h.HandoverQuantity,0)),0) Quantity
		FROM ProductionHandover h
		INNER JOIN @Productions po ON h.ProductionOrderId = po.ProductionOrderId
		WHERE h.Status = 1 AND h.FromDepartmentId = @DepartmentId
		GROUP BY h.ProductionOrderId, h.ObjectTypeId, h.ObjectId, h.FromProductionStepId, h.FromDepartmentId
	),
	receive AS (
		SELECT 
			h.ProductionOrderId,
			h.ObjectTypeId,
			h.ObjectId,
			h.ToProductionStepId ProductionStepId,
			h.ToDepartmentId DepartmentId,
			ISNULL(SUM(ISNULL(h.HandoverQuantity,0)),0) Quantity
		FROM ProductionHandover h
		INNER JOIN @Productions po ON h.ProductionOrderId = po.ProductionOrderId
		WHERE h.Status = 1 AND h.ToDepartmentId = @DepartmentId
		GROUP BY h.ProductionOrderId, h.ObjectTypeId, h.ObjectId, h.ToProductionStepId, h.ToDepartmentId
	),
	inv AS (
		SELECT 
			v.ProductionOrderCode,
			v.ProductionStepId,
			v.DepartmentId,
			v.InventoryTypeId,
			v.ProductId,
			ISNULL(SUM(v.PrimaryQuantity),0) Quantity
		FROM ( 
			SELECT 
				ISNULL(ird.ProductionOrderCode, id.ProductionOrderCode) ProductionOrderCode,
				ir.ProductionStepId,
				ISNULL(ird.DepartmentId, i.DepartmentId) DepartmentId,
				i.InventoryTypeId,
				id.ProductId,
				ISNULL(id.PrimaryQuantity,0) PrimaryQuantity
			FROM StockDB.dbo.InventoryDetail id
			INNER JOIN StockDB.dbo.Inventory i ON id.InventoryId = i.InventoryId AND id.IsDeleted = 0 AND i.IsDeleted = 0 AND id.SubsidiaryId = i.SubsidiaryId 
			LEFT JOIN StockDB.dbo.InventoryRequirement ir ON ir.IsDeleted = 0 AND id.SubsidiaryId = ir.SubsidiaryId AND id.InventoryRequirementCode = ir.InventoryRequirementCode AND i.DepartmentId = ir.DepartmentId
			LEFT JOIN StockDB.dbo.InventoryRequirementDetail ird ON ird.InventoryRequirementId = ir.InventoryRequirementId AND id.ProductId = ird.ProductId AND id.ProductionOrderCode = ird.ProductionOrderCode AND ird.IsDeleted = 0 AND id.SubsidiaryId = ird.SubsidiaryId 
			INNER JOIN @Productions po ON ISNULL(ird.ProductionOrderCode, id.ProductionOrderCode) = po.ProductionOrderCode
			WHERE i.IsApproved = 1 
				AND ir.CensorStatus = 2 
				AND ird.ProductionOrderCode IS NOT NULL 
				AND ird.ProductionStepId > 0 
				AND ird.DepartmentId = @DepartmentId 
				AND i.SubsidiaryId = @SubId
			) v
		GROUP BY v.ProductionOrderCode, v.ProductionStepId, v.DepartmentId, v.InventoryTypeId, v.ProductId
	),
	ld AS (
		SELECT 
			ldr.ProductionStepLinkDataRoleTypeId,
			ldr.ProductionStepId,
			ld.LinkDataObjectTypeId,
			ld.LinkDataObjectId,
			SUM(ld.QuantityOrigin - ISNULL(ld.OutsourcePartQuantity,0)) Quantity,
			SUM(CASE WHEN ildr.ProductionStepLinkDataId IS NULL OR ips.IsFinish = 1 OR ld.ProductionStepLinkTypeId = @HANDOVER_VIA_STOCK THEN ld.QuantityOrigin - ISNULL(ld.OutsourcePartQuantity,0) ELSE 0 END) HandoverStockQuantity
		FROM ProductionStepLinkDataRole ldr 
		INNER JOIN ProductionStepLinkData ld ON ldr.ProductionStepLinkDataId = ld.ProductionStepLinkDataId AND ld.IsDeleted = 0 
		LEFT JOIN ProductionStepLinkDataRole ildr ON ldr.ProductionStepLinkDataRoleTypeId != ildr.ProductionStepLinkDataRoleTypeId AND ldr.ProductionStepLinkDataId = ildr.ProductionStepLinkDataId
		LEFT JOIN ProductionStep ips ON ildr.ProductionStepId = ips.ProductionStepId
		WHERE ld.SubsidiaryId = @SubId
		GROUP BY ldr.ProductionStepLinkDataRoleTypeId, ldr.ProductionStepId, ld.LinkDataObjectTypeId, ld.LinkDataObjectId
	)
	INSERT INTO @AllData
	SELECT 
		po.ProductionOrderId,
		po.ProductionOrderCode,
		po.StartDate,
		po.EndDate,
		ps.ProductionStepId,
		ps.Title ProductionStepName,
		ps.ParentId GroupId,
		gps.StepId,
		ps.SubsidiaryId,
		pa.DepartmentId,
		CASE 
			WHEN ld.ProductionStepLinkDataRoleTypeId = @INPUT_TYPE THEN N'Đầu vào'
			ELSE N'Đầu ra'
		END InOutType,
		ld.ProductionStepLinkDataRoleTypeId,
		pa.AssignmentQuantity * ld.Quantity / (lda.QuantityOrigin - ISNULL(lda.OutsourcePartQuantity,0)) AssignmentQuantity,
		CASE 
			WHEN ld.ProductionStepLinkDataRoleTypeId = @INPUT_TYPE THEN ISNULL(rc.Quantity,0) + ISNULL(inv.Quantity, 0)
			ELSE ISNULL(ho.Quantity, 0) + ISNULL(inv.Quantity, 0)
		END HandoveredQuantity,
		ISNULL(inv.Quantity, 0) AllocatedHandoverStockQuantity,
		pa.AssignedProgressStatus,
		pa.AssignmentQuantity * ld.HandoverStockQuantity / (lda.QuantityOrigin - ISNULL(lda.OutsourcePartQuantity,0)) HandoverStockQuantity,
		ld.LinkDataObjectId,
		ld.LinkDataObjectTypeId
	FROM ProductionAssignment pa
	INNER JOIN @Productions spo ON pa.ProductionOrderId = spo.ProductionOrderId
	INNER JOIN ProductionStep ps ON pa.ProductionStepId = ps.ProductionStepId AND ps.IsDeleted = 0
	INNER JOIN ProductionStep gps ON ps.ParentId = gps.ProductionStepId AND gps.IsDeleted = 0 AND ps.ContainerId = gps.ContainerId AND ps.ContainerTypeId = gps.ContainerTypeId
	INNER JOIN ProductionOrder po ON pa.ProductionOrderId = po.ProductionOrderId AND po.IsDeleted = 0 AND ps.SubsidiaryId = po.SubsidiaryId
	INNER JOIN ld ld ON ps.ProductionStepId = ld.ProductionStepId 
	INNER JOIN ProductionStepLinkData lda ON pa.ProductionStepLinkDataId = lda.ProductionStepLinkDataId AND lda.IsDeleted = 0
	LEFT JOIN handover ho ON pa.ProductionOrderId = ho.ProductionOrderId AND ld.LinkDataObjectTypeId = ho.ObjectTypeId AND ld.LinkDataObjectId = ho.ObjectId AND pa.ProductionStepId = ho.ProductionStepId AND pa.DepartmentId = ho.DepartmentId
	LEFT JOIN receive rc ON pa.ProductionOrderId = rc.ProductionOrderId AND ld.LinkDataObjectTypeId = rc.ObjectTypeId AND ld.LinkDataObjectId = rc.ObjectId AND pa.ProductionStepId = rc.ProductionStepId AND pa.DepartmentId = rc.DepartmentId
	LEFT JOIN inv inv ON po.ProductionOrderCode = inv.ProductionOrderCode AND ld.LinkDataObjectTypeId = 1 AND ld.LinkDataObjectId = inv.ProductId AND pa.ProductionStepId = inv.ProductionStepId AND pa.DepartmentId = inv.DepartmentId AND ((inv.InventoryTypeId = 1 AND ld.ProductionStepLinkDataRoleTypeId = 2) OR (inv.InventoryTypeId = 2 AND ld.ProductionStepLinkDataRoleTypeId = 1))
	WHERE ps.SubsidiaryId = @SubId AND pa.DepartmentId = @DepartmentId AND po.Date BETWEEN @FromDate AND @ToDate AND po.ProductionOrderCode LIKE @Keyword;

	
	
	DECLARE @ProductionOrderId bigint;
	DECLARE @ProductionOrderCode nvarchar(255);
	DECLARE @MaterialId bigint;
	DECLARE @HandoverType bigint;
		
	IF (SELECT CURSOR_STATUS('global','ProductionOrderCursor')) >= -1
	BEGIN
		CLOSE ProductionOrderCursor;  
		DEALLOCATE ProductionOrderCursor;
	END
	  
	DECLARE ProductionOrderCursor CURSOR FOR 
		SELECT d.ProductionOrderId, d.ProductionOrderCode, d.ObjectId MaterialId, d.ProductionStepLinkDataRoleTypeId HandoverType
		FROM @AllData d 
		WHERE d.HandoverStockQuantity > 0 AND d.ObjectTypeId = @PRODUCT_TYPE
		GROUP BY d.ProductionOrderId, d.ProductionOrderCode, d.ObjectId, d.ProductionStepLinkDataRoleTypeId
	OPEN ProductionOrderCursor    
	FETCH NEXT FROM ProductionOrderCursor INTO @ProductionOrderId, @ProductionOrderCode, @MaterialId, @HandoverType
			
	WHILE(@@FETCH_STATUS=0)  
	BEGIN  
		
		-- Tính tổng số lượng xuất / nhập kho chưa phân bổ công đoạn theo lệnh và sản phẩm
		DECLARE @TotalUnallocatedQuantity decimal(18,5) = 0;
		
		SELECT 
			@TotalUnallocatedQuantity = @TotalUnallocatedQuantity + ISNULL(id.PrimaryQuantity, 0)
		FROM StockDB.dbo.InventoryDetail id
		INNER JOIN StockDB.dbo.Inventory i ON id.InventoryId = i.InventoryId AND id.IsDeleted = 0 AND i.IsDeleted = 0 AND i.SubsidiaryId = @SubId AND id.SubsidiaryId = @SubId
		LEFT JOIN StockDB.dbo.InventoryRequirement ir ON ir.IsDeleted = 0 AND id.SubsidiaryId = ir.SubsidiaryId AND id.InventoryRequirementCode = ir.InventoryRequirementCode	AND i.DepartmentId = ir.DepartmentId
		LEFT JOIN StockDB.dbo.InventoryRequirementDetail ird ON ird.InventoryRequirementId = ir.InventoryRequirementId AND id.ProductId = ird.ProductId AND id.ProductionOrderCode = ird.ProductionOrderCode AND ird.IsDeleted = 0 AND id.SubsidiaryId = ird.SubsidiaryId 
		WHERE ird.ProductionStepId IS NULL
			AND id.ProductionOrderCode = @ProductionOrderCode 
			AND i.IsApproved = 1
			AND ((@HandoverType = @INPUT_TYPE AND i.InventoryTypeId = @EXPORT_TYPE) OR (@HandoverType = @OUTPUT_TYPE AND i.InventoryTypeId = @IMPORT_TYPE))
			AND id.ProductId = @MaterialId
			AND i.DepartmentId = @DepartmentId
		
		-- Duyệt cộng thêm số lượng đã hoàn thành chưa phân bổ cho các bàn giao
		DECLARE @RowIndex int = -1;
		DECLARE @HandoverStockQuantity decimal(18,5) = 0;
		DECLARE @AllocatedHandoverStockQuantity decimal(18,5) = 0;
		DECLARE @LastIndex int = -1;
		IF (SELECT CURSOR_STATUS('global','DataCursor')) >= -1
		BEGIN
			CLOSE DataCursor;  
			DEALLOCATE DataCursor;
		END
		DECLARE DataCursor CURSOR FOR 
			SELECT d.RowNumber, d.HandoverStockQuantity, d.AllocatedHandoverStockQuantity
			FROM @AllData d
			WHERE d.HandoverStockQuantity > 0 
				AND d.ObjectTypeId = @PRODUCT_TYPE
				AND d.ProductionOrderCode = @ProductionOrderCode
				AND d.ObjectId = @MaterialId
				AND d.ProductionStepLinkDataRoleTypeId = @HandoverType
		OPEN DataCursor    
		FETCH NEXT FROM DataCursor INTO @RowIndex, @HandoverStockQuantity, @AllocatedHandoverStockQuantity
		WHILE(@@FETCH_STATUS=0 AND @TotalUnallocatedQuantity > 0)  
		BEGIN  
			DECLARE @UnallocatedQuantity decimal(18,5);
			IF @TotalUnallocatedQuantity > @HandoverStockQuantity - @AllocatedHandoverStockQuantity
				SET @UnallocatedQuantity = @HandoverStockQuantity - @AllocatedHandoverStockQuantity;
			ELSE 
				SET @UnallocatedQuantity = @TotalUnallocatedQuantity;
			
			UPDATE @AllData
			SET HandoveredQuantity = HandoveredQuantity + @UnallocatedQuantity
			FROM @AllData d
			WHERE d.RowNumber = @RowIndex
				
			SET @LastIndex = @RowIndex;
			SET @TotalUnallocatedQuantity = @TotalUnallocatedQuantity - @UnallocatedQuantity;
			FETCH NEXT FROM DataCursor INTO @RowIndex, @HandoverStockQuantity, @AllocatedHandoverStockQuantity
		END  
		
		IF(@TotalUnallocatedQuantity > 0 AND @LastIndex > 0)
			UPDATE @AllData
			SET HandoveredQuantity = HandoveredQuantity + @TotalUnallocatedQuantity
			FROM @AllData d
			WHERE d.RowNumber = @LastIndex
			
		CLOSE DataCursor;
		DEALLOCATE DataCursor;  
		
		
		FETCH NEXT FROM ProductionOrderCursor INTO @ProductionOrderId, @ProductionOrderCode, @MaterialId, @HandoverType
	END  
		
	CLOSE ProductionOrderCursor;  
	DEALLOCATE ProductionOrderCursor;  
	
	-- Tổng số lượng
	SELECT 
		COUNT(*) Total, 
		SUM(ISNULL(g.InAssignmentQuantity,0)) InAssignmentQuantity,
		SUM(ISNULL(g.OutAssignmentQuantity,0)) OutAssignmentQuantity,
		SUM(ISNULL(g.InHandoveredQuantity,0)) InHandoveredQuantity,
		SUM(ISNULL(g.OutHandoveredQuantity,0)) OutHandoveredQuantity
	FROM (
		SELECT 
			ProductionOrderId,
			GroupId,
			SUM(CASE WHEN InOutType = N'Đầu vào' THEN ISNULL(AssignmentQuantity,0) ELSE 0 END) InAssignmentQuantity,
			SUM(CASE WHEN InOutType = N'Đầu ra' THEN ISNULL(AssignmentQuantity,0) ELSE 0 END) OutAssignmentQuantity,
			SUM(CASE WHEN InOutType = N'Đầu vào' THEN ISNULL(HandoveredQuantity,0) ELSE 0 END) InHandoveredQuantity,
			SUM(CASE WHEN InOutType = N'Đầu ra' THEN ISNULL(HandoveredQuantity,0) ELSE 0 END) OutHandoveredQuantity
		FROM @AllData
		WHERE @StepId = 0 OR StepId = @StepId
		GROUP BY ProductionOrderId, GroupId
	) g;
	
	
	-- Data hiển thị
	;WITH tmp AS (
		SELECT g.ProductionOrderId, g.GroupId, g.EndDate
		FROM(
			SELECT * FROM @AllData 
			WHERE @StepId = 0 OR StepId = @StepId
		) g
		GROUP BY g.ProductionOrderId, g.GroupId, g.EndDate
		ORDER BY g.EndDate
		OFFSET (@Page -1) * @Size
		ROWS FETCH NEXT @Size ROWS ONLY
	)
	SELECT v.* FROM tmp t
	LEFT JOIN @AllData v ON t.ProductionOrderId = v.ProductionOrderId AND t.GroupId = v.GroupId
	ORDER BY v.EndDate;
	

END


GO

USE ManufacturingDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_ProductionDepartmentHandover]
    @Keyword AS NVARCHAR(255),
    @DepartmentId AS INT,
    @Size AS INT,
    @Page AS INT,
    @SubId AS INT,
    @FromDate AS DATETIME,
    @ToDate AS DATETIME,
    @StepId AS INT,
    @ProductId AS INT,
	@ProductionStepLinkDataRoleTypeId INT = NULL,
	@IsInFinish BIT = NULL,
	@IsOutFinish BIT = NULL
AS
BEGIN
	
   -- DECLARE @PRODUCT_TYPE INT = 1;
   -- DECLARE @INPUT_TYPE INT = 1;
   -- DECLARE @OUTPUT_TYPE INT = 2;
   -- DECLARE @IMPORT_TYPE INT = 1;
   -- DECLARE @EXPORT_TYPE INT = 2;
   -- DECLARE @HANDOVER_VIA_STOCK INT = 2;

	DECLARE @PRODUCTION_STEP_LINK_TYPE_VIA_STOCK INT = 2;

	DECLARE @CONTAINER_TYPE_PRODUCTION_ORDER INT = 2;
	DECLARE @CENSOR_STATUS_APPROVED INT = 2;
	DECLARE @INVENTORY_TYPE_INPUT INT = 1;
	DECLARE @INVENTORY_TYPE_OUT INT = 2;

	DECLARE @LINK_DATA_OBJECT_TYPE_PRODUCT INT = 1;

	DECLARE @LINK_DATA_OBJECT_TYPE_SEMI INT = 2;

	DECLARE @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN INT = 1;
	DECLARE @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT INT = 2;

	DECLARE @ASSIGNED_PROGRESS_STATUS_FINISHED INT = 3

    SET @Keyword = CONCAT(N'%', @Keyword, N'%');


    -- 	Tính danh sách các LSX thỏa mãn
    DECLARE @Productions TABLE (ProductionOrderId BIGINT,
                                ProductionOrderCode NVARCHAR(256));

    INSERT INTO @Productions
    SELECT      po.ProductionOrderId,
                po.ProductionOrderCode
      FROM      ProductionAssignment pa
     INNER JOIN ProductionStep ps
        ON pa.ProductionStepId  = ps.ProductionStepId
       AND ps.IsDeleted         = 0
     INNER JOIN ProductionStep gps
        ON ps.ParentId          = gps.ProductionStepId
       AND gps.IsDeleted        = 0
       AND ps.ContainerId       = gps.ContainerId
       AND ps.ContainerTypeId   = gps.ContainerTypeId
     INNER JOIN ProductionOrder po
        ON pa.ProductionOrderId = po.ProductionOrderId
       AND po.IsDeleted         = 0
       AND ps.SubsidiaryId      = po.SubsidiaryId
     INNER JOIN ProductionOrderDetail pod
        ON po.ProductionOrderId = pod.ProductionOrderId
       AND pod.IsDeleted        = 0
       AND po.SubsidiaryId      = pod.SubsidiaryId
     WHERE      ps.SubsidiaryId = @SubId
       AND      pa.DepartmentId      = @DepartmentId
       AND      po.Date BETWEEN @FromDate AND @ToDate
       AND      po.ProductionOrderCode LIKE @Keyword
       AND      (   @StepId          = 0
               OR   gps.StepId       = @StepId)
       AND      (   @ProductId       = 0
               OR   pod.ProductId    = @ProductId)
     GROUP BY po.ProductionOrderId,
              po.ProductionOrderCode;

    DECLARE @AllData TABLE (RowNumber INT NOT NULL IDENTITY(1, 1),
                            ProductionOrderId BIGINT,
                            ProductionOrderCode NVARCHAR(256),
                            StartDate DATETIME2,
                            EndDate DATETIME2,
                            ProductionStepId BIGINT,
                            ProductionStepName NVARCHAR(256),
                            GroupId BIGINT,
                            StepId INT,
                            SubsidiaryId INT,
                            DepartmentId INT,
                            InOutType NVARCHAR(25),
                            ProductionStepLinkDataRoleTypeId INT,
                            AssignmentQuantity DECIMAL(18, 5),
                            HandoveredQuantity DECIMAL(18, 5),
                            AllocatedHandoverStockQuantity DECIMAL(18, 5),
                            AssignedProgressStatus INT,
							IsFinish BIT,
                            HandoverStockQuantity DECIMAL(18, 5),
                            ObjectId BIGINT,
                            ObjectTypeId INT);

    WITH handover
      AS (SELECT      h.ProductionOrderId,
                      h.ObjectTypeId,
                      h.ObjectId,
                      h.FromProductionStepId ProductionStepId,
                      h.FromDepartmentId DepartmentId,
                      ISNULL(SUM(ISNULL(h.HandoverQuantity, 0)), 0) Quantity
            FROM      ProductionHandover h
           INNER JOIN @Productions po
              ON h.ProductionOrderId = po.ProductionOrderId
           WHERE      h.Status      = 1
             AND      h.FromDepartmentId = @DepartmentId
           GROUP BY h.ProductionOrderId,
                    h.ObjectTypeId,
                    h.ObjectId,
                    h.FromProductionStepId,
                    h.FromDepartmentId),
         receive
      AS (SELECT      h.ProductionOrderId,
                      h.ObjectTypeId,
                      h.ObjectId,
                      h.ToProductionStepId ProductionStepId,
                      h.ToDepartmentId DepartmentId,
                      ISNULL(SUM(ISNULL(h.HandoverQuantity, 0)), 0) Quantity
            FROM      ProductionHandover h
           INNER JOIN @Productions po
              ON h.ProductionOrderId = po.ProductionOrderId
           WHERE      h.Status    = 1
             AND      h.ToDepartmentId = @DepartmentId
           GROUP BY h.ProductionOrderId,
                    h.ObjectTypeId,
                    h.ObjectId,
                    h.ToProductionStepId,
                    h.ToDepartmentId),
         inv
      AS (SELECT v.ProductionOrderCode,
                 v.ProductionStepId,
                 v.DepartmentId,
                 v.InventoryTypeId,
                 v.ProductId,
                 ISNULL(SUM(v.PrimaryQuantity), 0) Quantity
            FROM (   SELECT      ISNULL(ird.ProductionOrderCode, id.ProductionOrderCode) ProductionOrderCode,
                                 ir.ProductionStepId,
                                 ISNULL(ird.DepartmentId, i.DepartmentId) DepartmentId,
                                 i.InventoryTypeId,
                                 id.ProductId,
                                 ISNULL(id.PrimaryQuantity, 0) PrimaryQuantity
                       FROM      StockDB.dbo.InventoryDetail id
                      INNER JOIN StockDB.dbo.Inventory i
                         ON id.InventoryId                                          = i.InventoryId
                        AND id.IsDeleted                                            = 0
                        AND i.IsDeleted                                             = 0
                        AND id.SubsidiaryId                                         = i.SubsidiaryId
                       LEFT JOIN StockDB.dbo.InventoryRequirement ir
                         ON ir.IsDeleted                                            = 0
                        AND id.SubsidiaryId                                         = ir.SubsidiaryId
                        AND id.InventoryRequirementCode                             = ir.InventoryRequirementCode
                        AND i.DepartmentId                                          = ir.DepartmentId
                       LEFT JOIN StockDB.dbo.InventoryRequirementDetail ird
                         ON ird.InventoryRequirementId                              = ir.InventoryRequirementId
                        AND id.ProductId                                            = ird.ProductId
                        AND id.ProductionOrderCode                                  = ird.ProductionOrderCode
                        AND ird.IsDeleted                                           = 0
                        AND id.SubsidiaryId                                         = ird.SubsidiaryId
                      INNER JOIN @Productions po
                         ON ISNULL(ird.ProductionOrderCode, id.ProductionOrderCode) = po.ProductionOrderCode
                      WHERE      i.IsApproved    = 1
                        AND      ir.CensorStatus      = @CENSOR_STATUS_APPROVED
                        AND      ird.ProductionOrderCode IS NOT NULL
                        AND      ird.ProductionStepId > 0
                        AND      ird.DepartmentId     = @DepartmentId
                        AND      i.SubsidiaryId       = @SubId) v
           GROUP BY v.ProductionOrderCode,
                    v.ProductionStepId,
                    v.DepartmentId,
                    v.InventoryTypeId,
                    v.ProductId),
         ld
      AS (SELECT      ldr.ProductionStepLinkDataRoleTypeId,
                      ldr.ProductionStepId,
                      ld.LinkDataObjectTypeId,
                      ld.LinkDataObjectId,
                      SUM(ld.QuantityOrigin - ISNULL(ld.OutsourcePartQuantity, 0)) Quantity,
                      SUM(CASE
                               WHEN ildr.ProductionStepLinkDataId IS NULL
                                 OR ips.IsFinish = 1
                                 OR ld.ProductionStepLinkTypeId = @PRODUCTION_STEP_LINK_TYPE_VIA_STOCK THEN
                                   ld.QuantityOrigin - ISNULL(ld.OutsourcePartQuantity, 0)
                               ELSE 0 END) HandoverStockQuantity
            FROM      ProductionStepLinkDataRole ldr
           INNER JOIN ProductionStepLinkData ld
              ON ldr.ProductionStepLinkDataId         = ld.ProductionStepLinkDataId
             AND ld.IsDeleted                         = 0
            LEFT JOIN ProductionStepLinkDataRole ildr
              ON ldr.ProductionStepLinkDataRoleTypeId <> ildr.ProductionStepLinkDataRoleTypeId
             AND ldr.ProductionStepLinkDataId         = ildr.ProductionStepLinkDataId
            LEFT JOIN ProductionStep ips
              ON ildr.ProductionStepId                = ips.ProductionStepId
           WHERE      ld.SubsidiaryId = @SubId
					AND (@ProductionStepLinkDataRoleTypeId IS NULL OR @ProductionStepLinkDataRoleTypeId = ldr.ProductionStepLinkDataRoleTypeId)
           GROUP BY ldr.ProductionStepLinkDataRoleTypeId,
                    ldr.ProductionStepId,
                    ld.LinkDataObjectTypeId,
                    ld.LinkDataObjectId)
    INSERT INTO @AllData
    SELECT      po.ProductionOrderId,
                po.ProductionOrderCode,
                po.StartDate,
                po.EndDate,
                ps.ProductionStepId,
                ps.Title ProductionStepName,
                ps.ParentId GroupId,
                gps.StepId,
                ps.SubsidiaryId,
                pa.DepartmentId,
                CASE
                     WHEN ld.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN THEN N'Đầu vào'
                     ELSE N'Đầu ra' END InOutType,
                ld.ProductionStepLinkDataRoleTypeId,
                pa.AssignmentQuantity * ld.Quantity / (lda.QuantityOrigin - ISNULL(lda.OutsourcePartQuantity, 0)) AssignmentQuantity,
                CASE
                     WHEN ld.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN THEN
                         ISNULL(rc.Quantity, 0) + ISNULL(inv.Quantity, 0)
                     ELSE ISNULL(ho.Quantity, 0) + ISNULL(inv.Quantity, 0)END HandoveredQuantity,
                ISNULL(inv.Quantity, 0) AllocatedHandoverStockQuantity,
                pa.AssignedProgressStatus,
				CASE pa.AssignedProgressStatus WHEN @ASSIGNED_PROGRESS_STATUS_FINISHED THEN 1 ELSE 0 END,
                pa.AssignmentQuantity * ld.HandoverStockQuantity
                / (lda.QuantityOrigin - ISNULL(lda.OutsourcePartQuantity, 0)) HandoverStockQuantity,
                ld.LinkDataObjectId,
                ld.LinkDataObjectTypeId
      FROM      ProductionAssignment pa
     INNER JOIN @Productions spo
        ON pa.ProductionOrderId                        = spo.ProductionOrderId
     INNER JOIN ProductionStep ps
        ON pa.ProductionStepId                         = ps.ProductionStepId
       AND ps.IsDeleted                                = 0
     INNER JOIN ProductionStep gps
        ON ps.ParentId                                 = gps.ProductionStepId
       AND gps.IsDeleted                               = 0
       AND ps.ContainerId                              = gps.ContainerId
       AND ps.ContainerTypeId                          = gps.ContainerTypeId
     INNER JOIN ProductionOrder po
        ON pa.ProductionOrderId                        = po.ProductionOrderId
       AND po.IsDeleted                                = 0
       AND ps.SubsidiaryId                             = po.SubsidiaryId
     INNER JOIN ld ld
        ON ps.ProductionStepId                         = ld.ProductionStepId
     INNER JOIN ProductionStepLinkData lda
        ON pa.ProductionStepLinkDataId                 = lda.ProductionStepLinkDataId
       AND lda.IsDeleted                               = 0
      LEFT JOIN handover ho
        ON pa.ProductionOrderId                        = ho.ProductionOrderId
       AND ld.LinkDataObjectTypeId                     = ho.ObjectTypeId
       AND ld.LinkDataObjectId                         = ho.ObjectId
       AND pa.ProductionStepId                         = ho.ProductionStepId
       AND pa.DepartmentId                             = ho.DepartmentId
      LEFT JOIN receive rc
        ON pa.ProductionOrderId                        = rc.ProductionOrderId
       AND ld.LinkDataObjectTypeId                     = rc.ObjectTypeId
       AND ld.LinkDataObjectId                         = rc.ObjectId
       AND pa.ProductionStepId                         = rc.ProductionStepId
       AND pa.DepartmentId                             = rc.DepartmentId
      LEFT JOIN inv inv
        ON po.ProductionOrderCode                      = inv.ProductionOrderCode
       AND ld.LinkDataObjectTypeId                     = @LINK_DATA_OBJECT_TYPE_PRODUCT
       AND ld.LinkDataObjectId                         = inv.ProductId
       AND pa.ProductionStepId                         = inv.ProductionStepId
       AND pa.DepartmentId                             = inv.DepartmentId
       AND (   (   inv.InventoryTypeId                 = @INVENTORY_TYPE_INPUT
             AND   ld.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT)
          OR   (   inv.InventoryTypeId                   = @INVENTORY_TYPE_OUT
             AND   ld.ProductionStepLinkDataRoleTypeId   = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN))
     WHERE      ps.SubsidiaryId = @SubId
       AND      pa.DepartmentId      = @DepartmentId
       AND      po.Date BETWEEN @FromDate AND @ToDate
       AND      po.ProductionOrderCode LIKE @Keyword;



    DECLARE @ProductionOrderId BIGINT;
    DECLARE @ProductionOrderCode NVARCHAR(255);
    DECLARE @MaterialId BIGINT;
    DECLARE @HandoverType BIGINT;

    IF (SELECT CURSOR_STATUS('global', 'ProductionOrderCursor')) >= -1
    BEGIN
        CLOSE ProductionOrderCursor;
        DEALLOCATE ProductionOrderCursor;
    END;

    DECLARE ProductionOrderCursor CURSOR FOR
    SELECT d.ProductionOrderId,
           d.ProductionOrderCode,
           d.ObjectId MaterialId,
           d.ProductionStepLinkDataRoleTypeId HandoverType
      FROM @AllData d
     WHERE d.HandoverStockQuantity > 0
       AND d.ObjectTypeId          = @LINK_DATA_OBJECT_TYPE_PRODUCT
     GROUP BY d.ProductionOrderId,
              d.ProductionOrderCode,
              d.ObjectId,
              d.ProductionStepLinkDataRoleTypeId;
    OPEN ProductionOrderCursor;
    FETCH NEXT FROM ProductionOrderCursor
     INTO @ProductionOrderId,
          @ProductionOrderCode,
          @MaterialId,
          @HandoverType;

    WHILE (@@FETCH_STATUS = 0)
    BEGIN

        -- Tính tổng số lượng xuất / nhập kho chưa phân bổ công đoạn theo lệnh và sản phẩm
        DECLARE @TotalUnallocatedQuantity DECIMAL(18, 5) = 0;

        SELECT      @TotalUnallocatedQuantity = @TotalUnallocatedQuantity + ISNULL(id.PrimaryQuantity, 0)
          FROM      StockDB.dbo.InventoryDetail id
         INNER JOIN StockDB.dbo.Inventory i
            ON id.InventoryId              = i.InventoryId
           AND id.IsDeleted                = 0
           AND i.IsDeleted                 = 0
           AND i.SubsidiaryId              = @SubId
           AND id.SubsidiaryId             = @SubId
          LEFT JOIN StockDB.dbo.InventoryRequirement ir
            ON ir.IsDeleted                = 0
           AND id.SubsidiaryId             = ir.SubsidiaryId
           AND id.InventoryRequirementCode = ir.InventoryRequirementCode
           AND i.DepartmentId              = ir.DepartmentId
          LEFT JOIN StockDB.dbo.InventoryRequirementDetail ird
            ON ird.InventoryRequirementId  = ir.InventoryRequirementId
           AND id.ProductId                = ird.ProductId
           AND id.ProductionOrderCode      = ird.ProductionOrderCode
           AND ird.IsDeleted               = 0
           AND id.SubsidiaryId             = ird.SubsidiaryId
         WHERE      ird.ProductionStepId IS NULL
           AND      id.ProductionOrderCode    = @ProductionOrderCode
           AND      i.IsApproved              = 1
           AND      (   (   @HandoverType     = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN
                      AND   i.InventoryTypeId = @INVENTORY_TYPE_OUT)
                   OR   (   @HandoverType       = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT
                      AND   i.InventoryTypeId   = @INVENTORY_TYPE_INPUT))
           AND      id.ProductId              = @MaterialId
           AND      i.DepartmentId            = @DepartmentId;

        -- Duyệt cộng thêm số lượng đã hoàn thành chưa phân bổ cho các bàn giao
        DECLARE @RowIndex INT = -1;
        DECLARE @HandoverStockQuantity DECIMAL(18, 5) = 0;
        DECLARE @AllocatedHandoverStockQuantity DECIMAL(18, 5) = 0;
        DECLARE @LastIndex INT = -1;
        IF (SELECT CURSOR_STATUS('global', 'DataCursor')) >= -1
        BEGIN
            CLOSE DataCursor;
            DEALLOCATE DataCursor;
        END;
        DECLARE DataCursor CURSOR FOR
        SELECT d.RowNumber,
               d.HandoverStockQuantity,
               d.AllocatedHandoverStockQuantity
          FROM @AllData d
         WHERE d.HandoverStockQuantity            > 0
           AND d.ObjectTypeId                     = @LINK_DATA_OBJECT_TYPE_PRODUCT
           AND d.ProductionOrderCode              = @ProductionOrderCode
           AND d.ObjectId                         = @MaterialId
           AND d.ProductionStepLinkDataRoleTypeId = @HandoverType;
        OPEN DataCursor;
        FETCH NEXT FROM DataCursor
         INTO @RowIndex,
              @HandoverStockQuantity,
              @AllocatedHandoverStockQuantity;
        WHILE (@@FETCH_STATUS = 0 AND @TotalUnallocatedQuantity > 0)
        BEGIN
            DECLARE @UnallocatedQuantity DECIMAL(18, 5);
            IF @TotalUnallocatedQuantity > @HandoverStockQuantity - @AllocatedHandoverStockQuantity
                SET @UnallocatedQuantity = @HandoverStockQuantity - @AllocatedHandoverStockQuantity;
            ELSE
                SET @UnallocatedQuantity = @TotalUnallocatedQuantity;

            UPDATE @AllData
               SET HandoveredQuantity = HandoveredQuantity + @UnallocatedQuantity
              FROM @AllData d
             WHERE d.RowNumber = @RowIndex;

            SET @LastIndex = @RowIndex;
            SET @TotalUnallocatedQuantity = @TotalUnallocatedQuantity - @UnallocatedQuantity;
            FETCH NEXT FROM DataCursor
             INTO @RowIndex,
                  @HandoverStockQuantity,
                  @AllocatedHandoverStockQuantity;
        END;

        IF (@TotalUnallocatedQuantity > 0 AND @LastIndex > 0)
            UPDATE @AllData
               SET HandoveredQuantity = HandoveredQuantity + @TotalUnallocatedQuantity
              FROM @AllData d
             WHERE d.RowNumber = @LastIndex;

        CLOSE DataCursor;
        DEALLOCATE DataCursor;


        FETCH NEXT FROM ProductionOrderCursor
         INTO @ProductionOrderId,
              @ProductionOrderCode,
              @MaterialId,
              @HandoverType;
    END;

    CLOSE ProductionOrderCursor;
    DEALLOCATE ProductionOrderCursor;
	

    -- Tổng số lượng
    SELECT COUNT(0) Total,
           SUM(ISNULL(g.InAssignmentQuantity, 0)) InAssignmentQuantity,
           SUM(ISNULL(g.OutAssignmentQuantity, 0)) OutAssignmentQuantity,
           SUM(ISNULL(g.InHandoveredQuantity, 0)) InHandoveredQuantity,
           SUM(ISNULL(g.OutHandoveredQuantity, 0)) OutHandoveredQuantity
      FROM (   SELECT ProductionOrderId,
                      GroupId,
                      SUM(CASE
                               WHEN ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN THEN ISNULL(AssignmentQuantity, 0)
                               ELSE 0 END) InAssignmentQuantity,
                      SUM(CASE
                               WHEN ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT THEN ISNULL(AssignmentQuantity, 0)
                               ELSE 0 END) OutAssignmentQuantity,
                      SUM(CASE
                               WHEN ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN THEN ISNULL(HandoveredQuantity, 0)
                               ELSE 0 END) InHandoveredQuantity,
                      SUM(CASE
                               WHEN ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT THEN ISNULL(HandoveredQuantity, 0)
                               ELSE 0 END) OutHandoveredQuantity
                 FROM @AllData
                WHERE (@StepId = 0 OR StepId = @StepId)
				AND (@IsInFinish IS NULL OR @IsInFinish = IsFinish OR ProductionStepLinkDataRoleTypeId <> @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN)
				AND (@IsOutFinish IS NULL OR @IsOutFinish = IsFinish OR ProductionStepLinkDataRoleTypeId <> @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT)

                GROUP BY ProductionOrderId,
                         GroupId) g;


    -- Data hiển thị
    ;
    WITH tmp
      AS (SELECT g.ProductionOrderId,
                 g.GroupId,
                 MAX(g.EndDate) EndDate
            FROM (
			SELECT * FROM @AllData 
			WHERE (@StepId = 0 OR StepId = @StepId)
				AND (@IsInFinish IS NULL OR @IsInFinish = IsFinish AND ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN)
				AND (@IsOutFinish IS NULL OR @IsOutFinish = IsFinish AND ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT)
			) g
           GROUP BY g.ProductionOrderId,
                    g.GroupId                 
           ORDER BY MAX(g.EndDate) OFFSET (@Page - 1) * @Size ROWS FETCH NEXT @Size ROWS ONLY)
    SELECT      v.*
      FROM      tmp t
      LEFT JOIN @AllData v
        ON t.ProductionOrderId = v.ProductionOrderId
       AND t.GroupId           = v.GroupId
     ORDER BY v.EndDate;


END;

GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[v_MonthPlan] AS 
							SELECT 
    mp.MonthPlanId F_Id,
    mp.MonthPlanName,
    mp.StartDate,
    mp.EndDate,
    mp.MonthNote
FROM [ManufacturingDB].dbo.MonthPlan mp WHERE mp.IsDeleted = 0
							;

GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[RefPropertyCalc]
AS
SELECT        PropertyCalcId, SubsidiaryId, PropertyCalcCode, Title, Description, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, IsDeleted, DeletedDatetimeUtc
FROM            PurchaseOrderDB.dbo.PropertyCalc


GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[RefCustomer]
AS
SELECT        CustomerId, SubsidiaryId, CustomerCode, CustomerName, CustomerTypeId, Address, TaxIdNo, PhoneNumber, Website, Email, Description, IsActived, IsDeleted, CreatedDatetimeUtc, UpdatedDatetimeUtc, CustomerStatusId, 
                         LegalRepresentative, Identify, DebtDays, DebtLimitation, DebtBeginningTypeId, DebtManagerUserId, LoanDays, LoanLimitation, LoanBeginningTypeId, LoanManagerUserId
FROM            OrganizationDB.dbo.Customer


GO

USE ManufacturingDB
GO

CREATE OR ALTER VIEW [dbo].[RefProduct]
AS
SELECT p.ProductId,
       p.SubsidiaryId,
       p.ProductCode,
       p.ProductName,
       p.ProductInternalName,
       p.IsCanBuy,
       p.IsCanSell,
       p.MainImageFileId,
       p.ProductTypeId,
       p.ProductCateId,
       p.BarcodeStandardId,
       p.BarcodeConfigId,
       p.Barcode,
       p.UnitId,
       p.EstimatePrice,
       p.Long,
       p.Width,
       p.Height,
       p.CreatedDatetimeUtc,
       p.UpdatedDatetimeUtc,
       p.IsDeleted,
       p.ProductStatusId,
       p.PackingMethod,
       p.CustomerId,
       p.NetWeight,
       p.GrossWeight,
       p.Measurement,
       p.LoadAbility,
       p.SellDescription,
       p.ProductNameEng,
       p.Quantitative,
       p.QuantitativeUnitTypeId,
       p.ProductionProcessVersion,
	   u.UnitName
FROM StockDB.dbo.Product p
    JOIN MasterDB.dbo.Unit u
        ON u.UnitId = p.UnitId;


GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[RefOutsourceStepTrack]
AS
SELECT        po.PurchaseOrderId, po.PurchaseOrderCode, t.PurchaseOrderTrackedId, t.Date, t.ProductId, t.Quantity, t.Status, t.Description
FROM            PurchaseOrderDB.dbo.PurchaseOrder AS po INNER JOIN
                         PurchaseOrderDB.dbo.PurchaseOrderTracked AS t ON po.PurchaseOrderId = t.PurchaseOrderId AND t.IsDeleted = 0
WHERE        (po.PurchaseOrderType = 1) AND (po.IsApproved = 1)


GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[RefOutsourcePartTrack]
AS
SELECT        po.PurchaseOrderId, po.PurchaseOrderCode, t.PurchaseOrderTrackedId, t.Date, t.ProductId, t.Quantity, t.Status, t.Description
FROM            PurchaseOrderDB.dbo.PurchaseOrder AS po INNER JOIN
                         PurchaseOrderDB.dbo.PurchaseOrderTracked AS t ON po.PurchaseOrderId = t.PurchaseOrderId AND t.IsDeleted = 0
WHERE        (po.PurchaseOrderType = 2) AND (po.IsApproved = 1)


GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[v_Department_Factory] AS 
							SELECT 
 DepartmentId F_Id,
DepartmentName,
DepartmentCode,
Description,
IsActived,
WorkingHoursPerDay,
IsProduction,
SubsidiaryId,
ParentId,
IsFactory
FROM [OrganizationDB].[dbo].Department 
WHERE IsDeleted=0 AND IsFactory = 1

GO

USE ManufacturingDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_ProductionDepartmentHandover_ByDate]
	@FromDepartmentIds _BIGINTVALUES READONLY,
	@ToDepartmentIds _BIGINTVALUES READONLY,
	@FromStepIds _BIGINTVALUES READONLY,
	@ToStepIds _BIGINTVALUES READONLY,
	@FromDate	DATETIME2,
	@ToDate		DATETIME2,
	@SubId		INT,
	@IsInFinish BIT,
	@IsOutFinish BIT,	
	@Page		INT,
	@Size		INT
AS
BEGIN
    SET TRAN ISOLATION LEVEL READ UNCOMMITTED;
	--SET ARITHABORT ON;
	DECLARE @IsByFromDepartmentIds BIT = 0
	DECLARE @IsByToDepartmentIds BIT = 0

	DECLARE @IsByFromStepIds BIT = 0
	DECLARE @IsByToStepIds BIT = 0

	IF EXISTS(SELECT 0 FROM @FromDepartmentIds)
	BEGIN
	    SET @IsByFromDepartmentIds = 1
	END

	IF EXISTS(SELECT 0 FROM @ToDepartmentIds)
	BEGIN
	    SET @IsByToDepartmentIds = 1
	END

	IF EXISTS(SELECT 0 FROM @FromStepIds)
	BEGIN
	    SET @IsByFromStepIds = 1
	END

	IF EXISTS(SELECT 0 FROM @ToStepIds)
	BEGIN
	    SET @IsByToStepIds = 1
	END

	DECLARE @LINK_DATA_OBJECT_TYPE_PRODUCT INT = 1;
	DECLARE @INVENTORY_TYPE_INPUT INT = 1;
	--DECLARE @INVENTORY_TYPE_OUT INT = 2;
	DECLARE @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN INT = 1;
	DECLARE @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT INT = 2;
	DECLARE @ASSIGNED_PROGRESS_STATUS_CONFIRMED INT = 3;

	DECLARE @EnumHandoverStatus_Approved INT = 1;
	DECLARE @EnumHandoverStatus_Rejected INT = 2;

	;WITH oneStepOneDepartment AS (
		SELECT 
			MAX(a.ProductionStepId) ProductionStepId, 
			a.ProductionOrderId, 
			a.DepartmentId,
			MAX(a.ProductionStepLinkDataId) ProductionStepLinkDataId	
		FROM dbo.ProductionAssignment a 	
		GROUP BY a.ProductionOrderId, a.DepartmentId
		HAVING COUNT(0) = 1
	),inventoryHandover AS(
	
		SELECT 
			
			inv.FromDepartmentId,
			inv.FromProductionStepId,
			inv.ToDepartmentId,
			inv.ToProductionStepId,
			inv.ProductionOrderId,
			inv.LinkDataObjectId,
			inv.LinkDataObjectTypeId,
			inv.Quantity Quantity,
			inv.[Date],
			inv.Note
		FROM (
			SELECT		
		
				CASE WHEN i.InventoryTypeId = @INVENTORY_TYPE_INPUT THEN al.DepartmentId ELSE 0 END FromDepartmentId,
				CASE WHEN i.InventoryTypeId = @INVENTORY_TYPE_INPUT THEN al.ProductionStepId ELSE 0 END FromProductionStepId,

				CASE WHEN i.InventoryTypeId = @INVENTORY_TYPE_INPUT THEN 0 ELSE al.DepartmentId END ToDepartmentId,
				CASE WHEN i.InventoryTypeId = @INVENTORY_TYPE_INPUT THEN 0 ELSE al.ProductionStepId  END ToProductionStepId,

				al.ProductionOrderId,
				al.SourceProductId  LinkDataObjectId,
				@LINK_DATA_OBJECT_TYPE_PRODUCT LinkDataObjectTypeId,
				al.SourceQuantity Quantity,
				i.[Date],
				id.[Description] Note
		
				
			FROM dbo.MaterialAllocation al
				JOIN StockDB.dbo.InventoryDetail id ON al.InventoryDetailId = id.InventoryDetailId
				JOIN StockDB.dbo.Inventory i ON id.InventoryId = i.InventoryId

			WHERE al.SubsidiaryId = @SubId
					AND id.IsDeleted = 0 
					AND i.IsDeleted  = 0 
					AND i.SubsidiaryId = @SubId 
					AND id.SubsidiaryId = @SubId
					AND i.IsApproved = 1
					AND (@FromDate IS NULL OR i.[Date] BETWEEN @FromDate AND @ToDate)
				

			UNION ALL

			SELECT
				CASE WHEN inv.InventoryTypeId = @INVENTORY_TYPE_INPUT THEN inv.DepartmentId ELSE 0 END FromDepartmentId,
				CASE WHEN inv.InventoryTypeId = @INVENTORY_TYPE_INPUT THEN ISNULL(inv.ProductionStepId, one.ProductionStepId) ELSE 0 END FromProductionStepId,

				CASE WHEN inv.InventoryTypeId = @INVENTORY_TYPE_INPUT THEN 0 ELSE inv.DepartmentId END ToDepartmentId,
				CASE WHEN inv.InventoryTypeId = @INVENTORY_TYPE_INPUT THEN 0 ELSE ISNULL(inv.ProductionStepId, one.ProductionStepId)  END ToProductionStepId,
	
				inv.ProductionOrderId,
				inv.ProductId					LinkDataObjectId,
				@LINK_DATA_OBJECT_TYPE_PRODUCT	LinkDataObjectTypeId,
				inv.PrimaryQuantity				Quantity,
				inv.[Date],
				inv.Note
			FROM
			(
				SELECT
					id.ProductId,
					id.PrimaryQuantity,
					id.InventoryDetailId,
					ISNULL(rd.DepartmentId, i.DepartmentId) DepartmentId,
					rd.ProductionStepId,
					ISNULL(rp.ProductionOrderId, ivp.ProductionOrderId) ProductionOrderId,
					i.InventoryTypeId,
					i.[Date],
					id.[Description] Note
				  FROM StockDB.dbo.InventoryDetail id
					JOIN StockDB.dbo.Inventory i 
						ON id.InventoryId = i.InventoryId
					LEFT JOIN dbo.ProductionOrder ivp ON id.ProductionOrderCode = ivp.ProductionOrderCode AND id.ProductionOrderCode IS NOT NULL AND id.ProductionOrderCode <> ''
					LEFT JOIN StockDB.dbo.InventoryRequirementDetail rd
						ON id.InventoryRequirementDetailId  = rd.InventoryRequirementDetailId AND id.IsDeleted = 0		
					LEFT JOIN dbo.ProductionOrder rp ON id.ProductionOrderCode = rp.ProductionOrderCode AND rd.ProductionOrderCode IS NOT NULL AND rd.ProductionOrderCode <> ''
					LEFT JOIN dbo.MaterialAllocation al ON id.InventoryDetailId = al.InventoryDetailId
				 WHERE id.IsDeleted = 0 
							AND i.IsDeleted  = 0 
							AND i.SubsidiaryId = @SubId 
							AND id.SubsidiaryId = @SubId
							AND i.IsApproved = 1
							AND al.InventoryDetailId IS NULL
							AND (@FromDate IS NULL OR i.[Date] BETWEEN @FromDate AND @ToDate)
			) inv 	
			LEFT JOIN oneStepOneDepartment one ON one.ProductionOrderId = inv.ProductionOrderId AND one.DepartmentId = inv.DepartmentId
		) inv 
			WHERE (@FromDate IS NULL OR inv.[Date] BETWEEN @FromDate AND @ToDate)
				AND (@IsByFromDepartmentIds = 0 OR inv.FromDepartmentId IN (SELECT [Value] FROM @FromDepartmentIds f ))
				AND (@IsByToDepartmentIds = 0 OR inv.ToDepartmentId IN (SELECT [Value] FROM @ToDepartmentIds f))
	
			--GROUP BY inv.FromDepartmentId,
			--inv.FromProductionStepId,
			--inv.ToDepartmentId,
			--inv.ToProductionStepId,
			--inv.ProductionOrderId,
			--inv.LinkDataObjectId,
			--inv.LinkDataObjectTypeId

	), sumHandover AS(
		SELECT
			
			inv.FromDepartmentId,
			inv.FromProductionStepId,
			inv.ToDepartmentId,
			inv.ToProductionStepId,
			inv.ProductionOrderId,
			inv.LinkDataObjectId,
			inv.LinkDataObjectTypeId,
			inv.Quantity,
			inv.[Date],
			inv.Note,
			NULL ProductionHandoverReceiptId,
			NULL ProductionHandoverReceiptCode,
			@EnumHandoverStatus_Approved HandoverStatusId
		FROM inventoryHandover inv

		UNION ALL

		SELECT
		
			ho.FromDepartmentId,
			ho.FromProductionStepId,
			ho.ToDepartmentId,
			ho.ToProductionStepId,
			ho.ProductionOrderId,
			ho.ObjectId LinkDataObjectId,
			ho.ObjectTypeId LinkDataObjectTypeId,
			ho.HandoverQuantity Quantity,
			ho.HandoverDatetime  [Date],
			ho.Note,
			hor.ProductionHandoverReceiptId,
			hor.ProductionHandoverReceiptCode,
			hor.HandoverStatusId

		FROM dbo.ProductionHandover ho
			LEFT JOIN dbo.ProductionHandoverReceipt hor ON hor.ProductionHandoverReceiptId = ho.ProductionHandoverReceiptId
		WHERE ho.IsDeleted = 0 AND ho.[Status] <> @EnumHandoverStatus_Rejected
		AND (@FromDate IS NULL OR ho.HandoverDatetime BETWEEN @FromDate AND @ToDate)
			AND (@IsByFromDepartmentIds = 0 OR ho.FromDepartmentId IN (SELECT [Value] FROM @FromDepartmentIds f ))
			AND (@IsByToDepartmentIds = 0 OR ho.ToDepartmentId IN (SELECT [Value] FROM @ToDepartmentIds f))
		--GROUP BY ho.FromDepartmentId,
		--	ho.FromProductionStepId,
		--	ho.ToDepartmentId,
		--	ho.ToProductionStepId,
		--	ho.ProductionOrderId,
		--	ho.ObjectId,
		--	ho.ObjectTypeId,
		--	t.InvTotal
	), poIds AS(
		SELECT DISTINCT sumHandover.ProductionOrderId FROM sumHandover
	), assignInfo AS(
		SELECT 
			a.ProductionOrderId,
			a.DepartmentId,
			a.ProductionStepId,
			a.ProductionStepLinkDataId,
			a.AssignmentQuantity,
			a.AssignedProgressStatus,
			(rOutData.Quantity + ISNULL(rOutData.ExportOutsourceQuantity,0)) Quantity,
			rOutData.LinkDataObjectId,
			rOutData.LinkDataObjectTypeId
		FROM dbo.ProductionAssignment a--out assign
		JOIN dbo.ProductionStepLinkDataRole rOut ON rOut.ProductionStepLinkDataId = a.ProductionStepLinkDataId AND rOut.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT
		JOIN dbo.ProductionStepLinkData rOutData ON rOutData.ProductionStepLinkDataId = rOut.ProductionStepLinkDataId
		WHERE rOutData.IsDeleted = 0
	),inAssign AS(
		SELECT	
			a.ProductionOrderId,
			a.DepartmentId,
			a.ProductionStepId,
			a.LinkDataObjectId OutLinkDataObjectId,
			a.LinkDataObjectTypeId OutLinkDataObjectTypeId,
			a.AssignmentQuantity OutAssignmentQuantity,		
			a.ProductionStepLinkDataId OutProductionStepLinkDataId,

			rInData.ProductionStepLinkDataId InProductionStepLinkDataId,
			rInData.LinkDataObjectId InLinkDataObjectId,
			rInData.LinkDataObjectTypeId InLinkDataObjectTypeId,
			inA.AssignedProgressStatus InAssignedProgressStatus,

			CASE WHEN a.Quantity>0 THEN a.AssignmentQuantity * (rInData.Quantity + ISNULL(rInData.ExportOutsourceQuantity,0)) /a.Quantity ELSE 0 END InAssignmentQuantity,

			a.AssignedProgressStatus,
			prevOut.ProductionStepId PrevProductionStepId		

		FROM assignInfo a--out assign
		JOIN dbo.ProductionOrder o ON a.ProductionOrderId = o.ProductionOrderId
		JOIN poIds o1 ON o1.ProductionOrderId = o.ProductionOrderId
		
		JOIN dbo.ProductionStepLinkDataRole rIn ON rIn.ProductionStepId = a.ProductionStepId AND rIn.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_IN
		JOIN dbo.ProductionStepLinkData rInData ON rInData.ProductionStepLinkDataId = rIn.ProductionStepLinkDataId

		LEFT JOIN dbo.ProductionStepLinkDataRole prevOut ON prevOut.ProductionStepLinkDataId = rIn.ProductionStepLinkDataId AND prevOut.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT
	
		--LEFT JOIN dbo.ProductionAssignment ia ON ia.ProductionStepLinkDataId = rIn.ProductionStepLinkDataId
		--LEFT JOIN assignInfo inA ON inA.ProductionStepLinkDataId = ia.ProductionStepLinkDataId AND inA.DepartmentId = ia.DepartmentId
		OUTER APPLY (
			SELECT MIN(inA.AssignedProgressStatus) AssignedProgressStatus 
			FROM dbo.ProductionAssignment ia
				LEFT JOIN assignInfo inA ON inA.ProductionStepLinkDataId = ia.ProductionStepLinkDataId AND inA.DepartmentId = ia.DepartmentId
			WHERE ia.ProductionStepLinkDataId = rIn.ProductionStepLinkDataId			
		) inA

		WHERE  rInData.IsDeleted = 0 AND o.SubsidiaryId = @SubId --AND EXISTS(SELECT 0 FROM sumHandover p WHERE o.ProductionOrderId = p.ProductionOrderId)

	), inAssignStatus AS (
		
		SELECT
			a.ProductionOrderId,
			a.DepartmentId,
			a.ProductionStepId,
			a.OutLinkDataObjectId,
			a.OutLinkDataObjectTypeId,
			a.OutAssignmentQuantity,		
			a.OutProductionStepLinkDataId,
			MIN(a.InAssignedProgressStatus) InAssignedProgressStatus
		FROM inAssign a			
		GROUP BY a.ProductionOrderId,
			a.DepartmentId,
			a.ProductionStepId,
			a.OutLinkDataObjectId,
			a.OutLinkDataObjectTypeId,
			a.OutAssignmentQuantity,		
			a.OutProductionStepLinkDataId
		
	), assign AS (

		--from stock to input
		SELECT 
			ProductionOrderId,
			0 FromDepartmentId,
			0 FromProductionStepId,
			InLinkDataObjectId				LinkDataObjectId,
			InLinkDataObjectTypeId			LinkDataObjectTypeId,
			InAssignmentQuantity			AssignmentQuantity,
			DepartmentId					ToDepartmentId,
			ProductionStepId				ToProductionStepId,
			CASE WHEN AssignedProgressStatus = @ASSIGNED_PROGRESS_STATUS_CONFIRMED THEN 1 ELSE NULL END IsInFinish,
			CASE WHEN AssignedProgressStatus = @ASSIGNED_PROGRESS_STATUS_CONFIRMED THEN 1 ELSE 0 END IsOutFinish
			
		
		FROM inAssign WHERE PrevProductionStepId IS NULL

		UNION ALL

		SELECT 
			a.ProductionOrderId,
			a.DepartmentId FromDepartmentId,
			a.ProductionStepId FromProductionStepId,	
			rOutData.LinkDataObjectId,
			rOutData.LinkDataObjectTypeId,
			a.AssignmentQuantity *(rOutData.Quantity+ ISNULL(rOutData.ExportOutsourceQuantity,0) ) /rOutAssignData.Quantity AssignmentQuantity,
			ISNULL(nextStep.DepartmentId,0) ToDepartmentId,
			ISNULL(nextStep.ProductionStepId,0) ToProductionStepId,
			CASE WHEN a.AssignedProgressStatus = @ASSIGNED_PROGRESS_STATUS_CONFIRMED THEN 1 
				ELSE inA.InAssignedProgressStatus 
			END IsInFinish,
			CASE WHEN a.AssignedProgressStatus = @ASSIGNED_PROGRESS_STATUS_CONFIRMED THEN 1 ELSE 0 END IsOutFinish

		
		FROM dbo.ProductionAssignment a--out assign	
			JOIN dbo.ProductionOrder o ON a.ProductionOrderId = o.ProductionOrderId
			JOIN poIds o1 ON o1.ProductionOrderId = o.ProductionOrderId
			JOIN dbo.ProductionStepLinkDataRole rOutAssign ON rOutAssign.ProductionStepLinkDataId = a.ProductionStepLinkDataId AND rOutAssign.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT
			JOIN dbo.ProductionStepLinkData rOutAssignData ON rOutAssignData.ProductionStepLinkDataId = rOutAssign.ProductionStepLinkDataId

			JOIN dbo.ProductionStepLinkDataRole rOut ON rOut.ProductionStepId = a.ProductionStepId AND rOut.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT
			--JOIN dbo.ProductionStepLinkDataRole rOut ON rOut.ProductionStepLinkDataId = a.ProductionStepLinkDataId AND rOut.ProductionStepLinkDataRoleTypeId = @PRODUCTION_STEP_LINK_DATA_ROLE_TYPE_OUT
			JOIN dbo.ProductionStepLinkData rOutData ON rOutData.ProductionStepLinkDataId = rOut.ProductionStepLinkDataId
			JOIN dbo.ProductionStep s ON rOut.ProductionStepId = s.ProductionStepId AND s.IsDeleted = 0 AND s.IsFinish = 0     

			--LEFT JOIN inAssign nextStep ON a.ProductionStepLinkDataId = nextStep.InProductionStepLinkDataId
			LEFT JOIN inAssign nextStep ON rOut.ProductionStepLinkDataId = nextStep.InProductionStepLinkDataId
		
			LEFT JOIN inAssignStatus inA ON a.DepartmentId = inA.DepartmentId
				AND rOut.ProductionStepId = inA.ProductionStepId
				AND rOutData.LinkDataObjectId = inA.OutLinkDataObjectId
				AND rOutData.LinkDataObjectTypeId = inA.OutLinkDataObjectTypeId			
		

		WHERE rOutData.IsDeleted = 0 AND o.SubsidiaryId = @SubId --AND EXISTS(SELECT 0 FROM sumHandover p WHERE o.ProductionOrderId = p.ProductionOrderId)
	),
	resultMatchAll AS
	(
		SELECT
			a.ProductionOrderId,
			a.FromDepartmentId,
			a.FromProductionStepId,	
			a.LinkDataObjectId,
			a.LinkDataObjectTypeId,
			a.AssignmentQuantity,
			a.ToDepartmentId,
			a.ToProductionStepId,
			a.IsInFinish,
			a.IsOutFinish,					
			s1.Quantity				,
			s1.[Date]				,
			s1.Note					,
			s1.ProductionHandoverReceiptId,
			s1.ProductionHandoverReceiptCode,
			s1.HandoverStatusId
		FROM assign a
		LEFT JOIN sumHandover s1 ON ISNULL(a.FromDepartmentId,0) = ISNULL(s1.FromDepartmentId,0)
								AND  ISNULL(a.FromProductionStepId,0) = ISNULL(s1.FromProductionStepId,0)
								AND  a.LinkDataObjectId = s1.LinkDataObjectId
								AND  a.LinkDataObjectTypeId = s1.LinkDataObjectTypeId
								AND  ISNULL(a.ToDepartmentId,0) = ISNULL(s1.ToDepartmentId,0)
								AND  ISNULL(a.ToProductionStepId,0) = ISNULL(s1.ToProductionStepId,0)
						

	), v AS(
		SELECT
			a.ProductionOrderId,
			a.FromDepartmentId,
			a.FromProductionStepId,	
			a.LinkDataObjectId,
			a.LinkDataObjectTypeId,
			a.AssignmentQuantity,
			a.ToDepartmentId,
			a.ToProductionStepId,			
			a.[Date],
			a.Quantity,
			a.Note,
			a.ProductionHandoverReceiptId,
			a.ProductionHandoverReceiptCode,
			a.HandoverStatusId,
			CASE WHEN a.IsInFinish IS NULL AND a.FromDepartmentId IS NULL AND a.Quantity >= a.AssignmentQuantity THEN 1 ELSE ISNULL(a.IsInFinish,0) END IsInFinish,
			CASE WHEN a.IsOutFinish IS NULL AND a.ToDepartmentId IS NULL AND a.Quantity >= a.AssignmentQuantity THEN 1 ELSE ISNULL(a.IsOutFinish,0) END IsOutFinish
		FROM  resultMatchAll a
	),result AS(
	SELECT
			ROW_NUMBER() OVER(ORDER BY v.[Date]) RowNumber,
			v.ProductionOrderId,
			v.FromDepartmentId,
			v.FromProductionStepId,	
			ISNULL(fs.StepId, pfs.StepId) FromStepId,	
			v.LinkDataObjectId,
			v.LinkDataObjectTypeId,
			v.AssignmentQuantity,
			v.ToDepartmentId,
			v.ToProductionStepId,			
			ISNULL(ts.StepId, pts.StepId) ToStepId,	
			v.[Date],
			v.[Note],
			v.ProductionHandoverReceiptId,
			v.ProductionHandoverReceiptCode,
			v.HandoverStatusId,
			v.Quantity,
			v.IsInFinish,
			v.IsOutFinish
	FROM  v
	LEFT JOIN dbo.ProductionStep fs ON v.FromProductionStepId = fs.ProductionStepId
	LEFT JOIN dbo.ProductionStep pfs ON fs.ParentId = pfs.ProductionStepId

	LEFT JOIN dbo.ProductionStep ts ON v.ToProductionStepId = ts.ProductionStepId
	LEFT JOIN dbo.ProductionStep pts ON ts.ParentId = pts.ProductionStepId

	WHERE (@IsByFromStepIds = 0 OR EXISTS(SELECT 0 FROM @FromStepIds fs1 WHERE fs.StepId = fs1.[Value]) OR EXISTS(SELECT 0 FROM @FromStepIds fs1 WHERE pfs.StepId = fs1.[Value]))
		AND (@IsByToStepIds = 0 OR EXISTS(SELECT 0 FROM @ToStepIds ts1 WHERE ts.StepId = ts1.[Value]) OR EXISTS(SELECT 0 FROM @ToStepIds ts1 WHERE pts.StepId = ts1.[Value]))
		AND (@IsInFinish IS NULL OR v.IsInFinish = @IsInFinish)
		AND (@IsOutFinish IS NULL OR v.IsOutFinish = @IsOutFinish)
		AND v.Quantity > 0
	),total AS(
		SELECT COUNT(0) TotalRecord FROM result
	)
	SELECT r.*, t.TotalRecord FROM result r JOIN total t ON 1=1
	WHERE @Size<=0 OR r.RowNumber BETWEEN (@Page-1)*@Size AND @Page * @Size
	ORDER BY r.RowNumber    
END


GO

USE ManufacturingDB
GO

CREATE OR ALTER VIEW [dbo].[RefOutsourcePartOrder]
AS
SELECT m.OutsourcePartRequestId AS OutsourceRequestId,
       pod.ProductId,
       SUM(m.Quantity) AS PrimaryQuantity,
       po.PurchaseOrderCode,
       po.PurchaseOrderId
FROM PurchaseOrderDB.dbo.PurchaseOrderDetail AS pod
    INNER JOIN PurchaseOrderDB.dbo.PurchaseOrder AS po
        ON pod.PurchaseOrderId = po.PurchaseOrderId
           AND po.IsDeleted = 0
           AND po.PurchaseOrderType = 2
    INNER JOIN PurchaseOrderDB.dbo.PurchaseOrderOutsourceMapping AS m
        ON pod.PurchaseOrderDetailId = m.PurchaseOrderDetailId
           AND m.IsDeleted = 0
WHERE (pod.IsDeleted = 0)
      --AND (pod.OutsourceRequestId IS NULL)
GROUP BY m.OutsourcePartRequestId,
         pod.ProductId,
         po.PurchaseOrderCode,
         po.PurchaseOrderId;


GO

USE ManufacturingDB
GO

/*Create view RefOutsourcePartOrder as (
select 
pod.OutsourceRequestId, pod.ProductId,  sum(pod.PrimaryQuantity) TotalQuantity, STRING_AGG(po.PurchaseOrderCode, ',') PurchaseOrderCode
from PurchaseOrderDB.dbo.PurchaseOrderDetail pod
join PurchaseOrderDB.dbo.PurchaseOrder po on pod.PurchaseOrderId = po.PurchaseOrderId and po.IsDeleted = 0 and po.PurchaseOrderType = 2
where pod.IsDeleted = 0
group by pod.OutsourceRequestId, pod.ProductId);*/
CREATE OR ALTER VIEW [dbo].[RefOutsourceStepOrder]
AS
SELECT        pod.OutsourceRequestId, pod.ProductionStepLinkDataId, SUM(m.Quantity) AS PrimaryQuantity, po.PurchaseOrderCode, po.PurchaseOrderId
FROM            PurchaseOrderDB.dbo.PurchaseOrderDetail AS pod INNER JOIN
                         PurchaseOrderDB.dbo.PurchaseOrder AS po ON pod.PurchaseOrderId = po.PurchaseOrderId AND po.IsDeleted = 0 AND po.PurchaseOrderType = 1 INNER JOIN
                         PurchaseOrderDB.dbo.PurchaseOrderOutsourceMapping AS m ON pod.PurchaseOrderDetailId = m.PurchaseOrderDetailId AND m.IsDeleted = 0
WHERE        (pod.IsDeleted = 0) AND (pod.OutsourceRequestId > 0)
GROUP BY pod.OutsourceRequestId, pod.ProductionStepLinkDataId, po.PurchaseOrderCode, po.PurchaseOrderId


GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[ProductionStepLinkDataExtractInfo]
AS
SELECT        sld.ProductionStepLinkDataId, sld.ProductionStepLinkDataCode, CONCAT(p.ProductCode, '/ ', p.ProductName) ObjectTitle, sld.Quantity, sld.WorkloadConvertRate, sld.SortOrder, p.UnitId, sld.OutsourceQuantity, 
                         sld.ProductionStepLinkDataTypeId, sld.OutsourceRequestDetailId, sld.ExportOutsourceQuantity, sld.ProductionStepLinkTypeId, sld.QuantityOrigin, sld.OutsourcePartQuantity, ucs.ProductUnitConversionId, ucs.DecimalPlace, 
                         sld.LinkDataObjectId, sld.LinkDataObjectTypeId, p.ProductCode, p.ProductName, sld.ProductionOutsourcePartMappingId
FROM            ProductionStepLinkData sld LEFT JOIN
                         StockDB.dbo. Product p ON sld.LinkDataObjectId = p.ProductId LEFT JOIN
                         StockDB.dbo.ProductUnitConversion ucs ON ucs.ProductId = p.ProductId AND ucs.SecondaryUnitId = p.UnitId AND ucs.IsDefault = 1
WHERE        sld.IsDeleted = 0 AND sld.LinkDataObjectTypeId = 1
UNION
SELECT        sld.ProductionStepLinkDataId, sld.ProductionStepLinkDataCode, (CASE WHEN sm.Title IS NULL OR
                         sm.Title = '' THEN 'BTP' ELSE sm.Title END) ObjectTitle, sld.Quantity, sld.WorkloadConvertRate, sld.SortOrder, sm.UnitId, sld.OutsourceQuantity, sld.ProductionStepLinkDataTypeId, sld.OutsourceRequestDetailId, 
                         sld.ExportOutsourceQuantity, sld.ProductionStepLinkTypeId, sld.QuantityOrigin, sld.OutsourcePartQuantity, NULL ProductUnitConversionId, sm.DecimalPlace, sld.LinkDataObjectId, sld.LinkDataObjectTypeId, '' ProductCode, 
                         (CASE WHEN sm.Title IS NULL OR
                         sm.Title = '' THEN 'BTP' ELSE sm.Title END) ProductName, sld.ProductionOutsourcePartMappingId
FROM            ProductionStepLinkData sld LEFT JOIN
                         ProductSemi sm ON sld.LinkDataObjectId = sm.ProductSemiId
WHERE        sld.IsDeleted = 0 AND sld.LinkDataObjectTypeId = 2


GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[v_WeekPlan] AS 
							SELECT
    wp.WeekPlanId F_Id,
    wp.MonthPlanId,
    wp.WeekPlanName,
    wp.StartDate,
    wp.EndDate,
    wp.WeekNote

FROM [ManufacturingDB].dbo.WeekPlan wp
WHERE wp.IsDeleted = 0

GO

USE ManufacturingDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_ProductionAssignment_DepartmentFreeDate]
	@SubId INT,
	@DepartmentIds _INTVALUES READONLY,
	@ExceptProductionOrderIds _BIGINTVALUES READONLY
AS
BEGIN

	DECLARE @IsFilterDepartment BIT = 1
	IF NOT EXISTS(SELECT 0 FROM @DepartmentIds)
	BEGIN
	    SET @IsFilterDepartment = 0
	END
	DECLARE @EnumAssignedProgressStatus_Completed INT = 3
	SELECT 
		a.DepartmentId,
		MIN(CASE 
		WHEN a.AssignedProgressStatus = @EnumAssignedProgressStatus_Completed THEN ISNULL(h.HandoverDatetime,a.EndDate)
		ELSE a.EndDate 
		END) FreeDate
	FROM dbo.ProductionAssignment a
	JOIN dbo.ProductionOrder o ON a.ProductionOrderId = o.ProductionOrderId
	LEFT JOIN dbo.ProductionHandover h ON a.ProductionStepId = h.FromProductionStepId
	AND a.DepartmentId = h.FromDepartmentId
	WHERE h.IsDeleted = 0 
		AND (@IsFilterDepartment = 0 OR a.DepartmentId IN (SELECT [Value] FROM @DepartmentIds))
		AND a.ProductionOrderId NOT IN (SELECT [Value] FROM @ExceptProductionOrderIds)
		AND o.SubsidiaryId = @SubId
	GROUP BY a.DepartmentId
		
END

GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[v_LSX] AS 
							SELECT 
    pod.ProductionOrderDetailId F_Id,
     po.ProductionOrderId, 
    po.ProductionOrderCode,
    p.ProductCode,
    p.ProductName,
    pod.OrderCode,
    po.Date,
    po.StartDate,
    po.EndDate,
    po.Description,
    pod.quantity
FROM [ManufacturingDB].[dbo].ProductionOrder po
INNER JOIN [ManufacturingDB].[dbo].ProductionOrderDetail pod ON po.ProductionOrderId = pod.ProductionOrderId AND pod.IsDeleted = 0
LEFT JOIN StockDB.dbo.Product p on pod.ProductId = p.ProductId AND p.IsDeleted = 0
where po.IsDeleted = 0
							;

GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[v_Department] AS 
							WITH tmp
AS (SELECT DepartmentId F_Id,
           DepartmentName,
           DepartmentCode,
           [Description],
           IsActived,
           WorkingHoursPerDay,
           IsProduction,
           SubsidiaryId,
           ParentId,
           IsFactory,
		   CONVERT(NVARCHAR(max),'') TitlePrefix,
		   CONVERT(NVARCHAR(max),CONCAT(DepartmentCode, ' - ', DepartmentName)) TreeTitle,
		   CONVERT(NVARCHAR(max), CONCAT('/',DepartmentCode,'/')) PathCodes,
		   CONVERT(NVARCHAR(max), CONCAT('/',DepartmentName,'/')) PathNames,
		   1 [Level],
		   DepartmentId ParentId_Level_1,
		   NULL ParentId_Level_2,
		   NULL ParentId_Level_3,
		   NULL ParentId_Level_4,
		   NULL ParentId_Level_5,
		   NULL ParentId_Level_6,
		   NULL ParentId_Level_7,
		   NULL ParentId_Level_8,
		   NULL ParentId_Level_9,
		   NULL ParentId_Level_10
    FROM [OrganizationDB].[dbo].Department
    WHERE IsDeleted = 0
          AND ParentId IS NULL
    UNION ALL
    SELECT d.DepartmentId F_Id,
           d.DepartmentName,
           d.DepartmentCode,
           d.[Description],
           d.IsActived,
           d.WorkingHoursPerDay,
           d.IsProduction,
           d.SubsidiaryId,
           d.ParentId,
           d.IsFactory,
		   CONVERT(NVARCHAR(max),CONCAT('----', tmp.TitlePrefix)) TitlePrefix,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.TitlePrefix,' ', d.DepartmentCode, ' - ', d.DepartmentName)) TreeTitle,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.PathCodes, d.DepartmentCode,'/')) PathCodes,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.PathNames, d.DepartmentName,'/')) PathNames,
		   tmp.[Level] + 1 [Level],
		   tmp.ParentId_Level_1,
		   CASE WHEN tmp.[Level] + 1 =2 THEN d.DepartmentId ELSE tmp.ParentId_Level_2 END ParentId_Level_2,
		   CASE WHEN tmp.[Level] + 1 =3 THEN d.DepartmentId ELSE tmp.ParentId_Level_3 END ParentId_Level_3,
		   CASE WHEN tmp.[Level] + 1 =4 THEN d.DepartmentId ELSE tmp.ParentId_Level_4 END ParentId_Level_4,
		   CASE WHEN tmp.[Level] + 1 =5 THEN d.DepartmentId ELSE tmp.ParentId_Level_5 END ParentId_Level_5,
		   CASE WHEN tmp.[Level] + 1 =6 THEN d.DepartmentId ELSE tmp.ParentId_Level_6 END ParentId_Level_6,
		   CASE WHEN tmp.[Level] + 1 =7 THEN d.DepartmentId ELSE tmp.ParentId_Level_7 END ParentId_Level_7,
		   CASE WHEN tmp.[Level] + 1 =8 THEN d.DepartmentId ELSE tmp.ParentId_Level_8 END ParentId_Level_8,
		   CASE WHEN tmp.[Level] + 1 =9 THEN d.DepartmentId ELSE tmp.ParentId_Level_9 END ParentId_Level_9,
		   CASE WHEN tmp.[Level] + 1 =10 THEN d.DepartmentId ELSE tmp.ParentId_Level_10 END ParentId_Level_10
    FROM [OrganizationDB].[dbo].Department d
        JOIN tmp
            ON d.ParentId = tmp.F_Id
    WHERE d.IsDeleted = 0)
SELECT *
FROM tmp
							;

GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[vProductionOrderDetailSimple]
AS
SELECT        d.ProductionOrderDetailId, d.ProductionOrderId, d.ProductId, d.Quantity, d.ReserveQuantity, d.OrderCode, d.Note, d.CreatedByUserId, d.CreatedDatetimeUtc, d.UpdatedByUserId, d.UpdatedDatetimeUtc, d.IsDeleted, 
                         d.DeletedDatetimeUtc, d.OrderDetailId, d.SubsidiaryId, po.ProductionOrderCode, po.Date
FROM            dbo.ProductionOrder AS po INNER JOIN
                         dbo.ProductionOrderDetail AS d ON po.ProductionOrderId = d.ProductionOrderId
WHERE        (po.IsDeleted = 0) AND (d.IsDeleted = 0)


GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TT_TAM_UNG] AS SELECT  _TT_TAM_UNG.F_Id, _TT_TAM_UNG.UpdatedDatetimeUtc, _TT_TAM_UNG.title, _TT_TAM_UNG.value FROM [MasterDB].[dbo]._TT_TAM_UNG WHERE _TT_TAM_UNG.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Category_View_Update]
	@CategoryCode AS varchar(50),
	@TableName AS varchar(50),
	@IsTreeView AS bit,
	@IsOutSideData AS bit,
	@Key AS varchar(50),
	@ParentKey AS varchar(50),
	@UsePlace AS varchar(256)
AS
BEGIN

	-- Drop old view 
	DECLARE @ViewName NVARCHAR(512) = 'v' + @CategoryCode

	DECLARE @Databases TABLE 
	(
		Id int,
		Name nvarchar(256)
	)
	
	INSERT INTO @Databases VALUES 
	(1, 'MasterDB'),
	(2, 'StockDB'),
	(3, 'OrganizationDB'),
	(4, 'PurchaseOrderDB'),
	(5, 'AccountancyDB'),
	(6, 'ManufacturingDB')
	
	DECLARE @DbName nvarchar(256)
	
	DECLARE dbCursor CURSOR FOR   
		SELECT Name FROM @Databases
		
	OPEN dbCursor  
	FETCH NEXT FROM dbCursor INTO @DbName
	WHILE @@FETCH_STATUS = 0  
	BEGIN  
		
		EXEC ('USE ' + @DbName  +' 
		IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ''dbo'' AND TABLE_NAME = '''+ @ViewName +'''))
		BEGIN
			DROP VIEW '+ @ViewName + ' 
		END')
		FETCH NEXT FROM dbCursor INTO @DbName
	END
	
	CLOSE dbCursor  
	DEALLOCATE dbCursor 
	
	DECLARE @RawSql nvarchar(max) = '';
	SELECT @RawSql = oc.RawSql 
		FROM dbo.OutSideDataConfig oc 
			JOIN dbo.Category c ON oc.CategoryId = c.CategoryId 
	WHERE c.CategoryCode = @CategoryCode AND c.IsDeleted = 0;
	
	-- Create new view
	DECLARE @SelectFormTypeId INT = 2
	DECLARE @ViewOnlyFormTypeId INT = 6

	DECLARE @SearchTableFormTypeId INT = 4

  -- Create new view
	DECLARE @SqlScript NVARCHAR(max)
	DECLARE @SqlFrom NVARCHAR(max)
	
	
	DECLARE dbCursor CURSOR FOR   
		SELECT d.Name FROM @Databases d INNER JOIN ufn_Split(@UsePlace, ',') u ON d.Id = u.value
		
	OPEN dbCursor  
	FETCH NEXT FROM dbCursor INTO @DbName
	WHILE @@FETCH_STATUS = 0  
	BEGIN  
		
		
		
		IF(@IsOutSideData = 0)
		BEGIN
			SET @SqlFrom = ' FROM [MasterDB].[dbo].' + @TableName
		END
		ELSE
		BEGIN
			SET @SqlFrom = ' FROM ( SELECT ' + @TableName + '.' + @Key + ' ' + @Key

			IF (@IsTreeView = 1)
				SET @SqlFrom = @SqlFrom + ', ' + @TableName + '.' + @ParentKey + ' ' + @ParentKey

			SELECT @SqlFrom = @SqlFrom + CASE  WHEN CHARINDEX('.', odf.Value) > 0 THEN  ', ' + REPLACE(odf.[Value], '''', '''''') + ' ' + odf.Alias
											ELSE ', ' + @TableName + '.' + odf.Value + ' ' + odf.Alias
										END
				FROM OutsideDataFieldConfig odf 
					INNER JOIN Category c ON odf.OutSideDataConfigId = c.CategoryId
				WHERE c.CategoryCode = @CategoryCode AND c.IsDeleted = 0 AND odf.IsDeleted = 0 AND odf.Alias != @Key AND odf.Alias != @ParentKey

			SET @SqlFrom =  @SqlFrom + ' FROM ' + @TableName 

			SELECT @SqlFrom = @SqlFrom + ' ' + ISNULL(od.Joins,'')
				FROM OutsideDataConfig od 
				INNER JOIN Category c ON od.CategoryId = c.CategoryId
				WHERE c.CategoryCode = @CategoryCode AND c.IsDeleted = 0
			
			DECLARE @sysColumns nvarchar(64)

			IF(@IsOutSideData = 1) 
				SET @sysColumns = LEFT(@TableName, CHARINDEX('.', @TableName)) + 'sys.columns'
			ELSE 
				SET @sysColumns = 'sys.columns'
			
			DECLARE @IsExistedSQL nvarchar(512)

			SET @IsExistedSQL = 'SELECT @CountRowOUT = COUNT(*) FROM ' + @sysColumns + ' WHERE Name = ''IsDeleted'' AND Object_ID = Object_ID(''' + @TableName + ''')'

			DECLARE @CountRow int
			DECLARE @ParmDefinition nvarchar(500);  
			
			SET @ParmDefinition = N'@CountRowOUT int OUTPUT';
			
			EXECUTE sp_executesql  
				@IsExistedSQL  
				,@ParmDefinition
				,@CountRowOUT = @CountRow OUTPUT 
			
			IF @CountRow > 0
				SET @SqlFrom = @SqlFrom + ' WHERE '+ @TableName + '.IsDeleted = 0'

			SET @SqlFrom = @SqlFrom + ') ' + @CategoryCode
			--	SET @TableName = @CategoryCode
		END

		SET @SqlScript = 'CREATE VIEW ' + @ViewName + ' AS SELECT '
		
		IF(@IsOutSideData = 0)
		BEGIN
			SET @SqlScript += ' ' + @CategoryCode +'.F_Id'
		END
		ELSE
		BEGIN
			SET @SqlScript += ' ' + @CategoryCode + '.' + @Key + ' F_Id'
		END

		IF (@IsTreeView = 1)
		BEGIN
			IF(@IsOutSideData = 0)
			BEGIN
				SET @SqlScript +=  ', '+ @CategoryCode + '.ParentId'
			END
			ELSE
			BEGIN
				SET @SqlScript +=  ', ' + @CategoryCode + '.' + @ParentKey + ' ParentId'
			END
		END;
		 
		SELECT @SqlScript += ', ' + @CategoryCode + '.' + f.CategoryFieldName
			FROM CategoryField f
				INNER JOIN Category c ON f.CategoryId = c.CategoryId
			WHERE c.CategoryCode = @CategoryCode AND c.IsDeleted = 0 AND f.IsDeleted = 0 AND f.FormTypeId != @ViewOnlyFormTypeId AND f.CategoryFieldName NOT IN('F_Id', 'ParentId')
		
		DECLARE @CategoryFieldName nvarchar(128)
		DECLARE @RefTableCode nvarchar(128)
		DECLARE @RefTableField nvarchar(128)
		DECLARE @RefTableTitle nvarchar(512)
		DECLARE @FormTypeId int

		DECLARE fieldCursor CURSOR FOR   
			SELECT f.CategoryFieldName, f.RefTableCode, f.RefTableField, f.RefTableTitle, f.FormTypeId 
				FROM CategoryField f
				INNER JOIN Category c ON f.CategoryId = c.CategoryId
				WHERE c.CategoryCode = @CategoryCode AND c.IsDeleted = 0 AND f.IsDeleted = 0 AND f.FormTypeId != @ViewOnlyFormTypeId AND f.CategoryFieldName != 'F_Id' AND f.CategoryFieldName != 'ParentId' AND f.RefTableCode is not null 
		
		OPEN fieldCursor  
		FETCH NEXT FROM fieldCursor INTO @CategoryFieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
		
		DECLARE @Suffix int = 0
		
		WHILE @@FETCH_STATUS = 0  
		BEGIN  

			IF LEN(@RefTableTitle)>0 AND @FormTypeId IN(@SelectFormTypeId,@SearchTableFormTypeId) AND @CategoryCode <> @RefTableCode
			BEGIN
				SELECT @SqlScript += ', ' + CONCAT(@RefTableCode, '_', @Suffix) + '.[' + LTRIM(RTRIM([Value])) + '] AS [' + @CategoryFieldName + '_' + LTRIM(RTRIM([Value])) +']' FROM dbo.ufn_Split(@RefTableTitle,',')

				SET @SqlFrom += ' LEFT JOIN [MasterDB].[dbo].v' + @RefTableCode + ' AS ' + CONCAT(@RefTableCode, '_', @Suffix) + ' ON ' + @CategoryCode + '.' + @CategoryFieldName + ' = ' + CONCAT(@RefTableCode, '_', @Suffix) + '.' + @RefTableField
				SET @Suffix += 1
			END
			FETCH NEXT FROM fieldCursor INTO @CategoryFieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
		END  
		
		CLOSE fieldCursor  
		DEALLOCATE fieldCursor 
		
		
		SET @SqlScript += @SqlFrom 
		
		IF(@IsOutSideData = 0) SET @SqlScript += ' WHERE '+ @CategoryCode + '.IsDeleted = 0'

		IF (LEN(@RawSql)>0 AND @IsOutSideData = 1)
		BEGIN
			SET @SqlScript =  'CREATE VIEW ' + @ViewName + ' AS 
							' + REPLACE(@RawSql,'''','''''');
		END
		
		EXEC ( '[' + @DbName + '].[dbo].sp_executesql N'''+ @SqlScript +'''')
		
		FETCH NEXT FROM dbCursor INTO @DbName
	END
	
	CLOSE dbCursor  
	DEALLOCATE dbCursor 


	

END

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Stock] AS 
							SELECT 
    StockId F_Id,
    StockName,
    SubsidiaryId
FROM [StockDB].[dbo].Stock 
WHERE IsDeleted=0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_E_INVOICE_ADJUST_TYPE] AS SELECT  _E_INVOICE_ADJUST_TYPE.F_Id, _E_INVOICE_ADJUST_TYPE.UpdatedDatetimeUtc, _E_INVOICE_ADJUST_TYPE.AdjustTypeId, _E_INVOICE_ADJUST_TYPE.AdjustTitle FROM [MasterDB].[dbo]._E_INVOICE_ADJUST_TYPE WHERE _E_INVOICE_ADJUST_TYPE.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Customer] AS 
							SELECT
    CustomerId F_Id,
    CustomerCode,
    CustomerName,
    Email,
    PhoneNumber,
    TaxIdNo,
    CustomerStatusId,
    CustomerTypeId,
    Address,
    Website
FROM [OrganizationDB].[dbo].Customer
WHERE IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_EASY_INV_STATUS] AS SELECT  _EASY_INV_STATUS.F_Id, _EASY_INV_STATUS.UpdatedDatetimeUtc, _EASY_INV_STATUS.title, _EASY_INV_STATUS.value FROM [MasterDB].[dbo]._EASY_INV_STATUS WHERE _EASY_INV_STATUS.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_HO_SO_NHAN_SU] AS 
							SELECT DISTINCT 
    g.HrBill_F_Id AS F_Id ,  
    g.so_ct,
    g.ho_ten, 
    c.bo_phan, 
    tc.workPropertyTitle as tinh_chat_lao_dong, 
    tt.title as trang_thai_lao_dong, 
    d.DepartmentName ten_bo_phan
FROM [OrganizationDB].[dbo].[_HR_CTNS_Ho_So_General_Info] AS g 

INNER JOIN [OrganizationDB].[dbo].[_HR_CTNS_Ho_So_thong_tin_cong_viec] AS c ON g.HrBill_F_Id = c.HrBill_F_Id AND c.IsDeleted = 0
LEFT JOIN [OrganizationDB].[dbo].Department AS d ON c.bo_phan = d.DepartmentId AND d.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].[_TRANG_THAI_LAO_DONG] AS tt ON c.trang_thai_lao_dong = tt.F_Id AND tt.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].[_TINH_CHAT_LD] AS tc ON c.tinh_chat_lao_dong = tc.value and tc.IsDeleted = 0

WHERE g.IsDeleted=0
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_VAT_RATE] AS SELECT  _VAT_RATE.F_Id, _VAT_RATE.UpdatedDatetimeUtc, _VAT_RATE.title, _VAT_RATE.value, _VAT_RATE.easy_inv_check FROM [MasterDB].[dbo]._VAT_RATE WHERE _VAT_RATE.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_ProductCate] AS 
							SELECT ProductCateId F_Id, ProductCateName
FROM [StockDB].[dbo].ProductCate
WHERE IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_E_INVOICE_PROVIDER] AS SELECT  _E_INVOICE_PROVIDER.F_Id, _E_INVOICE_PROVIDER.UpdatedDatetimeUtc, _E_INVOICE_PROVIDER.title, _E_INVOICE_PROVIDER.value FROM [MasterDB].[dbo]._E_INVOICE_PROVIDER WHERE _E_INVOICE_PROVIDER.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Subsidiary] AS 
							SELECT
    SubsidiaryId F_Id,
    SubsidiaryCode,
    SubsidiaryName,
    Fax,
    PhoneNumber,
    TaxIdNo,
    Email,
    Address,
    Description
FROM [OrganizationDB].[dbo].Subsidiary
WHERE IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TK_nganhang_dt] AS 
							SELECT 
	ba.CustomerBankAccountId F_Id,
	c.PartnerId PartnerId,
	c.CustomerName Ten_khach,
	ba.AccountName Ten_TKNH,
	ba.AccountNumber So_TKNH,
	cur.CurrencyCode Loai_tien,
	ba.BankName Ngan_hang,
	ba.BankBranch Chi_nhanh_NH,
	ba.Province Tinh_TP,
	ba.SwiffCode Swift_code,
	ba.BankAddress NH_add
FROM [OrganizationDB].[dbo].CustomerBankAccount ba 
LEFT JOIN [OrganizationDB].[dbo].Customer c ON ba.CustomerId = c.CustomerId AND c.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo]._Currency cur ON ba.CurrencyId = cur.F_Id AND cur.IsDeleted = 0
WHERE ba.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_LOAI_QUYET_DINH] AS SELECT  _LOAI_QUYET_DINH.F_Id, _LOAI_QUYET_DINH.UpdatedDatetimeUtc, _LOAI_QUYET_DINH.decisionTypeId, _LOAI_QUYET_DINH.decisionTypeTitle FROM [MasterDB].[dbo]._LOAI_QUYET_DINH WHERE _LOAI_QUYET_DINH.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_LOAI_HDLD] AS SELECT  _LOAI_HDLD.F_Id, _LOAI_HDLD.UpdatedDatetimeUtc, _LOAI_HDLD.title, _LOAI_HDLD.value FROM [MasterDB].[dbo]._LOAI_HDLD WHERE _LOAI_HDLD.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Category_View_Update2]
	@CategoryCode AS varchar(50),
	@TableName AS varchar(50),
	@IsTreeView AS bit,
	@IsOutSideData AS bit,
	@Key AS varchar(50),
	@ParentKey AS varchar(50),
	@UsePlace AS varchar(256)
AS
BEGIN

	-- Drop old view 
	DECLARE @ViewName NVARCHAR(512) = 'v' + @CategoryCode

	DECLARE @Databases TABLE 
	(
		Id int,
		Name nvarchar(256)
	)
	
	INSERT INTO @Databases VALUES 
	(1, 'MasterDB'),
	(2, 'StockDB'),
	(3, 'OrganizationDB'),
	(4, 'PurchaseOrderDB'),
	(5, 'AccountancyDB'),
	(6, 'ManufacturingDB')
	
	DECLARE @DbName nvarchar(256)
	
	DECLARE dbCursor CURSOR FOR   
		SELECT Name FROM @Databases
		
	OPEN dbCursor  
	FETCH NEXT FROM dbCursor INTO @DbName
	WHILE @@FETCH_STATUS = 0  
	BEGIN  
		
		EXEC ('USE ' + @DbName  +' 
		IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ''dbo'' AND TABLE_NAME = '''+ @ViewName +'''))
		BEGIN
			DROP VIEW '+ @ViewName + ' 
		END')

		EXEC ('USE ' + @DbName  +' 
		IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ''dbo'' AND TABLE_NAME = '''+ @ViewName +'_Search''))
		BEGIN
			DROP VIEW '+ @ViewName + '_Search 
		END')
		FETCH NEXT FROM dbCursor INTO @DbName
	END
	
	CLOSE dbCursor  
	DEALLOCATE dbCursor 
	
	DECLARE @JoinSqlRaw nvarchar(max) = '';
	DECLARE @SearchSqlRaw nvarchar(max) = '';
	SELECT @JoinSqlRaw = c.JoinSqlRaw,
			@SearchSqlRaw = c.SearchSqlRaw
		FROM dbo.Category c
	WHERE c.CategoryCode = @CategoryCode AND c.IsDeleted = 0;
	
	
	-- Create new view
	DECLARE @SelectFormTypeId INT = 2
	DECLARE @ViewOnlyFormTypeId INT = 6

	DECLARE @SearchTableFormTypeId INT = 4

  -- Create new view
	DECLARE @SqlScript NVARCHAR(max)
	DECLARE @SqlFrom NVARCHAR(max)
	
	
	DECLARE dbCursor CURSOR FOR   
		SELECT d.Name FROM @Databases d INNER JOIN ufn_Split(@UsePlace, ',') u ON d.Id = u.value
		
	OPEN dbCursor  
	FETCH NEXT FROM dbCursor INTO @DbName
	WHILE @@FETCH_STATUS = 0  
	BEGIN  
		
		IF(@IsOutSideData = 0)
		BEGIN
			SET @SqlFrom = ' FROM [MasterDB].[dbo].' + @TableName
		END		

		SET @SqlScript = 'CREATE VIEW ' + @ViewName + ' AS SELECT '
		
		IF(@IsOutSideData = 0)
		BEGIN
			SET @SqlScript += ' ' + @CategoryCode +'.F_Id'

			SET @SqlScript += ', ' + @CategoryCode +'.UpdatedDatetimeUtc'			
		END
		ELSE
		BEGIN
			SET @SqlScript += ' ' + @CategoryCode + '.' + @Key + ' F_Id'
		END

		IF (@IsTreeView = 1)
		BEGIN
			IF(@IsOutSideData = 0)
			BEGIN
				SET @SqlScript +=  ', '+ @CategoryCode + '.ParentId'
			END
			ELSE
			BEGIN
				SET @SqlScript +=  ', ' + @CategoryCode + '.' + @ParentKey + ' ParentId'
			END
		END;
		 
		SELECT @SqlScript += ', ' + @CategoryCode + '.' + f.CategoryFieldName
			FROM dbo.CategoryField f
				INNER JOIN dbo.Category c ON f.CategoryId = c.CategoryId
			WHERE c.CategoryCode = @CategoryCode AND c.IsDeleted = 0 AND f.IsDeleted = 0 AND f.FormTypeId != @ViewOnlyFormTypeId AND f.CategoryFieldName NOT IN('F_Id', 'ParentId')
		
		DECLARE @CategoryFieldName nvarchar(128)
		DECLARE @RefTableCode nvarchar(128)
		DECLARE @RefTableField nvarchar(128)
		DECLARE @RefTableTitle nvarchar(512)
		DECLARE @FormTypeId int

		DECLARE fieldCursor CURSOR FOR   
			SELECT f.CategoryFieldName, f.RefTableCode, f.RefTableField, f.RefTableTitle, f.FormTypeId 
				FROM dbo.CategoryField f
				INNER JOIN dbo.Category c ON f.CategoryId = c.CategoryId
				WHERE c.CategoryCode = @CategoryCode AND c.IsDeleted = 0 AND f.IsDeleted = 0 AND f.FormTypeId != @ViewOnlyFormTypeId AND f.CategoryFieldName != 'F_Id' AND f.CategoryFieldName != 'ParentId' AND f.RefTableCode is not null 
		
		OPEN fieldCursor  
		FETCH NEXT FROM fieldCursor INTO @CategoryFieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
		
		DECLARE @Suffix int = 0
		
		WHILE @@FETCH_STATUS = 0  
		BEGIN  

			IF LEN(@RefTableTitle)>0 AND @FormTypeId IN(@SelectFormTypeId,@SearchTableFormTypeId) AND @CategoryCode <> @RefTableCode
			BEGIN
				SELECT @SqlScript += ', ' + CONCAT(@RefTableCode, '_', @Suffix) + '.[' + LTRIM(RTRIM([Value])) + '] AS [' + @CategoryFieldName + '_' + LTRIM(RTRIM([Value])) +']' FROM dbo.ufn_Split(@RefTableTitle,',')

				SET @SqlFrom += ' LEFT JOIN [MasterDB].[dbo].v' + @RefTableCode + ' AS ' + CONCAT(@RefTableCode, '_', @Suffix) + ' ON ' + @CategoryCode + '.' + @CategoryFieldName + ' = ' + CONCAT(@RefTableCode, '_', @Suffix) + '.' + @RefTableField
				SET @Suffix += 1
			END
			FETCH NEXT FROM fieldCursor INTO @CategoryFieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
		END  
		
		CLOSE fieldCursor  
		DEALLOCATE fieldCursor 
		
		
		SET @SqlScript += @SqlFrom 
		
		IF(@IsOutSideData = 0) SET @SqlScript += ' WHERE '+ @CategoryCode + '.IsDeleted = 0'

		IF (LEN(@JoinSqlRaw)>0 AND @IsOutSideData = 1)
		BEGIN
			SET @SqlScript =  'CREATE VIEW ' + @ViewName + ' AS 
							' + REPLACE(@JoinSqlRaw,'''','''''')+'
							;';	
			EXEC ( '[' + @DbName + '].[dbo].sp_executesql N'''+ @SqlScript +'''')
			IF (LEN(@SearchSqlRaw)>0)
			BEGIN			
				SET @SqlScript =  'CREATE VIEW ' + CONCAT(@ViewName,'_Search') + ' AS 
								' + REPLACE(@SearchSqlRaw,'''','''''');
				EXEC ( '[' + @DbName + '].[dbo].sp_executesql N'''+ @SqlScript +'''')
			END
		END
		ELSE
		BEGIN
			EXEC ( '[' + @DbName + '].[dbo].sp_executesql N'''+ @SqlScript +'''')
		END
		
			
		
		FETCH NEXT FROM dbCursor INTO @DbName
	END
	
	CLOSE dbCursor  
	DEALLOCATE dbCursor 


	

END

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_GENDER] AS SELECT  _GENDER.F_Id, _GENDER.UpdatedDatetimeUtc, _GENDER.GenderId, _GENDER.GenderName FROM [MasterDB].[dbo]._GENDER WHERE _GENDER.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TT_HON_NHAN] AS SELECT  _TT_HON_NHAN.F_Id, _TT_HON_NHAN.UpdatedDatetimeUtc, _TT_HON_NHAN.maritalStatusId, _TT_HON_NHAN.maritalStatusTitle FROM [MasterDB].[dbo]._TT_HON_NHAN WHERE _TT_HON_NHAN.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_DOI_TUONG_AP_DUNG] AS SELECT  _DOI_TUONG_AP_DUNG.F_Id, _DOI_TUONG_AP_DUNG.UpdatedDatetimeUtc, _DOI_TUONG_AP_DUNG.value, _DOI_TUONG_AP_DUNG.title FROM [MasterDB].[dbo]._DOI_TUONG_AP_DUNG WHERE _DOI_TUONG_AP_DUNG.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_SalaryFields] AS 
							SELECT [SalaryFieldId] AS F_Id
      ,[SubsidiaryId]
      ,[GroupName]
      ,[SalaryFieldName]
      ,CONCAT(GroupName,' - ', [Title])  [Title]
      ,[Description]
      ,[DataTypeId]
      ,[DecimalPlace]
      ,[SortOrder]
      ,[Expression]
      ,[IsEditable]      
      ,[IsDisplayRefData]
      ,[IsCalcSum]

  FROM [OrganizationDB].[dbo].[SalaryField]
  WHERE IsDeleted = 0
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CHUC_VU] AS SELECT  _CHUC_VU.F_Id, _CHUC_VU.UpdatedDatetimeUtc, _CHUC_VU.positionId, _CHUC_VU.positionTitle FROM [MasterDB].[dbo]._CHUC_VU WHERE _CHUC_VU.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_User] AS 
							-- SELECT
--     e.UserId F_Id,
--     e.UserId UserId,
--     e.EmployeeCode,
--     e.FullName,
--     e.Email,
--     e.Phone
-- FROM [OrganizationDB].[dbo].Employee e
-- WHERE e.IsDeleted = 0

SELECT
    e.UserId F_Id,
    e.UserId UserId,
    e.EmployeeCode,
    e.FullName,
    e.Email,
    e.Phone, 
    CONCAT(e.EmployeeCode,' - ', e.FullName) DisplayName,
    STRING_AGG(d.DepartmentName, ', ') WITHIN GROUP (ORDER BY d.DepartmentId) AS Department
FROM [OrganizationDB].[dbo].Employee e
LEFT JOIN [OrganizationDB].[dbo].EmployeeDepartmentMapping ed ON e.UserId = ed.UserId AND ed.IsDeleted = 0 AND e.IsDeleted = 0 AND e.SubsidiaryId = ed.SubsidiaryId
LEFT JOIN [OrganizationDB].[dbo].Department d ON ed.DepartmentId = d.DepartmentId AND d.IsDeleted = 0 AND e.SubsidiaryId = d.SubsidiaryId
WHERE e.IsDeleted = 0
GROUP BY e.UserId, e.EmployeeCode, e.FullName, e.Email, e.Phone
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_User_Search] AS 
								SELECT
    e.UserId F_Id,
    e.UserId UserId,
    e.EmployeeCode,
    e.FullName,
    e.Email,
    e.Phone, 
    CONCAT(e.EmployeeCode,' - ', e.FullName) DisplayName,
    STRING_AGG(d.DepartmentName, ', ') WITHIN GROUP (ORDER BY d.DepartmentId) AS Department
FROM [OrganizationDB].[dbo].Employee e
LEFT JOIN [OrganizationDB].[dbo].EmployeeDepartmentMapping ed ON e.UserId = ed.UserId AND ed.IsDeleted = 0 AND e.IsDeleted = 0 AND e.SubsidiaryId = ed.SubsidiaryId
LEFT JOIN [OrganizationDB].[dbo].Department d ON ed.DepartmentId = d.DepartmentId AND d.IsDeleted = 0 AND e.SubsidiaryId = d.SubsidiaryId
WHERE e.IsDeleted = 0
GROUP BY e.UserId, e.EmployeeCode, e.FullName, e.Email, e.Phone

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_LOAI_CONG_VAN] AS SELECT  _LOAI_CONG_VAN.F_Id, _LOAI_CONG_VAN.UpdatedDatetimeUtc, _LOAI_CONG_VAN.ma_cv, _LOAI_CONG_VAN.ten_cv FROM [MasterDB].[dbo]._LOAI_CONG_VAN WHERE _LOAI_CONG_VAN.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_DON_MUA_HANG] AS 
							SELECT
po.PurchaseOrderId F_Id,
po.PurchaseOrderCode,
po.Date,
po.DeliveryDate
FROM PurchaseOrderDB.dbo.PurchaseOrder po
WHERE po.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_THOI_HAN_HOP_DONG] AS SELECT  _THOI_HAN_HOP_DONG.F_Id, _THOI_HAN_HOP_DONG.UpdatedDatetimeUtc, _THOI_HAN_HOP_DONG.value FROM [MasterDB].[dbo]._THOI_HAN_HOP_DONG WHERE _THOI_HAN_HOP_DONG.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TRINH_DO_DAO_TAO] AS SELECT  _TRINH_DO_DAO_TAO.F_Id, _TRINH_DO_DAO_TAO.UpdatedDatetimeUtc, _TRINH_DO_DAO_TAO.educationLevelId, _TRINH_DO_DAO_TAO.educationLevelTitle FROM [MasterDB].[dbo]._TRINH_DO_DAO_TAO WHERE _TRINH_DO_DAO_TAO.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_DepartmentAndStock] AS 
							SELECT 
DepartmentId F_Id,
DepartmentName,
DepartmentCode,
[Description]
FROM [OrganizationDB].[dbo].Department 
WHERE IsDeleted=0 AND IsProduction = 1

UNION ALL
SELECT
0 F_Id,
N'Kho' DepartmentName,
'' DepartmentCode,
'Phân hệ kho' [Description]
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_DSPL_HDLD] AS SELECT  _DSPL_HDLD.F_Id, _DSPL_HDLD.UpdatedDatetimeUtc, _DSPL_HDLD.appendixId, _DSPL_HDLD.appendixTitle, _DSPL_HDLD.appendixContent FROM [MasterDB].[dbo]._DSPL_HDLD WHERE _DSPL_HDLD.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Ship] AS SELECT  _Ship.F_Id, _Ship.UpdatedDatetimeUtc, _Ship.ShipCode, _Ship.ShipName FROM [MasterDB].[dbo]._Ship WHERE _Ship.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TestCategory] AS SELECT  _TestCategory.F_Id, _TestCategory.UpdatedDatetimeUtc, _TestCategory.Test1 FROM [MasterDB].[dbo]._TestCategory WHERE _TestCategory.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_ProductUnitConversion] AS 
							SELECT 
    puc.ProductUnitConversionId F_Id,
    puc.ProductUnitConversionName,
    puc.FactorExpression,
    puc.ConversionDescription,
    puc.IsDefault,
    puc.IsFreeStyle,
    puc.ProductId,
    puc.DecimalPlace,
    p.ProductName ProductId_ProductName   
FROM [StockDB].[dbo].ProductUnitConversion puc
JOIN [StockDB].[dbo].Product p ON puc.ProductId = p.ProductId

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TRANG_THAI_HIEU_LUC] AS SELECT  _TRANG_THAI_HIEU_LUC.F_Id, _TRANG_THAI_HIEU_LUC.UpdatedDatetimeUtc, _TRANG_THAI_HIEU_LUC.validityStateId, _TRANG_THAI_HIEU_LUC.validityStateTitle FROM [MasterDB].[dbo]._TRANG_THAI_HIEU_LUC WHERE _TRANG_THAI_HIEU_LUC.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_NGAN_HANG] AS SELECT  _NGAN_HANG.F_Id, _NGAN_HANG.UpdatedDatetimeUtc, _NGAN_HANG.bankId, _NGAN_HANG.bankTitle FROM [MasterDB].[dbo]._NGAN_HANG WHERE _NGAN_HANG.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_XEP_LOAI] AS SELECT  _XEP_LOAI.F_Id, _XEP_LOAI.UpdatedDatetimeUtc, _XEP_LOAI.rankId, _XEP_LOAI.rankTitle FROM [MasterDB].[dbo]._XEP_LOAI WHERE _XEP_LOAI.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Unit] AS 
							SELECT UnitId F_Id, UnitName, UnitStatusId, DecimalPlace
FROM [MasterDB].[dbo].Unit WHERE IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_HDLD_Current] AS 
							WITH hd AS (
	SELECT
		ROW_NUMBER() OVER(PARTITION BY hd.nhan_vien ORDER BY hd.ngay_co_hieu_luc DESC) RowNumber,
		hd.HrBill_F_Id F_Id,
		hd.nhan_vien,
		hd.so_ct,
		hd.loai_hdld,
		loaiHd.title loai_hdld_title
	FROM OrganizationDB.dbo._HR_CTNS_HDLD_General_Info hd 
		LEFT JOIN dbo.v_LOAI_HDLD loaiHd ON loaiHd.F_Id = hd.loai_hdld
	WHERE hd.IsDeleted = 0 AND GETUTCDATE() > hd.ngay_co_hieu_luc
) 
SELECT 
		hd.F_Id,
		hd.nhan_vien,
		hd.so_ct,
		hd.loai_hdld,
		hd.loai_hdld_title
FROM hd
WHERE hd.RowNumber = 1
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_LSX] AS 
							SELECT 
    pod.ProductionOrderDetailId F_Id,
     po.ProductionOrderId, 
    po.ProductionOrderCode,
    p.ProductCode,
    p.ProductName,
    pod.OrderCode,
    po.Date,
    po.StartDate,
    po.EndDate,
    po.Description,
    pod.quantity
FROM [ManufacturingDB].[dbo].ProductionOrder po
INNER JOIN [ManufacturingDB].[dbo].ProductionOrderDetail pod ON po.ProductionOrderId = pod.ProductionOrderId AND pod.IsDeleted = 0
LEFT JOIN StockDB.dbo.Product p on pod.ProductId = p.ProductId AND p.IsDeleted = 0
where po.IsDeleted = 0
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_DIEU_KHOAN_HDLD] AS SELECT  _DIEU_KHOAN_HDLD.F_Id, _DIEU_KHOAN_HDLD.UpdatedDatetimeUtc, _DIEU_KHOAN_HDLD.provisionCode, _DIEU_KHOAN_HDLD.provisionTitle FROM [MasterDB].[dbo]._DIEU_KHOAN_HDLD WHERE _DIEU_KHOAN_HDLD.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_ExpenseItem] AS SELECT  _ExpenseItem.F_Id, _ExpenseItem.UpdatedDatetimeUtc, _ExpenseItem.ParentId, _ExpenseItem.ExpenseItemName, _ExpenseItem.ExpenseItemCode, _ExpenseItem.Note FROM [MasterDB].[dbo]._ExpenseItem WHERE _ExpenseItem.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_DS_HOP_DONG_LAO_DONG] AS 
							SELECT DISTINCT 
    hd.F_Id AS F_Id , 
    hd.so_ct, 
    hd.nhan_vien,
    hs.so_ct ma_nhan_vien,
    hd.loai_hdld,
    hd.loai_hdld_name,
    hd.trang_thai, 
    bp.DepartmentName phong_ban,
    hs.ho_ten full_name
    FROM [OrganizationDB].[dbo].[_HR_CTNS_HDLD_General_Info] as hd
  left join [OrganizationDB].[dbo].[_HR_CTNS_Ho_So_General_Info] as hs on hd.nhan_vien = hs.HrBill_F_Id and hs.IsDeleted = 0
  left join [OrganizationDB].[dbo].[_HR_CTNS_Ho_So_thong_tin_cong_viec] as cv on cv.HrBill_F_Id = hs.HrBill_F_Id and cv.IsDeleted = 0
  left join [OrganizationDB].[dbo].[Department] as bp on bp.DepartmentId = cv.bo_phan and cv.IsDeleted = 0
  where hd.IsDeleted = 0
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_DANH_SACH_QUYET_DINH] AS 
							SELECT HrBill_F_Id 
[F_Id],
[so_ct],
[noi_dung],
[ngay_ban_hanh],
[loai_quyet_dinh],
[co_quan_ban_hanh],
[ten_loai_quyet_dinh],
[loai_quyet_dinh_decisionTypeTitle] 
FROM [OrganizationDB].[dbo].[_HR_CTNS_DSQD_pnk_chung] where  [IsDeleted]=0
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_HINH_THUC_LAM_VIEC] AS SELECT  _HINH_THUC_LAM_VIEC.F_Id, _HINH_THUC_LAM_VIEC.UpdatedDatetimeUtc, _HINH_THUC_LAM_VIEC.tieu_de FROM [MasterDB].[dbo]._HINH_THUC_LAM_VIEC WHERE _HINH_THUC_LAM_VIEC.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_BAO_GIA_INFO] AS 
							SELECT r.VoucherBill_F_Id AS F_Id, r.so_ct
		FROM [PurchaseOrderDB].dbo.VoucherValueRow r
		INNER JOIN [PurchaseOrderDB].dbo.VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND t.VoucherTypeCode = 'CTBH_BAO_GIA' AND r.CensorStatusId = 1
		GROUP BY r.VoucherBill_F_Id, r.so_ct
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CustomerContact] AS 
							SELECT 
	ct.CustomerContactId F_Id,
	c.PartnerId,
	ct.CustomerId,
	ct.FullName,
	ct.SubsidiaryId,
	ct.GenderId,
	ct.Position,
	ct.PhoneNumber,
	ct.Email	
FROM [OrganizationDB].[dbo].CustomerContact ct 
LEFT JOIN [OrganizationDB].[dbo].Customer c ON ct.CustomerId = c.CustomerId
WHERE ct.IsDeleted = 0 AND c.IsDeleted = 0
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_BOOKING_VT_QT] AS 
							WITH tmp AS
  (SELECT r.VoucherBill_F_Id,
          MAX(r.F_Id) AS F_Id
   FROM [PurchaseOrderDB].dbo.VoucherValueRow AS r
   INNER JOIN [PurchaseOrderDB].dbo.VoucherType AS t ON r.VoucherTypeId = t.VoucherTypeId
   WHERE (r.IsDeleted = 0)
     AND (t.VoucherTypeCode = 'CTBH_BOOKING_XK')
   GROUP BY r.VoucherBill_F_Id)

SELECT r.VoucherBill_F_Id AS F_Id,
       r.so_ct,
       r.ngay_ct,
       r.pol,
       r.pod,
       r.confirmation_info
FROM tmp AS tmp_1
INNER JOIN [PurchaseOrderDB].dbo.VoucherValueRow AS r ON tmp_1.F_Id = r.F_Id

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_WeekPlan] AS 
							SELECT
    wp.WeekPlanId F_Id,
    wp.MonthPlanId,
    wp.WeekPlanName,
    wp.StartDate,
    wp.EndDate,
    wp.WeekNote

FROM [ManufacturingDB].dbo.WeekPlan wp
WHERE wp.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Construction] AS SELECT  _Construction.F_Id, _Construction.UpdatedDatetimeUtc, _Construction.ConstructionName, _Construction.ConstructionCode FROM [MasterDB].[dbo]._Construction WHERE _Construction.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_NumberToWords_VN]
(
    @Number AS BIGINT,
    @Exception AS INT	-- 0: @Below20, 1: @Below20_VN
) RETURNS NVARCHAR(MAX)

AS

BEGIN

    DECLARE @Below20 TABLE (ID INT IDENTITY(0,1), Word NVARCHAR(32))

    DECLARE @Below100 TABLE (ID INT IDENTITY(2,1), Word NVARCHAR(32))
    
    DECLARE @Below20_VN TABLE (ID INT IDENTITY(0,1), Word NVARCHAR(32))

    DECLARE @BelowHundred AS NVARCHAR(MAX) 

    INSERT @Below20 (Word) VALUES (N'không')
    INSERT @Below20 (Word) VALUES (N'một')
    INSERT @Below20 (Word) VALUES (N'hai')
    INSERT @Below20 (Word) VALUES (N'ba')
    INSERT @Below20 (Word) VALUES (N'bốn')
    INSERT @Below20 (Word) VALUES (N'năm')
    INSERT @Below20 (Word) VALUES (N'sáu')
    INSERT @Below20 (Word) VALUES (N'bảy')
    INSERT @Below20 (Word) VALUES (N'tám')
    INSERT @Below20 (Word) VALUES (N'chín')
    INSERT @Below20 (Word) VALUES (N'mười')
    INSERT @Below20 (Word) VALUES (N'mười một')
    INSERT @Below20 (Word) VALUES (N'mười hai')
    INSERT @Below20 (Word) VALUES (N'mười ba')
    INSERT @Below20 (Word) VALUES (N'mười bốn')
    INSERT @Below20 (Word) VALUES (N'mười lăm')
    INSERT @Below20 (Word) VALUES (N'mười sáu')
    INSERT @Below20 (Word) VALUES (N'mười bảy')
    INSERT @Below20 (Word) VALUES (N'mười tám')
    INSERT @Below20 (Word) VALUES (N'mười chín')

    INSERT @Below100 VALUES (N'hai mươi')
    INSERT @Below100 VALUES (N'ba mươi')
    INSERT @Below100 VALUES (N'bốn mươi')
    INSERT @Below100 VALUES (N'năm mươi')
    INSERT @Below100 VALUES (N'sáu mươi')
    INSERT @Below100 VALUES (N'bảy mươi')
    INSERT @Below100 VALUES (N'tám mươi')
    INSERT @Below100 VALUES (N'chín mươi')

    INSERT @Below20_VN (Word) VALUES (N'không')
    INSERT @Below20_VN (Word) VALUES (N'mốt')		-- be used
    INSERT @Below20_VN (Word) VALUES (N'hai')
    INSERT @Below20_VN (Word) VALUES (N'ba')
    INSERT @Below20_VN (Word) VALUES (N'tư')		-- be used		
    INSERT @Below20_VN (Word) VALUES (N'lăm')		-- be used

    IF @Number > 99
    BEGIN
        SELECT @belowHundred = dbo.ufn_NumberToWords_VN(@Number % 100, 0)
    END

    DECLARE @NumberInWords NVARCHAR(MAX)

    SET @NumberInWords  = 
    (
      SELECT
        CASE 
            WHEN @Number = 0 THEN  ''
            WHEN @Number BETWEEN 1 AND 19 
				THEN (
						CASE  
							WHEN @Exception = 0 THEN (SELECT Word FROM @Below20 WHERE ID = @Number)
							ELSE (SELECT Word FROM @Below20_VN WHERE ID = @Number)
						END
					)
            WHEN @Number BETWEEN 20 AND 99
                THEN (SELECT Word FROM @Below100 WHERE ID = @Number/10) + ' ' + dbo.ufn_NumberToWords_VN(@Number % 10, 1) 
            WHEN @Number BETWEEN 100 AND 999 
                THEN (dbo.ufn_NumberToWords_VN(@Number / 100, 0)) + N' trăm ' + 
					(
						CASE 
							WHEN (@Number % 100) < 10 THEN N'linh '
							ELSE ''
						END
					) + @belowHundred
            WHEN @Number BETWEEN 1000 AND 999999 
                THEN (dbo.ufn_NumberToWords_VN(@Number / 1000, 0))+ N' nghìn '+ dbo.ufn_NumberToWords_VN(@Number % 1000, 0)  
            WHEN @Number BETWEEN 1000000 AND 999999999 
                THEN (dbo.ufn_NumberToWords_VN(@Number / 1000000, 0)) + N' triệu '+ dbo.ufn_NumberToWords_VN(@Number % 1000000, 0) 
            WHEN @Number BETWEEN 1000000000 AND 999999999999 
                THEN (dbo.ufn_NumberToWords_VN(@Number / 1000000000, 0))+ N' tỷ '+ dbo.ufn_NumberToWords_VN(@Number % 1000000000, 0) 
            ELSE N' INVALID INPUT'
        END
    )
    
    RETURN (@NumberInWords)
    
/**
Hỏi một câu các bác đừng cười. Quả thật là mình không còn nhớ quy tắc viết số 5 trong một dãy số như thế nào cho đúng nữa rồi ~X(
Nhờ bác nào còn nhớ thì có thể nhắc lại cho biết được không
Ví dụ dãy số này chẳng hạn thì viết thế nào : 1.505.555.005
15, 205 ...

Viết? Ý bạn là "viết bằng chữ" như cái dòng ký nhận tiền khi ... ra ngân hàng ý hả ;))
1.505.555.005: Một tỉ, năm trăm linh năm triệu, năm trăm năm mươi lăm nghìn, không trăm linh năm
15: mười lăm
205: hai trăm linh năm
Còn gì nữa không? đang muốn ngủ chiều, tiện thể đỡ phải đếm cừu :))

p/s còn quy tắc ý hả, ví dụ trong cụm 3 số ***
- Nếu là 5XX: viết là năm
- Nếu là X5X: viết là năm
- Nếu là XY5: Y>0: lăm; Y=0: năm
**/

END

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_ProductCustomer] AS 
							SELECT 
    pc.ProductCustomerId        F_Id,
    p.ProductId,
    p.ProductCode,
    p.ProductName,
    pc.CustomerProductCode      CustomerProductCode,
    pc.CustomerProductName      CustomerProductName,
    c.PartnerId                 PartnerId
FROM [StockDB].[dbo].[ProductCustomer] pc
    JOIN [StockDB].[dbo].[Product] p ON pc.ProductId = p.ProductId
    LEFT JOIN [OrganizationDB].[dbo].[Customer] c ON pc.CustomerId = c.CustomerId AND c.IsDeleted = 0
WHERE pc.IsDeleted = 0 AND p.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER FUNCTION [dbo].[ufn_AmountToWords_VN]
( 
	@Amount BIGINT
) RETURNS NVARCHAR(4000)

AS

BEGIN
	DECLARE @AmountInWords NVARCHAR(4000)
	
	IF dbo.ufn_NumberToWords_VN(@Amount, 0) <> ''
		SELECT @AmountInWords = dbo.ufn_NumberToWords_VN(@Amount, 0) + N' đồng chẵn.'	
	
    IF ISNULL(@AmountInWords, '') <> ''
		SELECT @AmountInWords = UPPER(LEFT(@AmountInWords, 1)) + RIGHT(@AmountInWords, LEN(@AmountInWords) - 1)
	
	RETURN (@AmountInWords)

END

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Department] AS 
							WITH tmp
AS (SELECT DepartmentId F_Id,
           DepartmentName,
           DepartmentCode,
           [Description],
           IsActived,
           WorkingHoursPerDay,
           IsProduction,
           SubsidiaryId,
           ParentId,
           IsFactory,
		   CONVERT(NVARCHAR(max),'') TitlePrefix,
		   CONVERT(NVARCHAR(max),CONCAT(DepartmentCode, ' - ', DepartmentName)) TreeTitle,
		   CONVERT(NVARCHAR(max), CONCAT('/',DepartmentCode,'/')) PathCodes,
		   CONVERT(NVARCHAR(max), CONCAT('/',DepartmentName,'/')) PathNames,
		   1 [Level],
		   DepartmentId ParentId_Level_1,
		   NULL ParentId_Level_2,
		   NULL ParentId_Level_3,
		   NULL ParentId_Level_4,
		   NULL ParentId_Level_5,
		   NULL ParentId_Level_6,
		   NULL ParentId_Level_7,
		   NULL ParentId_Level_8,
		   NULL ParentId_Level_9,
		   NULL ParentId_Level_10
    FROM [OrganizationDB].[dbo].Department
    WHERE IsDeleted = 0
          AND ParentId IS NULL
    UNION ALL
    SELECT d.DepartmentId F_Id,
           d.DepartmentName,
           d.DepartmentCode,
           d.[Description],
           d.IsActived,
           d.WorkingHoursPerDay,
           d.IsProduction,
           d.SubsidiaryId,
           d.ParentId,
           d.IsFactory,
		   CONVERT(NVARCHAR(max),CONCAT('----', tmp.TitlePrefix)) TitlePrefix,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.TitlePrefix,' ', d.DepartmentCode, ' - ', d.DepartmentName)) TreeTitle,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.PathCodes, d.DepartmentCode,'/')) PathCodes,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.PathNames, d.DepartmentName,'/')) PathNames,
		   tmp.[Level] + 1 [Level],
		   tmp.ParentId_Level_1,
		   CASE WHEN tmp.[Level] + 1 =2 THEN d.DepartmentId ELSE tmp.ParentId_Level_2 END ParentId_Level_2,
		   CASE WHEN tmp.[Level] + 1 =3 THEN d.DepartmentId ELSE tmp.ParentId_Level_3 END ParentId_Level_3,
		   CASE WHEN tmp.[Level] + 1 =4 THEN d.DepartmentId ELSE tmp.ParentId_Level_4 END ParentId_Level_4,
		   CASE WHEN tmp.[Level] + 1 =5 THEN d.DepartmentId ELSE tmp.ParentId_Level_5 END ParentId_Level_5,
		   CASE WHEN tmp.[Level] + 1 =6 THEN d.DepartmentId ELSE tmp.ParentId_Level_6 END ParentId_Level_6,
		   CASE WHEN tmp.[Level] + 1 =7 THEN d.DepartmentId ELSE tmp.ParentId_Level_7 END ParentId_Level_7,
		   CASE WHEN tmp.[Level] + 1 =8 THEN d.DepartmentId ELSE tmp.ParentId_Level_8 END ParentId_Level_8,
		   CASE WHEN tmp.[Level] + 1 =9 THEN d.DepartmentId ELSE tmp.ParentId_Level_9 END ParentId_Level_9,
		   CASE WHEN tmp.[Level] + 1 =10 THEN d.DepartmentId ELSE tmp.ParentId_Level_10 END ParentId_Level_10
    FROM [OrganizationDB].[dbo].Department d
        JOIN tmp
            ON d.ParentId = tmp.F_Id
    WHERE d.IsDeleted = 0)
SELECT *
FROM tmp
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Branch] AS SELECT  _Branch.F_Id, _Branch.UpdatedDatetimeUtc, _Branch.BranchName, _Branch.BranchCode, _Branch.TaxNumber, _Branch.BranchAddress, _Branch.BranchPhone, _Branch.BranchEmail, _Branch.BranchFax, _Branch.BranchNote FROM [MasterDB].[dbo]._Branch WHERE _Branch.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Partner] AS 
							SELECT        
	c.PartnerId F_Id,
	c.CustomerId,
	c.CustomerCode PartnerCode,
	c.CustomerName PartnerName, 
	c.Email, c.PhoneNumber, 
	c.TaxIdNo,
	c.Website,
	c.CustomerStatusId, 
	c.CustomerTypeId, 
	c.Address, 
	c.LegalRepresentative,
	c.DebtDays, 
	c.DebtLimitation, 
	c.LoanDays, 
	c.LoanLimitation,
	c.DebtManagerUserId,
	c.LogoFileId,
	--c.InformationContact,
	c.PayConditionsId,
	c.DeliveryConditionsId,
	pc.PayConditionName,
	dc.ConditionName,
	(
	SELECT TOP 1
		cc.FullName
	FROM [OrganizationDB].[dbo].CustomerContact cc
	WHERE cc.CustomerId = c.CustomerId and cc.IsDeleted = 0
	) AS FirstContactName
FROM [OrganizationDB].[dbo].Customer c
LEFT JOIN [MasterDB].[dbo]._DeliveryConditions dc ON c.DeliveryConditionsId = dc.F_Id
LEFT JOIN [MasterDB].[dbo]._PayConditions pc ON c.PayConditionsId = pc.F_Id
WHERE c.CustomerStatusId = 1 AND c.IsDeleted = 0
UNION ALL
SELECT 
	e.PartnerId F_Id,
	NULL CustomerId,
	e.EmployeeCode PartnerCode,
	e.FullName PartnerName,
	e.Email,
	e.Phone PhoneNumber,
	NULL TaxIdNo,
	NULL Website,
	1 CustomerStatusId, 
	2 CustomerTypeId,
	e.Address,
	NULL AS DebtDays,
	NULL AS DebtLimitation,
	NULL LoanDays,
	NULL LoanLimitation,
	NULL DebtManagerUserId,
	NULL LogoFileId,
	--NULL AS InformationContact,
	NULL AS PayConditionsId,
	NULL AS DeliveryConditionsId,
	NULL PayConditionName,
	NULL ConditionName,
	NULL FirstContactName,
	null LegalRepresentative
FROM [OrganizationDB].[dbo].Employee e
WHERE e.IsDeleted = 0
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_timingType] AS SELECT  _timingType.F_Id, _timingType.UpdatedDatetimeUtc, _timingType.Code, _timingType.Name FROM [MasterDB].[dbo]._timingType WHERE _timingType.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_gov_level] AS SELECT  _gov_level.F_Id, _gov_level.UpdatedDatetimeUtc, _gov_level.ParentId, _gov_level.Code, _gov_level.Name, _gov_level.Province FROM [MasterDB].[dbo]._gov_level WHERE _gov_level.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_category_cate] AS SELECT  _category_cate.F_Id, _category_cate.UpdatedDatetimeUtc, _category_cate.Code, _category_cate.Name, _category_cate.Note FROM [MasterDB].[dbo]._category_cate WHERE _category_cate.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_BH_XK_INFO] AS 
							SELECT        
        r.VoucherBill_F_Id AS F_Id, 
        r.so_ct
    FROM [PurchaseOrderDB].dbo.VoucherValueRow AS r 
    INNER JOIN [PurchaseOrderDB].dbo.VoucherType AS t ON r.VoucherTypeId = t.VoucherTypeId
    WHERE (r.IsDeleted = 0) AND (t.VoucherTypeCode = 'CTBH_BH_XK') AND r.CensorStatusId = 1
    GROUP BY r.VoucherBill_F_Id, r.so_ct
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_category_subcate] AS SELECT  _category_subcate.F_Id, _category_subcate.UpdatedDatetimeUtc, _category_subcate.ParentId, _category_subcate.Cate, _category_subcate.Cate_code, _category_subcate.Call_name, _category_subcate.Note FROM [MasterDB].[dbo]._category_subcate WHERE _category_subcate.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_BH_XK_INFO_Search] AS 
								WITH tmp AS (
    SELECT        
        r.VoucherBill_F_Id, 
        MAX(r.F_Id) AS F_Id
    FROM [PurchaseOrderDB].dbo.VoucherValueRow AS r 
    INNER JOIN [PurchaseOrderDB].dbo.VoucherType AS t ON r.VoucherTypeId = t.VoucherTypeId
    WHERE (r.IsDeleted = 0) AND (t.VoucherTypeCode = 'CTBH_BH_XK') AND r.CensorStatusId = 1
    GROUP BY r.VoucherBill_F_Id
)
SELECT 
    r.VoucherBill_F_Id AS F_Id, 
    r.so_ct, 
    r.ngay_ct, 
    r.kho, 
    r.ong_ba, 
    r.tk_no0, 
    r.kh0,
    r.noi_dung, 
    r.tt_nguoi_mua, 
    r.mau_hd, 
    r.ky_hieu_hd, 
    r.seri_hd, 
    r.ngay_hd, 
    r.attachment, 
    r.ten_tau, 
    r.dkgh, 
    r.kh_vt, 
    r.tt_ship, 
    r.tt_nguoi_nhan_hang
FROM tmp AS tmp_1 
INNER JOIN [PurchaseOrderDB].dbo.VoucherValueRow AS r ON tmp_1.F_Id = r.F_Id

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_cate_inoutcome] AS SELECT  _cate_inoutcome.F_Id, _cate_inoutcome.UpdatedDatetimeUtc, _cate_inoutcome.Code, _cate_inoutcome.Name, _cate_inoutcome.Code_no, _cate_inoutcome.Note, _cate_inoutcome.checkTkno, _cate_inoutcome.checkTkco FROM [MasterDB].[dbo]._cate_inoutcome WHERE _cate_inoutcome.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_HO_SO_UNG_TUYEN] AS 
							select v.F_Id, v.so_ct, v.ho_ten, v.so_cccd, v.email_ut, v.dia_chi_ut, v.ngay_cap_ut, v.ngay_sinh
from OrganizationDB.dbo._HR_CTNS_Ho_So_Ung_Tuyen_General_Info v  where v.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_account_nationalbank] AS SELECT  _account_nationalbank.F_Id, _account_nationalbank.UpdatedDatetimeUtc, _account_nationalbank.Acc_code, _account_nationalbank.Acc_name, _account_nationalbank.Note FROM [MasterDB].[dbo]._account_nationalbank WHERE _account_nationalbank.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Product] AS 
							SELECT 
	p.ProductId F_Id,
	p.ProductCode,
	p.ProductName,
    p.MainImageFileId,
	p.UnitId,
	u.UnitName UnitId_UnitName,
	puc.Decimalplace UnitId_Decimalplace,
	p.EstimatePrice,
	pei.Specification,
	p.ProductNameEng,
	p.NetWeight,
	p.GrossWeight,
	p.Measurement,
	p.PackingHeight,
	p.PackingLong,
	p.PackingWidth,
	p.SubsidiaryId

FROM [StockDB].[dbo].Product p 
LEFT JOIN [StockDB].[dbo].ProductUnitConversion puc ON p.ProductId = puc.ProductId AND puc.IsDefault = 1 
LEFT JOIN [StockDB].[dbo].ProductExtraInfo pei ON p.ProductId = pei.ProductId AND pei.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].Unit u ON p.UnitId = u.UnitId AND u.IsDeleted = 0

WHERE p.IsDeleted = 0
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Cap_NSNN] AS SELECT  _Cap_NSNN.F_Id, _Cap_NSNN.UpdatedDatetimeUtc, _Cap_NSNN.Ma_cap, _Cap_NSNN.Ten_cap_QLNS FROM [MasterDB].[dbo]._Cap_NSNN WHERE _Cap_NSNN.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Product_Search] AS 
								SELECT 
	p.ProductId F_Id,
	p.ProductCode,
	p.ProductName,
    p.MainImageFileId,
	p.UnitId,
	u.UnitName UnitId_UnitName,
	puc.Decimalplace UnitId_Decimalplace,
	p.ProductCateId,
	pc.ProductCateName ProductCateId_ProductCateName,
	p.EstimatePrice,
	pei.Specification,
	p.ProductNameEng,
	p.NetWeight,
	p.GrossWeight,
	p.Measurement,
	p.PackingHeight,
	p.PackingLong,
	p.PackingWidth,
	p.SubsidiaryId,
	sl.sl_ton

FROM [StockDB].[dbo].Product p 
LEFT JOIN [StockDB].[dbo].ProductUnitConversion puc ON p.ProductId = puc.ProductId AND puc.IsDefault = 1 
LEFT JOIN [StockDB].[dbo].ProductExtraInfo pei ON p.ProductId = pei.ProductId AND pei.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].Unit u ON p.UnitId = u.UnitId AND u.IsDeleted = 0
LEFT JOIN [StockDB].[dbo].ProductCate pc ON p.ProductCateId = pc.ProductCateId AND pc.IsDeleted = 0
LEFT JOIN (
	SELECT sp.ProductId, SUM(sp.PrimaryQuantityRemaining) sl_ton
	FROM
	[StockDB].[dbo].StockProduct sp
	WHERE sp.IsDeleted = 0
	GROUP BY sp.ProductId
) sl ON p.ProductId = sl.ProductId

WHERE p.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_PayConditions] AS SELECT  _PayConditions.F_Id, _PayConditions.UpdatedDatetimeUtc, _PayConditions.PayConditionCode, _PayConditions.PayConditionName, _PayConditions.PayConditionNameEn, _PayConditions.PayConditionContent FROM [MasterDB].[dbo]._PayConditions WHERE _PayConditions.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CAP_BAC] AS SELECT  _CAP_BAC.F_Id, _CAP_BAC.UpdatedDatetimeUtc, _CAP_BAC.rankId, _CAP_BAC.rankTitle FROM [MasterDB].[dbo]._CAP_BAC WHERE _CAP_BAC.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_MonthPlan] AS 
							SELECT 
    mp.MonthPlanId F_Id,
    mp.MonthPlanName,
    mp.StartDate,
    mp.EndDate,
    mp.MonthNote
FROM [ManufacturingDB].dbo.MonthPlan mp WHERE mp.IsDeleted = 0
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_DeliveryConditions] AS SELECT  _DeliveryConditions.F_Id, _DeliveryConditions.UpdatedDatetimeUtc, _DeliveryConditions.ConditionCode, _DeliveryConditions.ConditionName, _DeliveryConditions.ConditionContent FROM [MasterDB].[dbo]._DeliveryConditions WHERE _DeliveryConditions.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CensorStatus] AS SELECT  _CensorStatus.F_Id, _CensorStatus.UpdatedDatetimeUtc, _CensorStatus.CensorStatusId, _CensorStatus.CensorStatusName, _CensorStatus.CssStyleJson FROM [MasterDB].[dbo]._CensorStatus WHERE _CensorStatus.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Container] AS SELECT  _Container.F_Id, _Container.UpdatedDatetimeUtc, _Container.ContainerCode, _Container.Description FROM [MasterDB].[dbo]._Container WHERE _Container.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_DM_LOAI_NVL] AS SELECT  _DM_LOAI_NVL.F_Id, _DM_LOAI_NVL.UpdatedDatetimeUtc, _DM_LOAI_NVL.title, _DM_LOAI_NVL.value FROM [MasterDB].[dbo]._DM_LOAI_NVL WHERE _DM_LOAI_NVL.IsDeleted = 0

GO

USE MasterDB
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE OR ALTER PROCEDURE [dbo].[asp_PrintConfig_SuggestionField] 
	@ModuleTypeId int,
	@SubId int
AS
BEGIN
	IF @ModuleTypeId = 5
	BEGIN
		SELECT FieldName, Title, N'Kế toán' AS [Group] FROM AccountancyDB.dbo.InputField WHERE IsDeleted = 0
	END
	IF @ModuleTypeId = 4
	BEGIN
		SELECT FieldName, Title, N'Mua/bán hàng' AS [Group] FROM PurchaseOrderDB.dbo.VoucherField WHERE IsDeleted = 0
	END

END


GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Category_Demo] AS SELECT * FROM Category

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_METHOD_PAYMENT] AS SELECT  _METHOD_PAYMENT.F_Id, _METHOD_PAYMENT.UpdatedDatetimeUtc, _METHOD_PAYMENT.MethodPaymentId, _METHOD_PAYMENT.MethodPaymentName FROM [MasterDB].[dbo]._METHOD_PAYMENT WHERE _METHOD_PAYMENT.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CheckStatus] AS SELECT  _CheckStatus.F_Id, _CheckStatus.UpdatedDatetimeUtc, _CheckStatus.CheckStatusId, _CheckStatus.CheckStatusName, _CheckStatus.CssStyleJson FROM [MasterDB].[dbo]._CheckStatus WHERE _CheckStatus.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_QuotationStatus] AS SELECT  _QuotationStatus.F_Id, _QuotationStatus.UpdatedDatetimeUtc, _QuotationStatus.QuotationStatus, _QuotationStatus.QuotationStatusName FROM [MasterDB].[dbo]._QuotationStatus WHERE _QuotationStatus.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_RequestSampleStatus] AS SELECT  _RequestSampleStatus.F_Id, _RequestSampleStatus.UpdatedDatetimeUtc, _RequestSampleStatus.RequestSampleStatusId, _RequestSampleStatus.RequestSampleStatusName FROM [MasterDB].[dbo]._RequestSampleStatus WHERE _RequestSampleStatus.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_MUC_DO_UU_TIEN] AS SELECT  _MUC_DO_UU_TIEN.F_Id, _MUC_DO_UU_TIEN.UpdatedDatetimeUtc, _MUC_DO_UU_TIEN.title, _MUC_DO_UU_TIEN.value FROM [MasterDB].[dbo]._MUC_DO_UU_TIEN WHERE _MUC_DO_UU_TIEN.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_VONG_TD] AS SELECT  _VONG_TD.F_Id, _VONG_TD.UpdatedDatetimeUtc, _VONG_TD.title, _VONG_TD.number FROM [MasterDB].[dbo]._VONG_TD WHERE _VONG_TD.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Employee] AS SELECT  _Employee.UserId F_Id FROM ( SELECT [OrganizationDB].[dbo].Employee.UserId UserId FROM [OrganizationDB].[dbo].Employee WHERE [OrganizationDB].[dbo].Employee.IsDeleted = 0) _Employee

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_EMAIL_KQ_UT] AS SELECT  _EMAIL_KQ_UT.F_Id, _EMAIL_KQ_UT.UpdatedDatetimeUtc, _EMAIL_KQ_UT.title, _EMAIL_KQ_UT.code FROM [MasterDB].[dbo]._EMAIL_KQ_UT WHERE _EMAIL_KQ_UT.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTNS_ALLOWANCE] AS SELECT  _CTNS_ALLOWANCE.F_Id, _CTNS_ALLOWANCE.UpdatedDatetimeUtc, _CTNS_ALLOWANCE.allowance_code, _CTNS_ALLOWANCE.allowance_name, _CTNS_ALLOWANCE.allowance_desc, _CTNS_ALLOWANCE.allowance_level_name, _CTNS_ALLOWANCE.allowance_level_condition, _CTNS_ALLOWANCE.allowance_level_value, _CTNS_ALLOWANCE.allowance_period, _CTNS_ALLOWANCE.allowance_stats, _CTNS_ALLOWANCE.allowance_tax, _CTNS_ALLOWANCE.allowance_editable FROM [MasterDB].[dbo]._CTNS_ALLOWANCE WHERE _CTNS_ALLOWANCE.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_KE_HOACH_TUYEN_DUNG] AS SELECT  _KE_HOACH_TUYEN_DUNG.F_Id, _KE_HOACH_TUYEN_DUNG.UpdatedDatetimeUtc, _KE_HOACH_TUYEN_DUNG.so_ct, _KE_HOACH_TUYEN_DUNG.ten_kh FROM [MasterDB].[dbo]._KE_HOACH_TUYEN_DUNG WHERE _KE_HOACH_TUYEN_DUNG.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Department_Factory] AS 
							SELECT 
 DepartmentId F_Id,
DepartmentName,
DepartmentCode,
Description,
IsActived,
WorkingHoursPerDay,
IsProduction,
SubsidiaryId,
ParentId,
IsFactory
FROM [OrganizationDB].[dbo].Department 
WHERE IsDeleted=0 AND IsFactory = 1

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TAI_SAN_BAN_GIAO] AS SELECT  _TAI_SAN_BAN_GIAO.F_Id, _TAI_SAN_BAN_GIAO.UpdatedDatetimeUtc, _TAI_SAN_BAN_GIAO.title, _TAI_SAN_BAN_GIAO.code FROM [MasterDB].[dbo]._TAI_SAN_BAN_GIAO WHERE _TAI_SAN_BAN_GIAO.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_THAM_SO_PHU_CAP_KHAU_TRU] AS SELECT  _THAM_SO_PHU_CAP_KHAU_TRU.F_Id, _THAM_SO_PHU_CAP_KHAU_TRU.UpdatedDatetimeUtc, _THAM_SO_PHU_CAP_KHAU_TRU.param_code, _THAM_SO_PHU_CAP_KHAU_TRU.param_name, _THAM_SO_PHU_CAP_KHAU_TRU.param_desc, _THAM_SO_PHU_CAP_KHAU_TRU.param_category, _THAM_SO_PHU_CAP_KHAU_TRU.param_field FROM [MasterDB].[dbo]._THAM_SO_PHU_CAP_KHAU_TRU WHERE _THAM_SO_PHU_CAP_KHAU_TRU.IsDeleted = 0

GO

USE MasterDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_ValidateBillDate]
	@SubId int = 0,
	@OldDate datetime2 = NULL,
	@BillDate datetime2 = NULL,
	@TimeZoneOffset INT = -420,
	@ResStatus bit  = 0 OUTPUT
AS
BEGIN
	SET @ResStatus  = 0
	SET @OldDate = ISNULL(@OldDate, @BillDate);
	SET @BillDate = ISNULL(@BillDate, @OldDate);


	DECLARE @EnumFrequencyType_Yearly	int = 0
	DECLARE @EnumFrequencyType_Monthly	int = 1
	DECLARE @EnumFrequencyType_Weekly	int = 2
	DECLARE @EnumFrequencyType_Daily	int = 3
	DECLARE @EnumFrequencyType_Hourly	int = 4
 	

	DECLARE @ClosingDate datetime
	DECLARE @AutoClosingDate bit
	DECLARE @FreqClosingDate nvarchar(max)

	DECLARE @Frequency int
	DECLARE @MonthOfYear int
	DECLARE @DayOfMonth int
	DECLARE @DayOfWeek int
	DECLARE @HourInDay int
	DECLARE @MinuteInHour int

	SELECT TOP 1 
			@ClosingDate	 =	c.ClosingDate,
			@AutoClosingDate =	c.AutoClosingDate,
			@FreqClosingDate =	c.FreqClosingDate
		FROM [dbo].DataConfig c
		WHERE c.SubsidiaryId = @SubId;

	IF (@AutoClosingDate IS NULL)
	BEGIN
		SET @ResStatus = 1
		RETURN
	END

	IF @AutoClosingDate = 0
	BEGIN
		SET @ClosingDate  = DATEADD(MINUTE, -@TimeZoneOffset, @ClosingDate)

		SET @ClosingDate = DATETIME2FROMPARTS(DATEPART(YEAR,@ClosingDate), DATEPART(MONTH,@ClosingDate), DATEPART(DAY,@ClosingDate), 23, 59, 59, 0, 0)

		SET @ClosingDate  = DATEADD(MINUTE, @TimeZoneOffset, @ClosingDate)

		IF @BillDate > @ClosingDate AND @OldDate > @ClosingDate
		BEGIN
			SET @ResStatus = 1
		END

		RETURN
	END
	ELSE
	BEGIN
		SET @Frequency = JSON_VALUE(@FreqClosingDate, '$.Frequency')
		SET @MonthOfYear = JSON_VALUE(@FreqClosingDate, '$.MonthOfYear')
		SET @DayOfMonth = JSON_VALUE(@FreqClosingDate, '$.DayOfMonth')
		SET @DayOfWeek = JSON_VALUE(@FreqClosingDate, '$.DayOfWeek')
		SET @HourInDay = JSON_VALUE(@FreqClosingDate, '$.HourInDay')
		SET @MinuteInHour = JSON_VALUE(@FreqClosingDate, '$.MinuteInHour')
		
		DECLARE @Now datetime2 = GETDATE();
		DECLARE @Now_Year int = DATEPART(YEAR, @Now)
		DECLARE @Now_Month int = DATEPART(MONTH, @Now)
		DECLARE @Now_WeekDay int = DATEPART(WEEKDAY, @Now)
		DECLARE @Now_Day int = DATEPART(DAY, @Now)
		DECLARE @Now_Hour int = DATEPART(HOUR, @Now)
		DECLARE @Now_Minute int = DATEPART(MINUTE, @Now)

		DECLARE @MinDate datetime2
		DECLARE @PointTime datetime2

		IF @Frequency = @EnumFrequencyType_Yearly
		BEGIN
			SET @MinDate = DATETIME2FROMPARTS(@Now_Year, 1, 1, 0, 0, 0, 0, 0)

			SET @PointTime = @MinDate;
			SET @PointTime = DATEADD(MONTH, @MonthOfYear-1, @PointTime);
			SET @PointTime = DATEADD(DAY, @DayOfMonth-1, @PointTime);
			SET @PointTime = DATEADD(HOUR, @HourInDay, @PointTime);
			SET @PointTime = DATEADD(MINUTE, @MinuteInHour, @PointTime);
			
			IF @Now < @PointTime
			BEGIN
				SET @MinDate = DATEADD(YEAR, -1, @MinDate)
			END			
		END

		IF @Frequency = @EnumFrequencyType_Monthly
		BEGIN			
			SET @MinDate = DATETIME2FROMPARTS(@Now_Year, @Now_Month, 1, 0, 0, 0, 0, 0)

			SET @PointTime = @MinDate;			
			SET @PointTime = DATEADD(DAY, @DayOfMonth-1, @PointTime);
			SET @PointTime = DATEADD(HOUR, @HourInDay, @PointTime);
			SET @PointTime = DATEADD(MINUTE, @MinuteInHour, @PointTime);

			IF @Now < @PointTime
			BEGIN
				SET @MinDate = DATEADD(MONTH, -1, @MinDate)
			END			
		END

		IF @Frequency = @EnumFrequencyType_Weekly
		BEGIN			
			SET DATEFIRST 1-- Monday is started of week
			SET @MinDate = DATETIME2FROMPARTS(@Now_Year, @Now_Month, @Now_Day, 0, 0, 0, 0, 0)
			SET @MinDate = DATEADD(DAY, 1 - @Now_WeekDay,  @MinDate)

			SET @PointTime = @MinDate;

			IF @DayOfWeek = 0 --sunday
			BEGIN
				SET @PointTime = DATEADD(DAY, 6, @PointTime); 
			END
			ELSE
			BEGIN
				SET @PointTime = DATEADD(DAY, @DayOfWeek - 1, @PointTime); 
			END
			
			SET @PointTime = DATEADD(HOUR, @HourInDay, @PointTime);
			SET @PointTime = DATEADD(MINUTE, @MinuteInHour, @PointTime);
			
			IF @Now < @PointTime
			BEGIN
				SET @MinDate = DATEADD(WEEK, -1, @MinDate)
			END		
		END

		IF @Frequency = @EnumFrequencyType_Daily
		BEGIN
			SET @MinDate = DATETIME2FROMPARTS(@Now_Year, @Now_Month, @Now_Day, 0, 0, 0, 0, 0)

			SET @PointTime = @MinDate;			
			SET @PointTime = DATEADD(HOUR, @HourInDay, @PointTime);
			SET @PointTime = DATEADD(MINUTE, @MinuteInHour, @PointTime);

			IF @Now < @PointTime
			BEGIN
				SET @MinDate = DATEADD(DAY, -1, @MinDate)
			END
		END

		IF @Frequency = @EnumFrequencyType_Hourly
		BEGIN
			SET @MinDate = DATETIME2FROMPARTS(@Now_Year, @Now_Month, @Now_Day, @Now_Hour, 0, 0, 0, 0)

			SET @PointTime = @MinDate;			
			SET @PointTime = DATEADD(MINUTE, @MinuteInHour, @PointTime);

			IF @Now < @PointTime
			BEGIN
				SET @MinDate = DATEADD(HOUR, -1, @MinDate)
			END		
		END

		IF @MinDate IS NULL
		BEGIN
			RETURN
		END

		SET @OldDate  = DATEADD(MINUTE, -@TimeZoneOffset, @OldDate)
		SET @BillDate  = DATEADD(MINUTE, -@TimeZoneOffset, @BillDate)


		IF @OldDate >= @MinDate AND @BillDate >= @MinDate
		BEGIN
			SET @ResStatus = 1				
		END			
	END
END


GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CT_DAO_TAO] AS SELECT  _CT_DAO_TAO.F_Id, _CT_DAO_TAO.UpdatedDatetimeUtc, _CT_DAO_TAO.so_ct, _CT_DAO_TAO.ten_ctdt FROM [MasterDB].[dbo]._CT_DAO_TAO WHERE _CT_DAO_TAO.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TIEU_CHI_DG] AS SELECT  _TIEU_CHI_DG.F_Id, _TIEU_CHI_DG.UpdatedDatetimeUtc, _TIEU_CHI_DG.so_ct, _TIEU_CHI_DG.ten_tc FROM [MasterDB].[dbo]._TIEU_CHI_DG WHERE _TIEU_CHI_DG.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_nations] AS SELECT  _nations.F_Id, _nations.UpdatedDatetimeUtc, _nations.NationCode, _nations.NationName FROM [MasterDB].[dbo]._nations WHERE _nations.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_LOAI_DANH_GIA] AS SELECT  _LOAI_DANH_GIA.F_Id, _LOAI_DANH_GIA.UpdatedDatetimeUtc, _LOAI_DANH_GIA.title, _LOAI_DANH_GIA.value FROM [MasterDB].[dbo]._LOAI_DANH_GIA WHERE _LOAI_DANH_GIA.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TRANG_THAI_DANH_GIA_HCNS] AS SELECT  _TRANG_THAI_DANH_GIA_HCNS.F_Id, _TRANG_THAI_DANH_GIA_HCNS.UpdatedDatetimeUtc, _TRANG_THAI_DANH_GIA_HCNS.title, _TRANG_THAI_DANH_GIA_HCNS.value FROM [MasterDB].[dbo]._TRANG_THAI_DANH_GIA_HCNS WHERE _TRANG_THAI_DANH_GIA_HCNS.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Step] AS 
							SELECT
    s.StepId F_Id,
    s.StepName StepName,
    s.SubsidiaryId
FROM [ManufacturingDB].[dbo].Step s
WHERE s.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_LOAI_MA_HS_BHXH] AS SELECT  _LOAI_MA_HS_BHXH.F_Id, _LOAI_MA_HS_BHXH.UpdatedDatetimeUtc, _LOAI_MA_HS_BHXH.ten_hs, _LOAI_MA_HS_BHXH.ma_hs FROM [MasterDB].[dbo]._LOAI_MA_HS_BHXH WHERE _LOAI_MA_HS_BHXH.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_LOAI_KHAI_BAO_HS_BHXH] AS SELECT  _LOAI_KHAI_BAO_HS_BHXH.F_Id, _LOAI_KHAI_BAO_HS_BHXH.UpdatedDatetimeUtc, _LOAI_KHAI_BAO_HS_BHXH.title, _LOAI_KHAI_BAO_HS_BHXH.value FROM [MasterDB].[dbo]._LOAI_KHAI_BAO_HS_BHXH WHERE _LOAI_KHAI_BAO_HS_BHXH.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TT_TIEP_NHAN_BHXH] AS SELECT  _TT_TIEP_NHAN_BHXH.F_Id, _TT_TIEP_NHAN_BHXH.UpdatedDatetimeUtc, _TT_TIEP_NHAN_BHXH.title, _TT_TIEP_NHAN_BHXH.value FROM [MasterDB].[dbo]._TT_TIEP_NHAN_BHXH WHERE _TT_TIEP_NHAN_BHXH.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TT_XL_HS_BHXH_DIA_PHUONG] AS SELECT  _TT_XL_HS_BHXH_DIA_PHUONG.F_Id, _TT_XL_HS_BHXH_DIA_PHUONG.UpdatedDatetimeUtc, _TT_XL_HS_BHXH_DIA_PHUONG.title, _TT_XL_HS_BHXH_DIA_PHUONG.value FROM [MasterDB].[dbo]._TT_XL_HS_BHXH_DIA_PHUONG WHERE _TT_XL_HS_BHXH_DIA_PHUONG.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_PA_THU_BHXH] AS SELECT  _PA_THU_BHXH.F_Id, _PA_THU_BHXH.UpdatedDatetimeUtc, _PA_THU_BHXH.title, _PA_THU_BHXH.code FROM [MasterDB].[dbo]._PA_THU_BHXH WHERE _PA_THU_BHXH.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_DINH_DANG_NS] AS SELECT  _DINH_DANG_NS.F_Id, _DINH_DANG_NS.UpdatedDatetimeUtc, _DINH_DANG_NS.title, _DINH_DANG_NS.value FROM [MasterDB].[dbo]._DINH_DANG_NS WHERE _DINH_DANG_NS.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_MA_VUNG_SINH_SONG] AS SELECT  _MA_VUNG_SINH_SONG.F_Id, _MA_VUNG_SINH_SONG.UpdatedDatetimeUtc, _MA_VUNG_SINH_SONG.title, _MA_VUNG_SINH_SONG.code FROM [MasterDB].[dbo]._MA_VUNG_SINH_SONG WHERE _MA_VUNG_SINH_SONG.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Unit_CheckUsed]
	@UnitIds _INTVALUES READONLY,
	@IsUsed BIT OUTPUT
AS
BEGIN
	SET @IsUsed = 0
	--StockDB
	IF EXISTS(SELECT TOP(1) 0 FROM StockDB.dbo.Product d WHERE EXISTS (SELECT 0 FROM @UnitIds c WHERE c.[Value] = d.UnitId))
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END



	--Voucher
	
	IF EXISTS(SELECT 0 FROM PurchaseOrderDB.dbo.VoucherValueRow d WHERE d.IsDeleted=0 AND EXISTS (SELECT 0 FROM @UnitIds c WHERE c.[Value] = d.dvt))
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	
END

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TRANG_THAI_LAO_DONG] AS SELECT  _TRANG_THAI_LAO_DONG.F_Id, _TRANG_THAI_LAO_DONG.UpdatedDatetimeUtc, _TRANG_THAI_LAO_DONG.value, _TRANG_THAI_LAO_DONG.title FROM [MasterDB].[dbo]._TRANG_THAI_LAO_DONG WHERE _TRANG_THAI_LAO_DONG.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_E_INVOICE_PATERM_CODE] AS SELECT  _E_INVOICE_PATERM_CODE.F_Id, _E_INVOICE_PATERM_CODE.UpdatedDatetimeUtc, _E_INVOICE_PATERM_CODE.title, _E_INVOICE_PATERM_CODE.code FROM [MasterDB].[dbo]._E_INVOICE_PATERM_CODE WHERE _E_INVOICE_PATERM_CODE.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTNS_DANH_SACH_KHAU_TRU] AS SELECT  _CTNS_DANH_SACH_KHAU_TRU.F_Id, _CTNS_DANH_SACH_KHAU_TRU.UpdatedDatetimeUtc, _CTNS_DANH_SACH_KHAU_TRU.deduct_code, _CTNS_DANH_SACH_KHAU_TRU.deduct_name, _CTNS_DANH_SACH_KHAU_TRU.deduct_desc, _CTNS_DANH_SACH_KHAU_TRU.deduct_level_name, _CTNS_DANH_SACH_KHAU_TRU.deduct__level_condition, _CTNS_DANH_SACH_KHAU_TRU.deduct_value, _CTNS_DANH_SACH_KHAU_TRU.deduct_period, _CTNS_DANH_SACH_KHAU_TRU.deduct_status, _CTNS_DANH_SACH_KHAU_TRU.deduct_editable FROM [MasterDB].[dbo]._CTNS_DANH_SACH_KHAU_TRU WHERE _CTNS_DANH_SACH_KHAU_TRU.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_E_INVOICE_SERIAL] AS SELECT  _E_INVOICE_SERIAL.F_Id, _E_INVOICE_SERIAL.UpdatedDatetimeUtc, _E_INVOICE_SERIAL.title, _E_INVOICE_SERIAL.code FROM [MasterDB].[dbo]._E_INVOICE_SERIAL WHERE _E_INVOICE_SERIAL.IsDeleted = 0

GO

USE MasterDB
GO

CREATE OR ALTER VIEW [dbo].[_StepGroup] AS 
SELECT
    sg.StepGroupId F_Id,
    sg.StepGroupName StepGroupName,
    sg.SubsidiaryId
FROM [ManufacturingDB].[dbo].StepGroup sg
WHERE sg.IsDeleted = 0


GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_E_INVOICE_METHOD_PAYMENT] AS SELECT  _E_INVOICE_METHOD_PAYMENT.F_Id, _E_INVOICE_METHOD_PAYMENT.UpdatedDatetimeUtc, _E_INVOICE_METHOD_PAYMENT.title, _E_INVOICE_METHOD_PAYMENT.code FROM [MasterDB].[dbo]._E_INVOICE_METHOD_PAYMENT WHERE _E_INVOICE_METHOD_PAYMENT.IsDeleted = 0

GO

USE MasterDB
GO


CREATE OR ALTER VIEW [dbo].[v_StepGroup] AS 
SELECT
    sg.StepGroupId F_Id,
    sg.StepGroupName StepGroupName,
    sg.SubsidiaryId
FROM [ManufacturingDB].[dbo].StepGroup sg
WHERE sg.IsDeleted = 0


GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_E_INVOICE_TYPE] AS SELECT  _E_INVOICE_TYPE.F_Id, _E_INVOICE_TYPE.UpdatedDatetimeUtc, _E_INVOICE_TYPE.EInvoiceTypeId, _E_INVOICE_TYPE.EInvoiceTypeName FROM [MasterDB].[dbo]._E_INVOICE_TYPE WHERE _E_INVOICE_TYPE.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_Product] AS 
							SELECT 
	p.ProductId F_Id,
	p.ProductCode,
	p.ProductName,
    p.MainImageFileId,
	p.UnitId,
	u.UnitName UnitId_UnitName,
	puc.Decimalplace UnitId_Decimalplace,
	p.EstimatePrice,
	pei.Specification,
	p.ProductNameEng,
	p.NetWeight,
	p.GrossWeight,
	p.Measurement,
	p.PackingHeight,
	p.PackingLong,
	p.PackingWidth,
	p.SubsidiaryId

FROM [StockDB].[dbo].Product p 
LEFT JOIN [StockDB].[dbo].ProductUnitConversion puc ON p.ProductId = puc.ProductId AND puc.IsDefault = 1 
LEFT JOIN [StockDB].[dbo].ProductExtraInfo pei ON p.ProductId = pei.ProductId AND pei.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].Unit u ON p.UnitId = u.UnitId AND u.IsDeleted = 0

WHERE p.IsDeleted = 0
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_Product_Search] AS 
								SELECT 
	p.ProductId F_Id,
	p.ProductCode,
	p.ProductName,
    p.MainImageFileId,
	p.UnitId,
	u.UnitName UnitId_UnitName,
	puc.Decimalplace UnitId_Decimalplace,
	p.ProductCateId,
	pc.ProductCateName ProductCateId_ProductCateName,
	p.EstimatePrice,
	pei.Specification,
	p.ProductNameEng,
	p.NetWeight,
	p.GrossWeight,
	p.Measurement,
	p.PackingHeight,
	p.PackingLong,
	p.PackingWidth,
	p.SubsidiaryId,
	sl.sl_ton

FROM [StockDB].[dbo].Product p 
LEFT JOIN [StockDB].[dbo].ProductUnitConversion puc ON p.ProductId = puc.ProductId AND puc.IsDefault = 1 
LEFT JOIN [StockDB].[dbo].ProductExtraInfo pei ON p.ProductId = pei.ProductId AND pei.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].Unit u ON p.UnitId = u.UnitId AND u.IsDeleted = 0
LEFT JOIN [StockDB].[dbo].ProductCate pc ON p.ProductCateId = pc.ProductCateId AND pc.IsDeleted = 0
LEFT JOIN (
	SELECT sp.ProductId, SUM(sp.PrimaryQuantityRemaining) sl_ton
	FROM
	[StockDB].[dbo].StockProduct sp
	WHERE sp.IsDeleted = 0
	GROUP BY sp.ProductId
) sl ON p.ProductId = sl.ProductId

WHERE p.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_MonthPlan] AS 
							SELECT 
    mp.MonthPlanId F_Id,
    mp.MonthPlanName,
    mp.StartDate,
    mp.EndDate,
    mp.MonthNote
FROM [ManufacturingDB].dbo.MonthPlan mp WHERE mp.IsDeleted = 0
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TT_TAM_UNG] AS SELECT  _TT_TAM_UNG.F_Id, _TT_TAM_UNG.UpdatedDatetimeUtc, _TT_TAM_UNG.title, _TT_TAM_UNG.value FROM [MasterDB].[dbo]._TT_TAM_UNG WHERE _TT_TAM_UNG.IsDeleted = 0

GO

USE OrganizationDB
GO


CREATE OR ALTER PROCEDURE [dbo].[asp_ValidateBillDate]
	@SubId INT = 0,
	@OldDate DATETIME2 = NULL,
	@BillDate DATETIME2 = NULL,
	@TimeZoneOffset INT = -420,
	@ResStatus BIT  = 0 OUTPUT
AS
BEGIN
	EXEC [MasterDB].dbo.asp_ValidateBillDate
	@SubId = @SubId,
	@OldDate = @OldDate,
	@BillDate = @BillDate,
	@TimeZoneOffset = @TimeZoneOffset,
	@ResStatus = @ResStatus OUT
END


GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_HO_SO_NHAN_SU] AS 
							SELECT DISTINCT 
    g.HrBill_F_Id AS F_Id ,  
    g.so_ct,
    g.ho_ten, 
    c.bo_phan, 
    tc.workPropertyTitle as tinh_chat_lao_dong, 
    tt.title as trang_thai_lao_dong, 
    d.DepartmentName ten_bo_phan
FROM [OrganizationDB].[dbo].[_HR_CTNS_Ho_So_General_Info] AS g 

INNER JOIN [OrganizationDB].[dbo].[_HR_CTNS_Ho_So_thong_tin_cong_viec] AS c ON g.HrBill_F_Id = c.HrBill_F_Id AND c.IsDeleted = 0
LEFT JOIN [OrganizationDB].[dbo].Department AS d ON c.bo_phan = d.DepartmentId AND d.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].[_TRANG_THAI_LAO_DONG] AS tt ON c.trang_thai_lao_dong = tt.F_Id AND tt.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].[_TINH_CHAT_LD] AS tc ON c.tinh_chat_lao_dong = tc.value and tc.IsDeleted = 0

WHERE g.IsDeleted=0
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_MUC_DO_UU_TIEN] AS SELECT  _MUC_DO_UU_TIEN.F_Id, _MUC_DO_UU_TIEN.UpdatedDatetimeUtc, _MUC_DO_UU_TIEN.title, _MUC_DO_UU_TIEN.value FROM [MasterDB].[dbo]._MUC_DO_UU_TIEN WHERE _MUC_DO_UU_TIEN.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_VONG_TD] AS SELECT  _VONG_TD.F_Id, _VONG_TD.UpdatedDatetimeUtc, _VONG_TD.title, _VONG_TD.number FROM [MasterDB].[dbo]._VONG_TD WHERE _VONG_TD.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_EMAIL_KQ_UT] AS SELECT  _EMAIL_KQ_UT.F_Id, _EMAIL_KQ_UT.UpdatedDatetimeUtc, _EMAIL_KQ_UT.title, _EMAIL_KQ_UT.code FROM [MasterDB].[dbo]._EMAIL_KQ_UT WHERE _EMAIL_KQ_UT.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_KE_HOACH_TUYEN_DUNG] AS SELECT  _KE_HOACH_TUYEN_DUNG.F_Id, _KE_HOACH_TUYEN_DUNG.UpdatedDatetimeUtc, _KE_HOACH_TUYEN_DUNG.so_ct, _KE_HOACH_TUYEN_DUNG.ten_kh FROM [MasterDB].[dbo]._KE_HOACH_TUYEN_DUNG WHERE _KE_HOACH_TUYEN_DUNG.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TAI_SAN_BAN_GIAO] AS SELECT  _TAI_SAN_BAN_GIAO.F_Id, _TAI_SAN_BAN_GIAO.UpdatedDatetimeUtc, _TAI_SAN_BAN_GIAO.title, _TAI_SAN_BAN_GIAO.code FROM [MasterDB].[dbo]._TAI_SAN_BAN_GIAO WHERE _TAI_SAN_BAN_GIAO.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_CT_DAO_TAO] AS SELECT  _CT_DAO_TAO.F_Id, _CT_DAO_TAO.UpdatedDatetimeUtc, _CT_DAO_TAO.so_ct, _CT_DAO_TAO.ten_ctdt FROM [MasterDB].[dbo]._CT_DAO_TAO WHERE _CT_DAO_TAO.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TIEU_CHI_DG] AS SELECT  _TIEU_CHI_DG.F_Id, _TIEU_CHI_DG.UpdatedDatetimeUtc, _TIEU_CHI_DG.so_ct, _TIEU_CHI_DG.ten_tc FROM [MasterDB].[dbo]._TIEU_CHI_DG WHERE _TIEU_CHI_DG.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_LOAI_DANH_GIA] AS SELECT  _LOAI_DANH_GIA.F_Id, _LOAI_DANH_GIA.UpdatedDatetimeUtc, _LOAI_DANH_GIA.title, _LOAI_DANH_GIA.value FROM [MasterDB].[dbo]._LOAI_DANH_GIA WHERE _LOAI_DANH_GIA.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TRANG_THAI_DANH_GIA_HCNS] AS SELECT  _TRANG_THAI_DANH_GIA_HCNS.F_Id, _TRANG_THAI_DANH_GIA_HCNS.UpdatedDatetimeUtc, _TRANG_THAI_DANH_GIA_HCNS.title, _TRANG_THAI_DANH_GIA_HCNS.value FROM [MasterDB].[dbo]._TRANG_THAI_DANH_GIA_HCNS WHERE _TRANG_THAI_DANH_GIA_HCNS.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_LOAI_MA_HS_BHXH] AS SELECT  _LOAI_MA_HS_BHXH.F_Id, _LOAI_MA_HS_BHXH.UpdatedDatetimeUtc, _LOAI_MA_HS_BHXH.ten_hs, _LOAI_MA_HS_BHXH.ma_hs FROM [MasterDB].[dbo]._LOAI_MA_HS_BHXH WHERE _LOAI_MA_HS_BHXH.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_LOAI_KHAI_BAO_HS_BHXH] AS SELECT  _LOAI_KHAI_BAO_HS_BHXH.F_Id, _LOAI_KHAI_BAO_HS_BHXH.UpdatedDatetimeUtc, _LOAI_KHAI_BAO_HS_BHXH.title, _LOAI_KHAI_BAO_HS_BHXH.value FROM [MasterDB].[dbo]._LOAI_KHAI_BAO_HS_BHXH WHERE _LOAI_KHAI_BAO_HS_BHXH.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_LOAI_QUYET_DINH] AS SELECT  _LOAI_QUYET_DINH.F_Id, _LOAI_QUYET_DINH.UpdatedDatetimeUtc, _LOAI_QUYET_DINH.decisionTypeId, _LOAI_QUYET_DINH.decisionTypeTitle FROM [MasterDB].[dbo]._LOAI_QUYET_DINH WHERE _LOAI_QUYET_DINH.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TT_TIEP_NHAN_BHXH] AS SELECT  _TT_TIEP_NHAN_BHXH.F_Id, _TT_TIEP_NHAN_BHXH.UpdatedDatetimeUtc, _TT_TIEP_NHAN_BHXH.title, _TT_TIEP_NHAN_BHXH.value FROM [MasterDB].[dbo]._TT_TIEP_NHAN_BHXH WHERE _TT_TIEP_NHAN_BHXH.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_DOI_TUONG_AP_DUNG] AS SELECT  _DOI_TUONG_AP_DUNG.F_Id, _DOI_TUONG_AP_DUNG.UpdatedDatetimeUtc, _DOI_TUONG_AP_DUNG.value, _DOI_TUONG_AP_DUNG.title FROM [MasterDB].[dbo]._DOI_TUONG_AP_DUNG WHERE _DOI_TUONG_AP_DUNG.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TT_XL_HS_BHXH_DIA_PHUONG] AS SELECT  _TT_XL_HS_BHXH_DIA_PHUONG.F_Id, _TT_XL_HS_BHXH_DIA_PHUONG.UpdatedDatetimeUtc, _TT_XL_HS_BHXH_DIA_PHUONG.title, _TT_XL_HS_BHXH_DIA_PHUONG.value FROM [MasterDB].[dbo]._TT_XL_HS_BHXH_DIA_PHUONG WHERE _TT_XL_HS_BHXH_DIA_PHUONG.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[vPartner] AS 
SELECT        c.PartnerId F_Id, c.CustomerCode PartnerCode, c.CustomerName PartnerName, c.Email, c.PhoneNumber, c.TaxIdNo, c.Website, c.CustomerStatusId, c.CustomerTypeId, c.Address, c.DebtDays, c.DebtLimitation, 
                         c.LoanDays, c.LoanLimitation
FROM            [OrganizationDB].[dbo].Customer c
WHERE        c.CustomerStatusId = 1 AND c.IsDeleted = 0
UNION ALL
SELECT        e.PartnerId F_Id, e.EmployeeCode PartnerCode, e.FullName PartnerName, e.Email, e.Phone PhoneNumber, NULL TaxIdNo, NULL Website, 1 CustomerStatusId, 2 CustomerTypeId, e.Address, NULL 
                         AS DebtDays, NULL AS DebtLimitation, NULL LoanDays, NULL LoanLimitation
FROM            [OrganizationDB].[dbo].Employee e
WHERE        e.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_PA_THU_BHXH] AS SELECT  _PA_THU_BHXH.F_Id, _PA_THU_BHXH.UpdatedDatetimeUtc, _PA_THU_BHXH.title, _PA_THU_BHXH.code FROM [MasterDB].[dbo]._PA_THU_BHXH WHERE _PA_THU_BHXH.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTNS_ALLOWANCE] AS SELECT  _CTNS_ALLOWANCE.F_Id, _CTNS_ALLOWANCE.UpdatedDatetimeUtc, _CTNS_ALLOWANCE.allowance_code, _CTNS_ALLOWANCE.allowance_name, _CTNS_ALLOWANCE.allowance_desc, _CTNS_ALLOWANCE.allowance_level_name, _CTNS_ALLOWANCE.allowance_level_condition, _CTNS_ALLOWANCE.allowance_level_value, _CTNS_ALLOWANCE.allowance_period, _CTNS_ALLOWANCE.allowance_stats, _CTNS_ALLOWANCE.allowance_tax, _CTNS_ALLOWANCE.allowance_editable FROM [MasterDB].[dbo]._CTNS_ALLOWANCE WHERE _CTNS_ALLOWANCE.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_DINH_DANG_NS] AS SELECT  _DINH_DANG_NS.F_Id, _DINH_DANG_NS.UpdatedDatetimeUtc, _DINH_DANG_NS.title, _DINH_DANG_NS.value FROM [MasterDB].[dbo]._DINH_DANG_NS WHERE _DINH_DANG_NS.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_MA_VUNG_SINH_SONG] AS SELECT  _MA_VUNG_SINH_SONG.F_Id, _MA_VUNG_SINH_SONG.UpdatedDatetimeUtc, _MA_VUNG_SINH_SONG.title, _MA_VUNG_SINH_SONG.code FROM [MasterDB].[dbo]._MA_VUNG_SINH_SONG WHERE _MA_VUNG_SINH_SONG.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_DS_HOP_DONG_LAO_DONG] AS 
							SELECT DISTINCT 
    hd.F_Id AS F_Id , 
    hd.so_ct, 
    hd.nhan_vien,
    hs.so_ct ma_nhan_vien,
    hd.loai_hdld,
    hd.loai_hdld_name,
    hd.trang_thai, 
    bp.DepartmentName phong_ban,
    hs.ho_ten full_name
    FROM [OrganizationDB].[dbo].[_HR_CTNS_HDLD_General_Info] as hd
  left join [OrganizationDB].[dbo].[_HR_CTNS_Ho_So_General_Info] as hs on hd.nhan_vien = hs.HrBill_F_Id and hs.IsDeleted = 0
  left join [OrganizationDB].[dbo].[_HR_CTNS_Ho_So_thong_tin_cong_viec] as cv on cv.HrBill_F_Id = hs.HrBill_F_Id and cv.IsDeleted = 0
  left join [OrganizationDB].[dbo].[Department] as bp on bp.DepartmentId = cv.bo_phan and cv.IsDeleted = 0
  where hd.IsDeleted = 0
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_LOAI_HDLD] AS SELECT  _LOAI_HDLD.F_Id, _LOAI_HDLD.UpdatedDatetimeUtc, _LOAI_HDLD.title, _LOAI_HDLD.value FROM [MasterDB].[dbo]._LOAI_HDLD WHERE _LOAI_HDLD.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_GENDER] AS SELECT  _GENDER.F_Id, _GENDER.UpdatedDatetimeUtc, _GENDER.GenderId, _GENDER.GenderName FROM [MasterDB].[dbo]._GENDER WHERE _GENDER.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_DANH_SACH_QUYET_DINH] AS 
							SELECT HrBill_F_Id 
[F_Id],
[so_ct],
[noi_dung],
[ngay_ban_hanh],
[loai_quyet_dinh],
[co_quan_ban_hanh],
[ten_loai_quyet_dinh],
[loai_quyet_dinh_decisionTypeTitle] 
FROM [OrganizationDB].[dbo].[_HR_CTNS_DSQD_pnk_chung] where  [IsDeleted]=0
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TT_HON_NHAN] AS SELECT  _TT_HON_NHAN.F_Id, _TT_HON_NHAN.UpdatedDatetimeUtc, _TT_HON_NHAN.maritalStatusId, _TT_HON_NHAN.maritalStatusTitle FROM [MasterDB].[dbo]._TT_HON_NHAN WHERE _TT_HON_NHAN.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TINH_CHAT_LD] AS SELECT  _TINH_CHAT_LD.F_Id, _TINH_CHAT_LD.UpdatedDatetimeUtc, _TINH_CHAT_LD.workPropertyTitle, _TINH_CHAT_LD.value, _TINH_CHAT_LD.workState, _TRANG_THAI_LAO_DONG_0.[title] AS [workState_title] FROM [MasterDB].[dbo]._TINH_CHAT_LD LEFT JOIN [MasterDB].[dbo].v_TRANG_THAI_LAO_DONG AS _TRANG_THAI_LAO_DONG_0 ON _TINH_CHAT_LD.workState = _TRANG_THAI_LAO_DONG_0.F_Id WHERE _TINH_CHAT_LD.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[vHrType] AS
SELECT        HrTypeId AS F_Id, HrTypeGroupId, Title, HrTypeCode, SortOrder, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, IsDeleted, DeletedDatetimeUtc, PreLoadAction, PostLoadAction
FROM            dbo.HrType

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[vHrBill] AS
SELECT        F_Id, HrTypeId, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, IsDeleted, DeletedDatetimeUtc, LatestBillVersion
FROM            dbo.HrBill

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_SalaryFields] AS 
							SELECT [SalaryFieldId] AS F_Id
      ,[SubsidiaryId]
      ,[GroupName]
      ,[SalaryFieldName]
      ,CONCAT(GroupName,' - ', [Title])  [Title]
      ,[Description]
      ,[DataTypeId]
      ,[DecimalPlace]
      ,[SortOrder]
      ,[Expression]
      ,[IsEditable]      
      ,[IsDisplayRefData]
      ,[IsCalcSum]

  FROM [OrganizationDB].[dbo].[SalaryField]
  WHERE IsDeleted = 0
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_HrAreaTable_UpdateView]
@HrAreaId int,
@HrAreaTableName nvarchar(255)
AS
BEGIN
	DECLARE @ViewTableName nvarchar(255) = 'v' + @HrAreaTableName
	DECLARE @SelectColumn nvarchar(max) = '	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vHrBill.F_Id					AS HrBill_F_Id,
		vHrBill.CreatedByUserId		AS CreatedByUserId,
		vHrBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vHrBill.UpdatedByUserId		AS UpdatedByUserId,
		vHrBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vHrBill.LatestBillVersion	AS LatestBillVersion,
		

		row.HrTypeId					AS HrTypeId,
		vHrType.Title				AS HrType_Title,
		vHrType.HrTypeCode		AS HrType_HrTypeCode
	
	';
	DECLARE @Join nvarchar(max) = '
		FROM ' + @HrAreaTableName +' as row WITH(NOLOCK)
			JOIN vHrBill WITH(NOLOCK) ON row.HrBill_F_Id		= vHrBill.F_Id
			JOIN vHrType WITH(NOLOCK) ON row.HrTypeId		= vHrType.F_Id	
	';

	DECLARE @BillRowSelectColumn nvarchar(max) = @SelectColumn;
	DECLARE @BillRowJoin nvarchar(max) = @Join;
	

	DECLARE @ViewOnlyFormTypeId INT = 6

	DECLARE @SelectFormTypeId INT = 2
	DECLARE @SearchTableFormTypeId INT = 4

	DECLARE @FieldName nvarchar(128)
	DECLARE @RefTableCode nvarchar(128)
	DECLARE @RefTableField nvarchar(128)
	DECLARE @RefTableTitle nvarchar(512)
	DECLARE @FormTypeId INT
	
	DECLARE fieldCursor CURSOR FOR   
    SELECT FieldName, RefTableCode, RefTableField, RefTableTitle, FormTypeId FROM HrField  WHERE FormTypeId <> @ViewOnlyFormTypeId AND HrAreaId = @HrAreaId AND IsDeleted = 0
  
    OPEN fieldCursor  
    FETCH NEXT FROM fieldCursor INTO @FieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
  
    IF @@FETCH_STATUS <> 0   
        PRINT '         <<None>>'       
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
		
		
		SET @SelectColumn += ',  [row].[' + @FieldName+']'
		SET @BillRowSelectColumn += ',  [row].[' + @FieldName+']'		
		
		IF LEN(@RefTableCode)>0 AND @FormTypeId IN(@SelectFormTypeId,@SearchTableFormTypeId)
		BEGIN
			IF LEN(@RefTableTitle)>0
			BEGIN
				SELECT @SelectColumn += ', [v' + @FieldName +'].[' + LTRIM(RTRIM([Value])) + '] AS [' + @FieldName + '_' + LTRIM(RTRIM([Value])) +']' FROM dbo.ufn_Split(@RefTableTitle,',');
				SET @Join += ' LEFT JOIN [v' +@RefTableCode + '] as [v'+@FieldName+'] WITH(NOLOCK) ON [row].['+@FieldName+'] = [v' + @FieldName+'].['+@RefTableField+']';
			END
		END

        FETCH NEXT FROM fieldCursor INTO @FieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
        END  
  
    CLOSE fieldCursor  
    DEALLOCATE fieldCursor     
	
	DECLARE @Sql nvarchar(max)

	DROP VIEW IF EXISTS vHrBillRow;
	SET @Sql = 'CREATE VIEW ' + @ViewTableName +' AS 
	SELECT  ' + @BillRowSelectColumn + 
	@BillRowJoin + '
	WHERE [row].IsDeleted = 0
	';

	PRINT @Sql
	EXEC (@Sql)


	DROP VIEW IF EXISTS vHrValueRow;
	SET @Sql = 'CREATE VIEW ' + @ViewTableName +' AS 
	SELECT ' + @SelectColumn + 
	@Join + '
	WHERE [row].IsDeleted = 0
	';

	PRINT @Sql
	EXEC (@Sql)
END

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_THOI_HAN_HOP_DONG] AS SELECT  _THOI_HAN_HOP_DONG.F_Id, _THOI_HAN_HOP_DONG.UpdatedDatetimeUtc, _THOI_HAN_HOP_DONG.value FROM [MasterDB].[dbo]._THOI_HAN_HOP_DONG WHERE _THOI_HAN_HOP_DONG.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TRANG_THAI_LAO_DONG] AS SELECT  _TRANG_THAI_LAO_DONG.F_Id, _TRANG_THAI_LAO_DONG.UpdatedDatetimeUtc, _TRANG_THAI_LAO_DONG.value, _TRANG_THAI_LAO_DONG.title FROM [MasterDB].[dbo]._TRANG_THAI_LAO_DONG WHERE _TRANG_THAI_LAO_DONG.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_User] AS 
							-- SELECT
--     e.UserId F_Id,
--     e.UserId UserId,
--     e.EmployeeCode,
--     e.FullName,
--     e.Email,
--     e.Phone
-- FROM [OrganizationDB].[dbo].Employee e
-- WHERE e.IsDeleted = 0

SELECT
    e.UserId F_Id,
    e.UserId UserId,
    e.EmployeeCode,
    e.FullName,
    e.Email,
    e.Phone, 
    CONCAT(e.EmployeeCode,' - ', e.FullName) DisplayName,
    STRING_AGG(d.DepartmentName, ', ') WITHIN GROUP (ORDER BY d.DepartmentId) AS Department
FROM [OrganizationDB].[dbo].Employee e
LEFT JOIN [OrganizationDB].[dbo].EmployeeDepartmentMapping ed ON e.UserId = ed.UserId AND ed.IsDeleted = 0 AND e.IsDeleted = 0 AND e.SubsidiaryId = ed.SubsidiaryId
LEFT JOIN [OrganizationDB].[dbo].Department d ON ed.DepartmentId = d.DepartmentId AND d.IsDeleted = 0 AND e.SubsidiaryId = d.SubsidiaryId
WHERE e.IsDeleted = 0
GROUP BY e.UserId, e.EmployeeCode, e.FullName, e.Email, e.Phone
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_User_Search] AS 
								SELECT
    e.UserId F_Id,
    e.UserId UserId,
    e.EmployeeCode,
    e.FullName,
    e.Email,
    e.Phone, 
    CONCAT(e.EmployeeCode,' - ', e.FullName) DisplayName,
    STRING_AGG(d.DepartmentName, ', ') WITHIN GROUP (ORDER BY d.DepartmentId) AS Department
FROM [OrganizationDB].[dbo].Employee e
LEFT JOIN [OrganizationDB].[dbo].EmployeeDepartmentMapping ed ON e.UserId = ed.UserId AND ed.IsDeleted = 0 AND e.IsDeleted = 0 AND e.SubsidiaryId = ed.SubsidiaryId
LEFT JOIN [OrganizationDB].[dbo].Department d ON ed.DepartmentId = d.DepartmentId AND d.IsDeleted = 0 AND e.SubsidiaryId = d.SubsidiaryId
WHERE e.IsDeleted = 0
GROUP BY e.UserId, e.EmployeeCode, e.FullName, e.Email, e.Phone

GO

USE OrganizationDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_Customer_GetTopUsed_ByList]
	@SubId INT,
	@CustomerIds [_INTVALUES] READONLY,
	@IsCheckExistOnly BIT = 0
AS
BEGIN
	
	DECLARE @CustomerPartnerIds TABLE (
		CustomerId INT,
		PartnerId NVARCHAR(128)
	)
	
	INSERT INTO @CustomerPartnerIds
	(
	    CustomerId,
	    PartnerId
	)	
	SELECT d.CustomerId, d.PartnerId FROM OrganizationDB.dbo.Customer d JOIN @CustomerIds c ON d.CustomerId = c.[Value] WHERE d.IsDeleted =0

	DECLARE @result TABLE(
		CustomerId INT NULL,
		Id BIGINT NULL,
		ObjectTypeId INT NULL,
		BillTypeId INT NULL,
		BillId BIGINT NULL,
		BillCode NVARCHAR(128) NULL,
		[Description] NVARCHAR(512) NULL
	)

	--StockDB
	DECLARE @InventoryType_Input INT = 1
	DECLARE @InventoryType_Output INT = 2
	INSERT INTO @result
	(
	    CustomerId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		iv.CustomerId,
		iv.CustomerId,
		30,--InventoryInput,
		iv.InventoryTypeId,
		iv.InventoryId,
		iv.InventoryCode,
		CONCAT(N'Nhập kho. Mã: ', iv.InventoryCode)		
	FROM StockDB.dbo.Inventory iv
		JOIN @CustomerIds c ON iv.CustomerId = c.[Value]
	WHERE iv.IsDeleted = 0 AND iv.InventoryTypeId = @InventoryType_Input
	ORDER BY iv.InventoryId DESC

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	INSERT INTO @result
	(
	    CustomerId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		iv.CustomerId,
		iv.CustomerId,
		31,--InventoryOutput,
		iv.InventoryTypeId,
		iv.InventoryId,
		iv.InventoryCode,
		CONCAT(N'Xuất kho. Mã: ', iv.InventoryCode)		
	FROM StockDB.dbo.Inventory iv
		JOIN @CustomerIds c ON iv.CustomerId = c.[Value]
	WHERE iv.IsDeleted = 0 AND iv.InventoryTypeId = @InventoryType_Output
	ORDER BY iv.InventoryId DESC

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END


	INSERT INTO @result
	(
	    CustomerId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.CustomerId,
		d.CustomerId,
		6,--Product,
		NULL,
		p.ProductId,
		p.ProductCode,
		CONCAT(N'Mặt hàng. Mã: ', p.ProductCode)		
	FROM StockDB.dbo.ProductCustomer d
		JOIN StockDB.dbo.Product p ON d.ProductId = p.ProductId
		JOIN @CustomerIds c ON d.CustomerId = c.[Value]
	WHERE d.IsDeleted = 0
	ORDER BY p.ProductId DESC

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--PurchaseOrderDB
	
	--suggest
	INSERT INTO @result
	(
	    CustomerId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.CustomerId,
		d.CustomerId,
		21,--PurchasingSuggest,
		NULL,
		s.PurchasingSuggestId,
		s.PurchasingSuggestCode,
		CONCAT(N'Đề nghị mua hàng. Mã: ', s.PurchasingSuggestCode)		
	FROM PurchaseOrderDB.dbo.PurchasingSuggestDetail d 
		 JOIN PurchaseOrderDB.dbo.PurchasingSuggest s ON s.PurchasingSuggestId = d.PurchasingSuggestId
		 JOIN @CustomerIds c ON d.CustomerId = c.[Value]
	WHERE s.IsDeleted = 0 AND d.IsDeleted=0
	ORDER BY s.PurchasingSuggestId DESC;

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	
	--po
	INSERT INTO @result
	(
	    CustomerId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		po.CustomerId,
		po.CustomerId,
		25,--PurchaseOrder,
		po.PurchaseOrderType,
		po.PurchaseOrderId,
		po.PurchaseOrderCode,
		CONCAT(N'Đơn đặt mua/gia công. Mã: ', po.PurchaseOrderCode)		
	FROM PurchaseOrderDB.dbo.PurchaseOrder po
		 JOIN @CustomerIds c ON po.CustomerId = c.[Value]
	WHERE po.IsDeleted = 0
	ORDER BY po.PurchaseOrderId DESC;

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END


	--PoProviderPricing
	INSERT INTO @result
	(
	    CustomerId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		r.CustomerId,
		r.CustomerId,
		25001,--PoProviderPricing,
		NULL,
		r.PoProviderPricingId,
		r.PoProviderPricingCode,
		CONCAT(N'Báo giá nhà cung cấp. Mã: ', r.PoProviderPricingCode)		
	FROM PurchaseOrderDB.dbo.PoProviderPricing r
		 JOIN @CustomerIds c ON r.CustomerId = c.[Value]
	WHERE r.IsDeleted = 0
	ORDER BY r.PoProviderPricingId DESC;	

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END	

	--IF EXISTS(SELECT 0 FROM PurchaseOrderDB.dbo.ProviderProductInfo d WHERE d.CustomerId = @CustomerId)
	--BEGIN
	--	SET @IsUsed = 1
	--	RETURN 0;
	--END

	--Voucher
	
	--Voucher
	
	INSERT INTO @result
	(
	    CustomerId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		c.CustomerId,
		c.CustomerId,
		49,--VoucherBill,
		d.VoucherTypeId,
		d.VoucherBill_F_Id,
		d.so_ct,
		CONCAT(N'Chứng từ ', t.Title ,'. Mã: ', d.so_ct)		
	FROM PurchaseOrderDB.dbo.VoucherValueRow d 
		JOIN PurchaseOrderDB.dbo.VoucherType t ON t.VoucherTypeId = d.VoucherTypeId
		JOIN @CustomerPartnerIds c ON d.kh0 = c.PartnerId OR d.kh1 = c.PartnerId OR d.kh3 = c.PartnerId
	WHERE d.IsDeleted=0
	ORDER BY d.VoucherBill_F_Id DESC;	
	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--Accountancy
	INSERT INTO @result
	(
	    CustomerId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		c.CustomerId,
		c.CustomerId,
		39,--InputBill,
		d.InputTypeId,
		d.InputBill_F_Id,
		d.so_ct,
		CONCAT(N'Chứng từ ', t.Title ,'. Mã: ', d.so_ct)		
	FROM AccountancyDB.dbo.InputValueRow d 
		JOIN AccountancyDB.dbo.InputType t ON t.InputTypeId = d.InputTypeId
		JOIN @CustomerPartnerIds c ON d.kh0 = c.PartnerId OR d.kh1 = c.PartnerId OR d.kh3 = c.PartnerId OR d.kh4 = c.PartnerId
	WHERE d.IsDeleted=0
	ORDER BY d.InputBill_F_Id DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--AccountancyPublic
	INSERT INTO @result
	(
	    CustomerId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		c.CustomerId,
		c.CustomerId,
		39001,--InputBillPublic,
		d.InputTypeId,
		d.InputBill_F_Id,
		d.so_ct,
		CONCAT(N'Chứng từ kế toán thuế ', t.Title ,'. Mã: ', d.so_ct)		
	FROM AccountancyPublicDB.dbo.InputValueRow d 
		JOIN AccountancyPublicDB.dbo.InputType t ON t.InputTypeId = d.InputTypeId
		JOIN @CustomerPartnerIds c ON d.kh0 = c.PartnerId OR d.kh1 = c.PartnerId OR d.kh3 = c.PartnerId OR d.kh4 = c.PartnerId
	WHERE d.IsDeleted=0
	ORDER BY d.InputBill_F_Id DESC;	
	
	SELECT * FROM @result
	
END

GO

USE OrganizationDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Customer_CheckUsed]
	@CustomerId INT,
	@IsUsed BIT OUTPUT
AS
BEGIN
	SET @IsUsed = 0
	DECLARE @PartnerId NVARCHAR(128) = ''
	SELECT @PartnerId = PartnerId FROM OrganizationDB.dbo.Customer WHERE CustomerId = @CustomerId
	--StockDB
	IF EXISTS(SELECT 0 FROM StockDB.dbo.Inventory d WHERE d.CustomerId = @CustomerId AND d.IsDeleted=0)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	IF EXISTS(SELECT 0 FROM StockDB.dbo.InventoryRequirement d WHERE d.CustomerId = @CustomerId AND d.IsDeleted=0)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	IF EXISTS(SELECT 0 FROM StockDB.dbo.ProductCustomer d WHERE d.CustomerId = @CustomerId AND d.IsDeleted=0)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

		IF EXISTS(SELECT 0 FROM StockDB.dbo.Product d WHERE d.CustomerId = @CustomerId AND d.IsDeleted=0)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	

	--PurchaseOrderDB


	IF EXISTS(SELECT 0 FROM PurchaseOrderDB.dbo.PurchasingSuggestDetail d WHERE d.CustomerId = @CustomerId AND d.IsDeleted=0)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	IF EXISTS(SELECT 0 FROM PurchaseOrderDB.dbo.PurchaseOrder d WHERE (d.CustomerId = @CustomerId OR d.DeliveryCustomerId = @CustomerId) AND d.IsDeleted=0)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	IF EXISTS(SELECT 0 FROM PurchaseOrderDB.dbo.PoProviderPricing d WHERE d.CustomerId = @CustomerId AND d.IsDeleted=0)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	IF EXISTS(SELECT 0 FROM PurchaseOrderDB.dbo.ProviderProductInfo d WHERE d.CustomerId = @CustomerId)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	--Voucher
	
	IF EXISTS(SELECT 0 FROM PurchaseOrderDB.dbo.VoucherValueRow d WHERE (d.kh0 = @PartnerId OR d.kh1 = @PartnerId OR d.kh3 = @PartnerId) AND d.IsDeleted=0)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	--Accountancy
	IF EXISTS(SELECT 0 FROM AccountancyDB.dbo.InputValueRow d WHERE (d.kh0 = @PartnerId OR d.kh1 = @PartnerId OR d.kh_co0 = @PartnerId OR d.kh3 = @PartnerId) AND d.IsDeleted=0)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END
	
END

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TRINH_DO_DAO_TAO] AS SELECT  _TRINH_DO_DAO_TAO.F_Id, _TRINH_DO_DAO_TAO.UpdatedDatetimeUtc, _TRINH_DO_DAO_TAO.educationLevelId, _TRINH_DO_DAO_TAO.educationLevelTitle FROM [MasterDB].[dbo]._TRINH_DO_DAO_TAO WHERE _TRINH_DO_DAO_TAO.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_HO_SO_UNG_TUYEN] AS 
							select v.F_Id, v.so_ct, v.ho_ten, v.so_cccd, v.email_ut, v.dia_chi_ut, v.ngay_cap_ut, v.ngay_sinh
from OrganizationDB.dbo._HR_CTNS_Ho_So_Ung_Tuyen_General_Info v  where v.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_NGAN_HANG] AS SELECT  _NGAN_HANG.F_Id, _NGAN_HANG.UpdatedDatetimeUtc, _NGAN_HANG.bankId, _NGAN_HANG.bankTitle FROM [MasterDB].[dbo]._NGAN_HANG WHERE _NGAN_HANG.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_CHUC_VU] AS SELECT  _CHUC_VU.F_Id, _CHUC_VU.UpdatedDatetimeUtc, _CHUC_VU.positionId, _CHUC_VU.positionTitle FROM [MasterDB].[dbo]._CHUC_VU WHERE _CHUC_VU.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_XEP_LOAI] AS SELECT  _XEP_LOAI.F_Id, _XEP_LOAI.UpdatedDatetimeUtc, _XEP_LOAI.rankId, _XEP_LOAI.rankTitle FROM [MasterDB].[dbo]._XEP_LOAI WHERE _XEP_LOAI.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_THAM_SO_PHU_CAP_KHAU_TRU] AS SELECT  _THAM_SO_PHU_CAP_KHAU_TRU.F_Id, _THAM_SO_PHU_CAP_KHAU_TRU.UpdatedDatetimeUtc, _THAM_SO_PHU_CAP_KHAU_TRU.param_code, _THAM_SO_PHU_CAP_KHAU_TRU.param_name, _THAM_SO_PHU_CAP_KHAU_TRU.param_desc, _THAM_SO_PHU_CAP_KHAU_TRU.param_category, _THAM_SO_PHU_CAP_KHAU_TRU.param_field FROM [MasterDB].[dbo]._THAM_SO_PHU_CAP_KHAU_TRU WHERE _THAM_SO_PHU_CAP_KHAU_TRU.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_LOAI_CONG_VAN] AS SELECT  _LOAI_CONG_VAN.F_Id, _LOAI_CONG_VAN.UpdatedDatetimeUtc, _LOAI_CONG_VAN.ma_cv, _LOAI_CONG_VAN.ten_cv FROM [MasterDB].[dbo]._LOAI_CONG_VAN WHERE _LOAI_CONG_VAN.IsDeleted = 0

GO

USE OrganizationDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_Department_CheckUsed] 
	@DepartmentId INT,
	/*Kiểu check:
	1. Check trong phân công
	2. Check trong LSX
	3. Check trong công đoạn
	4. Check trong công đoạn và phân công
	5. Check trong cả phân công, công đoạn và LSX*/
	@TypeCheck INT,
	@IsUsed BIT OUTPUT
AS
BEGIN
	DECLARE  @DepartmentTypeCheck_Assignment INT = 1
	DECLARE  @DepartmentTypeCheck_ProductionOrder INT = 2
	DECLARE  @DepartmentTypeCheck_Step INT = 3
	DECLARE  @DepartmentTypeCheck_AssignmentAndStep INT = 4
	DECLARE  @DepartmentTypeCheck_All INT = 5
	SET @IsUsed = 0
	IF (@TypeCheck = @DepartmentTypeCheck_Assignment OR @TypeCheck = @DepartmentTypeCheck_AssignmentAndStep OR @TypeCheck = @DepartmentTypeCheck_All) AND EXISTS(SELECT 0 FROM ManufacturingDB.dbo.ProductionAssignment pa WHERE pa.DepartmentId = @DepartmentId)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	IF (@TypeCheck = @DepartmentTypeCheck_ProductionOrder OR @TypeCheck = @DepartmentTypeCheck_All) AND EXISTS(SELECT 0 FROM ManufacturingDB.dbo.ProductionOrder po WHERE po.FactoryDepartmentId = @DepartmentId AND po.IsDeleted = 0)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	IF (@TypeCheck = @DepartmentTypeCheck_Step OR @TypeCheck = @DepartmentTypeCheck_AssignmentAndStep OR @TypeCheck = @DepartmentTypeCheck_All) AND EXISTS(SELECT 0 FROM ManufacturingDB.dbo.StepDetail sd WHERE sd.DepartmentId = @DepartmentId AND sd.IsDeleted = 0)
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END
END


GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTNS_DANH_SACH_KHAU_TRU] AS SELECT  _CTNS_DANH_SACH_KHAU_TRU.F_Id, _CTNS_DANH_SACH_KHAU_TRU.UpdatedDatetimeUtc, _CTNS_DANH_SACH_KHAU_TRU.deduct_code, _CTNS_DANH_SACH_KHAU_TRU.deduct_name, _CTNS_DANH_SACH_KHAU_TRU.deduct_desc, _CTNS_DANH_SACH_KHAU_TRU.deduct_level_name, _CTNS_DANH_SACH_KHAU_TRU.deduct__level_condition, _CTNS_DANH_SACH_KHAU_TRU.deduct_value, _CTNS_DANH_SACH_KHAU_TRU.deduct_period, _CTNS_DANH_SACH_KHAU_TRU.deduct_status, _CTNS_DANH_SACH_KHAU_TRU.deduct_editable FROM [MasterDB].[dbo]._CTNS_DANH_SACH_KHAU_TRU WHERE _CTNS_DANH_SACH_KHAU_TRU.IsDeleted = 0

GO

USE OrganizationDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_Department_GetTopUsed_ByList]
	@SubId INT,
	@DepartmentIds _BIGINTVALUES READONLY,	
	@IsCheckExistOnly BIT = 0
AS
BEGIN
		
	DROP TABLE IF EXISTS #result
	CREATE TABLE #result (
		Id BIGINT NULL,
		ObjectTypeId INT NULL,
		BillTypeId INT NULL,
		BillId BIGINT NULL,
		BillCode NVARCHAR(128) NULL,
		[Description] NVARCHAR(512) NULL
	)

	--OrganizationDB
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		29,--Department,
		NULL,
		de.DepartmentId,
		de.DepartmentCode,
		CONCAT(N'Bộ phận. Mã: ', de.DepartmentCode)		
	FROM OrganizationDB.dbo.Department de
		JOIN @DepartmentIds dep ON de.ParentId = dep.[Value]
	WHERE de.IsDeleted = 0
	ORDER BY de.DepartmentId DESC

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--hrBill
	
	DECLARE @Sql NVARCHAR(max)

	DECLARE @FieldName NVARCHAR(128)
	DECLARE @AreaCode NVARCHAR(128)
	DECLARE @TypeId INT
	DECLARE @Title NVARCHAR(128)
	DECLARE @TypeCode NVARCHAR(128)
	
	DECLARE fieldCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR   
    SELECT 		
		f.FieldName,
		a.HrAreaCode,
		t.HrTypeId,
		af.Title,
		t.HrTypeCode
	FROM dbo.HrField f 
	JOIN dbo.HrAreaField af ON af.HrFieldId = f.HrFieldId
	JOIN dbo.HrArea a ON a.HrAreaId = af.HrAreaId
	JOIN dbo.HrType t ON t.HrTypeId = a.HrTypeId
	WHERE f.RefTableCode LIKE '_Department%' AND f.IsDeleted = 0 AND af.IsDeleted = 0 AND a.IsDeleted = 0 AND t.IsDeleted = 0;
  
    OPEN fieldCursor  
    FETCH NEXT FROM fieldCursor INTO @FieldName, @AreaCode, @TypeId, @Title, @TypeCode
    
    IF @@FETCH_STATUS <> 0   
        PRINT '         <<None>>'       
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
		
		SET @Sql = CONCAT('
			INSERT INTO #result
			(
				Id,
				ObjectTypeId,
				BillTypeId,
				BillId,
				BillCode,
				Description
			)
			SELECT DISTINCT TOP (10 )
				f.[Value],
				1042,--HrBill
				t.HrTypeId,
				b.F_Id,
				b.BillCode,
				CONCAT(t.Title,'', '', @Title, N''. Mã '', b.BillCode)
			FROM dbo._HR_',@TypeCode,'_',@AreaCode,' a 
			JOIN dbo.HrBill b ON a.HrBill_F_Id = b.F_Id
			JOIN @FIds f ON a.',@FieldName,' = f.[Value]
			JOIN dbo.HrType t ON b.HrTypeId = t.HrTypeId
		WHERE b.IsDeleted = 0 AND a.IsDeleted = 0')

		EXEC sys.sp_executesql @Sql, N'@FIds _BIGINTVALUES READONLY, @Title NVARCHAR(128)', @DepartmentIds, @Title
		IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
		BEGIN
			SELECT * FROM #result
			RETURN 0;
		END

        FETCH NEXT FROM fieldCursor INTO @FieldName, @AreaCode, @TypeId, @Title, @TypeCode
        END  
  
    CLOSE fieldCursor  
    DEALLOCATE fieldCursor     

	--StockDB
	DECLARE @InventoryType_Input INT = 1
	DECLARE @InventoryType_Output INT = 2
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    [Description]
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		300,--RequestInventoryInput,
		iv.InventoryTypeId,
		iv.InventoryRequirementId,
		iv.InventoryRequirementCode,
		CONCAT(N'YC nhập kho. Mã: ', iv.InventoryRequirementCode)		
	FROM StockDB.dbo.InventoryRequirement iv
		JOIN StockDB.dbo.InventoryRequirementDetail d ON d.InventoryRequirementId = iv.InventoryRequirementId
		JOIN @DepartmentIds dep ON d.DepartmentId = dep.[Value]
	WHERE iv.IsDeleted = 0 AND iv.InventoryTypeId = @InventoryType_Input AND d.IsDeleted = 0
	ORDER BY iv.InventoryRequirementId DESC

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		--DROP TABLE IF EXISTS #result
		RETURN 0;
	END

	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    [Description]
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		301,--RequestInventoryOutput,
		iv.InventoryTypeId,
		iv.InventoryRequirementId,
		iv.InventoryRequirementCode,
		CONCAT(N'YC xuất kho. Mã: ', iv.InventoryRequirementCode)		
	FROM StockDB.dbo.InventoryRequirement iv
		JOIN StockDB.dbo.InventoryRequirementDetail d ON d.InventoryRequirementId = iv.InventoryRequirementId
		JOIN @DepartmentIds dep ON d.DepartmentId = dep.[Value]
	WHERE iv.IsDeleted = 0 AND iv.InventoryTypeId = @InventoryType_Output AND d.IsDeleted = 0
	ORDER BY iv.InventoryRequirementId DESC

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		30,--InventoryInput,
		iv.InventoryTypeId,
		iv.InventoryId,
		iv.InventoryCode,
		CONCAT(N'Nhập kho. Mã: ', iv.InventoryCode)		
	FROM StockDB.dbo.Inventory iv
		JOIN @DepartmentIds dep ON iv.DepartmentId = dep.[Value]
	WHERE iv.IsDeleted = 0 AND iv.InventoryTypeId = @InventoryType_Input
	ORDER BY iv.InventoryId DESC

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		31,--InventoryOutput,
		iv.InventoryTypeId,
		iv.InventoryId,
		iv.InventoryCode,
		CONCAT(N'Xuất kho. Mã: ', iv.InventoryCode)		
	FROM StockDB.dbo.Inventory iv
		JOIN @DepartmentIds dep ON iv.DepartmentId = dep.[Value]
	WHERE iv.IsDeleted = 0 AND iv.InventoryTypeId = @InventoryType_Output
	ORDER BY iv.InventoryId DESC

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--voucher
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		49,--VoucherBill,
		d.VoucherTypeId,
		d.VoucherBill_F_Id,
		d.so_ct,
		CONCAT(N'Chứng từ ', t.Title ,N'. Mã: ', d.so_ct)		
	FROM PurchaseOrderDB.dbo.VoucherValueRow d 
		JOIN PurchaseOrderDB.dbo.VoucherType t ON t.VoucherTypeId = d.VoucherTypeId
		JOIN @DepartmentIds dep ON d.bo_phan = dep.[Value]
	WHERE d.IsDeleted=0
	ORDER BY d.VoucherBill_F_Id DESC;	
	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--Accountancy
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		39,--InputBill,
		d.InputTypeId,
		d.InputBill_F_Id,
		d.so_ct,
		CONCAT(N'Chứng từ ', t.Title ,N'. Mã: ', d.so_ct)		
	FROM AccountancyDB.dbo.InputValueRow d 
		JOIN AccountancyDB.dbo.InputType t ON t.InputTypeId = d.InputTypeId
		JOIN @DepartmentIds dep ON d.bo_phan = dep.[Value]
	WHERE d.IsDeleted=0
	ORDER BY d.InputBill_F_Id DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--AccountancyPublic
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		39001,--InputBillPublic,
		d.InputTypeId,
		d.InputBill_F_Id,
		d.so_ct,
		CONCAT(N'Chứng từ kế toán thuế ', t.Title ,N'. Mã: ', d.so_ct)		
	FROM AccountancyPublicDB.dbo.InputValueRow d 
		JOIN AccountancyPublicDB.dbo.InputType t ON t.InputTypeId = d.InputTypeId
		JOIN @DepartmentIds dep ON d.bo_phan = dep.[Value]
	WHERE d.IsDeleted=0
	ORDER BY d.InputBill_F_Id DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END
	
	

	--Production

	--MaterialAllocation
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		70,--ProductionOrder,
		NULL,
		po.ProductionOrderId,
		po.ProductionOrderCode,
		CONCAT(N'Phân bổ nguyên liệu thống kê sản xuất ', N'. Mã lệnh sản xuất: ', po.ProductionOrderCode)		
	FROM ManufacturingDB.dbo.ProductionOrder po 
		JOIN ManufacturingDB.dbo.MaterialAllocation al ON po.ProductionOrderId = al.ProductionOrderId
		JOIN ManufacturingDB.dbo.ProductionAssignment a ON al.DepartmentId = a.DepartmentId AND a.ProductionOrderId = al.ProductionOrderId
		JOIN @DepartmentIds dep ON al.DepartmentId = dep.[Value]
	WHERE po.IsDeleted=0
	ORDER BY po.ProductionOrderId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--ProductionAssignment
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		70,--ProductionOrder,
		NULL,
		po.ProductionOrderId,
		po.ProductionOrderCode,
		CONCAT(N'Phân công sản xuất ', N'. Mã lệnh sản xuất: ', po.ProductionOrderCode)		
	FROM ManufacturingDB.dbo.ProductionOrder po 		
		JOIN ManufacturingDB.dbo.ProductionAssignment a ON a.ProductionOrderId = po.ProductionOrderId
		JOIN @DepartmentIds dep ON a.DepartmentId = dep.[Value]
	WHERE po.IsDeleted=0
	ORDER BY po.ProductionOrderId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--ProductionHistory
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		7501,--ProductionHandoverReceipt,
		NULL,
		r.ProductionHandoverReceiptId,
		r.ProductionHandoverReceiptCode,
		CONCAT(N'Lịch sử sản xuất ', N'. Mã phiếu: ', r.ProductionHandoverReceiptCode)		
	FROM ManufacturingDB.dbo.ProductionOrder po 		
		JOIN ManufacturingDB.dbo.ProductionHistory a ON a.ProductionOrderId = po.ProductionOrderId
		JOIN ManufacturingDB.dbo.ProductionHandoverReceipt r ON a.ProductionHandoverReceiptId = r.ProductionHandoverReceiptId
		JOIN @DepartmentIds dep ON a.DepartmentId = dep.[Value]
	WHERE po.IsDeleted=0 AND a.IsDeleted = 0 AND r.IsDeleted = 0
	ORDER BY r.ProductionHandoverReceiptId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--ProductionHandover
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		7501,--ProductionHandoverReceipt,
		NULL,
		r.ProductionHandoverReceiptId,
		r.ProductionHandoverReceiptCode,
		CONCAT(N'Bàn giao công đoạn sản xuất ', N'. Mã phiếu: ', r.ProductionHandoverReceiptCode)		
	FROM ManufacturingDB.dbo.ProductionOrder po 		
		JOIN ManufacturingDB.dbo.ProductionHandover a ON a.ProductionOrderId = po.ProductionOrderId
		JOIN ManufacturingDB.dbo.ProductionHandoverReceipt r ON a.ProductionHandoverReceiptId = r.ProductionHandoverReceiptId
		JOIN @DepartmentIds dep ON a.FromDepartmentId = dep.[Value] OR a.ToDepartmentId = dep.[Value]
	WHERE po.IsDeleted=0 AND a.IsDeleted = 0 AND r.IsDeleted = 0
	ORDER BY r.ProductionHandoverReceiptId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--ProductionHumanResource
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		70,--ProductionOrder,
		NULL,
		po.ProductionOrderId,
		po.ProductionOrderCode,
		CONCAT(N'Thống kê nhân công ', N'. Mã lệnh sản xuất: ', po.ProductionOrderCode)		
	FROM ManufacturingDB.dbo.ProductionOrder po 		
		JOIN ManufacturingDB.dbo.ProductionHumanResource a ON a.ProductionOrderId = po.ProductionOrderId		
		JOIN @DepartmentIds dep ON a.DepartmentId = dep.[Value]
	WHERE po.IsDeleted=0 AND a.IsDeleted = 0
	ORDER BY po.ProductionOrderId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--ProductionOrder
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		70,--ProductionOrder,
		NULL,
		po.ProductionOrderId,
		po.ProductionOrderCode,
		CONCAT(N'Nhà máy ', N'. Mã lệnh sản xuất: ', po.ProductionOrderCode)		
	FROM ManufacturingDB.dbo.ProductionOrder po 				
		JOIN @DepartmentIds dep ON po.FactoryDepartmentId = dep.[Value]
	WHERE po.IsDeleted=0
	ORDER BY po.ProductionOrderId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--ProductionOrderMaterials
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		70,--ProductionOrder,
		NULL,
		po.ProductionOrderId,
		po.ProductionOrderCode,
		CONCAT(N'Tính nhu cầu vật tư ', N'. Mã lệnh sản xuất: ', po.ProductionOrderCode)		
	FROM ManufacturingDB.dbo.ProductionOrder po 	
		JOIN ManufacturingDB.dbo.ProductionOrderMaterials m ON po.ProductionOrderId = m.ProductionOrderId
		JOIN @DepartmentIds dep ON m.DepartmentId = dep.[Value]
	WHERE po.IsDeleted=0 AND m.IsDeleted = 0
	ORDER BY po.ProductionOrderId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--ProductionOrder
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		70,--ProductionOrder,
		NULL,
		po.ProductionOrderId,
		po.ProductionOrderCode,
		CONCAT(N'Yêu cầu vật tư ', N'. Mã lệnh sản xuất: ', po.ProductionOrderCode)		
	FROM ManufacturingDB.dbo.ProductionOrder po 	
		JOIN ManufacturingDB.dbo.ProductionMaterialsRequirement r ON po.ProductionOrderId = r.ProductionOrderId
		JOIN ManufacturingDB.dbo.ProductionMaterialsRequirementDetail m ON r.ProductionMaterialsRequirementId = m.ProductionMaterialsRequirementId
		JOIN @DepartmentIds dep ON m.DepartmentId = dep.[Value]
	WHERE po.IsDeleted=0 AND r.IsDeleted = 0 AND m.IsDeleted = 0
	ORDER BY po.ProductionOrderId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--ProductionOrder
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		dep.[Value],
		61,--Step,
		NULL,
		s.StepId,
		s.StepName,
		CONCAT(N'Công đoạn sản xuất ', N'. Tên: ', s.StepName)		
	FROM ManufacturingDB.dbo.Step s 	
		JOIN ManufacturingDB.dbo.StepDetail d ON d.StepId = s.StepId
		JOIN @DepartmentIds dep ON d.DepartmentId = dep.[Value]
	WHERE s.IsDeleted=0 AND d.IsDeleted = 0 
	ORDER BY s.StepId DESC;	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	SELECT * FROM #result
END

GO

USE OrganizationDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_HrType_Delete]
	@HrTypeId int,
	@TableNamePrefix nvarchar(50),
	@ResStatus int OUTPUT
AS
BEGIN
	BEGIN TRANSACTION
		UPDATE top(1) dbo.HrType
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE HrTypeId = @HrTypeId AND IsDeleted = 0;

		UPDATE dbo.HrField
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE HrAreaId  IN (SELECT HrAreaId FROM dbo.HrArea WHERE HrTypeId = @HrTypeId AND IsDeleted = 0) AND IsDeleted = 0;
		
		UPDATE dbo.HrArea
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE HrTypeId = @HrTypeId AND IsDeleted = 0;
		
		UPDATE dbo.HrAreaField
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE HrTypeId = @HrTypeId AND IsDeleted = 0;

		--Delete table area
		DECLARE areaCursor CURSOR FOR   
		SELECT t.HrTypeCode, a.HrAreaCode
		FROM HrType AS t
			JOIN HrArea AS a ON t.HrTypeId = a.HrTypeId
		WHERE  t.HrTypeId = @HrTypeId		  
		OPEN areaCursor  
		
		DECLARE @HrTypeCode nvarchar(128);	
		DECLARE @HrAreaCode nvarchar(128);
		DECLARE @TableName  nvarchar(256)

		FETCH NEXT FROM areaCursor   
		INTO @HrTypeCode, @HrAreaCode
  
		WHILE @@FETCH_STATUS = 0  
		BEGIN  
			SET @TableName = @TableNamePrefix + '_'+ @HrTypeCode + '_' + @HrAreaCode;

			EXEC asp_Hr_Area_Table_Delete @HrAreaTableName = @TableName;	

			FETCH NEXT FROM areaCursor   
			INTO @HrTypeCode, @HrAreaCode
		END   
		CLOSE areaCursor;  
		DEALLOCATE areaCursor;  

		--UPDATE dbo.HrBill
		--SET IsDeleted = 1,
		--	DeletedDatetimeUtc = GETUTCDATE()
		--WHERE HrTypeId = @HrTypeId AND IsDeleted = 0

		--UPDATE dbo.HrValueRow
		--SET IsDeleted = 1,
		--	DeletedDatetimeUtc = GETUTCDATE()
		--WHERE HrTypeId = @HrTypeId AND IsDeleted = 0

		SET @ResStatus = 1
	COMMIT TRANSACTION
END

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TimeSheetSumary] AS 
							SELECT
CONCAT(v.Year,'|', v.Month,'|',v.EmployeeId) F_Id,
v.*

FROM
(
SELECT
	sh.Year,
	sh.Month,
	sh.BeginDate,
	sh.EndDate,
	sh.IsApprove,
	d.EmployeeId,
	SUM(CASE WHEN d.TimeIn IS NOT NULL OR d.TimeOut IS NOT NULL OR ab.IsCounted = 0 THEN 1 ELSE 0 END) WorkDays,
	SUM(d.MinsLate) MinsLate,
	SUM(d.MinsEarly) MinsEarly,
	SUM(d.MinsOvertime) MinsOvertime
FROM dbo.TimeSheet sh
JOIN dbo.TimeSheetDetail d ON d.TimeSheetId = sh.TimeSheetId
LEFT JOIN dbo.AbsenceTypeSymbol ab ON d.AbsenceTypeSymbolId = ab.AbsenceTypeSymbolId
WHERE sh.IsDeleted = 0
GROUP BY sh.Year,
	sh.Month,
	sh.BeginDate,
	sh.EndDate,
	sh.IsApprove,
	d.EmployeeId
) v
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TimeSheetSumary_Search] AS 
								SELECT
CONCAT(v.Year,'|', v.Month,'|',v.EmployeeId) F_Id,
v.*

FROM
(
SELECT
	sh.Year,
	sh.Month,
	sh.BeginDate,
	sh.EndDate,
	sh.IsApprove,
	d.EmployeeId,
	SUM(CASE WHEN d.TimeIn IS NOT NULL OR d.TimeOut IS NOT NULL OR ab.IsCounted = 0 THEN 1 ELSE 0 END) WorkDays,
	SUM(d.MinsLate) MinsLate,
	SUM(d.MinsEarly) MinsEarly,
	SUM(d.MinsOvertime) MinsOvertime
FROM dbo.TimeSheet sh
JOIN dbo.TimeSheetDetail d ON d.TimeSheetId = sh.TimeSheetId
LEFT JOIN dbo.AbsenceTypeSymbol ab ON d.AbsenceTypeSymbolId = ab.AbsenceTypeSymbolId
WHERE sh.IsDeleted = 0
GROUP BY sh.Year,
	sh.Month,
	sh.BeginDate,
	sh.EndDate,
	sh.IsApprove,
	d.EmployeeId
) v

GO

USE OrganizationDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_HrBill_GetTopUsed_ByList]
	@SubId INT,
	@FIds _BIGINTVALUES READONLY,
	@IsCheckExistOnly BIT = 0
AS
BEGIN	
	DROP TABLE IF EXISTS #result;
	CREATE TABLE #result(
		Id BIGINT NULL,
		ObjectTypeId INT NULL,
		BillTypeId INT NULL,
		BillId BIGINT NULL,
		BillCode NVARCHAR(128) NULL,
		[Description] NVARCHAR(512) NULL
	)	
	
	--SalaryPeriod
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		se.EmployeeId,
		10004203,--SalaryPeriod,
		NULL,
		se.SalaryPeriodId,
		CONCAT(p.Month,'/',p.Year),
		CONCAT(N'Kỳ tính lương tháng ', CONCAT(p.Month,'/',p.Year))		
	FROM dbo.SalaryEmployee se 
		JOIN dbo.SalaryPeriod p ON p.SalaryPeriodId = se.SalaryPeriodId
		JOIN @FIds f ON se.EmployeeId = f.[Value]
	WHERE se.IsDeleted=0 AND p.IsDeleted = 0 AND p.SubsidiaryId = @SubId
	ORDER BY se.SalaryPeriodId DESC;	
	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--SalaryPeriodAdditionBill
	INSERT INTO #result
	(
	    Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		se.EmployeeId,
		10004208,--SalaryPeriodAdditionBill,
		t.SalaryPeriodAdditionTypeId,
		b.SalaryPeriodAdditionBillId,
		b.BillCode,
		CONCAT(N'Danh sách phụ cấp khấu trừ ', t.Title,N'. Mã', b.BillCode)		
	FROM dbo.SalaryPeriodAdditionBillEmployee se 
		JOIN dbo.SalaryPeriodAdditionBill b ON b.SalaryPeriodAdditionBillId = se.SalaryPeriodAdditionBillId
		JOIN dbo.SalaryPeriodAdditionType t ON t.SalaryPeriodAdditionTypeId = b.SalaryPeriodAdditionTypeId
		JOIN @FIds f ON se.EmployeeId = f.[Value]
	WHERE b.IsDeleted=0 AND t.IsDeleted = 0 AND b.SubsidiaryId = @SubId
	ORDER BY b.SalaryPeriodAdditionBillId DESC;	

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
	BEGIN
	    SELECT * FROM #result
		RETURN 0;
	END

	--hrBill
	
	DECLARE @Sql NVARCHAR(max)

	DECLARE @FieldName NVARCHAR(128)
	DECLARE @HrAreaCode NVARCHAR(128)
	DECLARE @HrTypeId INT
	DECLARE @Title NVARCHAR(128)
	DECLARE @HrTypeCode NVARCHAR(128)
	
	DECLARE fieldCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR   
    SELECT 		
		f.FieldName,
		a.HrAreaCode,
		t.HrTypeId,
		af.Title,
		t.HrTypeCode
	FROM dbo.HrField f 
	JOIN dbo.HrAreaField af ON af.HrFieldId = f.HrFieldId
	JOIN dbo.HrArea a ON a.HrAreaId = af.HrAreaId
	JOIN dbo.HrType t ON t.HrTypeId = a.HrTypeId
	WHERE f.RefTableCode = '_HO_SO_NHAN_SU' AND f.IsDeleted = 0 AND af.IsDeleted = 0 AND a.IsDeleted = 0 AND t.IsDeleted = 0;
  
    OPEN fieldCursor  
    FETCH NEXT FROM fieldCursor INTO @FieldName, @HrAreaCode, @HrTypeId, @Title, @HrTypeCode
    
    IF @@FETCH_STATUS <> 0   
        PRINT '         <<None>>'       
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
		
		SET @Sql = CONCAT('
			INSERT INTO #result
			(
				Id,
				ObjectTypeId,
				BillTypeId,
				BillId,
				BillCode,
				Description
			)
			SELECT DISTINCT TOP (10 )
				f.[Value],
				1042,--HrBill
				t.HrTypeId,
				b.F_Id,
				b.BillCode,
				CONCAT(t.Title,'', '', @Title, N''. Mã '', b.BillCode)
			FROM dbo._HR_',@HrTypeCode,'_',@HrAreaCode,' a 
			JOIN dbo.HrBill b ON a.HrBill_F_Id = b.F_Id
			JOIN @FIds f ON a.',@FieldName,' = f.[Value]
			JOIN dbo.HrType t ON b.HrTypeId = t.HrTypeId
		WHERE b.IsDeleted = 0 AND a.IsDeleted = 0')

		EXEC sys.sp_executesql @Sql, N'@FIds _BIGINTVALUES READONLY, @Title NVARCHAR(128)', @FIds, @Title
		IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM #result)
		BEGIN
			SELECT * FROM #result
			RETURN 0;
		END

        FETCH NEXT FROM fieldCursor INTO @FieldName, @HrAreaCode, @HrTypeId, @Title, @HrTypeCode
        END  
  
    CLOSE fieldCursor  
    DEALLOCATE fieldCursor     
		
	SELECT * FROM #result
	
END

GO

USE OrganizationDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_HrArea_Delete]
	@HrTypeId int,
	@HrAreaId int,	
	@TableNamePrefix nvarchar(50),
	@ResStatus int OUTPUT
AS
BEGIN
	BEGIN TRANSACTION
		
		DECLARE @HrTypeCode nvarchar(128);	
		DECLARE @HrAreaCode nvarchar(128);
		DECLARE @TableName  nvarchar(256);

		SELECT @HrTypeCode = t.HrTypeCode, @HrAreaCode = a.HrAreaCode
		FROM dbo.HrType t 
			JOIN dbo.HrArea a ON t.HrTypeId = a.HrTypeId
		WHERE t.HrTypeId = @HrTypeId AND a.HrAreaId = @HrAreaId;

		SET @TableName = @TableNamePrefix + '_'+ @HrTypeCode + '_' + @HrAreaCode;

		EXEC asp_Hr_Area_Table_Delete @HrAreaTableName = @TableName;

		UPDATE dbo.HrAreaField
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE HrTypeId = @HrTypeId
			AND HrAreaId = @HrAreaId;

		UPDATE dbo.HrField
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE HrAreaId = @HrAreaId;
		
		SET @ResStatus = 1
	COMMIT TRANSACTION
END

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_HINH_THUC_LAM_VIEC] AS SELECT  _HINH_THUC_LAM_VIEC.F_Id, _HINH_THUC_LAM_VIEC.UpdatedDatetimeUtc, _HINH_THUC_LAM_VIEC.tieu_de FROM [MasterDB].[dbo]._HINH_THUC_LAM_VIEC WHERE _HINH_THUC_LAM_VIEC.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_DSPL_HDLD] AS SELECT  _DSPL_HDLD.F_Id, _DSPL_HDLD.UpdatedDatetimeUtc, _DSPL_HDLD.appendixId, _DSPL_HDLD.appendixTitle, _DSPL_HDLD.appendixContent FROM [MasterDB].[dbo]._DSPL_HDLD WHERE _DSPL_HDLD.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_CAP_BAC] AS SELECT  _CAP_BAC.F_Id, _CAP_BAC.UpdatedDatetimeUtc, _CAP_BAC.rankId, _CAP_BAC.rankTitle FROM [MasterDB].[dbo]._CAP_BAC WHERE _CAP_BAC.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_Department] AS 
							WITH tmp
AS (SELECT DepartmentId F_Id,
           DepartmentName,
           DepartmentCode,
           [Description],
           IsActived,
           WorkingHoursPerDay,
           IsProduction,
           SubsidiaryId,
           ParentId,
           IsFactory,
		   CONVERT(NVARCHAR(max),'') TitlePrefix,
		   CONVERT(NVARCHAR(max),CONCAT(DepartmentCode, ' - ', DepartmentName)) TreeTitle,
		   CONVERT(NVARCHAR(max), CONCAT('/',DepartmentCode,'/')) PathCodes,
		   CONVERT(NVARCHAR(max), CONCAT('/',DepartmentName,'/')) PathNames,
		   1 [Level],
		   DepartmentId ParentId_Level_1,
		   NULL ParentId_Level_2,
		   NULL ParentId_Level_3,
		   NULL ParentId_Level_4,
		   NULL ParentId_Level_5,
		   NULL ParentId_Level_6,
		   NULL ParentId_Level_7,
		   NULL ParentId_Level_8,
		   NULL ParentId_Level_9,
		   NULL ParentId_Level_10
    FROM [OrganizationDB].[dbo].Department
    WHERE IsDeleted = 0
          AND ParentId IS NULL
    UNION ALL
    SELECT d.DepartmentId F_Id,
           d.DepartmentName,
           d.DepartmentCode,
           d.[Description],
           d.IsActived,
           d.WorkingHoursPerDay,
           d.IsProduction,
           d.SubsidiaryId,
           d.ParentId,
           d.IsFactory,
		   CONVERT(NVARCHAR(max),CONCAT('----', tmp.TitlePrefix)) TitlePrefix,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.TitlePrefix,' ', d.DepartmentCode, ' - ', d.DepartmentName)) TreeTitle,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.PathCodes, d.DepartmentCode,'/')) PathCodes,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.PathNames, d.DepartmentName,'/')) PathNames,
		   tmp.[Level] + 1 [Level],
		   tmp.ParentId_Level_1,
		   CASE WHEN tmp.[Level] + 1 =2 THEN d.DepartmentId ELSE tmp.ParentId_Level_2 END ParentId_Level_2,
		   CASE WHEN tmp.[Level] + 1 =3 THEN d.DepartmentId ELSE tmp.ParentId_Level_3 END ParentId_Level_3,
		   CASE WHEN tmp.[Level] + 1 =4 THEN d.DepartmentId ELSE tmp.ParentId_Level_4 END ParentId_Level_4,
		   CASE WHEN tmp.[Level] + 1 =5 THEN d.DepartmentId ELSE tmp.ParentId_Level_5 END ParentId_Level_5,
		   CASE WHEN tmp.[Level] + 1 =6 THEN d.DepartmentId ELSE tmp.ParentId_Level_6 END ParentId_Level_6,
		   CASE WHEN tmp.[Level] + 1 =7 THEN d.DepartmentId ELSE tmp.ParentId_Level_7 END ParentId_Level_7,
		   CASE WHEN tmp.[Level] + 1 =8 THEN d.DepartmentId ELSE tmp.ParentId_Level_8 END ParentId_Level_8,
		   CASE WHEN tmp.[Level] + 1 =9 THEN d.DepartmentId ELSE tmp.ParentId_Level_9 END ParentId_Level_9,
		   CASE WHEN tmp.[Level] + 1 =10 THEN d.DepartmentId ELSE tmp.ParentId_Level_10 END ParentId_Level_10
    FROM [OrganizationDB].[dbo].Department d
        JOIN tmp
            ON d.ParentId = tmp.F_Id
    WHERE d.IsDeleted = 0)
SELECT *
FROM tmp
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_TRANG_THAI_HIEU_LUC] AS SELECT  _TRANG_THAI_HIEU_LUC.F_Id, _TRANG_THAI_HIEU_LUC.UpdatedDatetimeUtc, _TRANG_THAI_HIEU_LUC.validityStateId, _TRANG_THAI_HIEU_LUC.validityStateTitle FROM [MasterDB].[dbo]._TRANG_THAI_HIEU_LUC WHERE _TRANG_THAI_HIEU_LUC.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_Partner] AS 
							SELECT        
	c.PartnerId F_Id,
	c.CustomerId,
	c.CustomerCode PartnerCode,
	c.CustomerName PartnerName, 
	c.Email, c.PhoneNumber, 
	c.TaxIdNo,
	c.Website,
	c.CustomerStatusId, 
	c.CustomerTypeId, 
	c.Address, 
	c.LegalRepresentative,
	c.DebtDays, 
	c.DebtLimitation, 
	c.LoanDays, 
	c.LoanLimitation,
	c.DebtManagerUserId,
	c.LogoFileId,
	--c.InformationContact,
	c.PayConditionsId,
	c.DeliveryConditionsId,
	pc.PayConditionName,
	dc.ConditionName,
	(
	SELECT TOP 1
		cc.FullName
	FROM [OrganizationDB].[dbo].CustomerContact cc
	WHERE cc.CustomerId = c.CustomerId and cc.IsDeleted = 0
	) AS FirstContactName
FROM [OrganizationDB].[dbo].Customer c
LEFT JOIN [MasterDB].[dbo]._DeliveryConditions dc ON c.DeliveryConditionsId = dc.F_Id
LEFT JOIN [MasterDB].[dbo]._PayConditions pc ON c.PayConditionsId = pc.F_Id
WHERE c.CustomerStatusId = 1 AND c.IsDeleted = 0
UNION ALL
SELECT 
	e.PartnerId F_Id,
	NULL CustomerId,
	e.EmployeeCode PartnerCode,
	e.FullName PartnerName,
	e.Email,
	e.Phone PhoneNumber,
	NULL TaxIdNo,
	NULL Website,
	1 CustomerStatusId, 
	2 CustomerTypeId,
	e.Address,
	NULL AS DebtDays,
	NULL AS DebtLimitation,
	NULL LoanDays,
	NULL LoanLimitation,
	NULL DebtManagerUserId,
	NULL LogoFileId,
	--NULL AS InformationContact,
	NULL AS PayConditionsId,
	NULL AS DeliveryConditionsId,
	NULL PayConditionName,
	NULL ConditionName,
	NULL FirstContactName,
	null LegalRepresentative
FROM [OrganizationDB].[dbo].Employee e
WHERE e.IsDeleted = 0
							;

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_DIEU_KHOAN_HDLD] AS SELECT  _DIEU_KHOAN_HDLD.F_Id, _DIEU_KHOAN_HDLD.UpdatedDatetimeUtc, _DIEU_KHOAN_HDLD.provisionCode, _DIEU_KHOAN_HDLD.provisionTitle FROM [MasterDB].[dbo]._DIEU_KHOAN_HDLD WHERE _DIEU_KHOAN_HDLD.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_BOOKING_VT_QT] AS 
							WITH tmp AS
  (SELECT r.VoucherBill_F_Id,
          MAX(r.F_Id) AS F_Id
   FROM [PurchaseOrderDB].dbo.VoucherValueRow AS r
   INNER JOIN [PurchaseOrderDB].dbo.VoucherType AS t ON r.VoucherTypeId = t.VoucherTypeId
   WHERE (r.IsDeleted = 0)
     AND (t.VoucherTypeCode = 'CTBH_BOOKING_XK')
   GROUP BY r.VoucherBill_F_Id)

SELECT r.VoucherBill_F_Id AS F_Id,
       r.so_ct,
       r.ngay_ct,
       r.pol,
       r.pod,
       r.confirmation_info
FROM tmp AS tmp_1
INNER JOIN [PurchaseOrderDB].dbo.VoucherValueRow AS r ON tmp_1.F_Id = r.F_Id

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[RefProduct]
AS
SELECT        ProductId, SubsidiaryId, ProductCode, ProductName, ProductInternalName, IsCanBuy, IsCanSell, MainImageFileId, ProductTypeId, ProductCateId, BarcodeStandardId, BarcodeConfigId, Barcode, UnitId, EstimatePrice, Long, 
                         Width, Height, CreatedDatetimeUtc, UpdatedDatetimeUtc, IsDeleted, ProductStatusId, PackingMethod, CustomerId, NetWeight, GrossWeight, Measurement, LoadAbility, SellDescription, ProductNameEng, Quantitative, 
                         QuantitativeUnitTypeId
FROM            StockDB.dbo.Product


GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[RefEmployee]
AS
SELECT        UserId, SubsidiaryId, EmployeeCode, FullName, Email, Phone, Address, GenderId, IsDeleted, AvatarFileId, EmployeeTypeId, UserStatusId, PartnerId
FROM            OrganizationDB.dbo.Employee


GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[RefCustomer]
AS
SELECT        CustomerId, SubsidiaryId, CustomerCode, CustomerName, CustomerTypeId, Address, TaxIdNo, PhoneNumber, Website, Email, Description, IsActived, IsDeleted, CreatedDatetimeUtc, UpdatedDatetimeUtc, CustomerStatusId, 
                         LegalRepresentative, Identify, DebtDays, DebtLimitation, DebtBeginningTypeId, DebtManagerUserId, LoanDays, LoanLimitation, LoanBeginningTypeId, LoanManagerUserId
FROM            OrganizationDB.dbo.Customer


GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_Ship] AS SELECT  _Ship.F_Id, _Ship.UpdatedDatetimeUtc, _Ship.ShipCode, _Ship.ShipName FROM [MasterDB].[dbo]._Ship WHERE _Ship.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_Currency] AS SELECT  _Currency.F_Id, _Currency.UpdatedDatetimeUtc, _Currency.CurrencyName, _Currency.CurrencyCode, _Currency.CurrencyCountry, _Currency.IsPrimary, _Currency.DecimalPlace, _Currency.ty_gia, _nations_0.[NationName] AS [CurrencyCountry_NationName] FROM [MasterDB].[dbo]._Currency LEFT JOIN [MasterDB].[dbo].v_nations AS _nations_0 ON _Currency.CurrencyCountry = _nations_0.F_Id WHERE _Currency.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER TRIGGER [dbo].[VoucherValueRow_AFTER_INSERT_UPDATE]
   ON dbo.VoucherValueRow
   AFTER INSERT,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	UPDATE b
		SET b.BillCode = r.so_ct
	FROM dbo.VoucherBill b
		JOIN Inserted r ON b.F_Id = r.VoucherBill_F_Id
	WHERE r.IsDeleted = 0
END


GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[RefProductionOrder] AS
SELECT ProductionOrderId, ProductionOrderCode FROM ManufacturingDB.dbo.ProductionOrder WHERE IsDeleted = 0

GO

USE PurchaseOrderDB
GO

CREATE OR ALTER FUNCTION [dbo].[afn_DistinctListString]
(
	@Str NVARCHAR(MAX),
	@Delimiter VARCHAR(20)=','
)
	RETURNS NVARCHAR(max)
AS
BEGIN

	DECLARE @return NVARCHAR(max) = ''
	SELECT @return = STRING_AGG(v.[value],@Delimiter) 
	FROM(
		SELECT DISTINCT LTRIM(RTRIM([value])) [Value]
		FROM dbo.ufn_Split(@Str,@Delimiter)
	) v
	WHERE LEN(v.[Value])>0

	RETURN @return;

END


GO

USE PurchaseOrderDB
GO

CREATE OR ALTER VIEW [dbo].[vDON_HANG] AS SELECT        r.*, t.VoucherTypeCode, t.Title AS VoucherTypeTitle
FROM            dbo.VoucherValueRow AS r INNER JOIN
                         dbo.VoucherType AS t ON r.VoucherTypeId = t.VoucherTypeId
WHERE        (r.IsDeleted = 0) AND (t.VoucherTypeCode LIKE 'CTBH_DON_HANG%') AND r.CensorStatusId = 1


GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_VoucherType_UpdateView]
	@VoucherTypeId INT = NULL,
	@ViewName NVARCHAR(128) = 'vVoucherBillRow'
AS
BEGIN
	DECLARE @SelectColumn nvarchar(max) = '	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	';
	DECLARE @Join nvarchar(max) = '
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	';

	DECLARE @BillRowSelectColumn nvarchar(max) = @SelectColumn;
	DECLARE @BillRowJoin nvarchar(max) = @Join;
	
	

	DECLARE @ViewOnlyFormTypeId INT = 6

	DECLARE @SelectFormTypeId INT = 2
	DECLARE @SearchTableFormTypeId INT = 4

	DECLARE @FieldName nvarchar(128)
	DECLARE @RefTableCode nvarchar(128)
	DECLARE @RefTableField nvarchar(128)
	DECLARE @RefTableTitle nvarchar(512)
	DECLARE @FormTypeId INT
	
	DECLARE fieldCursor CURSOR READ_ONLY FORWARD_ONLY LOCAL FOR   
    SELECT f.FieldName, f.RefTableCode, f.RefTableField, f.RefTableTitle, f.FormTypeId 
	FROM dbo.VoucherField f 
		JOIN dbo.VoucherAreaField a ON a.VoucherFieldId = f.VoucherFieldId
		JOIN dbo.VoucherType t ON t.VoucherTypeId = a.VoucherTypeId
	WHERE f.FormTypeId <> @ViewOnlyFormTypeId AND f.IsDeleted = 0
		AND (@VoucherTypeId IS NULL OR t.VoucherTypeId = @VoucherTypeId)
  
    OPEN fieldCursor  
    FETCH NEXT FROM fieldCursor INTO @FieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
  
    IF @@FETCH_STATUS <> 0   
        PRINT '         <<None>>'       
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
		
		
		SET @SelectColumn += ',  [row].[' + @FieldName+']'
		SET @BillRowSelectColumn += ',  [row].[' + @FieldName+']'		
		
		IF LEN(@RefTableCode)>0 AND @FormTypeId IN(@SelectFormTypeId,@SearchTableFormTypeId)
		BEGIN
			IF LEN(@RefTableTitle)>0
			BEGIN
				SELECT @SelectColumn += ', [v' + @FieldName +'].[' + LTRIM(RTRIM([Value])) + '] AS [' + @FieldName + '_' + LTRIM(RTRIM([Value])) +']' FROM dbo.ufn_Split(@RefTableTitle,',');
			
				SET @Join += ' LEFT JOIN [v' +@RefTableCode + '] as [v'+@FieldName+'] WITH(NOLOCK) ON [row].['+@FieldName+'] = [v' + @FieldName+'].['+@RefTableField+']';
					IF @Join IS NULL
					BEGIN
						DECLARE @msg NVARCHAR(max) =CONCAT('Error ref field: ',@FieldName);
					    RAISERROR(@msg,18,1)
						RETURN
					END
			END
		END

        FETCH NEXT FROM fieldCursor INTO @FieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
        END  
  
    CLOSE fieldCursor  
    DEALLOCATE fieldCursor     
	
	DECLARE @Sql nvarchar(max)

	IF ISNULL(@VoucherTypeId,0)<=0
	BEGIN
	    DROP VIEW IF EXISTS vVoucherBillRow;
		SET @Sql = 'CREATE VIEW vVoucherBillRow AS 
		SELECT  ' + @BillRowSelectColumn + 
		@BillRowJoin + '
		WHERE [row].IsDeleted = 0
		';

		PRINT @Sql
		EXEC (@Sql)
	END
		

	SET @Sql = CONCAT('DROP VIEW IF EXISTS ',@ViewName)
	EXEC (@Sql);

	SET @Sql = CONCAT('CREATE VIEW ',@ViewName,' AS 
	SELECT ', 
		@SelectColumn,'
	' , @Join,'
	WHERE [row].IsDeleted = 0
	');
	
	EXEC (@Sql)

-- 	EXEC asp_VoucherType_UpdateView_Rc
-- 	EXEC asp_VoucherType_UpdateView_Rc_detail
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_Stock] AS 
							SELECT 
    StockId F_Id,
    StockName,
    SubsidiaryId
FROM [StockDB].[dbo].Stock 
WHERE IsDeleted=0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_VoucherType_Clear_FieldData]
    @VoucherTypeId INT,
    @FieldName NVARCHAR(128),
    @ResStatus INT OUTPUT
AS
BEGIN
    DECLARE @DATA_TYPE NVARCHAR(128) = N'';
    DECLARE @IS_NULLABLE VARCHAR(3);

    SELECT @IS_NULLABLE = [IS_NULLABLE],
           @DATA_TYPE = [DATA_TYPE]
      FROM [INFORMATION_SCHEMA].[COLUMNS]
     WHERE TABLE_NAME    = 'VoucherValueRow'
       AND [COLUMN_NAME] = @FieldName;

    IF @DATA_TYPE IS NULL
        RETURN;

    DECLARE @Sql NVARCHAR(MAX) = N'';
    IF @IS_NULLABLE = 'YES'
    BEGIN
        SET @Sql
            = N'UPDATE VoucherValueRow SET [' + @FieldName + N'] = NULL WHERE VoucherTypeId = '
              + CONVERT(NVARCHAR(50), @VoucherTypeId);

    END;
    ELSE
    BEGIN
        IF @DATA_TYPE IN ( 'int', 'bigint', 'decimal', 'money', 'numberic', 'bit', 'float', 'double', 'binary', 'bit',
                           'real', 'tinyInt', 'smallint', 'smallmoney' )
        BEGIN
            SET @Sql
                = N'UPDATE VoucherValueRow SET [' + @FieldName + N'] = 0 WHERE VoucherTypeId = '
                  + CONVERT(NVARCHAR(50), @VoucherTypeId);
        END;

        IF @DATA_TYPE IN ( 'datetime', 'date' )
        BEGIN
            SET @Sql
                = N'UPDATE VoucherValueRow SET [' + @FieldName + N'] = ''1900-01-01'' WHERE VoucherTypeId = '
                  + CONVERT(NVARCHAR(50), @VoucherTypeId);
        END;

        IF @DATA_TYPE IN ( 'datetime2' )
        BEGIN
            SET @Sql
                = N'UPDATE VoucherValueRow SET [' + @FieldName + N'] = ''0001-01-01'' WHERE VoucherTypeId = '
                  + CONVERT(NVARCHAR(50), @VoucherTypeId);
        END;


        IF @DATA_TYPE IN ( 'nvarchar', 'varchar', 'text', 'char' )
        BEGIN
            SET @Sql
                = N'UPDATE VoucherValueRow SET [' + @FieldName + N'] = '' WHERE VoucherTypeId = '
                  + CONVERT(NVARCHAR(50), @VoucherTypeId);
        END;
    END;
    
	
	--DECLARE @WAITING BIGINT = 0;
    DECLARE @APPROVE BIGINT = 1;
    --DECLARE @REJECT BIGINT = 2;



    IF @FieldName = 'CheckStatusId'
   AND EXISTS (   SELECT      0
                    FROM      dbo.VoucherAreaField af
                   INNER JOIN dbo.VoucherField f
                      ON af.VoucherFieldId = f.VoucherFieldId
                     AND f.IsDeleted     = 0
                   WHERE      af.VoucherTypeId = @VoucherTypeId
                     AND      af.IsDeleted        = 0
                     AND      f.FieldName         = 'CheckStatusId')
    BEGIN
        UPDATE dbo.VoucherValueRow
           SET CheckStatusId = @APPROVE
         WHERE 1 = 1;
        SET @Sql = NULL;
    END;

    IF @FieldName = 'CensorStatusId'
   AND EXISTS (   SELECT      0
                    FROM      dbo.VoucherAreaField af
                   INNER JOIN dbo.VoucherField f
                      ON af.VoucherFieldId = f.VoucherFieldId
                     AND f.IsDeleted     = 0
                   WHERE      af.VoucherTypeId = @VoucherTypeId
                     AND      af.IsDeleted        = 0
                     AND      f.FieldName         = 'CensorStatusId')
    BEGIN
        UPDATE dbo.VoucherValueRow
           SET CensorStatusId = @APPROVE
         WHERE 1 = 1;
        SET @Sql = NULL;
    END;

    --SELECT @Sql as SQL1
    IF (LEN(@Sql) > 0)
    BEGIN
        EXEC (@Sql);
    END;

    SET @ResStatus = 1;
END;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_VoucherType_Delete]
	@VoucherTypeId int,
	@ResStatus int OUTPUT
AS
BEGIN
	BEGIN TRANSACTION
		UPDATE top(1) dbo.VoucherType
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE VoucherTypeId = @VoucherTypeId AND IsDeleted = 0
		
		UPDATE dbo.VoucherArea
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE VoucherTypeId = @VoucherTypeId AND IsDeleted = 0
		
		UPDATE dbo.VoucherAreaField
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE VoucherTypeId = @VoucherTypeId AND IsDeleted = 0

		UPDATE dbo.VoucherBill
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE VoucherTypeId = @VoucherTypeId AND IsDeleted = 0

		UPDATE dbo.VoucherValueRow
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE VoucherTypeId = @VoucherTypeId AND IsDeleted = 0

		SET @ResStatus = 1
	COMMIT TRANSACTION
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_VoucherValueRow_Delete_Version]
	@VoucherTypeId int,
	@VoucherBill_F_Id bigint,
	@BillVersion INT,
	@UserId int,
	@ResStatus int OUTPUT,
	@SubId int
AS
BEGIN
	UPDATE VoucherValueRow 
		SET IsDeleted			= 1, 
			DeletedDatetimeUtc	= GETUTCDATE(),
			UpdatedByUserId		= @UserId
		WHERE --VoucherTypeId		= @VoucherTypeId
			--AND 
			VoucherBill_F_Id  = @VoucherBill_F_Id
			AND BillVersion		<= @BillVersion
			AND IsDeleted = 0
			AND SubsidiaryId = @SubId;
	SET @ResStatus = 1
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_VoucherValueRow_UpdateView]
AS
BEGIN
	DECLARE @SelectColumn nvarchar(max) = '	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	';
	DECLARE @Join nvarchar(max) = '
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	';

	DECLARE @BillRowSelectColumn nvarchar(max) = @SelectColumn;
	DECLARE @BillRowJoin nvarchar(max) = @Join;
	

	DECLARE @ViewOnlyFormTypeId INT = 6

	DECLARE @SelectFormTypeId INT = 2
	DECLARE @SearchTableFormTypeId INT = 4

	DECLARE @FieldName nvarchar(128)
	DECLARE @RefTableCode nvarchar(128)
	DECLARE @RefTableField nvarchar(128)
	DECLARE @RefTableTitle nvarchar(512)
	DECLARE @FormTypeId INT
	
	DECLARE fieldCursor CURSOR FOR   
    SELECT FieldName, RefTableCode, RefTableField, RefTableTitle, FormTypeId FROM VoucherField WHERE FormTypeId <> @ViewOnlyFormTypeId AND IsDeleted = 0
  
    OPEN fieldCursor  
    FETCH NEXT FROM fieldCursor INTO @FieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
  
    IF @@FETCH_STATUS <> 0   
        PRINT '         <<None>>'       
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
		
		
		SET @SelectColumn += ',  [row].[' + @FieldName+']'
		SET @BillRowSelectColumn += ',  [row].[' + @FieldName+']'		
		
		IF LEN(@RefTableCode)>0 AND @FormTypeId IN(@SelectFormTypeId,@SearchTableFormTypeId)
		BEGIN
			IF LEN(@RefTableTitle)>0
			BEGIN
				SELECT @SelectColumn += ', [v' + @FieldName +'].[' + LTRIM(RTRIM([Value])) + '] AS [' + @FieldName + '_' + LTRIM(RTRIM([Value])) +']' FROM dbo.ufn_Split(@RefTableTitle,',');
			
				SET @Join += ' LEFT JOIN [v' +@RefTableCode + '] as [v'+@FieldName+'] WITH(NOLOCK) ON [row].['+@FieldName+'] = [v' + @FieldName+'].['+@RefTableField+']';
					IF @Join IS NULL
					BEGIN
						DECLARE @msg NVARCHAR(max) =CONCAT('Error ref field: ',@FieldName);
					    RAISERROR(@msg,18,1)
						RETURN
					END
			END
		END

        FETCH NEXT FROM fieldCursor INTO @FieldName, @RefTableCode, @RefTableField, @RefTableTitle, @FormTypeId
        END  
  
    CLOSE fieldCursor  
    DEALLOCATE fieldCursor     
	
	DECLARE @Sql nvarchar(max)

	DROP VIEW IF EXISTS vVoucherBillRow;
	SET @Sql = 'CREATE VIEW vVoucherBillRow AS 
	SELECT  ' + @BillRowSelectColumn + 
	@BillRowJoin + '
	WHERE [row].IsDeleted = 0
	';

	PRINT @Sql
	EXEC (@Sql)

	PRINT 'abc'

	DROP VIEW IF EXISTS vVoucherValueRow;

	SET @Sql = 'CREATE VIEW vVoucherValueRow AS 
	SELECT ' + @SelectColumn + 
	@Join + '
	WHERE [row].IsDeleted = 0
	';
	
	PRINT CONCAT('cde',@Join,'xx')
	 PRINT @Sql
	EXEC (@Sql)

-- 	EXEC asp_VoucherType_UpdateView_Rc
-- 	EXEC asp_VoucherType_UpdateView_Rc_detail
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_DON_MUA_HANG] AS 
							SELECT
po.PurchaseOrderId F_Id,
po.PurchaseOrderCode,
po.Date,
po.DeliveryDate
FROM PurchaseOrderDB.dbo.PurchaseOrder po
WHERE po.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vBAN_HANG] AS SELECT      r.*
  FROM      dbo.VoucherValueRow AS r
 INNER JOIN dbo.VoucherType AS t ON r.VoucherTypeId = t.VoucherTypeId
 WHERE      (r.IsDeleted = 0) AND r.CensorStatusId = 1
   AND      t.VoucherTypeCode IN ( 'CTBH_BH_ND', 'CTBH_BH_XK' );

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_ValidateBillDate]
	@SubId int = 0,
	@OldDate datetime2 = NULL,
	@BillDate DATETIME2 = NULL,
	@TimeZoneOffset INT = -420,
	@ResStatus bit  = 0 OUTPUT
AS
BEGIN
	IF @OldDate IS NOT NULL OR @BillDate IS NOT NULL
		EXEC [MasterDB].dbo.asp_ValidateBillDate
		@SubId = @SubId,
		@OldDate = @OldDate,
		@BillDate = @BillDate,
		@TimeZoneOffset = @TimeZoneOffset,
		@ResStatus = @ResStatus OUt
	ELSE
		SET @ResStatus = 1
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_ProductCustomer] AS 
							SELECT 
    pc.ProductCustomerId        F_Id,
    p.ProductId,
    p.ProductCode,
    p.ProductName,
    pc.CustomerProductCode      CustomerProductCode,
    pc.CustomerProductName      CustomerProductName,
    c.PartnerId                 PartnerId
FROM [StockDB].[dbo].[ProductCustomer] pc
    JOIN [StockDB].[dbo].[Product] p ON pc.ProductId = p.ProductId
    LEFT JOIN [OrganizationDB].[dbo].[Customer] c ON pc.CustomerId = c.CustomerId AND c.IsDeleted = 0
WHERE pc.IsDeleted = 0 AND p.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_Department] AS 
							WITH tmp
AS (SELECT DepartmentId F_Id,
           DepartmentName,
           DepartmentCode,
           [Description],
           IsActived,
           WorkingHoursPerDay,
           IsProduction,
           SubsidiaryId,
           ParentId,
           IsFactory,
		   CONVERT(NVARCHAR(max),'') TitlePrefix,
		   CONVERT(NVARCHAR(max),CONCAT(DepartmentCode, ' - ', DepartmentName)) TreeTitle,
		   CONVERT(NVARCHAR(max), CONCAT('/',DepartmentCode,'/')) PathCodes,
		   CONVERT(NVARCHAR(max), CONCAT('/',DepartmentName,'/')) PathNames,
		   1 [Level],
		   DepartmentId ParentId_Level_1,
		   NULL ParentId_Level_2,
		   NULL ParentId_Level_3,
		   NULL ParentId_Level_4,
		   NULL ParentId_Level_5,
		   NULL ParentId_Level_6,
		   NULL ParentId_Level_7,
		   NULL ParentId_Level_8,
		   NULL ParentId_Level_9,
		   NULL ParentId_Level_10
    FROM [OrganizationDB].[dbo].Department
    WHERE IsDeleted = 0
          AND ParentId IS NULL
    UNION ALL
    SELECT d.DepartmentId F_Id,
           d.DepartmentName,
           d.DepartmentCode,
           d.[Description],
           d.IsActived,
           d.WorkingHoursPerDay,
           d.IsProduction,
           d.SubsidiaryId,
           d.ParentId,
           d.IsFactory,
		   CONVERT(NVARCHAR(max),CONCAT('----', tmp.TitlePrefix)) TitlePrefix,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.TitlePrefix,' ', d.DepartmentCode, ' - ', d.DepartmentName)) TreeTitle,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.PathCodes, d.DepartmentCode,'/')) PathCodes,
		   CONVERT(NVARCHAR(max),CONCAT(tmp.PathNames, d.DepartmentName,'/')) PathNames,
		   tmp.[Level] + 1 [Level],
		   tmp.ParentId_Level_1,
		   CASE WHEN tmp.[Level] + 1 =2 THEN d.DepartmentId ELSE tmp.ParentId_Level_2 END ParentId_Level_2,
		   CASE WHEN tmp.[Level] + 1 =3 THEN d.DepartmentId ELSE tmp.ParentId_Level_3 END ParentId_Level_3,
		   CASE WHEN tmp.[Level] + 1 =4 THEN d.DepartmentId ELSE tmp.ParentId_Level_4 END ParentId_Level_4,
		   CASE WHEN tmp.[Level] + 1 =5 THEN d.DepartmentId ELSE tmp.ParentId_Level_5 END ParentId_Level_5,
		   CASE WHEN tmp.[Level] + 1 =6 THEN d.DepartmentId ELSE tmp.ParentId_Level_6 END ParentId_Level_6,
		   CASE WHEN tmp.[Level] + 1 =7 THEN d.DepartmentId ELSE tmp.ParentId_Level_7 END ParentId_Level_7,
		   CASE WHEN tmp.[Level] + 1 =8 THEN d.DepartmentId ELSE tmp.ParentId_Level_8 END ParentId_Level_8,
		   CASE WHEN tmp.[Level] + 1 =9 THEN d.DepartmentId ELSE tmp.ParentId_Level_9 END ParentId_Level_9,
		   CASE WHEN tmp.[Level] + 1 =10 THEN d.DepartmentId ELSE tmp.ParentId_Level_10 END ParentId_Level_10
    FROM [OrganizationDB].[dbo].Department d
        JOIN tmp
            ON d.ParentId = tmp.F_Id
    WHERE d.IsDeleted = 0)
SELECT *
FROM tmp
							;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_Partner] AS 
							SELECT        
	c.PartnerId F_Id,
	c.CustomerId,
	c.CustomerCode PartnerCode,
	c.CustomerName PartnerName, 
	c.Email, c.PhoneNumber, 
	c.TaxIdNo,
	c.Website,
	c.CustomerStatusId, 
	c.CustomerTypeId, 
	c.Address, 
	c.LegalRepresentative,
	c.DebtDays, 
	c.DebtLimitation, 
	c.LoanDays, 
	c.LoanLimitation,
	c.DebtManagerUserId,
	c.LogoFileId,
	--c.InformationContact,
	c.PayConditionsId,
	c.DeliveryConditionsId,
	pc.PayConditionName,
	dc.ConditionName,
	(
	SELECT TOP 1
		cc.FullName
	FROM [OrganizationDB].[dbo].CustomerContact cc
	WHERE cc.CustomerId = c.CustomerId and cc.IsDeleted = 0
	) AS FirstContactName
FROM [OrganizationDB].[dbo].Customer c
LEFT JOIN [MasterDB].[dbo]._DeliveryConditions dc ON c.DeliveryConditionsId = dc.F_Id
LEFT JOIN [MasterDB].[dbo]._PayConditions pc ON c.PayConditionsId = pc.F_Id
WHERE c.CustomerStatusId = 1 AND c.IsDeleted = 0
UNION ALL
SELECT 
	e.PartnerId F_Id,
	NULL CustomerId,
	e.EmployeeCode PartnerCode,
	e.FullName PartnerName,
	e.Email,
	e.Phone PhoneNumber,
	NULL TaxIdNo,
	NULL Website,
	1 CustomerStatusId, 
	2 CustomerTypeId,
	e.Address,
	NULL AS DebtDays,
	NULL AS DebtLimitation,
	NULL LoanDays,
	NULL LoanLimitation,
	NULL DebtManagerUserId,
	NULL LogoFileId,
	--NULL AS InformationContact,
	NULL AS PayConditionsId,
	NULL AS DeliveryConditionsId,
	NULL PayConditionName,
	NULL ConditionName,
	NULL FirstContactName,
	null LegalRepresentative
FROM [OrganizationDB].[dbo].Employee e
WHERE e.IsDeleted = 0
							;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_Step] AS 
							SELECT
    s.StepId F_Id,
    s.StepName StepName,
    s.SubsidiaryId
FROM [ManufacturingDB].[dbo].Step s
WHERE s.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[RefObjectApprovalStep]
AS
SELECT        ObjectApprovalStepId, ObjectTypeId, ObjectId, ObjectApprovalStepTypeId, IsEnable, ObjectFieldEnable, UpdatedByUserId, UpdatedDatetimeUtc, SubsidiaryId
FROM            OrganizationDB.dbo.ObjectApprovalStep
WHERE        (ObjectTypeId = 53)


GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_UpdateVoucherTableType]
AS
BEGIN
	
	IF (EXISTS (SELECT * FROM sys.table_types WHERE name = 'VoucherTableType'))
		DROP TYPE VoucherTableType
	
	DECLARE @sql nvarchar(max) = ''
	
	DECLARE @ViewOnlyFormTypeId INT = 6

	DECLARE @FieldName nvarchar(128)
	DECLARE @SqlType nvarchar(10);
	DECLARE @DataSize INT
	
	DECLARE fieldCursor CURSOR FOR   
    SELECT f.FieldName FROM VoucherField f
		WHERE f.FormTypeId <> @ViewOnlyFormTypeId AND f.IsDeleted = 0
  
    OPEN fieldCursor  
			FETCH NEXT FROM fieldCursor INTO @FieldName
  
    IF @@FETCH_STATUS <> 0   
        PRINT '         <<None>>'       
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
			
			SELECT @SqlType = DATA_TYPE, @DataSize = CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VoucherValueRow' AND COLUMN_NAME = @FieldName
			SET @sql += '
			' + @FieldName + ' ' + @SqlType
			IF @DataSize IS NOT NULL 
				IF @DataSize >= 0 
					SET @sql += CONCAT('(',@DataSize ,'),') 
				ELSE
					SET @sql += '(max),'
			ELSE
				SET @sql +=',' 
			FETCH NEXT FROM fieldCursor INTO @FieldName
			END  
  
    CLOSE fieldCursor  
    DEALLOCATE fieldCursor
		
		IF LEN(@sql)>0		
			SET @sql = SUBSTRING(@sql,0,LEN(@sql))	
		
		SET @sql = 'CREATE TYPE VoucherTableType AS TABLE
								(' + @sql + ')'

  	EXEC (@sql)
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_Product] AS 
							SELECT 
	p.ProductId F_Id,
	p.ProductCode,
	p.ProductName,
    p.MainImageFileId,
	p.UnitId,
	u.UnitName UnitId_UnitName,
	puc.Decimalplace UnitId_Decimalplace,
	p.EstimatePrice,
	pei.Specification,
	p.ProductNameEng,
	p.NetWeight,
	p.GrossWeight,
	p.Measurement,
	p.PackingHeight,
	p.PackingLong,
	p.PackingWidth,
	p.SubsidiaryId

FROM [StockDB].[dbo].Product p 
LEFT JOIN [StockDB].[dbo].ProductUnitConversion puc ON p.ProductId = puc.ProductId AND puc.IsDefault = 1 
LEFT JOIN [StockDB].[dbo].ProductExtraInfo pei ON p.ProductId = pei.ProductId AND pei.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].Unit u ON p.UnitId = u.UnitId AND u.IsDeleted = 0

WHERE p.IsDeleted = 0
							;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_BH_XK_INFO] AS 
							SELECT        
        r.VoucherBill_F_Id AS F_Id, 
        r.so_ct
    FROM [PurchaseOrderDB].dbo.VoucherValueRow AS r 
    INNER JOIN [PurchaseOrderDB].dbo.VoucherType AS t ON r.VoucherTypeId = t.VoucherTypeId
    WHERE (r.IsDeleted = 0) AND (t.VoucherTypeCode = 'CTBH_BH_XK') AND r.CensorStatusId = 1
    GROUP BY r.VoucherBill_F_Id, r.so_ct
							;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_Product_Search] AS 
								SELECT 
	p.ProductId F_Id,
	p.ProductCode,
	p.ProductName,
    p.MainImageFileId,
	p.UnitId,
	u.UnitName UnitId_UnitName,
	puc.Decimalplace UnitId_Decimalplace,
	p.ProductCateId,
	pc.ProductCateName ProductCateId_ProductCateName,
	p.EstimatePrice,
	pei.Specification,
	p.ProductNameEng,
	p.NetWeight,
	p.GrossWeight,
	p.Measurement,
	p.PackingHeight,
	p.PackingLong,
	p.PackingWidth,
	p.SubsidiaryId,
	sl.sl_ton

FROM [StockDB].[dbo].Product p 
LEFT JOIN [StockDB].[dbo].ProductUnitConversion puc ON p.ProductId = puc.ProductId AND puc.IsDefault = 1 
LEFT JOIN [StockDB].[dbo].ProductExtraInfo pei ON p.ProductId = pei.ProductId AND pei.IsDeleted = 0
LEFT JOIN [MasterDB].[dbo].Unit u ON p.UnitId = u.UnitId AND u.IsDeleted = 0
LEFT JOIN [StockDB].[dbo].ProductCate pc ON p.ProductCateId = pc.ProductCateId AND pc.IsDeleted = 0
LEFT JOIN (
	SELECT sp.ProductId, SUM(sp.PrimaryQuantityRemaining) sl_ton
	FROM
	[StockDB].[dbo].StockProduct sp
	WHERE sp.IsDeleted = 0
	GROUP BY sp.ProductId
) sl ON p.ProductId = sl.ProductId

WHERE p.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_BH_XK_INFO_Search] AS 
								WITH tmp AS (
    SELECT        
        r.VoucherBill_F_Id, 
        MAX(r.F_Id) AS F_Id
    FROM [PurchaseOrderDB].dbo.VoucherValueRow AS r 
    INNER JOIN [PurchaseOrderDB].dbo.VoucherType AS t ON r.VoucherTypeId = t.VoucherTypeId
    WHERE (r.IsDeleted = 0) AND (t.VoucherTypeCode = 'CTBH_BH_XK') AND r.CensorStatusId = 1
    GROUP BY r.VoucherBill_F_Id
)
SELECT 
    r.VoucherBill_F_Id AS F_Id, 
    r.so_ct, 
    r.ngay_ct, 
    r.kho, 
    r.ong_ba, 
    r.tk_no0, 
    r.kh0,
    r.noi_dung, 
    r.tt_nguoi_mua, 
    r.mau_hd, 
    r.ky_hieu_hd, 
    r.seri_hd, 
    r.ngay_hd, 
    r.attachment, 
    r.ten_tau, 
    r.dkgh, 
    r.kh_vt, 
    r.tt_ship, 
    r.tt_nguoi_nhan_hang
FROM tmp AS tmp_1 
INNER JOIN [PurchaseOrderDB].dbo.VoucherValueRow AS r ON tmp_1.F_Id = r.F_Id

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_MonthPlan] AS 
							SELECT 
    mp.MonthPlanId F_Id,
    mp.MonthPlanName,
    mp.StartDate,
    mp.EndDate,
    mp.MonthNote
FROM [ManufacturingDB].dbo.MonthPlan mp WHERE mp.IsDeleted = 0
							;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_User] AS 
							-- SELECT
--     e.UserId F_Id,
--     e.UserId UserId,
--     e.EmployeeCode,
--     e.FullName,
--     e.Email,
--     e.Phone
-- FROM [OrganizationDB].[dbo].Employee e
-- WHERE e.IsDeleted = 0

SELECT
    e.UserId F_Id,
    e.UserId UserId,
    e.EmployeeCode,
    e.FullName,
    e.Email,
    e.Phone, 
    CONCAT(e.EmployeeCode,' - ', e.FullName) DisplayName,
    STRING_AGG(d.DepartmentName, ', ') WITHIN GROUP (ORDER BY d.DepartmentId) AS Department
FROM [OrganizationDB].[dbo].Employee e
LEFT JOIN [OrganizationDB].[dbo].EmployeeDepartmentMapping ed ON e.UserId = ed.UserId AND ed.IsDeleted = 0 AND e.IsDeleted = 0 AND e.SubsidiaryId = ed.SubsidiaryId
LEFT JOIN [OrganizationDB].[dbo].Department d ON ed.DepartmentId = d.DepartmentId AND d.IsDeleted = 0 AND e.SubsidiaryId = d.SubsidiaryId
WHERE e.IsDeleted = 0
GROUP BY e.UserId, e.EmployeeCode, e.FullName, e.Email, e.Phone
							;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_PayConditions] AS SELECT  _PayConditions.F_Id, _PayConditions.UpdatedDatetimeUtc, _PayConditions.PayConditionCode, _PayConditions.PayConditionName, _PayConditions.PayConditionNameEn, _PayConditions.PayConditionContent FROM [MasterDB].[dbo]._PayConditions WHERE _PayConditions.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_User_Search] AS 
								SELECT
    e.UserId F_Id,
    e.UserId UserId,
    e.EmployeeCode,
    e.FullName,
    e.Email,
    e.Phone, 
    CONCAT(e.EmployeeCode,' - ', e.FullName) DisplayName,
    STRING_AGG(d.DepartmentName, ', ') WITHIN GROUP (ORDER BY d.DepartmentId) AS Department
FROM [OrganizationDB].[dbo].Employee e
LEFT JOIN [OrganizationDB].[dbo].EmployeeDepartmentMapping ed ON e.UserId = ed.UserId AND ed.IsDeleted = 0 AND e.IsDeleted = 0 AND e.SubsidiaryId = ed.SubsidiaryId
LEFT JOIN [OrganizationDB].[dbo].Department d ON ed.DepartmentId = d.DepartmentId AND d.IsDeleted = 0 AND e.SubsidiaryId = d.SubsidiaryId
WHERE e.IsDeleted = 0
GROUP BY e.UserId, e.EmployeeCode, e.FullName, e.Email, e.Phone

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[Product]
AS
SELECT        ProductId, SubsidiaryId, ProductCode, ProductName, ProductInternalName, IsCanBuy, IsCanSell, MainImageFileId, ProductTypeId, ProductCateId, BarcodeStandardId, BarcodeConfigId, Barcode, UnitId, EstimatePrice, Long, 
                         Width, Height, PackingMethod, CustomerId, NetWeight, GrossWeight, Measurement, LoadAbility, SellDescription, ProductNameEng
FROM            StockDB.dbo.Product AS Product_1


GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_WeekPlan] AS 
							SELECT
    wp.WeekPlanId F_Id,
    wp.MonthPlanId,
    wp.WeekPlanName,
    wp.StartDate,
    wp.EndDate,
    wp.WeekNote

FROM [ManufacturingDB].dbo.WeekPlan wp
WHERE wp.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[Customer] AS SELECT
	* 
FROM
	OrganizationDB.dbo.Customer;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_BAO_GIA_INFO] AS 
							SELECT r.VoucherBill_F_Id AS F_Id, r.so_ct
		FROM [PurchaseOrderDB].dbo.VoucherValueRow r
		INNER JOIN [PurchaseOrderDB].dbo.VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND t.VoucherTypeCode = 'CTBH_BAO_GIA' AND r.CensorStatusId = 1
		GROUP BY r.VoucherBill_F_Id, r.so_ct
							;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucherBill] AS SELECT        F_Id, VoucherTypeId, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, IsDeleted, DeletedDatetimeUtc, LatestBillVersion
FROM            dbo.VoucherBill

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucherType] AS SELECT        VoucherTypeId AS F_Id, VoucherTypeGroupId, Title, VoucherTypeCode, SortOrder, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, IsDeleted, DeletedDatetimeUtc, PreLoadAction, PostLoadAction
FROM            dbo.VoucherType

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_CustomerContact] AS 
							SELECT 
	ct.CustomerContactId F_Id,
	c.PartnerId,
	ct.CustomerId,
	ct.FullName,
	ct.SubsidiaryId,
	ct.GenderId,
	ct.Position,
	ct.PhoneNumber,
	ct.Email	
FROM [OrganizationDB].[dbo].CustomerContact ct 
LEFT JOIN [OrganizationDB].[dbo].Customer c ON ct.CustomerId = c.CustomerId
WHERE ct.IsDeleted = 0 AND c.IsDeleted = 0
							;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_ProductUnitConversion] AS 
							SELECT 
    puc.ProductUnitConversionId F_Id,
    puc.ProductUnitConversionName,
    puc.FactorExpression,
    puc.ConversionDescription,
    puc.IsDefault,
    puc.IsFreeStyle,
    puc.ProductId,
    puc.DecimalPlace,
    p.ProductName ProductId_ProductName   
FROM [StockDB].[dbo].ProductUnitConversion puc
JOIN [StockDB].[dbo].Product p ON puc.ProductId = p.ProductId

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_DeliveryConditions] AS SELECT  _DeliveryConditions.F_Id, _DeliveryConditions.UpdatedDatetimeUtc, _DeliveryConditions.ConditionCode, _DeliveryConditions.ConditionName, _DeliveryConditions.ConditionContent FROM [MasterDB].[dbo]._DeliveryConditions WHERE _DeliveryConditions.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_CensorStatus] AS SELECT  _CensorStatus.F_Id, _CensorStatus.UpdatedDatetimeUtc, _CensorStatus.CensorStatusId, _CensorStatus.CensorStatusName, _CensorStatus.CssStyleJson FROM [MasterDB].[dbo]._CensorStatus WHERE _CensorStatus.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_Container] AS SELECT  _Container.F_Id, _Container.UpdatedDatetimeUtc, _Container.ContainerCode, _Container.Description FROM [MasterDB].[dbo]._Container WHERE _Container.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_Unit] AS 
							SELECT UnitId F_Id, UnitName, UnitStatusId, DecimalPlace
FROM [MasterDB].[dbo].Unit WHERE IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_METHOD_PAYMENT] AS SELECT  _METHOD_PAYMENT.F_Id, _METHOD_PAYMENT.UpdatedDatetimeUtc, _METHOD_PAYMENT.MethodPaymentId, _METHOD_PAYMENT.MethodPaymentName FROM [MasterDB].[dbo]._METHOD_PAYMENT WHERE _METHOD_PAYMENT.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_CheckStatus] AS SELECT  _CheckStatus.F_Id, _CheckStatus.UpdatedDatetimeUtc, _CheckStatus.CheckStatusId, _CheckStatus.CheckStatusName, _CheckStatus.CssStyleJson FROM [MasterDB].[dbo]._CheckStatus WHERE _CheckStatus.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_QuotationStatus] AS SELECT  _QuotationStatus.F_Id, _QuotationStatus.UpdatedDatetimeUtc, _QuotationStatus.QuotationStatus, _QuotationStatus.QuotationStatusName FROM [MasterDB].[dbo]._QuotationStatus WHERE _QuotationStatus.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_RequestSampleStatus] AS SELECT  _RequestSampleStatus.F_Id, _RequestSampleStatus.UpdatedDatetimeUtc, _RequestSampleStatus.RequestSampleStatusId, _RequestSampleStatus.RequestSampleStatusName FROM [MasterDB].[dbo]._RequestSampleStatus WHERE _RequestSampleStatus.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[RefOutsourceStepRequest]
AS
SELECT        rq.OutsourceStepRequestId, rq.OutsourceStepRequestCode, rq.ProductionOrderId, po.ProductionOrderCode, rqd.ProductionStepId, s.StepId, rqd.ProductionStepLinkDataId, ld.LinkDataObjectId AS ProductId, rqd.Quantity, rqd.IsImportant, 
                         rqd.ProductionStepLinkDataRoleTypeId, rq.OutsourceStepRequestFinishDate, rq.OutsourceStepRequestStatusId
FROM            ManufacturingDB.dbo.OutsourceStepRequest AS rq INNER JOIN
                         ManufacturingDB.dbo.OutsourceStepRequestData AS rqd ON rq.OutsourceStepRequestId = rqd.OutsourceStepRequestId INNER JOIN
                         ManufacturingDB.dbo.ProductionStep AS s ON rqd.ProductionStepId = s.ProductionStepId INNER JOIN
                         ManufacturingDB.dbo.ProductionOrder AS po ON rq.ProductionOrderId = po.ProductionOrderId INNER JOIN
                         ManufacturingDB.dbo.ProductionStepLinkData AS ld ON rqd.ProductionStepLinkDataId = ld.ProductionStepLinkDataId AND ld.LinkDataObjectTypeId = 1
WHERE        (rq.IsInvalid = 0) AND (rq.OutsourceStepRequestStatusId <> 3)



GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_E_INVOICE_PATERM_CODE] AS SELECT  _E_INVOICE_PATERM_CODE.F_Id, _E_INVOICE_PATERM_CODE.UpdatedDatetimeUtc, _E_INVOICE_PATERM_CODE.title, _E_INVOICE_PATERM_CODE.code FROM [MasterDB].[dbo]._E_INVOICE_PATERM_CODE WHERE _E_INVOICE_PATERM_CODE.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[RefOutsourcePartRequest]
AS
SELECT        rq.OutsourcePartRequestId, rq.OutsourcePartRequestCode, po.ProductionOrderId, po.ProductionOrderCode, ISNULL(rq.ProductionOrderDetailId, 0) AS ProductionOrderDetailId, ISNULL(pod.ProductId, 0) AS RootProductId, 
                         rqd.ProductId, SUM(rqd.Quantity) AS Quantity, MIN(rqd.OutsourcePartRequestDetailFinishDate) AS OutsourcePartRequestDetailFinishDate
FROM            ManufacturingDB.dbo.OutsourcePartRequest AS rq INNER JOIN
                         ManufacturingDB.dbo.OutsourcePartRequestDetail AS rqd ON rq.OutsourcePartRequestId = rqd.OutsourcePartRequestId AND rqd.IsDeleted = 0 LEFT OUTER JOIN
                         ManufacturingDB.dbo.ProductionOrderDetail AS pod ON rq.ProductionOrderDetailId = pod.ProductionOrderDetailId LEFT OUTER JOIN
                         ManufacturingDB.dbo.ProductionOrder AS po ON pod.ProductionOrderId = po.ProductionOrderId OR rq.ProductionOrderId = po.ProductionOrderId
WHERE        (rq.IsDeleted = 0) AND (rq.OutsourcePartRequestStatusId <> 3)
GROUP BY rq.OutsourcePartRequestId, rq.OutsourcePartRequestCode, po.ProductionOrderId, po.ProductionOrderCode, rq.ProductionOrderDetailId, rqd.ProductId, pod.ProductId


GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_E_INVOICE_SERIAL] AS SELECT  _E_INVOICE_SERIAL.F_Id, _E_INVOICE_SERIAL.UpdatedDatetimeUtc, _E_INVOICE_SERIAL.title, _E_INVOICE_SERIAL.code FROM [MasterDB].[dbo]._E_INVOICE_SERIAL WHERE _E_INVOICE_SERIAL.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_E_INVOICE_METHOD_PAYMENT] AS SELECT  _E_INVOICE_METHOD_PAYMENT.F_Id, _E_INVOICE_METHOD_PAYMENT.UpdatedDatetimeUtc, _E_INVOICE_METHOD_PAYMENT.title, _E_INVOICE_METHOD_PAYMENT.code FROM [MasterDB].[dbo]._E_INVOICE_METHOD_PAYMENT WHERE _E_INVOICE_METHOD_PAYMENT.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_E_INVOICE_TYPE] AS SELECT  _E_INVOICE_TYPE.F_Id, _E_INVOICE_TYPE.UpdatedDatetimeUtc, _E_INVOICE_TYPE.EInvoiceTypeId, _E_INVOICE_TYPE.EInvoiceTypeName FROM [MasterDB].[dbo]._E_INVOICE_TYPE WHERE _E_INVOICE_TYPE.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_E_INVOICE_ADJUST_TYPE] AS SELECT  _E_INVOICE_ADJUST_TYPE.F_Id, _E_INVOICE_ADJUST_TYPE.UpdatedDatetimeUtc, _E_INVOICE_ADJUST_TYPE.AdjustTypeId, _E_INVOICE_ADJUST_TYPE.AdjustTitle FROM [MasterDB].[dbo]._E_INVOICE_ADJUST_TYPE WHERE _E_INVOICE_ADJUST_TYPE.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_EASY_INV_STATUS] AS SELECT  _EASY_INV_STATUS.F_Id, _EASY_INV_STATUS.UpdatedDatetimeUtc, _EASY_INV_STATUS.title, _EASY_INV_STATUS.value FROM [MasterDB].[dbo]._EASY_INV_STATUS WHERE _EASY_INV_STATUS.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[CTBH_BH_XK_INFO]
AS
WITH tmp AS (SELECT        r.VoucherBill_F_Id, MAX(r.F_Id) AS F_Id
                               FROM            dbo.VoucherValueRow AS r INNER JOIN
                                                        dbo.VoucherType AS t ON r.VoucherTypeId = t.VoucherTypeId
                               WHERE        (r.IsDeleted = 0) AND (t.VoucherTypeCode = 'CTBH_BH_XK')
                               GROUP BY r.VoucherBill_F_Id)
    SELECT        r.VoucherBill_F_Id AS F_Id, r.so_ct, r.ngay_ct, r.kho, r.ong_ba, r.tk_no0, r.kh0, r.noi_dung, r.tt_nguoi_mua, r.mau_hd, r.ky_hieu_hd, r.seri_hd, r.ngay_hd, r.attachment, r.ten_tau, r.dkgh, r.kh_vt, r.tt_ship, 
                              r.tt_nguoi_nhan_hang
     FROM            tmp AS tmp_1 INNER JOIN
                              dbo.VoucherValueRow AS r ON tmp_1.F_Id = r.F_Id


GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_VAT_RATE] AS SELECT  _VAT_RATE.F_Id, _VAT_RATE.UpdatedDatetimeUtc, _VAT_RATE.title, _VAT_RATE.value, _VAT_RATE.easy_inv_check FROM [MasterDB].[dbo]._VAT_RATE WHERE _VAT_RATE.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_E_INVOICE_PROVIDER] AS SELECT  _E_INVOICE_PROVIDER.F_Id, _E_INVOICE_PROVIDER.UpdatedDatetimeUtc, _E_INVOICE_PROVIDER.title, _E_INVOICE_PROVIDER.value FROM [MasterDB].[dbo]._E_INVOICE_PROVIDER WHERE _E_INVOICE_PROVIDER.IsDeleted = 0

GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_CopyProductMaterialConsumption]
@SourceProductId int,
@DestProductId int
AS
BEGIN

	IF NOT EXISTS (SELECT 1 FROM Product where ProductId = @DestProductId AND IsDeleted = 0) 
	BEGIN 
		DECLARE @msg nvarchar(256);
		SET @msg = FORMATMESSAGE('Product cannot be copy due to DestProduct not found. SourceProductId: %d. DestProductId: %d', @SourceProductId, @DestProductId);

		THROW 50001, @msg, 1
	END

	---- Copy BOM
	--INSERT INTO ProductBom (ProductId, ChildProductId, Quantity, Wastage, [Description], IsDeleted, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc) SELECT @DestProductId ProductId, ChildProductId, Quantity, Wastage, [Description], IsDeleted, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc FROM ProductBom WHERE ProductId = @SourceProductId AND IsDeleted = 0;

	--INSERT INTO ProductMaterial (RootProductId, ProductId, PathProductIds) SELECT @DestProductId RootProductId, ProductId, REPLACE(PathProductIds, @SourceProductId, @DestProductId) PathProductIds FROM ProductMaterial WHERE RootProductId = @SourceProductId;
	
	-- Copy Product Materials Consumption
	Update ProductMaterialsConsumption SET IsDeleted = 1 WHERE ProductId = @DestProductId;

	INSERT INTO ProductMaterialsConsumption (ProductMaterialsConsumptionGroupId, ProductId, MaterialsConsumptionId, Quantity, StepId, DepartmentId, IsDeleted, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc) SELECT ProductMaterialsConsumptionGroupId, @DestProductId ProductId, MaterialsConsumptionId, Quantity, StepId, DepartmentId, IsDeleted, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc FROM ProductMaterialsConsumption WHERE ProductId = @SourceProductId AND IsDeleted = 0;

END


GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_CopyProductBom]
@SourceProductId int,
@DestProductId int
AS
BEGIN

	IF NOT EXISTS (SELECT 1 FROM Product where ProductId = @DestProductId AND IsDeleted = 0) 
	BEGIN 
		DECLARE @msg nvarchar(256);
		SET @msg = FORMATMESSAGE('Product cannot be copy due to DestProduct not found. SourceProductId: %d. DestProductId: %d', @SourceProductId, @DestProductId);

		THROW 50001, @msg, 1
	END

	Update ProductBom SET IsDeleted = 1 WHERE ProductId = @DestProductId;
	DElETE FROM ProductMaterial WHERE RootProductId = @DestProductId;

	-- Copy BOM
	INSERT INTO ProductBom (ProductId, ChildProductId, Quantity, Wastage, [Description], IsDeleted, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc, InputStepId, OutputStepId, SortOrder) SELECT @DestProductId ProductId, ChildProductId, Quantity, Wastage, [Description], IsDeleted, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc,InputStepId, OutputStepId, SortOrder FROM ProductBom WHERE ProductId = @SourceProductId AND IsDeleted = 0;

	INSERT INTO ProductMaterial (RootProductId, ProductId, PathProductIds) SELECT @DestProductId RootProductId, ProductId, REPLACE(PathProductIds, @SourceProductId, @DestProductId) PathProductIds FROM ProductMaterial WHERE RootProductId = @SourceProductId;
	

END


GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_GetProductElements]
  @ProductIds _INTVALUES READONLY,
  @SubId AS int
AS
BEGIN
		SELECT
			bom.ProductId ParentProductId,
			bom.ChildProductId ProductId,
			bom.Quantity,
			bom.Wastage,
			p.ProductCateId
		FROM ProductBom bom
		INNER JOIN Product p ON bom.ChildProductId = p.ProductId
		WHERE EXISTS (SELECT 0 FROM @ProductIds WHERE bom.ProductId = [Value]) AND bom.IsDeleted = 0
END

GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_GetTopMostBomProductIds]
	@InputProductIds _INTVALUES READONLY,
	@SubId AS int
AS

BEGIN
	;WITH tmp AS (
	SELECT 
		b.ProductId ParentId,
		b.ChildProductId ChildId
	FROM @InputProductIds c
	JOIN dbo.Product p ON p.ProductId = c.Value
	JOIN dbo.ProductBom b  ON b.ChildProductId = c.Value	
	WHERE b.IsDeleted = 0 AND p.SubsidiaryId = @SubId

	UNION ALL

	SELECT
		b.ProductId ParentId,
		b.ChildProductId ChildId
	FROM tmp c
	JOIN dbo.ProductBom b ON b.ChildProductId = c.ParentId
	WHERE b.IsDeleted = 0
)
 SELECT p.ParentId ProductId FROM
(
	SELECT DISTINCT ParentId FROM tmp

	UNION ALL

	SELECT Value FROM @InputProductIds
) p
LEFT JOIN dbo.ProductBom b ON p.ParentId = b.ChildProductId AND b.IsDeleted = 0
WHERE b.ProductBomId IS NULL

END


GO

USE StockDB
GO
CREATE OR ALTER VIEW [dbo].[RefInputBillBasic]
AS
SELECT        r.InputTypeId, r.InputBill_F_Id, r.so_ct, t.Title AS InputType_Title
FROM            AccountancyDB.dbo.InputValueRow AS r INNER JOIN
                         AccountancyDB.dbo.InputType AS t ON r.InputTypeId = t.InputTypeId
WHERE        (r.IsDeleted = 0)
GROUP BY r.InputTypeId, r.InputBill_F_Id, r.so_ct, t.Title


GO

USE StockDB
GO
CREATE OR ALTER VIEW [dbo].[RefTargetProductivity]
AS
SELECT        TargetProductivityId, TargetProductivityCode, TargetProductivityDate, Title, Description, IsDefault, Note, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc, IsDeleted
FROM            ManufacturingDB.dbo.TargetProductivity


GO

USE StockDB
GO
CREATE OR ALTER VIEW [dbo].[RefCustomerBasic]
AS
SELECT        CustomerId, CustomerCode, CustomerName
FROM            OrganizationDB.dbo.Customer


GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_ValidateBillDate]
	@SubId int = 0,
	@OldDate datetime2 = NULL,
	@BillDate datetime2 = NULL,
	@TimeZoneOffset INT = -420,
	@ResStatus bit  = 0 OUTPUT
AS
BEGIN
	EXEC [MasterDB].dbo.asp_ValidateBillDate
	@SubId = @SubId,
	@OldDate = @OldDate,
	@BillDate = @BillDate,
	@TimeZoneOffset = @TimeZoneOffset,
	@ResStatus = @ResStatus OUt
END

GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_InventoryProductByQuantity]
	@SubId int,
	@Tk nvarchar(128),
	@FromDate datetime2,
	@ToDate datetime2,
	@ProductCode nvarchar(128),
	@StockId int	
AS
BEGIN

	SELECT
		p.ProductId, 
		p.ProductCode, 
		p.ProductName,

		SUM(CASE WHEN i.[Date] < @FromDate THEN
				CASE WHEN i.InventoryTypeId = 1 THEN 
                d.PrimaryQuantity ELSE -d.PrimaryQuantity 
                END
			ELSE NULL
			END) AS dau_ky,

		SUM(CASE WHEN i.InventoryTypeId = 1 THEN d.PrimaryQuantity ELSE NULL END) AS nhap_trong_ky,

		SUM(CASE WHEN i.InventoryTypeId = 2 THEN d.PrimaryQuantity ELSE NULL END) AS xuat_trong_ky,

		SUM(CASE WHEN i.InventoryTypeId = 1 THEN d.PrimaryQuantity ELSE -d.PrimaryQuantity END) AS cuoi_ky

		FROM dbo.InventoryDetail d
			JOIN dbo.Inventory i ON d.InventoryId = i.InventoryId
			JOIN dbo.Product p ON d.ProductId = p.ProductId			

	WHERE d.SubsidiaryId = @SubId
		AND d.IsDeleted = 0
		AND i.[Date] BETWEEN @FromDate AND @ToDate
		AND i.IsApproved = 1
		--AND (LEN(ISNULL(@Tk,''))=0 OR d.Tk LIKE @Tk + '%')
		AND (ISNULL(@StockId,0)= 0 OR  i.StockId = @StockId)
		AND (LEN(ISNULL(@ProductCode,'')) = 0 OR p.ProductCode = @ProductCode)
	GROUP BY p.ProductId, p.ProductCode, p.ProductName
END

GO

USE StockDB
GO
CREATE OR ALTER VIEW [dbo].[v_Unit] AS 
							SELECT UnitId F_Id, UnitName, UnitStatusId, DecimalPlace
FROM [MasterDB].[dbo].Unit WHERE IsDeleted = 0

GO

USE StockDB
GO
CREATE OR ALTER VIEW [dbo].[VInventoryDetailLinked] AS WITH InventoryDetailLinked AS (
	SELECT
		ROW_NUMBER ( ) OVER ( ORDER BY i.StockId, id.ProductId, i.[Date], i.InventoryTypeId, i.InventoryId, id.InventoryDetailId ) AS RN,
		i.StockId,
		id.ProductId,
		id.InventoryDetailId,
		i.InventoryTypeId,
		id.PrimaryQuantity,
		id.PrimaryQuantityRemaning 
	FROM
		dbo.Inventory i
		JOIN dbo.InventoryDetail id ON i.InventoryId = id.InventoryId 
	WHERE
		i.IsApproved = 1 
		AND i.IsDeleted = 0 
		AND id.IsDeleted = 0
	)
SELECT
	IIF(l.ProductId = l1.ProductId, l1.PreviousRN, NULL) AS PreviousRN,
	l.* 
FROM
	InventoryDetailLinked AS l
	LEFT JOIN (
	SELECT
		l.RN AS PreviousRN,
		l.RN + 1 AS RN,
		l.StockId,
		l.ProductId,
		l.InventoryDetailId,
		l.InventoryTypeId,
		l.PrimaryQuantity,
		l.PrimaryQuantityRemaning 
	FROM
		InventoryDetailLinked AS l
	) l1 ON l.RN = l1.RN;

GO

USE StockDB
GO
-- =============================================
-- Author:		trungvt
-- Create date: 2020-05-11
-- Description:	Update primary quantity remaining
-- =============================================
CREATE OR ALTER PROCEDURE [dbo].[usp_InventoryDetail_UpdatePrimaryQuantityRemanings]
	@UpdatedInventoryId BIGINT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   BEGIN TRANSACTION

   DECLARE @UpdatedStockId INT
   DECLARE @CurrentDate DATETIME2   
   DECLARE @OldDate DATETIME2
   DECLARE @MinDate DATETIME2

   DECLARE @tblProductChanges TABLE
   (
	ProductId INT NOT NULL
   )

   SELECT @CurrentDate = [Date], @UpdatedStockId = StockId FROM dbo.Inventory WHERE InventoryId = @UpdatedInventoryId --AND IsApproved = 1;

   IF(@CurrentDate IS NULL)
   BEGIN
	ROLLBACK
       RETURN 0;
   END
    

   SELECT @OldDate = OldDate FROM dbo.InventoryChange WHERE InventoryId = @UpdatedInventoryId

   IF @OldDate IS NULL
   BEGIN
        INSERT dbo.InventoryChange
		    (
		        InventoryId,
		        OldDate,
		        IsSync,
		        LastSyncTime
		    )
		    VALUES
		    (   @UpdatedInventoryId,             -- InventoryId - bigint
		        @CurrentDate, -- OldDate - datetime2(7)
		        1,          -- IsSync - bit
		        GETUTCDATE()  -- LastSyncTime - datetime2(7)
		        )
   END
   ELSE
   BEGIN
       UPDATE dbo.InventoryChange
			SET OldDate = @CurrentDate,
				IsSync = 1
			WHERE InventoryId = @UpdatedInventoryId
            
   END

   SET @MinDate = @CurrentDate
   IF @OldDate < @CurrentDate
   BEGIN
       SET @MinDate = @OldDate       
   END

   INSERT INTO @tblProductChanges
   (
       ProductId
   )
   SELECT ISNULL(d.ProductId, c.ProductId) 
		FROM 
			(SELECT * FROM dbo.InventoryDetail AS d1 WHERE d1.InventoryId = @UpdatedInventoryId AND d1.IsDeleted = 0) AS d
			FULL OUTER JOIN (SELECT * FROM dbo.InventoryDetailChange AS c1 WHERE c1.InventoryId = @UpdatedInventoryId AND c1.IsDeleted = 0) AS c 
				ON d.InventoryDetailId = c.InventoryDetailId
		WHERE @OldDate <> @CurrentDate 
			OR c.InventoryDetailId IS NULL 
			OR d.InventoryDetailId IS NULL 
			OR c.OldPrimaryQuantity <> d.PrimaryQuantity;

	UPDATE c
		SET c.IsDeleted = 1         
	FROM dbo.InventoryDetailChange AS c
		LEFT JOIN (SELECT * FROM dbo.InventoryDetail AS d1 WHERE d1.InventoryId = @UpdatedInventoryId AND d1.IsDeleted = 0) AS d 
			ON d.InventoryDetailId = c.InventoryDetailId
		WHERE c.InventoryId = @UpdatedInventoryId
			AND c.IsDeleted = 0
			AND d.InventoryDetailId IS NULL;

	INSERT INTO dbo.InventoryDetailChange
	(
			InventoryDetailId,
			InventoryId,
			StockId,
			OldPrimaryQuantity,
			IsDeleted,
			ProductId
	)
	SELECT d.InventoryDetailId,
			d.InventoryId,
			@UpdatedStockId,
			d.PrimaryQuantity,
			0,
			d.ProductId
		FROM dbo.InventoryDetail AS d
			LEFT JOIN (SELECT * FROM dbo.InventoryDetailChange AS c1 WHERE c1.InventoryId = @UpdatedInventoryId AND c1.IsDeleted = 0) AS c
				ON d.InventoryDetailId = c.InventoryDetailId
		WHERE d.InventoryId = @UpdatedInventoryId
			AND d.IsDeleted = 0
			AND c.InventoryDetailId IS NULL

	DECLARE @LastStockId INT = 0
	DECLARE @LastProductId INT = 0
	DECLARE @LastPrimaryQuantity DECIMAL(32,12)=0

	DECLARE @InventoryTypeId INT
	DECLARE @InventoryDetailId BIGINT
	DECLARE @InventoryId BIGINT
	DECLARE @Date DATETIME2
	DECLARE @StockId INT
	DECLARE @ProductId INT
	DECLARE @PrimaryQuantity DECIMAL(32,12)

	DECLARE cursor_product CURSOR LOCAL READ_ONLY FORWARD_ONLY
	FOR SELECT 
			iv.InventoryTypeId,
			d.InventoryDetailId,
			iv.InventoryId,
			iv.[Date],
			iv.StockId,
			d.ProductId,
			d.PrimaryQuantity         
		FROM dbo.Inventory iv 
			JOIN dbo.InventoryDetail d ON d.InventoryId = iv.InventoryId		
		WHERE iv.IsApproved = 1 
			AND iv.IsDeleted = 0 
			AND d.IsDeleted = 0
			AND iv.[Date] >= @MinDate
			AND EXISTS(SELECT 0 FROM @tblProductChanges x WHERE x.ProductId = d.ProductId)

		ORDER BY iv.StockId, 
				d.ProductId, 
				iv.[Date], 
				iv.InventoryTypeId, 
				iv.InventoryId, 
				d.InventoryDetailId

	OPEN cursor_product;

	FETCH NEXT FROM cursor_product INTO 
		@InventoryTypeId,
		@InventoryDetailId,
		@InventoryId,
		@Date,
		@StockId, 
		@ProductId,
		@PrimaryQuantity;

	WHILE @@FETCH_STATUS = 0
		BEGIN
        
			IF @StockId <> @LastStockId OR @ProductId <> @LastProductId
			BEGIN			
				SET @LastPrimaryQuantity = 0
			END
			SET @LastStockId = @StockId
			SET @LastProductId = @ProductId

			IF @InventoryTypeId = 1
			BEGIN
				SET @LastPrimaryQuantity = @LastPrimaryQuantity + @PrimaryQuantity
			END
			ELSE
			BEGIN
				SET @LastPrimaryQuantity = @LastPrimaryQuantity - @PrimaryQuantity
			END
		
			UPDATE TOP(1) dbo.InventoryDetail SET PrimaryQuantityRemaning = @LastPrimaryQuantity WHERE InventoryDetailId = @InventoryDetailId

			FETCH NEXT FROM cursor_product INTO
				@InventoryTypeId,
				@InventoryDetailId,
				@InventoryId,
				@Date,
				@StockId, 
				@ProductId,
				@PrimaryQuantity;
		END;

	CLOSE cursor_product;

	DEALLOCATE cursor_product;

	COMMIT TRANSACTION
END

GO

USE StockDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_Product_CheckUsed_ByList]
	@ProductIds [_INTVALUES] READONLY,
	@OutProductId int OUTPUT,
	@OutMessage NVARCHAR(512) OUTPUT
AS
BEGIN
	DECLARE @LINK_DATA_OBJECT_TYPE_PRODUCT INT = 1;
	DECLARE @CONTAINER_TYPE_PRODUCTION_ORDER INT = 2;

	SET @OutProductId = null;
	--StockDB
	DECLARE @InventoryType_Input INT = 1
	SELECT TOP 1 @OutProductId = d.ProductId, 
		@OutMessage = CASE WHEN iv.InventoryTypeId = @InventoryType_Input THEN N'Nhập kho' ELSE N'Xuất kho' END + '. Mã: ' + iv.InventoryCode
	FROM StockDB.dbo.InventoryDetail d JOIN dbo.Inventory iv ON iv.InventoryId = d.InventoryId 
	WHERE d.ProductId in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;

	DECLARE @InventoryRequirementType_Input INT = 1
	SELECT TOP 1 @OutProductId = d.ProductId,
		@OutMessage = CASE WHEN r.InventoryRequirementTypeId = @InventoryRequirementType_Input THEN N'Yêu cầu nhập kho' ELSE N'Yêu cầu xuất kho' END + '. Mã: ' + r.InventoryRequirementCode	
	FROM StockDB.dbo.InventoryRequirementDetail d  JOIN dbo.InventoryRequirement r ON r.InventoryRequirementId = d.InventoryRequirementId
	WHERE d.ProductId in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;

	SELECT TOP 1 @OutProductId = d.ProductId,
		@OutMessage = N'Mặt hàng đã từng nhập kho'
	FROM StockDB.dbo.StockProduct d WHERE d.ProductId in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;

	SELECT TOP 1 @OutProductId = d.ChildProductId,
		@OutMessage = N'Thành phần cấu thành (BOM) mặt hàng ' + p.ProductCode
	FROM StockDB.dbo.ProductBom d 
		JOIN dbo.Product p ON p.ProductId = d.ChildProductId
	WHERE d.ChildProductId in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;

	SELECT TOP 1 @OutProductId = d.ProductId,
		@OutMessage = N'Là vật tư tiêu hao của mặt hàng ' + p.ProductCode
	FROM StockDB.dbo.ProductMaterialsConsumption d 
		JOIN dbo.Product p ON p.ProductId = d.ProductId
	WHERE d.MaterialsConsumptionId in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;
	

	--PurchaseOrderDB

	SELECT TOP 1 @OutProductId = d.ProductId,
		@OutMessage = N'Yêu cầu mua hàng ' + r.PurchasingRequestCode
	FROM PurchaseOrderDB.dbo.PurchasingRequestDetail d JOIN PurchaseOrderDB.dbo.PurchasingRequest r ON r.PurchasingRequestId = d.PurchasingRequestId
	WHERE d.ProductId in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;

	SELECT TOP 1 @OutProductId = d.ProductId,
		@OutMessage = N'Đề nghị mua hàng ' + s.PurchasingSuggestCode
	FROM PurchaseOrderDB.dbo.PurchasingSuggestDetail d JOIN PurchaseOrderDB.dbo.PurchasingSuggest s ON s.PurchasingSuggestId = d.PurchasingSuggestId
	WHERE d.ProductId in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;

	SELECT TOP 1 @OutProductId = d.ProductId,
		@OutMessage = N'Đơn đặt mua/gia công ' + po.PurchaseOrderCode
	FROM PurchaseOrderDB.dbo.PurchaseOrderDetail d JOIN PurchaseOrderDB.dbo.PurchaseOrder po ON po.PurchaseOrderId = d.PurchaseOrderId
	WHERE d.ProductId in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;

	SELECT TOP 1 @OutProductId = d.ProductId,
		@OutMessage = N'Vật tư dư thừa Đơn đặt mua/gia công ' + po.PurchaseOrderCode
	FROM PurchaseOrderDB.dbo.PurchaseOrderExcess d JOIN PurchaseOrderDB.dbo.PurchaseOrder po ON po.PurchaseOrderId = d.PurchaseOrderId
	WHERE d.ProductId in (Select [Value] from @ProductIds) AND d.IsDeleted=0 AND po.IsDeleted = 0
	IF @OutProductId IS NOT NULL RETURN 0;

	SELECT TOP 1 @OutProductId = d.ProductId,
		@OutMessage = N'Báo giá nhà cung cấp ' + r.PoProviderPricingCode
	FROM PurchaseOrderDB.dbo.PoProviderPricingDetail d JOIN PurchaseOrderDB.dbo.PoProviderPricing r ON r.PoProviderPricingId = d.PoProviderPricingId
	WHERE d.ProductId in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;

	SELECT TOP 1 @OutProductId = d.ProductId,
		@OutMessage = N'Tên gọi khác phía nhà cung cấp ' + d.ProviderProductName
	FROM PurchaseOrderDB.dbo.ProviderProductInfo d
	WHERE d.ProductId in (Select [Value] from @ProductIds)
	IF @OutProductId IS NOT NULL RETURN 0;

	--Voucher
	
	SELECT TOP 1 @OutProductId = d.vthhtp,
		@OutMessage = N'Chứng từ bán hàng ' + t.Title + ' ' + d.so_ct
	FROM PurchaseOrderDB.dbo.VoucherValueRow d 
		JOIN PurchaseOrderDB.dbo.VoucherType t ON t.VoucherTypeId = d.VoucherTypeId
	WHERE d.vthhtp in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;

	--Accountancy
	SELECT TOP 1 @OutProductId = d.vthhtp,
		@OutMessage = N'Chứng từ kế toán ' + t.Title + ' ' + d.so_ct
	FROM AccountancyDB.dbo.InputValueRow d 
		JOIN AccountancyDB.dbo.InputType t ON t.InputTypeId = d.InputTypeId
	WHERE d.vthhtp in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;

	--Maufacturing
	SELECT TOP 1 @OutProductId = d.ProductId,
		@OutMessage = N'Lệnh sản xuất ' + o.ProductionOrderCode
	FROM ManufacturingDB.dbo.ProductionOrderDetail d JOIN ManufacturingDB.dbo.ProductionOrder o ON o.ProductionOrderId = d.ProductionOrderId
	WHERE d.ProductId in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;
	
	SELECT TOP 1 @OutProductId = d.LinkDataObjectId,
		@OutMessage = N'Quy trình sản xuất của lệnh ' + o.ProductionOrderCode
	FROM ManufacturingDB.dbo.ProductionStepLinkData d 
		JOIN ManufacturingDB.dbo.ProductionStepLinkDataRole r ON r.ProductionStepLinkDataId = d.ProductionStepLinkDataId
		JOIN ManufacturingDB.dbo.ProductionStep s ON s.ProductionStepId = r.ProductionStepId
		JOIN ManufacturingDB.dbo.ProductionOrder o ON o.ProductionOrderId = s.ContainerId AND s.ContainerTypeId = @CONTAINER_TYPE_PRODUCTION_ORDER 
	WHERE d.LinkDataObjectTypeId = @LINK_DATA_OBJECT_TYPE_PRODUCT 
		AND d.LinkDataObjectId in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	IF @OutProductId IS NOT NULL RETURN 0;
	RETURN 0;
END


GO

USE StockDB
GO
CREATE OR ALTER VIEW [dbo].[_vMappingOusideImportObject]
AS
SELECT        o.OutsideImportMappingFunctionId, f.MappingFunctionKey, f.InputTypeId, o.SourceId, o.InputBill_F_Id, o.BillObjectTypeId
FROM            MasterDB.dbo.OutsideImportMappingObject AS o INNER JOIN
                         MasterDB.dbo.OutsideImportMappingFunction AS f ON o.OutsideImportMappingFunctionId = f.OutsideImportMappingFunctionId


GO

USE StockDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_Inventory_ReportProductConversion]	
	@SubId INT,
	@Keyword NVARCHAR(512),
	@StockIds _INTVALUES READONLY,
	@ProductTypeIds _INTVALUES  READONLY,
	@ProductCateIds _INTVALUES  READONLY,
	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@Page INT,
	@Size INT
AS
BEGIN
	SET @Keyword = CONCAT('%',ISNULL(@Keyword,''),'%')
	DECLARE @IsSearchByProductType BIT = 0
	DECLARE @IsSearchByProductCate BIT = 0
	DECLARE @IsSearchByStock BIT = 0

	IF EXISTS(SELECT 0 FROM @ProductTypeIds)
	BEGIN
		SET @IsSearchByProductType = 1
	END

	IF EXISTS(SELECT 0 FROM @ProductCateIds)
	BEGIN
		SET @IsSearchByProductCate = 1
	END

	IF EXISTS(SELECT 0 FROM @StockIds)
	BEGIN
		SET @IsSearchByStock = 1
	END

	;WITH products AS
	(
		SELECT p.ProductId, p.ProductCode, p.ProductName, p.UnitId
		FROM dbo.Product p 
		LEFT JOIN @ProductTypeIds t ON p.ProductTypeId = t.[Value]
		LEFT JOIN @ProductCateIds c ON p.ProductCateId = c.[Value]
		WHERE 
		p.SubsidiaryId = @SubId 
		AND (ISNULL(@Keyword,'') = '' OR p.ProductCode LIKE @Keyword OR p.ProductName LIKE @Keyword)
		AND (@IsSearchByProductType = 0 OR t.[Value]>0)
		AND (@IsSearchByProductCate = 0 OR c.[Value]>0)

	),startBalance AS
	(
		SELECT d.ProductId, d.ProductUnitConversionId, 
			SUM(CASE iv.InventoryTypeId WHEN 1 THEN d.PrimaryQuantity ELSE -d.PrimaryQuantity END) PrimaryRemaing,
			SUM(CASE iv.InventoryTypeId WHEN 1 THEN d.ProductUnitConversionQuantity ELSE -d.ProductUnitConversionQuantity END) ProductUnitConversionRemaining

		FROM dbo.Inventory iv 
			JOIN dbo.InventoryDetail d ON iv.InventoryId = d.InventoryId		
			LEFT JOIN @StockIds s ON iv.StockId = s.[Value]
		WHERE iv.IsDeleted = 0 AND d.IsDeleted = 0 AND iv.IsApproved = 1
			AND iv.SubsidiaryId = @SubId 
			AND iv.[Date] < @FromDate
			AND (@IsSearchByStock=0 OR s.[Value]>0)
		GROUP BY d.ProductId, d.ProductUnitConversionId
	), endBalance AS
	(
		SELECT d.ProductId, d.ProductUnitConversionId, 
			SUM(CASE iv.InventoryTypeId WHEN 1 THEN d.PrimaryQuantity ELSE -d.PrimaryQuantity END) PrimaryRemaing,
			SUM(CASE iv.InventoryTypeId WHEN 1 THEN d.ProductUnitConversionQuantity ELSE -d.ProductUnitConversionQuantity END) ProductUnitConversionRemaining,
			SUM(CASE iv.InventoryTypeId WHEN 2 THEN d.PrimaryQuantity ELSE NULL END) EndOutPrimaryQuantity

		FROM dbo.Inventory iv 
			JOIN dbo.InventoryDetail d ON iv.InventoryId = d.InventoryId
			LEFT JOIN @StockIds s ON iv.StockId = s.[Value]
		WHERE iv.IsDeleted = 0 AND d.IsDeleted = 0 AND iv.IsApproved = 1
			AND iv.SubsidiaryId = @SubId 
			AND iv.[Date] <= @ToDate
			AND (@IsSearchByStock=0 OR s.[Value]>0)
		GROUP BY d.ProductId, d.ProductUnitConversionId
	), inout AS 
	(
		SELECT d.ProductId, d.ProductUnitConversionId, 
			SUM(CASE iv.InventoryTypeId WHEN 1 THEN d.PrimaryQuantity ELSE NULL END) InPrimary,
			SUM(CASE iv.InventoryTypeId WHEN 1 THEN d.ProductUnitConversionQuantity ELSE NULL END) InProductUnitConversion,

			SUM(CASE iv.InventoryTypeId WHEN 2 THEN d.PrimaryQuantity ELSE NULL END) OutPrimaryRemaing,
			SUM(CASE iv.InventoryTypeId WHEN 2 THEN d.ProductUnitConversionQuantity ELSE NULL END) OutProductUnitConversion

		FROM dbo.Inventory iv 
			JOIN dbo.InventoryDetail d ON iv.InventoryId = d.InventoryId
			LEFT JOIN @StockIds s ON iv.StockId = s.[Value]
		WHERE iv.IsDeleted = 0 AND d.IsDeleted = 0 AND iv.IsApproved = 1
			AND iv.SubsidiaryId = @SubId 
			AND iv.[Date] BETWEEN @FromDate AND @ToDate
			AND (@IsSearchByStock=0 OR s.[Value]>0)
		GROUP BY d.ProductId, d.ProductUnitConversionId
	), inputMax AS
	(
		SELECT v.ProductId, v.ProductUnitConversionId, MIN([Date]) [MaxInputDate] 
		FROM
		(
					SELECT 
						d.ProductId, 
						d.ProductUnitConversionId, 
						iv.[Date], 
						iv.InventoryId, 
						d.InventoryDetailId,
						SUM(d.PrimaryQuantity) OVER (PARTITION BY d.ProductId, d.ProductUnitConversionId ORDER BY iv.[Date], iv.InventoryId, d.InventoryDetailId) AS SumPrimaryInput,
						endBalance.EndOutPrimaryQuantity

					FROM dbo.Inventory iv 
						JOIN dbo.InventoryDetail d ON iv.InventoryId = d.InventoryId
						LEFT JOIN @StockIds s ON iv.StockId = s.[Value]
						LEFT JOIN endBalance ON d.ProductId = endBalance.ProductId AND d.ProductUnitConversionId = endBalance.ProductUnitConversionId
					WHERE iv.IsDeleted = 0 AND d.IsDeleted = 0 AND iv.IsApproved = 1
						AND iv.SubsidiaryId = @SubId 
						AND (@IsSearchByStock=0 OR s.[Value]>0)
						AND iv.InventoryTypeId = 1
		) v	
		WHERE v.SumPrimaryInput>ISNULL(v.EndOutPrimaryQuantity,0)
		GROUP BY v.ProductId, v.ProductUnitConversionId
	), avaiableProduct AS(
			SELECT
				DENSE_RANK() OVER(ORDER BY p.ProductCode, p.ProductId) RankNumber,
				p.ProductCode,
				p.ProductName,
				p.UnitId,
				ISNULL(endBalance.ProductId, inout.ProductId)								ProductId,
				ISNULL(endBalance.ProductUnitConversionId, inout.ProductUnitConversionId)	ProductUnitConversionId,
				inout.InPrimary,
				inout.InProductUnitConversion,
				inout.OutPrimaryRemaing,
				inout.OutProductUnitConversion,
				endBalance.PrimaryRemaing,
				endBalance.ProductUnitConversionRemaining
			FROM
			endBalance FULL JOIN inout ON endBalance.ProductId = inout.ProductId AND endBalance.ProductUnitConversionId = inout.ProductUnitConversionId
			JOIN products p ON ISNULL(endBalance.ProductId, inout.ProductId) = p.ProductId
			WHERE endBalance.PrimaryRemaing>0 OR inout.ProductId IS NOT NULL	
	)
	SELECT
			v.RankNumber,
			v.ProductId,
			v.ProductCode,
			v.ProductName,
			v.UnitId,
			v.ProductUnitConversionId,
			c.ProductUnitConversionName, 
			v.PrimaryRemaing,
			v.ProductUnitConversionRemaining,
			startBalance.PrimaryRemaing StartPrimaryRemaing,
			startBalance.ProductUnitConversionRemaining StartProductUnitConversionRemaining,

			v.InPrimary,
			v.InProductUnitConversion,
			v.OutPrimaryRemaing,
			v.OutProductUnitConversion,

			inputMax.MaxInputDate,
			t.TotalRecord
		FROM avaiableProduct v		
		CROSS JOIN (SELECT Max(RankNumber) AS TotalRecord FROM avaiableProduct) AS t

		LEFT JOIN startBalance ON v.ProductId = startBalance.ProductId AND v.ProductUnitConversionId = startBalance.ProductUnitConversionId
		LEFT JOIN inputMax ON v.ProductId = inputMax.ProductId AND v.ProductUnitConversionId = inputMax.ProductUnitConversionId
		LEFT JOIN dbo.ProductUnitConversion c ON v.ProductUnitConversionId = c.ProductUnitConversionId

		WHERE v.RankNumber BETWEEN (@Page-1)*@Size + 1 AND  @Page*@Size
		ORDER BY v.RankNumber
END

GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_GetProductBom]
  @ProductId AS int ,
	@SubId AS int
AS
BEGIN
	WITH prd_bom AS (
		SELECT
				ProductBomId,
				ProductId,
				ChildProductId,
				ProductId ParentProductId,
				1 AS Level,
				Quantity,
				Wastage,
				CONVERT(nvarchar(max), CONCAT('', ProductId, '')) AS PathProductIds,
				CONVERT(nvarchar(max), ROW_NUMBER() OVER(ORDER BY SortOrder)) AS NumberOrder,
				ROW_NUMBER() OVER(ORDER BY SortOrder) * POWER(CONVERT(DECIMAL(3,0),100), 10) AS SortOrder,
				InputStepId,
				OutputStepId,
				CAST(ISNULL(Quantity * Wastage, 0) as decimal(18,5)) AS TotalQuantity,
				[Description]
				FROM dbo.ProductBom 
		WHERE ProductId = @ProductId AND IsDeleted = 0 AND ProductId <> ChildProductId
		UNION ALL
		SELECT
				child.ProductBomId,
				child.ProductId, 
				child.ChildProductId,
				bom.ProductId ParentProductId,
				bom.Level + 1 AS Level,
				child.Quantity,
				child.Wastage,
				CONVERT(nvarchar(max), CONCAT(bom.PathProductIds, ',', child.ProductId, '')) AS PathProductIds,
				CONVERT(nvarchar(max), CONCAT(bom.NumberOrder,'.', ROW_NUMBER() OVER(ORDER BY child.SortOrder))) NumberOrder,
				bom.SortOrder + ROW_NUMBER() OVER(ORDER BY child.SortOrder) * POWER(CONVERT(DECIMAL(3,0),100), 10 - bom.Level) AS SortOrder,
				child.InputStepId,
				child.OutputStepId,
				CAST(ISNULL(child.Quantity * child.Wastage, 0) * bom.TotalQuantity as decimal(18,5)) AS TotalQuantity,
				child.[Description]
			FROM dbo.ProductBom child
					INNER JOIN prd_bom bom ON bom.ChildProductId = child.ProductId
			WHERE child.IsDeleted = 0 
										AND NOT EXISTS (SELECT 1 FROM dbo.ProductMaterial m WHERE m.RootProductId = @ProductId AND m.ProductId = child.ProductId AND m.PathProductIds = bom.PathProductIds)
										AND CHARINDEX(CONCAT(',', child.ChildProductId, ','), CONCAT(',', bom.PathProductIds, ','), 0) <= 0
										AND child.ProductId <> child.ChildProductId
		)
		SELECT 
			bom.*,
			p.ProductCode,
			p.ProductName, 
			u.UnitName,
			u.F_Id UnitId,
			pei.Specification,
			CONVERT(BIT, CASE WHEN m.ProductId IS NOT NULL THEN 1 ELSE 0 END) AS IsMaterial,
			CONVERT(BIT, CASE WHEN ig.ProductId IS NOT NULL THEN 1 ELSE 0 END) AS IsIgnoreStep,
			ucs.ProductUnitConversionId,
			ucs.DecimalPlace
		FROM prd_bom bom
		LEFT JOIN dbo.ProductMaterial m ON m.RootProductId = @ProductId AND m.ProductId = bom.ChildProductId AND m.PathProductIds = bom.PathProductIds
		LEFT JOIN dbo.ProductIgnoreStep ig ON ig.RootProductId = @ProductId AND ig.ProductId = bom.ChildProductId AND ig.PathProductIds = bom.PathProductIds
		LEFT JOIN dbo.Product p ON bom.ChildProductId = p.ProductId
		LEFT JOIN dbo.ProductExtraInfo pei ON bom.ChildProductId = pei.ProductId
		LEFT JOIN dbo.v_Unit u ON p.UnitId = u.F_Id
		LEFT JOIN dbo.ProductUnitConversion ucs ON p.UnitId = ucs.SecondaryUnitId AND p.ProductId = ucs.ProductId and ucs.IsDefault = 1
		ORDER BY bom.SortOrder;
END

GO

USE StockDB
GO

CREATE OR ALTER PROCEDURE [dbo].[usp_InventoryDetail_UpdateQuantityRemanings_Init]
AS
BEGIN
	DECLARE @MINIMUM_ACCEPT_DECIMAL_NUMBER DECIMAL(32,12)= 0.0000000001
	DECLARE @tblProductUnitConversionQuantity TABLE(
		ProductUnitConversionId int,
		Quantity decimal(32,12)
	)

	BEGIN TRANSACTION

	TRUNCATE TABLE dbo.InventoryChange
	TRUNCATE TABLE dbo.InventoryDetailChange

	DECLARE @LastStockId INT = 0
	DECLARE @LastProductId INT = 0
	DECLARE @LastPrimaryQuantity DECIMAL(32,12)=0
	DECLARE @LastProductUnitConversionQuantity DECIMAL(32,12)=0

	DECLARE @InventoryTypeId INT
	DECLARE @InventoryDetailId BIGINT
	DECLARE @InventoryId BIGINT
	DECLARE @Date DATETIME2
	DECLARE @StockId INT
	DECLARE @ProductId INT
	DECLARE @ProductUnitConversionId INT
	DECLARE @ProductUnitConversionQuantity DECIMAL(32,12)
	DECLARE @PrimaryQuantity DECIMAL(32,12)


	DECLARE cursor_product CURSOR LOCAL READ_ONLY FORWARD_ONLY
	FOR SELECT 
			iv.InventoryTypeId,
			d.InventoryDetailId,
			iv.InventoryId,
			iv.[Date],
			iv.StockId,
			d.ProductId,
			d.ProductUnitConversionId,
			d.ProductUnitConversionQuantity,
			d.PrimaryQuantity         
		FROM dbo.Inventory iv 
			JOIN dbo.InventoryDetail d ON d.InventoryId = iv.InventoryId
		WHERE iv.IsApproved = 1 
			AND iv.IsDeleted = 0 
			AND d.IsDeleted = 0
		ORDER BY iv.StockId, 
				d.ProductId, 
				iv.[Date], 
				iv.InventoryTypeId, 
				iv.InventoryId, 
				d.InventoryDetailId

	OPEN cursor_product;

	FETCH NEXT FROM cursor_product INTO 
		@InventoryTypeId,
		@InventoryDetailId,
		@InventoryId,
		@Date,
		@StockId, 
		@ProductId,
		@ProductUnitConversionId,
		@ProductUnitConversionQuantity,
		@PrimaryQuantity;

	WHILE @@FETCH_STATUS = 0
		BEGIN
        
			IF @StockId <> @LastStockId OR @ProductId <> @LastProductId
			BEGIN			
				SET @LastPrimaryQuantity = 0
				DELETE FROM @tblProductUnitConversionQuantity
			END

			SET @LastProductUnitConversionQuantity = NULL
			SELECT @LastProductUnitConversionQuantity = Quantity FROM @tblProductUnitConversionQuantity WHERE ProductUnitConversionId = @ProductUnitConversionId

			IF @LastProductUnitConversionQuantity IS NULL
			BEGIN
				INSERT INTO @tblProductUnitConversionQuantity
				(
					ProductUnitConversionId,
					Quantity
				)
				VALUES
				(
					@ProductUnitConversionId, -- ProductUnitConversionId - int
					@ProductUnitConversionQuantity -- Quantity - decimal
				)
				SET @LastProductUnitConversionQuantity = 0
			END
			

			SET @LastStockId = @StockId
			SET @LastProductId = @ProductId

			IF @InventoryTypeId = 1
			BEGIN
				SET @LastPrimaryQuantity = @LastPrimaryQuantity + @PrimaryQuantity
				SET @LastProductUnitConversionQuantity = @LastProductUnitConversionQuantity + @ProductUnitConversionQuantity
			END
			ELSE
			BEGIN
				SET @LastPrimaryQuantity = @LastPrimaryQuantity - @PrimaryQuantity
				SET @LastProductUnitConversionQuantity = @LastProductUnitConversionQuantity - @ProductUnitConversionQuantity
			END
		
		
			DECLARE @PrimaryDecimalPlace INT = 11
			DECLARE @PuDecimalPlace INT = 11

			SELECT @PrimaryDecimalPlace = DecimalPlace FROM dbo.ProductUnitConversion WHERE ProductId = @ProductId AND IsDefault = 1
			SELECT @PuDecimalPlace = DecimalPlace FROM dbo.ProductUnitConversion WHERE ProductId = @ProductId AND ProductUnitConversionId = @ProductUnitConversionId

			SET @PrimaryDecimalPlace = ISNULL(@PrimaryDecimalPlace,11)
			SET @PuDecimalPlace = ISNULL(@PuDecimalPlace,11)

			IF ABS(ROUND(@LastPrimaryQuantity,@PrimaryDecimalPlace)) < @MINIMUM_ACCEPT_DECIMAL_NUMBER
			BEGIN
			    SET @LastPrimaryQuantity = 0
			END

			IF ABS(ROUND(@LastProductUnitConversionQuantity,@PuDecimalPlace)) < @MINIMUM_ACCEPT_DECIMAL_NUMBER
			BEGIN
			    SET @LastProductUnitConversionQuantity = 0
			END

			IF @LastPrimaryQuantity = 0
			BEGIN
				SET @LastProductUnitConversionQuantity = 0
			END

			IF @LastProductUnitConversionQuantity = 0 AND @LastPrimaryQuantity < 0
			BEGIN
			    SET @LastPrimaryQuantity = 0
			END

			UPDATE TOP(1) dbo.InventoryDetail SET PrimaryQuantityRemaning = @LastPrimaryQuantity, ProductUnitConversionQuantityRemaning = @LastProductUnitConversionQuantity  WHERE InventoryDetailId = @InventoryDetailId

			UPDATE @tblProductUnitConversionQuantity SET Quantity = @LastProductUnitConversionQuantity WHERE ProductUnitConversionId = @ProductUnitConversionId

			IF NOT EXISTS (SELECT 0 FROM dbo.InventoryChange WHERE InventoryId = @InventoryId)
			BEGIN
				INSERT dbo.InventoryChange
				(
					InventoryId,
					OldDate,
					IsSync,
					LastSyncTime
				)
				VALUES
				(   @InventoryId,             -- InventoryId - bigint
					@Date, -- OldDate - datetime2(7)
					1,          -- IsSync - bit
					GETUTCDATE()  -- LastSyncTime - datetime2(7)
					)
			END

			INSERT INTO dbo.InventoryDetailChange
			(
				InventoryDetailId,
				InventoryId,
				StockId,
				OldPrimaryQuantity,
				IsDeleted,
				ProductId
			)
			VALUES
			(   @InventoryDetailId,    -- InventoryDetailId - bigint
				@InventoryId,    -- InventoryId - bigint
				@StockId,    -- StockId - int
				@PrimaryQuantity, -- OldPrimaryQuantity - decimal(32, 12)
				0, -- IsDeleted - bit
				@ProductId     -- ProductId - int
			)


			FETCH NEXT FROM cursor_product INTO
				@InventoryTypeId,
				@InventoryDetailId,
				@InventoryId,
				@Date,
				@StockId, 
				@ProductId,
				@ProductUnitConversionId,
				@ProductUnitConversionQuantity,
				@PrimaryQuantity;
		END;

	CLOSE cursor_product;

	DEALLOCATE cursor_product;

	COMMIT
END



GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_Inventory_PrimaryQuantityBefore]
	@FromDate datetime2,
	@ToDate datetime2,
	@ByProductId int,
	@StockIds nvarchar(1024)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @tblStockIds TABLE(
	   StockId BIGINT
	)
	INSERT INTO @tblStockIds SELECT [value] FROM dbo.ufn_Split(@StockIds,',') WHERE [value] != '';

	DECLARE @IsFilterByStock BIT = 0;
	IF EXISTS(SELECT 0 FROM @tblStockIds)
	BEGIN
		SET @IsFilterByStock = 1;
	END

	DECLARE @BeforePrimaryQuantity decimal(32,12)

	;WITH beforerange AS (
	  SELECT i.StockId, d.ProductId, d.PrimaryQuantityRemaning, ROW_NUMBER() OVER (PARTITION BY i.StockId, d.ProductId ORDER BY i.Date DESC, i.InventoryTypeId DESC, i.InventoryId DESC, d.InventoryDetailId DESC) AS rn
	  FROM StockDB.dbo.Inventory as i
	  JOIN StockDB.dbo.InventoryDetail as d ON i.InventoryId = d.InventoryId
	  WHERE i.IsDeleted = 0
		AND d.IsDeleted = 0
		AND i.IsApproved = 1
		AND i.Date < @FromDate
		AND d.ProductId = @ByProductId
		AND (@IsFilterByStock = 0 OR EXISTS(SELECT 0 FROM @tblStockIds f WHERE f.StockId = i.StockId))
	)

	SELECT
		sd.ProductId,
		sd.BeforeQuantity,	
		p.ProductCode, 
		p.ProductName, 
		u.UnitId,
		u.UnitName
	FROM(
		SELECT b.ProductId, 
			SUM(b.PrimaryQuantityRemaning) AS BeforeQuantity	
		FROM beforerange b WHERE b.rn = 1
		GROUP BY b.ProductId
	) AS sd
	LEFT JOIN StockDB.dbo.Product as p on sd.ProductId = p.ProductId
	LEFT JOIN MasterDB.dbo.Unit as u on p.UnitId = u.UnitId
END


GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_Report_ProductConversion]
	@SubId INT,
	@Keyword NVARCHAR(512),
	@StockIds _INTVALUES READONLY,
	@ProductTypeIds _INTVALUES READONLY,
	@ProductCateIds _INTVALUES READONLY,
	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@Page INT,
	@Size INT,
	@Filter NVARCHAR(max)
AS
BEGIN
	SET ARITHABORT ON;
	SET @Keyword = CONCAT('%',ISNULL(@Keyword,''),'%')
	DECLARE @IsSearchByProductType BIT = 0
	DECLARE @IsSearchByProductCate BIT = 0
	DECLARE @IsSearchByStock BIT = 0

	IF EXISTS(SELECT 0 FROM @ProductTypeIds)
	BEGIN
			SET @IsSearchByProductType = 1
	END

	IF EXISTS(SELECT 0 FROM @ProductCateIds)
	BEGIN
			SET @IsSearchByProductCate = 1
	END

	IF EXISTS(SELECT 0 FROM @StockIds)
	BEGIN
			SET @IsSearchByStock = 1
	END
	
 ;WITH products AS
	(
			SELECT p.ProductId, p.ProductCode, p.ProductName, p.UnitId
			FROM dbo.Product p 
			LEFT JOIN @ProductTypeIds t ON p.ProductTypeId = t.[Value]
			LEFT JOIN @ProductCateIds c ON p.ProductCateId = c.[Value]
			WHERE 
			p.SubsidiaryId = @SubId 
			AND (ISNULL(@Keyword,'') = '' OR p.ProductCode LIKE @Keyword OR p.ProductName LIKE @Keyword)
			AND (@IsSearchByProductType = 0 OR t.[Value]>0)
			AND (@IsSearchByProductCate = 0 OR c.[Value]>0)

	),
	balance AS 
	(
		SELECT 
			d.ProductId,
			d.ProductUnitConversionId, 
			SUM(
				CASE 
					WHEN iv.InventoryTypeId = 1 AND iv.[Date] < @FromDate THEN d.PrimaryQuantity 
					WHEN iv.InventoryTypeId = 2 AND iv.[Date] < @FromDate THEN -d.PrimaryQuantity 
					ELSE 0
				END
			) StartPrimaryRemaing,
			SUM(
				CASE 
					WHEN iv.InventoryTypeId = 1 AND iv.[Date] < @FromDate THEN d.ProductUnitConversionQuantity
					WHEN iv.InventoryTypeId = 2 AND iv.[Date] < @FromDate THEN -d.ProductUnitConversionQuantity 
					ELSE 0
				END
			) StartProductUnitConversionRemaining,
			SUM(
				CASE iv.InventoryTypeId 
					WHEN 1 THEN d.PrimaryQuantity 
					ELSE -d.PrimaryQuantity 
				END
			) EndPrimaryRemaing,
			SUM(
				CASE iv.InventoryTypeId 
					WHEN 1 THEN d.ProductUnitConversionQuantity 
					ELSE -d.ProductUnitConversionQuantity 
				END
			) EndProductUnitConversionRemaining,
			SUM(
				CASE iv.InventoryTypeId 
					WHEN 2 THEN d.PrimaryQuantity 
					ELSE 0 
				END
			) EndOutPrimaryQuantity,
			SUM(
				CASE 
					WHEN iv.InventoryTypeId = 1 AND iv.[Date] BETWEEN @FromDate AND @ToDate THEN d.PrimaryQuantity 
					ELSE 0 
				END
			) InPrimary,
			SUM(
				CASE  
					WHEN iv.InventoryTypeId = 1 AND iv.[Date] BETWEEN @FromDate AND @ToDate THEN d.ProductUnitConversionQuantity
					ELSE 0 
				END
			) InProductUnitConversion,
			SUM(
				CASE 
					WHEN iv.InventoryTypeId = 2 AND iv.[Date] BETWEEN @FromDate AND @ToDate THEN d.PrimaryQuantity 
					ELSE 0 
				END
			) OutPrimary,
			SUM(
				CASE 
					WHEN iv.InventoryTypeId = 2 AND iv.[Date] BETWEEN @FromDate AND @ToDate THEN d.ProductUnitConversionQuantity
					ELSE 0 
				END
			) OutProductUnitConversion
		FROM dbo.Inventory iv 
				JOIN dbo.InventoryDetail d ON iv.InventoryId = d.InventoryId 
				JOIN products p ON d.ProductId = p.ProductId
				LEFT JOIN @StockIds s ON iv.StockId = s.[Value]
		WHERE iv.IsDeleted = 0 AND d.IsDeleted = 0 AND iv.IsApproved = 1
				AND iv.SubsidiaryId = @SubId 
				AND iv.[Date] <= @ToDate
				AND (@IsSearchByStock=0 OR s.[Value]>0)
		GROUP BY d.ProductId, d.ProductUnitConversionId
	),
	inputMax AS
	(
		SELECT 
				v.ProductId, 
				MIN([Date]) [MaxInputDate] 
		FROM
		(
			SELECT 
					d.ProductId, 
					d.ProductUnitConversionId, 
					iv.[Date], 
					iv.InventoryId, 
					d.InventoryDetailId,
					SUM(d.PrimaryQuantity) OVER (PARTITION BY d.ProductId, d.ProductUnitConversionId ORDER BY iv.[Date], iv.InventoryId, d.InventoryDetailId) AS SumPrimaryInput,
					balance.EndOutPrimaryQuantity

			FROM balance
				JOIN dbo.InventoryDetail d ON balance.ProductId = d.ProductId AND balance.ProductUnitConversionId = d.ProductUnitConversionId
				JOIN dbo.Inventory iv ON iv.InventoryId = d.InventoryId
				LEFT JOIN @StockIds s ON iv.StockId = s.[Value]
			WHERE iv.IsDeleted = 0 AND d.IsDeleted = 0 AND iv.IsApproved = 1
					AND iv.SubsidiaryId = @SubId 
					AND (@IsSearchByStock=0 OR s.[Value]>0)
					AND iv.InventoryTypeId = 1
		) v 
		WHERE v.SumPrimaryInput>ISNULL(v.EndOutPrimaryQuantity,0)
		GROUP BY v.ProductId
	),
	avaiableProduct AS
	(
		SELECT
				DENSE_RANK() OVER(ORDER BY p.ProductCode, p.ProductId) RankNumber,
				p.ProductCode,
				p.ProductName,
				p.UnitId,
				balance.ProductId,
				balance.ProductUnitConversionId,
				balance.StartPrimaryRemaing,
				balance.StartProductUnitConversionRemaining,
				balance.InPrimary,
				balance.InProductUnitConversion,
				balance.OutPrimary,
				balance.OutProductUnitConversion,
				balance.EndPrimaryRemaing,
				balance.EndProductUnitConversionRemaining
		FROM balance
		JOIN products p ON balance.ProductId = p.ProductId
		WHERE balance.EndPrimaryRemaing>0 OR balance.InPrimary > 0 OR balance.OutPrimary > 0
	)
	SELECT
			v.RankNumber,
			v.ProductId,
			v.ProductCode,
			v.ProductName,
			v.UnitId,
			u.UnitName,
			v.ProductUnitConversionId,
			c.ProductUnitConversionName, 
			v.EndPrimaryRemaing,
			v.EndProductUnitConversionRemaining,
			v.StartPrimaryRemaing,
			v.StartProductUnitConversionRemaining,

			v.InPrimary,
			v.InProductUnitConversion,
			v.OutPrimary,
			v.OutProductUnitConversion,

			DATEDIFF(day, inputMax.MaxInputDate, GETDATE()) - 1 MaxInputDate,
			t.TotalRecord
	FROM avaiableProduct v  
	LEFT JOIN MasterDB.dbo.Unit u ON v.UnitId = u.UnitId
	CROSS JOIN (SELECT Max(RankNumber) AS TotalRecord FROM avaiableProduct) AS t
	LEFT JOIN inputMax ON v.ProductId = inputMax.ProductId 
	LEFT JOIN dbo.ProductUnitConversion c ON v.ProductUnitConversionId = c.ProductUnitConversionId
	WHERE v.RankNumber BETWEEN (@Page-1)*@Size + 1 AND  @Page*@Size
	ORDER BY v.RankNumber
END

GO

USE StockDB
GO
-- =============================================
-- Author:		trungvt
-- Create date: 2020-06-01
-- Description:	Update primary quantity remaining
-- =============================================
CREATE OR ALTER PROCEDURE [dbo].[usp_InventoryDetail_UpdatePrimaryQuantityRemanings_Event]
	@UpdatedInventoryId BIGINT,	
	@EffecttedFromInventoryId BIGINT = NULL,
	--@ErrorInventoryId BIGINT OUTPUT,
	@ErrorIventoryDetailId BIGINT OUTPUT,
	@SubId INT = NULL
AS
BEGIN
	DECLARE @MINIMUM_ACCEPT_DECIMAL_NUMBER DECIMAL(32,12)= 0.0000000001
	SET @ErrorIventoryDetailId = 0
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @tblProductUnitConversionQuantity TABLE(
		ProductUnitConversionId int,
		Quantity decimal(32,12)
	)

   --BEGIN TRANSACTION

   DECLARE @UpdatedStockId INT
   DECLARE @CurrentDate DATETIME2   
   DECLARE @OldDate DATETIME2
   DECLARE @MinDate DATETIME2

   SELECT @CurrentDate = [Date], @UpdatedStockId = StockId FROM dbo.Inventory WHERE InventoryId = @UpdatedInventoryId-- AND IsApproved = 1;-- on Update inv out => IsApproved = 0 then update all

   IF(@CurrentDate IS NULL)
   BEGIN
		--ROLLBACK
		RETURN 0;
   END
    

   SELECT @OldDate = OldDate FROM dbo.InventoryChange WHERE InventoryId = @UpdatedInventoryId

   IF @OldDate IS NULL
   BEGIN
        INSERT dbo.InventoryChange
		    (
		        InventoryId,
		        OldDate,
		        IsSync,
		        LastSyncTime
		    )
		    VALUES
		    (   @UpdatedInventoryId,             -- InventoryId - bigint
		        @CurrentDate, -- OldDate - datetime2(7)
		        1,          -- IsSync - bit
		        GETUTCDATE()  -- LastSyncTime - datetime2(7)
		        )
   END
   ELSE
   BEGIN
       UPDATE dbo.InventoryChange
			SET OldDate = @CurrentDate,
				IsSync = 1
			WHERE InventoryId = @UpdatedInventoryId
            
   END

   SET @MinDate = @CurrentDate
   IF @OldDate < @CurrentDate
   BEGIN
       SET @MinDate = @OldDate       
   END

   --PRINT @MinDate

   --1. Get stock will be update
   SELECT @UpdatedStockId = i.StockId FROM dbo.Inventory i WHERE i.InventoryId = @UpdatedInventoryId;


   --2. Get products will be update
   DECLARE @tblProductChanges TABLE
   (
	ProductId INT NOT NULL
   )
   
  
	IF @EffecttedFromInventoryId>0
	BEGIN
		INSERT INTO @tblProductChanges
	   (
		   ProductId
	   )
	   SELECT d.ProductId--all deleted and not delete detail (isDeleted=0|1
			FROM dbo.InventoryDetail AS d
			WHERE d.InventoryId = @EffecttedFromInventoryId
	END
	ELSE
	BEGIN
	 INSERT INTO @tblProductChanges
	   (
		   ProductId
	   )
	   SELECT d.ProductId--all deleted and not delete detail (isDeleted=0|1
			FROM dbo.InventoryDetail AS d
			WHERE d.InventoryId = @UpdatedInventoryId
	END
	--SELECT --all product inventory detail from @FromDate to now which is approved, not deleted
	--		iv.InventoryTypeId,
	--		d.InventoryDetailId,
	--		iv.InventoryId,
	--		iv.[Date],
	--		iv.StockId,
	--		d.ProductId,
	--		d.ProductUnitConversionId,
	--		d.ProductUnitConversionQuantity,
	--		d.PrimaryQuantity         
	--	FROM dbo.Inventory iv 
	--		JOIN dbo.InventoryDetail d ON d.InventoryId = iv.InventoryId		
	--	WHERE iv.IsApproved = 1 
	--		AND iv.IsDeleted = 0 
	--		AND d.IsDeleted = 0
	--		AND iv.[Date] >= @MinDate
	--		AND iv.StockId = @UpdatedStockId
	--		AND EXISTS(SELECT 0 FROM @tblProductChanges x WHERE x.ProductId = d.ProductId)
	--	ORDER BY iv.StockId, --order by stockid, date, input, output, bill id, detail id
	--			d.ProductId, 
	--			iv.[Date], 
	--			iv.InventoryTypeId, 
	--			iv.InventoryId, 
	--			d.InventoryDetailId

	DECLARE @LastStockId INT = 0
	DECLARE @LastProductId INT = 0
	DECLARE @LastPrimaryQuantity DECIMAL(32,12)=0
	DECLARE @LastProductUnitConversionQuantity DECIMAL(32,12)=0

	DECLARE @InventoryTypeId INT
	DECLARE @InventoryDetailId BIGINT
	DECLARE @InventoryId BIGINT
	DECLARE @Date DATETIME2
	DECLARE @StockId INT
	DECLARE @ProductId INT
	DECLARE @ProductUnitConversionId INT
	DECLARE @ProductUnitConversionQuantity DECIMAL(32,12)
	DECLARE @PrimaryQuantity DECIMAL(32,12)

	DECLARE cursor_product CURSOR LOCAL READ_ONLY FORWARD_ONLY
	FOR SELECT --all product inventory detail from @FromDate to now which is approved, not deleted
			iv.InventoryTypeId,
			d.InventoryDetailId,
			iv.InventoryId,
			iv.[Date],
			iv.StockId,
			d.ProductId,
			d.ProductUnitConversionId,
			d.ProductUnitConversionQuantity,
			d.PrimaryQuantity         
		FROM dbo.Inventory iv 
			JOIN dbo.InventoryDetail d ON d.InventoryId = iv.InventoryId		
		WHERE iv.IsApproved = 1 
			AND iv.IsDeleted = 0 
			AND d.IsDeleted = 0
			AND iv.[Date] >= @MinDate
			AND iv.StockId = @UpdatedStockId
			AND EXISTS(SELECT 0 FROM @tblProductChanges x WHERE x.ProductId = d.ProductId)

		ORDER BY iv.StockId, --order by stockid, date, input, output, bill id, detail id
				d.ProductId, 
				iv.[Date], 
				iv.InventoryTypeId, 
				iv.InventoryId, 
				d.InventoryDetailId

	OPEN cursor_product;

	FETCH NEXT FROM cursor_product INTO 
		@InventoryTypeId,
		@InventoryDetailId,
		@InventoryId,
		@Date,
		@StockId, 
		@ProductId,
		@ProductUnitConversionId,
		@ProductUnitConversionQuantity,
		@PrimaryQuantity;

	WHILE @@FETCH_STATUS = 0
		BEGIN
        
			IF @StockId <> @LastStockId OR @ProductId <> @LastProductId
			BEGIN			
				SET @LastPrimaryQuantity = 0
				DELETE FROM @tblProductUnitConversionQuantity

				;WITH beforerange AS (
				  SELECT i.StockId, d.ProductId, d.PrimaryQuantityRemaning, ROW_NUMBER() OVER (PARTITION BY i.StockId, d.ProductId ORDER BY i.[Date] DESC, i.InventoryTypeId DESC, i.InventoryId DESC, d.InventoryDetailId DESC) AS rn
				  FROM dbo.Inventory as i
					JOIN dbo.InventoryDetail as d ON i.InventoryId = d.InventoryId
				  WHERE i.IsDeleted = 0
					AND d.IsDeleted = 0
					AND i.IsApproved = 1
					AND i.[Date] < @Date
					AND d.ProductId = @ProductId
					AND i.StockId = @StockId
					--AND (@IsFilterByStock = 0 OR EXISTS(SELECT 0 FROM @tblStockIds f WHERE f.StockId = i.StockId))
				)
			
				SELECT @LastPrimaryQuantity = SUM(b.PrimaryQuantityRemaning) FROM beforerange b WHERE b.rn = 1		

				SET @LastPrimaryQuantity = ISNULL(@LastPrimaryQuantity,0)
			END

			SET @LastProductUnitConversionQuantity = NULL
			SELECT @LastProductUnitConversionQuantity = Quantity FROM @tblProductUnitConversionQuantity WHERE ProductUnitConversionId = @ProductUnitConversionId

			IF @LastProductUnitConversionQuantity IS NULL
			BEGIN
				;WITH beforerange AS (
				  SELECT i.StockId, d.ProductId, d.ProductUnitConversionQuantityRemaning, ROW_NUMBER() OVER (PARTITION BY i.StockId, d.ProductId ORDER BY i.[Date] DESC, i.InventoryTypeId DESC, i.InventoryId DESC, d.InventoryDetailId DESC) AS rn
				  FROM StockDB.dbo.Inventory as i
				  JOIN StockDB.dbo.InventoryDetail as d ON i.InventoryId = d.InventoryId
				  WHERE i.IsDeleted = 0
					AND d.IsDeleted = 0
					AND i.IsApproved = 1
					AND i.[Date] < @Date
					AND d.ProductId = @ProductId
					AND d.ProductUnitConversionId = @ProductUnitConversionId
					AND i.StockId = @StockId
					--AND (@IsFilterByStock = 0 OR EXISTS(SELECT 0 FROM @tblStockIds f WHERE f.StockId = i.StockId))
				)
			
				SELECT @LastProductUnitConversionQuantity = SUM(b.ProductUnitConversionQuantityRemaning) FROM beforerange b WHERE b.rn = 1	

				SET @LastProductUnitConversionQuantity = ISNULL(@LastProductUnitConversionQuantity,0)

				INSERT INTO @tblProductUnitConversionQuantity
				(
					ProductUnitConversionId,
					Quantity
				)
				VALUES
				(
					@ProductUnitConversionId, -- ProductUnitConversionId - int
					@ProductUnitConversionQuantity -- Quantity - decimal
				)
			END
			


			SET @LastStockId = @StockId
			SET @LastProductId = @ProductId

			IF @InventoryTypeId = 1
			BEGIN
				SET @LastPrimaryQuantity = @LastPrimaryQuantity + @PrimaryQuantity
				SET @LastProductUnitConversionQuantity = @LastProductUnitConversionQuantity + @ProductUnitConversionQuantity
			END
			ELSE
			BEGIN
				SET @LastPrimaryQuantity = @LastPrimaryQuantity - @PrimaryQuantity

				SET @LastProductUnitConversionQuantity = @LastProductUnitConversionQuantity - @ProductUnitConversionQuantity
								
			END

			DECLARE @PrimaryDecimalPlace INT = 11
			DECLARE @PuDecimalPlace INT = 11

			SELECT @PrimaryDecimalPlace = DecimalPlace FROM dbo.ProductUnitConversion WHERE ProductId = @ProductId AND IsDefault = 1
			SELECT @PuDecimalPlace = DecimalPlace FROM dbo.ProductUnitConversion WHERE ProductId = @ProductId AND ProductUnitConversionId = @ProductUnitConversionId

			SET @PrimaryDecimalPlace = ISNULL(@PrimaryDecimalPlace,11)
			SET @PuDecimalPlace = ISNULL(@PuDecimalPlace,11)

			IF ABS(ROUND(@LastPrimaryQuantity,@PrimaryDecimalPlace)) < @MINIMUM_ACCEPT_DECIMAL_NUMBER
			BEGIN
			    SET @LastPrimaryQuantity = 0
			END

			IF ABS(ROUND(@LastProductUnitConversionQuantity,@PuDecimalPlace)) < @MINIMUM_ACCEPT_DECIMAL_NUMBER
			BEGIN
			    SET @LastProductUnitConversionQuantity = 0
			END

			IF @LastPrimaryQuantity = 0
			BEGIN
				SET @LastProductUnitConversionQuantity = 0
			END
			
			IF @LastProductUnitConversionQuantity = 0 AND @LastPrimaryQuantity < 0
			BEGIN
			    SET @LastPrimaryQuantity = 0
			END

			UPDATE @tblProductUnitConversionQuantity SET Quantity = @LastProductUnitConversionQuantity WHERE ProductUnitConversionId = @ProductUnitConversionId
		--PRINT @InventoryDetailId
		--PRINT @LastPrimaryQuantity
			UPDATE TOP(1) dbo.InventoryDetail 
				SET PrimaryQuantityRemaning = @LastPrimaryQuantity, 
					ProductUnitConversionQuantityRemaning = @LastProductUnitConversionQuantity  
				WHERE InventoryDetailId = @InventoryDetailId

			IF ISNULL(@LastPrimaryQuantity,0) < 0 AND @ErrorIventoryDetailId = 0
			BEGIN
			    --SET @ErrorInventoryId = @InventoryId
				SET @ErrorIventoryDetailId = @InventoryDetailId
			END

			FETCH NEXT FROM cursor_product INTO
				@InventoryTypeId,
				@InventoryDetailId,
				@InventoryId,
				@Date,
				@StockId, 
				@ProductId,
				@ProductUnitConversionId,
				@ProductUnitConversionQuantity,
				@PrimaryQuantity;
		END;

	CLOSE cursor_product;

	DEALLOCATE cursor_product;

	--COMMIT TRANSACTION
END



GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_ProductUnitConversion_CheckUsed]
	@ProductUnitConverionIds _INTVALUES READONLY,
	@IsUsed BIT OUTPUT
AS
BEGIN
	SET @IsUsed = 0
	--StockDB
	IF EXISTS(SELECT TOP(1) 0 FROM StockDB.dbo.InventoryDetail d WHERE EXISTS (SELECT 0 FROM @ProductUnitConverionIds c WHERE c.[Value] = d.ProductUnitConversionId))
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	IF EXISTS(SELECT 0 FROM StockDB.dbo.InventoryRequirementDetail d WHERE EXISTS (SELECT 0 FROM @ProductUnitConverionIds c WHERE c.[Value] = d.ProductUnitConversionId))
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	IF EXISTS(SELECT 0 FROM StockDB.dbo.StockProduct d WHERE EXISTS (SELECT 0 FROM @ProductUnitConverionIds c WHERE c.[Value] = d.ProductUnitConversionId))
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	--PurchaseOrderDB

	IF EXISTS(SELECT 0 FROM PurchaseOrderDB.dbo.PurchasingRequestDetail d WHERE d.IsDeleted=0 AND EXISTS (SELECT 0 FROM @ProductUnitConverionIds c WHERE c.[Value] = d.ProductUnitConversionId))
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	IF EXISTS(SELECT 0 FROM PurchaseOrderDB.dbo.PurchasingSuggestDetail d WHERE d.IsDeleted=0 AND EXISTS (SELECT 0 FROM @ProductUnitConverionIds c WHERE c.[Value] = d.ProductUnitConversionId))
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	IF EXISTS(SELECT 0 FROM PurchaseOrderDB.dbo.PurchaseOrderDetail d WHERE d.IsDeleted=0 AND EXISTS (SELECT 0 FROM @ProductUnitConverionIds c WHERE c.[Value] = d.ProductUnitConversionId))
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END



	--Voucher
	
	IF EXISTS(SELECT 0 FROM PurchaseOrderDB.dbo.VoucherValueRow d WHERE d.IsDeleted=0 AND EXISTS (SELECT 0 FROM @ProductUnitConverionIds c WHERE c.[Value] = d.vthhtp_dvt2))
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	--Accountancy
	IF EXISTS(SELECT 0 FROM AccountancyDB.dbo.InputValueRow d WHERE d.IsDeleted=0 AND EXISTS (SELECT 0 FROM @ProductUnitConverionIds c WHERE c.[Value] = d.vthhtp_dvt2))
	BEGIN
		SET @IsUsed = 1
		RETURN 0;
	END

	
END

GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_ProductionHandover_GetInventoryRequirementByProductionOrder]
  @ProductionOrderCode AS nvarchar(128) ,
  @SubId AS int 
AS
BEGIN
	DECLARE @WAITING int = 1;
	DECLARE @ACCEPTED int = 2;
	
	WITH inventories AS (
		SELECT 
			id.InventoryDetailId,
			id.InventoryRequirementDetailId,
			i.InventoryCode,
			i.InventoryId,
			i.InventoryTypeId,
			id.ProductId,
			i.DepartmentId,
			i.StockId,
			i.CreatedByUserId,
			i.CreatedDatetimeUtc,
			ISNULL(id.PrimaryQuantity,0) PrimaryQuantity
		FROM StockDB.dbo.InventoryDetail id
		INNER JOIN StockDB.dbo.Inventory i ON id.InventoryId = i.InventoryId AND id.IsDeleted = 0 AND i.IsDeleted = 0 AND i.SubsidiaryId = @SubId AND id.SubsidiaryId = @SubId
		WHERE id.ProductionOrderCode = @ProductionOrderCode AND i.IsApproved = 1
	),
	requirements AS (
		SELECT 
			rd.InventoryRequirementDetailId,
			rd.ProductId,
			r.CreatedByUserId,
			r.CreatedDatetimeUtc,
			rd.PrimaryQuantity RequirementQuantity,
			r.InventoryTypeId,
			rd.AssignStockId,
			rd.DepartmentId,
			r.Content,
			r.CensorStatus,
			rd.OutsourceStepRequestId,
			r.InventoryRequirementCode,
			r.InventoryRequirementId,
			rd.ProductionStepId
		FROM StockDB.dbo.InventoryRequirementDetail rd
		INNER JOIN StockDB.dbo.InventoryRequirement r ON rd.InventoryRequirementId = r.InventoryRequirementId AND rd.IsDeleted = 0 AND r.IsDeleted = 0 
		WHERE rd.ProductionOrderCode = @ProductionOrderCode AND r.SubsidiaryId = @SubId
	)
	SELECT 
		ISNULL(inv.ProductId, req.ProductId) ProductId,
		ISNULL(req.CreatedByUserId, inv.CreatedByUserId) CreatedByUserId,
		ISNULL(req.CreatedDatetimeUtc, inv.CreatedDatetimeUtc) CreatedDatetimeUtc,
		ISNULL(req.RequirementQuantity, inv.PrimaryQuantity) RequirementQuantity,
		ISNULL(inv.PrimaryQuantity, 0) ActualQuantity,
		ISNULL(inv.InventoryTypeId, req.InventoryTypeId) InventoryTypeId,
		ISNULL(inv.StockId, req.AssignStockId) AssignStockId,
		ISNULL(inv.DepartmentId, req.DepartmentId) DepartmentId,
		req.Content,
		CASE 
			WHEN req.CensorStatus = @ACCEPTED OR req.CensorStatus IS NULL
			THEN CASE 
				WHEN inv.PrimaryQuantity IS NOT NULL 
				THEN @ACCEPTED
				ELSE @WAITING
				END
			ELSE req.CensorStatus 
			END Status,
			inv.InventoryCode InventoryCode,
			inv.InventoryId,
			inv.InventoryDetailId,
			req.OutsourceStepRequestId,
			req.InventoryRequirementCode,
			req.InventoryRequirementDetailId,
			req.InventoryRequirementId,
			s.StockName,
			req.ProductionStepId
	FROM inventories inv
	FULL OUTER JOIN requirements req ON inv.InventoryRequirementDetailId = req.InventoryRequirementDetailId AND inv.ProductId = req.ProductId AND inv.InventoryTypeId = req.InventoryTypeId
	LEFT JOIN StockDB.dbo.Stock s ON ISNULL(inv.StockId, req.AssignStockId) = s.StockId;
END

GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_CopySourceProductIntoDestinationProduct]
@SourceProductId int,
@DestProductId int
AS
BEGIN

	IF NOT EXISTS (SELECT 1 FROM Product where ProductId = @DestProductId AND IsDeleted = 0) 
	BEGIN 
		DECLARE @msg nvarchar(256);
		SET @msg = FORMATMESSAGE('Product cannot be copy due to DestProduct not found. SourceProductId: %d. DestProductId: %d', @SourceProductId, @DestProductId);

		THROW 50001, @msg, 1
	END

	-- Copy Product Attachment
	INSERT INTO ProductAttachment (ProductId, AttachmentFileId, Title, IsDeleted, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc) SELECT @DestProductId ProductId, AttachmentFileId, Title, IsDeleted, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc FROM ProductAttachment WHERE ProductId = @SourceProductId AND IsDeleted = 0;

	-- Copy BOM
	INSERT INTO ProductBom (ProductId, ChildProductId, Quantity, Wastage, [Description], IsDeleted, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc, InputStepId, OutputStepId, SortOrder) SELECT @DestProductId ProductId, ChildProductId, Quantity, Wastage, [Description], IsDeleted, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc, InputStepId, OutputStepId, SortOrder FROM ProductBom WHERE ProductId = @SourceProductId AND IsDeleted = 0;

	INSERT INTO ProductMaterial (RootProductId, ProductId, PathProductIds) SELECT @DestProductId RootProductId, ProductId, REPLACE(PathProductIds, @SourceProductId, @DestProductId) PathProductIds FROM ProductMaterial WHERE RootProductId = @SourceProductId;
	
	-- Copy Product Materials Consumption
	INSERT INTO ProductMaterialsConsumption (ProductMaterialsConsumptionGroupId, ProductId, MaterialsConsumptionId, Quantity, StepId, DepartmentId, IsDeleted, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc) SELECT ProductMaterialsConsumptionGroupId, @DestProductId ProductId, MaterialsConsumptionId, Quantity, StepId, DepartmentId, IsDeleted, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, DeletedDatetimeUtc FROM ProductMaterialsConsumption WHERE ProductId = @SourceProductId AND IsDeleted = 0;

END


GO

USE StockDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_GetProductBoms]
  @ProductIds _INTVALUES READONLY,
  @SubId AS int
AS
BEGIN
	WITH prd_bom AS (
		SELECT
				ProductBomId,
				ProductId,
				ChildProductId,
				ProductId ParentProductId,
				1 AS Level,
				Quantity,
				Wastage,
				CONVERT(nvarchar(max), CONCAT('', ProductId, '')) AS PathProductIds,
				CONVERT(nvarchar(max), ROW_NUMBER() OVER(ORDER BY ProductBomId)) AS NumberOrder,
				ROW_NUMBER() OVER(ORDER BY SortOrder) * POWER(CONVERT(DECIMAL(3,0),100), 10) AS SortOrder,
				CAST(ISNULL(Quantity * Wastage, 0) as decimal(18,5)) AS TotalQuantity
				FROM ProductBom
		WHERE EXISTS (SELECT 0 FROM @ProductIds WHERE ProductId = [Value]) AND IsDeleted = 0 AND ProductId != ChildProductId
		UNION ALL
		SELECT
				child.ProductBomId,
				child.ProductId, 
				child.ChildProductId,
				bom.ProductId ParentProductId,
				bom.Level + 1 AS Level,
				child.Quantity,
				child.Wastage,
				CONVERT(nvarchar(max), CONCAT(bom.PathProductIds, ',', child.ProductId, '')) AS PathProductIds,
				CONVERT(nvarchar(max), CONCAT(bom.NumberOrder,'.', ROW_NUMBER() OVER(ORDER BY child.ProductBomId))) NumberOrder,
				bom.SortOrder + ROW_NUMBER() OVER(ORDER BY child.SortOrder) * POWER(CONVERT(DECIMAL(3,0),100), 10 - bom.Level) AS SortOrder,
				CAST(ISNULL(child.Quantity * child.Wastage, 0) * bom.TotalQuantity as decimal(18,5)) AS TotalQuantity
				FROM
				ProductBom child
				INNER JOIN prd_bom bom ON bom.ChildProductId = child.ProductId
				WHERE child.IsDeleted = 0 										
										AND CHARINDEX(CONCAT(',', child.ChildProductId, ','), CONCAT(',', bom.PathProductIds, ','), 0) <= 0
										AND child.ProductId != child.ChildProductId
		)
		SELECT 
			bom.*,
			p.ProductCode,
			p.ProductName, 
			u.UnitName,
			pei.Specification,
			ucs.ProductUnitConversionId,
			ucs.DecimalPlace
		FROM prd_bom bom		
		LEFT JOIN Product p ON bom.ChildProductId = p.ProductId
		LEFT JOIN ProductExtraInfo pei ON bom.ChildProductId = pei.ProductId
		LEFT JOIN v_Unit u ON p.UnitId = u.F_Id
		LEFT JOIN ProductUnitConversion ucs ON p.UnitId = ucs.SecondaryUnitId AND p.ProductId = ucs.ProductId and ucs.IsDefault = 1
		ORDER BY p.ProductId, bom.SortOrder;
END

GO

USE StockDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_Product_GetTopUsed_ByList]
	@SubId INT,
	@ProductIds [_INTVALUES] READONLY,
	@IsCheckExistOnly BIT = 0
AS
BEGIN
	

	DECLARE @result TABLE(
		ProductId INT NULL,
		Id BIGINT NULL,
		ObjectTypeId INT NULL,
		BillTypeId INT NULL,
		BillId BIGINT NULL,
		BillCode NVARCHAR(128) NULL,
		[Description] NVARCHAR(512) NULL
	)

	--StockDB
	DECLARE @InventoryType_Input INT = 1
	DECLARE @InventoryType_Output INT = 2
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ProductId,
		d.ProductId,
		30,--InventoryInput,
		iv.InventoryTypeId,
		d.InventoryId,
		iv.InventoryCode,
		CONCAT(N'Nhập kho. Mã: ', iv.InventoryCode)		
	FROM StockDB.dbo.InventoryDetail d 
		JOIN StockDB.dbo.Inventory iv ON iv.InventoryId = d.InventoryId
		JOIN @ProductIds c ON d.ProductId = c.[Value]
	WHERE iv.IsDeleted = 0 AND d.IsDeleted=0 AND iv.InventoryTypeId = @InventoryType_Input
	ORDER BY d.InventoryId DESC

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--output
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ProductId,
		d.ProductId,
		31,--InventoryOutput,
		iv.InventoryTypeId,
		d.InventoryId,
		iv.InventoryCode,
		CONCAT(N'Xuất kho. Mã: ', iv.InventoryCode)		
	FROM StockDB.dbo.InventoryDetail d 
		JOIN StockDB.dbo.Inventory iv ON iv.InventoryId = d.InventoryId
		JOIN @ProductIds c ON d.ProductId = c.[Value]
	WHERE iv.IsDeleted = 0 AND d.IsDeleted=0 AND iv.InventoryTypeId = @InventoryType_Output
	ORDER BY d.InventoryId DESC

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END


	--require input
	
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ProductId,
		d.ProductId,
		300,--RequestInventoryInput,
		iv.InventoryTypeId,
		d.InventoryRequirementId,
		iv.InventoryRequirementCode,
		CONCAT(N'Phiếu yêu cầu nhập kho. Mã: ', iv.InventoryRequirementCode)		
	FROM StockDB.dbo.InventoryRequirementDetail d 
		JOIN StockDB.dbo.InventoryRequirement iv ON iv.InventoryRequirementId = d.InventoryRequirementId
		JOIN @ProductIds c ON d.ProductId = c.[Value]
	WHERE iv.IsDeleted = 0 AND d.IsDeleted=0 AND iv.InventoryTypeId = @InventoryType_Input
	ORDER BY d.InventoryRequirementId DESC;

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--require out
	
	INSERT INTO @result
	(
	   ProductId,
	   Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ProductId,
		d.ProductId,
		301,--RequestInventoryOutput,
		iv.InventoryTypeId,
		d.InventoryRequirementId,
		iv.InventoryRequirementCode,
		CONCAT(N'Phiếu yêu cầu xuất kho. Mã: ', iv.InventoryRequirementCode)		
	FROM StockDB.dbo.InventoryRequirementDetail d 
		JOIN StockDB.dbo.InventoryRequirement iv ON iv.InventoryRequirementId = d.InventoryRequirementId
		JOIN @ProductIds p ON d.ProductId = p.[Value]
	WHERE iv.IsDeleted = 0 AND d.IsDeleted=0 AND iv.InventoryTypeId = @InventoryType_Input
	ORDER BY d.InventoryRequirementId DESC;

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--Stock take
	
	INSERT INTO @result
	(
	   ProductId,
	   Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ProductId,
		d.ProductId,
		553,--StockTakePeriod,
		NULL,
		po.StockTakePeriodId,
		po.StockTakePeriodCode,
		CONCAT(N'Kỳ kiểm kê kho. Mã: ', po.StockTakePeriodCode)		
	FROM StockDB.dbo.StockTakeDetail d 
		JOIN StockDB.dbo.StockTake iv ON iv.StockTakeId = d.StockTakeId
		JOIN @ProductIds p ON d.ProductId = p.[Value]
		JOIN StockDB.dbo.StockTakePeriod po ON po.StockTakePeriodId = iv.StockTakePeriodId 
	WHERE iv.IsDeleted = 0 AND d.IsDeleted=0 AND po.IsDeleted = 0
	ORDER BY po.StockTakePeriodId DESC;

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--SELECT TOP 1 @OutProductId = d.ProductId,
	--	@OutMessage = N'Mặt hàng đã từng nhập kho'
	--FROM StockDB.dbo.StockProduct d WHERE d.ProductId in (Select [Value] from @ProductIds) AND d.IsDeleted=0
	--IF @OutProductId IS NOT NULL RETURN 0;


	--BOM
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ChildProductId,
		d.ChildProductId,
		6,--Product,
		NULL,
		p.ProductId,
		p.ProductCode,
		CONCAT(N'Thành phần cấu thành (BOM) mặt hàng. Mã: ', p.ProductCode)		
	FROM StockDB.dbo.Product p 
		 JOIN StockDB.dbo.ProductBom d ON p.ProductId = d.ProductId
		 JOIN @ProductIds c ON d.ChildProductId = c.[Value]
	WHERE p.IsDeleted = 0 AND d.IsDeleted=0
	ORDER BY p.ProductId DESC;

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--Consum
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ProductId,
		d.ProductId,
		6,--Product,
		NULL,
		p.ProductId,
		p.ProductCode,
		CONCAT(N'Là vật tư tiêu hao của mặt hàng. Mã: ', p.ProductCode)		
	FROM StockDB.dbo.Product p 
		JOIN StockDB.dbo.ProductMaterialsConsumption d ON p.ProductId = d.ProductId
		JOIN @ProductIds c ON d.MaterialsConsumptionId = c.[Value]
	WHERE p.IsDeleted = 0 AND d.IsDeleted=0
	ORDER BY p.ProductId DESC;

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--PurchaseOrderDB

	--request
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ProductId,
		d.ProductId,
		19,--PurchasingRequest,
		NULL,
		r.PurchasingRequestId,
		r.PurchasingRequestCode,
		CONCAT(N'Yêu cầu mua hàng. Mã: ', r.PurchasingRequestCode)		
	FROM PurchaseOrderDB.dbo.PurchasingRequestDetail d 
		 JOIN PurchaseOrderDB.dbo.PurchasingRequest r ON r.PurchasingRequestId = d.PurchasingRequestId
		 JOIN @ProductIds c ON d.ProductId = c.[Value]
	WHERE r.IsDeleted = 0 AND d.IsDeleted=0
	ORDER BY r.PurchasingRequestId DESC;

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--suggest
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ProductId,
		d.ProductId,
		21,--PurchasingSuggest,
		NULL,
		s.PurchasingSuggestId,
		s.PurchasingSuggestCode,
		CONCAT(N'Đề nghị mua hàng. Mã: ', s.PurchasingSuggestCode)		
	FROM PurchaseOrderDB.dbo.PurchasingSuggestDetail d 
		 JOIN PurchaseOrderDB.dbo.PurchasingSuggest s ON s.PurchasingSuggestId = d.PurchasingSuggestId
		 JOIN @ProductIds c ON d.ProductId = c.[Value]
	WHERE s.IsDeleted = 0 AND d.IsDeleted=0
	ORDER BY s.PurchasingSuggestId DESC;

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--po
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ProductId,
		d.ProductId,
		25,--PurchaseOrder,
		po.PurchaseOrderType,
		po.PurchaseOrderId,
		po.PurchaseOrderCode,
		CONCAT(N'Đơn đặt mua/gia công. Mã: ', po.PurchaseOrderCode)		
	FROM PurchaseOrderDB.dbo.PurchaseOrderDetail d 
		 JOIN PurchaseOrderDB.dbo.PurchaseOrder po ON po.PurchaseOrderId = d.PurchaseOrderId
		 JOIN @ProductIds c ON d.ProductId = c.[Value]
	WHERE po.IsDeleted = 0 AND d.IsDeleted=0
	ORDER BY po.PurchaseOrderId DESC;

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--PurchaseOrderExcess
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ProductId,
		d.ProductId,
		25,--PurchaseOrder,
		po.PurchaseOrderType,
		po.PurchaseOrderId,
		po.PurchaseOrderCode,
		CONCAT(N'Vật tư dư thừa Đơn đặt mua/gia công. Mã: ', po.PurchaseOrderCode)		
	FROM PurchaseOrderDB.dbo.PurchaseOrderExcess d
		 JOIN PurchaseOrderDB.dbo.PurchaseOrder po ON po.PurchaseOrderId = d.PurchaseOrderId
		 JOIN @ProductIds c ON d.ProductId = c.[Value]
	WHERE po.IsDeleted = 0 AND d.IsDeleted=0
	ORDER BY po.PurchaseOrderId DESC;

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END


	--PoProviderPricing
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ProductId,
		d.ProductId,
		25001,--PoProviderPricing,
		NULL,
		r.PoProviderPricingId,
		r.PoProviderPricingCode,
		CONCAT(N'Báo giá nhà cung cấp. Mã: ', r.PoProviderPricingCode)		
	FROM PurchaseOrderDB.dbo.PoProviderPricingDetail d
		 JOIN PurchaseOrderDB.dbo.PoProviderPricing r ON d.PoProviderPricingId = r.PoProviderPricingId
		 JOIN @ProductIds c ON d.ProductId = c.[Value]
	WHERE r.IsDeleted = 0 AND d.IsDeleted=0
	ORDER BY r.PoProviderPricingId DESC;	

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END


	--MaterialCalc
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		r.[Value],
		r.[Value],
		85,--MaterialCalc,
		NULL,
		r.MaterialCalcId,
		r.MaterialCalcCode,
		CONCAT(N'Tính nhu cầu vật tư. Mã: ', r.MaterialCalcCode)		
	FROM (
		SELECT c.[Value],
			   r.MaterialCalcId,
			   r.MaterialCalcCode
		FROM PurchaseOrderDB.dbo.MaterialCalcProduct d
		 JOIN PurchaseOrderDB.dbo.MaterialCalc r ON r.MaterialCalcId = d.MaterialCalcId
		 JOIN @ProductIds c ON d.ProductId = c.[Value]
		 WHERE r.IsDeleted = 0

		 UNION ALL

		 SELECT c.[Value],
			   r.MaterialCalcId,
			   r.MaterialCalcCode
		FROM PurchaseOrderDB.dbo.MaterialCalcProductDetail pd
		 JOIN PurchaseOrderDB.dbo.MaterialCalcProduct d ON pd.MaterialCalcProductId = d.MaterialCalcProductId
		 JOIN PurchaseOrderDB.dbo.MaterialCalc r ON r.MaterialCalcId = d.MaterialCalcId
		 JOIN @ProductIds c ON pd.MaterialProductId = c.[Value]
		 WHERE r.IsDeleted = 0

		  UNION ALL

		 SELECT c.[Value],
			   r.MaterialCalcId,
			   r.MaterialCalcCode
		  FROM PurchaseOrderDB.dbo.MaterialCalcSummary d		 
				 JOIN PurchaseOrderDB.dbo.MaterialCalc r ON r.MaterialCalcId = d.MaterialCalcId
				 JOIN @ProductIds c ON d.MaterialProductId = c.[Value]
		  WHERE r.IsDeleted = 0

	) r	
	ORDER BY r.MaterialCalcId DESC;	

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END


	--PropertyCalc
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		r.[Value],
		r.[Value],
		402,--PropertyCalc,
		NULL,
		r.PropertyCalcId,
		r.PropertyCalcCode,
		CONCAT(N'Tính nhu cầu vật tư theo thuộc tính. Mã: ', r.PropertyCalcCode)		
	FROM (
		SELECT c.[Value],
			   r.PropertyCalcId,
			   r.PropertyCalcCode
		FROM PurchaseOrderDB.dbo.PropertyCalcProduct d
		 JOIN PurchaseOrderDB.dbo.PropertyCalc r ON r.PropertyCalcId = d.PropertyCalcId
		 JOIN @ProductIds c ON d.ProductId = c.[Value]
		 WHERE r.IsDeleted = 0

		 UNION ALL

		 SELECT c.[Value],
			   r.PropertyCalcId,
			   r.PropertyCalcCode
		FROM PurchaseOrderDB.dbo.PropertyCalcProductDetail pd
		 JOIN PurchaseOrderDB.dbo.PropertyCalcProduct d ON pd.PropertyCalcProductId = d.PropertyCalcProductId
		 JOIN PurchaseOrderDB.dbo.PropertyCalc r ON r.PropertyCalcId = d.PropertyCalcId
		 JOIN @ProductIds c ON pd.MaterialProductId = c.[Value]
		 WHERE r.IsDeleted = 0

		 UNION ALL

		 SELECT c.[Value],
			   r.PropertyCalcId,
			   r.PropertyCalcCode
		  FROM PurchaseOrderDB.dbo.PropertyCalcSummary d		 
				 JOIN PurchaseOrderDB.dbo.PropertyCalc r ON r.PropertyCalcId = d.PropertyCalcId
				 JOIN @ProductIds c ON d.MaterialProductId = c.[Value]
		  WHERE r.IsDeleted = 0

		  UNION ALL

		 SELECT c.[Value],
			   r.PropertyCalcId,
			   r.PropertyCalcCode
		  FROM PurchaseOrderDB.dbo.CuttingWorkSheet d		 
				 JOIN PurchaseOrderDB.dbo.PropertyCalc r ON r.PropertyCalcId = d.PropertyCalcId
				 JOIN @ProductIds c ON d.InputProductId = c.[Value]
		  WHERE r.IsDeleted = 0

		 UNION ALL

		 SELECT c.[Value],
			   r.PropertyCalcId,
			   r.PropertyCalcCode
		  FROM PurchaseOrderDB.dbo.CuttingWorkSheet d
				JOIN PurchaseOrderDB.dbo.CuttingWorkSheetDest de ON de.CuttingWorkSheetId = d.CuttingWorkSheetId
				 JOIN PurchaseOrderDB.dbo.PropertyCalc r ON r.PropertyCalcId = d.PropertyCalcId
				 JOIN @ProductIds c ON de.ProductId = c.[Value]
		  WHERE r.IsDeleted = 0


		  UNION ALL

		 SELECT c.[Value],
			   r.PropertyCalcId,
			   r.PropertyCalcCode
		  FROM PurchaseOrderDB.dbo.CuttingWorkSheet d
				JOIN PurchaseOrderDB.dbo.CuttingExcessMaterial ep ON ep.CuttingWorkSheetId = d.CuttingWorkSheetId
				 JOIN PurchaseOrderDB.dbo.PropertyCalc r ON r.PropertyCalcId = d.PropertyCalcId
				 JOIN @ProductIds c ON ep.ProductId = c.[Value]
		  WHERE r.IsDeleted = 0

	) r	
	ORDER BY r.PropertyCalcId DESC
	

	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END
	

	--SELECT TOP 1 @OutProductId = d.ProductId,
	--	@OutMessage = N'Tên gọi khác phía nhà cung cấp ' + d.ProviderProductName
	--FROM PurchaseOrderDB.dbo.ProviderProductInfo d
	--WHERE d.ProductId in (Select [Value] from @ProductIds)
	--IF @OutProductId IS NOT NULL RETURN 0;

	--Voucher
	
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.vthhtp,
		d.vthhtp,
		49,--VoucherBill,
		d.VoucherTypeId,
		d.VoucherBill_F_Id,
		d.so_ct,
		CONCAT(N'Chứng từ ', t.Title ,'. Mã: ', d.so_ct)		
	FROM PurchaseOrderDB.dbo.VoucherValueRow d 
		JOIN PurchaseOrderDB.dbo.VoucherType t ON t.VoucherTypeId = d.VoucherTypeId
		JOIN @ProductIds c ON d.vthhtp = c.[Value]
	WHERE d.IsDeleted=0
	ORDER BY d.VoucherBill_F_Id DESC;	
	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END


	--Accountancy
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.vthhtp,
		d.vthhtp,
		39,--InputBill,
		d.InputTypeId,
		d.InputBill_F_Id,
		d.so_ct,
		CONCAT(N'Chứng từ ', t.Title ,'. Mã: ', d.so_ct)		
	FROM AccountancyDB.dbo.InputValueRow d 
		JOIN AccountancyDB.dbo.InputType t ON t.InputTypeId = d.InputTypeId
		JOIN @ProductIds c ON d.vthhtp = c.[Value]
	WHERE d.IsDeleted=0
	ORDER BY d.InputBill_F_Id DESC;	
	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END

	--Accountancy public
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.vthhtp,
		d.vthhtp,
		39001,--InputBillPublic,
		d.InputTypeId,
		d.InputBill_F_Id,
		d.so_ct,
		CONCAT(N'Chứng từ kế toán thuế ', t.Title ,'. Mã: ', d.so_ct)		
	FROM AccountancyPublicDB.dbo.InputValueRow d 
		JOIN AccountancyDB.dbo.InputType t ON t.InputTypeId = d.InputTypeId
		JOIN @ProductIds c ON d.vthhtp = c.[Value]
	WHERE d.IsDeleted=0
	ORDER BY d.InputBill_F_Id DESC;	
	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END


	--Maufacturing
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.ProductId,
		d.ProductId,
		70,--ProductionOrder,
		NULL,
		t.ProductionOrderId,
		t.ProductionOrderCode,
		CONCAT(N'Lệnh sản xuất. Mã: ', t.ProductionOrderCode)		
	FROM ManufacturingDB.dbo.ProductionOrderDetail d 
		JOIN ManufacturingDB.dbo.ProductionOrder t ON t.ProductionOrderId = d.ProductionOrderId
		JOIN @ProductIds c ON d.ProductId = c.[Value]
	WHERE d.IsDeleted=0
	ORDER BY t.ProductionOrderId DESC;	
	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END



	DECLARE @LINK_DATA_OBJECT_TYPE_PRODUCT INT = 1;
	DECLARE @CONTAINER_TYPE_PRODUCTION_ORDER INT = 2;
	DECLARE @CONTAINER_TYPE_PRODUCT INT = 1;

	--ProductionOrderProcess - production order
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.LinkDataObjectId,
		d.LinkDataObjectId,
		70,--ProductionOrder,
		NULL,
		o.ProductionOrderId,
		o.ProductionOrderCode,
		CONCAT(N'Quy trình sản xuất của lệnh. Mã: ', o.ProductionOrderCode)		
	FROM ManufacturingDB.dbo.ProductionStepLinkData d 
		JOIN ManufacturingDB.dbo.ProductionStepLinkDataRole r ON r.ProductionStepLinkDataId = d.ProductionStepLinkDataId
		JOIN ManufacturingDB.dbo.ProductionStep s ON s.ProductionStepId = r.ProductionStepId
		JOIN ManufacturingDB.dbo.ProductionOrder o ON o.ProductionOrderId = s.ContainerId AND s.ContainerTypeId = @CONTAINER_TYPE_PRODUCTION_ORDER 
		JOIN @ProductIds c ON d.LinkDataObjectId = c.[Value] AND d.LinkDataObjectTypeId = @LINK_DATA_OBJECT_TYPE_PRODUCT 
	WHERE d.IsDeleted=0
	ORDER BY o.ProductionOrderId DESC;	
	
	IF @IsCheckExistOnly = 1 AND EXISTS(SELECT TOP(1) 0 FROM @result)
	BEGIN
	    SELECT * FROM @result
		RETURN 0;
	END
	


	--ProductionOrderProcess - product
	INSERT INTO @result
	(
	    ProductId,
		Id,
	    ObjectTypeId,
		BillTypeId,
	    BillId,
	    BillCode,
	    Description
	)
	SELECT DISTINCT TOP (10 )
		d.LinkDataObjectId,
		d.LinkDataObjectId,
		6,--Product,
		NULL,
		p.ProductId,
		p.ProductCode,
		CONCAT(N'Quy trình sản xuất của mặt hàng. Mã: ', p.ProductCode)		
	FROM ManufacturingDB.dbo.ProductionStepLinkData d 
		JOIN ManufacturingDB.dbo.ProductionStepLinkDataRole r ON r.ProductionStepLinkDataId = d.ProductionStepLinkDataId
		JOIN ManufacturingDB.dbo.ProductionStep s ON s.ProductionStepId = r.ProductionStepId
		JOIN ManufacturingDB.dbo.RefProduct p ON p.ProductId = s.ContainerId AND s.ContainerTypeId = @CONTAINER_TYPE_PRODUCT 
		JOIN @ProductIds c ON d.LinkDataObjectId = c.[Value] AND d.LinkDataObjectTypeId = @LINK_DATA_OBJECT_TYPE_PRODUCT 
	WHERE d.IsDeleted=0 AND p.IsDeleted = 0
	ORDER BY p.ProductId DESC;	

	SELECT * FROM @result;
END


GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_Table_DropField]	
	@TableName nvarchar(64),
	@FieldName nvarchar(64),	
	@ResStatus int OUTPUT
AS
BEGIN	

		DECLARE @Sql nvarchar(max) = ''
		
		EXEC asp_DropColumnConstraist @TableName = @TableName, @ColumnName = @FieldName, @ResStatus = @ResStatus OUTPUT

		SET @Sql = 'ALTER TABLE '+ @TableName +' DROP COLUMN ' + @FieldName
		
		EXEC (@Sql)	

		SET @ResStatus = 1
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_ValidateBillDate]
	@SubId int = 0,
	@OldDate datetime2 = NULL,
	@BillDate datetime2= NULL,
	@TimeZoneOffset INT = -420,
	@ResStatus bit  = 0 OUTPUT
AS
BEGIN
	EXEC [MasterDB].dbo.asp_ValidateBillDate
	@SubId = @SubId,
	@OldDate = @OldDate,
	@BillDate = @BillDate,
	@TimeZoneOffset = @TimeZoneOffset,
	@ResStatus = @ResStatus OUt
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_Tonghopcongno]
  @FromDate AS datetime2 ,
  @ToDate AS datetime2 
AS
BEGIN
	SELECT chung.Ma_kh0, c.CustomerCode, chung.Ten_kh0, dau_ky.Du_no_dau_ky , dau_ky.Du_co_dau_ky , trong_ky.Phat_sinh_no, trong_ky.Phat_sinh_co, 
	CASE 
		WHEN (ISNULL(dau_ky.Du_no_dau_ky, 0) + ISNULL(trong_ky.Phat_sinh_no, 0)) = 0 THEN NULL
		ELSE (ISNULL(dau_ky.Du_no_dau_ky, 0) + ISNULL(trong_ky.Phat_sinh_no, 0))
	END AS Du_no_cuoi_ky,
	CASE 
		WHEN (ISNULL(dau_ky.Du_co_dau_ky, 0) + ISNULL(trong_ky.Phat_sinh_co, 0)) = 0 THEN NULL
		ELSE (ISNULL(dau_ky.Du_co_dau_ky, 0) + ISNULL(trong_ky.Phat_sinh_co, 0))
	END AS Du_co_cuoi_ky  
	FROM
	(SELECT DISTINCT d.Ma_kh0, d.Ten_kh0 FROM vDetailReport d WHERE d.Tk_AccountNumber LIKE '131%') chung
	LEFT JOIN v_Customer c ON chung.Ma_kh0 = c.F_Id
	LEFT JOIN
	(SELECT d1.Ma_kh0, SUM(d1.Vnd_no) Du_no_dau_ky, SUM(d1.Vnd_co) Du_co_dau_ky FROM vDetailReport d1 WHERE d1.Tk_AccountNumber LIKE '131%' AND d1.Ngay_ct <  @FromDate GROUP BY d1.Ma_kh0) dau_ky ON chung.Ma_kh0 = dau_ky.Ma_kh0
	LEFT JOIN
	(SELECT d2.Ma_kh0, SUM(d2.Vnd_no) Phat_sinh_no, SUM(d2.Vnd_co) Phat_sinh_co FROM vDetailReport d2 WHERE d2.Tk_AccountNumber LIKE '131%' AND d2.Ngay_ct >=  @FromDate AND d2.Ngay_ct <= @ToDate GROUP BY d2.Ma_kh0) trong_ky ON chung.Ma_kh0 = trong_ky.Ma_kh0

END

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Currency] AS SELECT  _Currency.F_Id, _Currency.UpdatedDatetimeUtc, _Currency.CurrencyName, _Currency.CurrencyCode, _Currency.CurrencyCountry, _Currency.IsPrimary, _Currency.DecimalPlace, _Currency.ty_gia, _nations_0.[NationName] AS [CurrencyCountry_NationName] FROM [MasterDB].[dbo]._Currency LEFT JOIN [MasterDB].[dbo].v_nations AS _nations_0 ON _Currency.CurrencyCountry = _nations_0.F_Id WHERE _Currency.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[vProductionOrderDetailSimple]
AS
SELECT        ProductionOrderDetailId, ProductionOrderId, ProductId, Quantity, ReserveQuantity, Note, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, IsDeleted, DeletedDatetimeUtc, OrderDetailId, 
                         SubsidiaryId, ProductionOrderCode
FROM            ManufacturingDB.dbo.vProductionOrderDetailSimple


GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[vInputBillRow] AS 
	SELECT  	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vInputBill.F_Id					AS InputBill_F_Id,
		vInputBill.CreatedByUserId		AS CreatedByUserId,
		vInputBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vInputBill.UpdatedByUserId		AS UpdatedByUserId,
		vInputBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vInputBill.LatestBillVersion	AS LatestBillVersion,
		

		row.InputTypeId					AS InputTypeId,
		vInputType.Title				AS InputType_Title,
		vInputType.IsOpenning			AS InputType_IsOpenning,
		vInputType.InputTypeCode		AS InputType_InputTypeCode
	
	,  [row].[ngay_ct],  [row].[so_ct],  [row].[mau_hd],  [row].[seri_hd],  [row].[ngay_hd],  [row].[attachment],  [row].[loai_tien],  [row].[ty_gia],  [row].[tk_no0],  [row].[tk_co0],  [row].[ong_ba],  [row].[dia_chi],  [row].[bo_phan],  [row].[kh0],  [row].[kh_co0],  [row].[stt],  [row].[noi_dung],  [row].[vthhtp],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[thue_suat_vat],  [row].[ghi_chu],  [row].[kho],  [row].[kho_lc],  [row].[khe_uoc_vay],  [row].[tk_thu_kbnn],  [row].[ma_chuong_nsnn],  [row].[ma_muc_nsnn],  [row].[cong_trinh],  [row].[phan_xuong],  [row].[khoan_muc_cp],  [row].[khoan_muc_tc],  [row].[po_code],  [row].[order_code],  [row].[ma_lsx],  [row].[dien_giai],  [row].[thue_suat_xnk],  [row].[vnd3],  [row].[vnd1],  [row].[sl_po],  [row].[sl_od],  [row].[sl_ycvt],  [row].[tk_no1],  [row].[tk_co1],  [row].[tk_no2],  [row].[tk_co2],  [row].[tk_no3],  [row].[tk_co3],  [row].[tscd],  [row].[kh1],  [row].[kh3],  [row].[tknh],  [row].[tknh_kh],  [row].[ky_hieu_hd],  [row].[ma_link_hd],  [row].[constrain_ty_gia],  [row].[vthhtp_dvt2],  [row].[so_luong_dv2],  [row].[don_gia_dv2_0],  [row].[dv_ql_hc],  [row].[constrain_sl_dg],  [row].[vnd2],  [row].[tk_no4],  [row].[tk_co4],  [row].[vnd4],  [row].[sum_vnd0],  [row].[sum_vnd1],  [row].[sum_vnd2],  [row].[sum_vnd3],  [row].[sum_vnd4],  [row].[sum_vnd5],  [row].[test01],  [row].[don_gia1],  [row].[don_gia2],  [row].[don_gia3],  [row].[don_gia4],  [row].[don_gia5],  [row].[don_gia_dvt2_1],  [row].[don_gia_dvt2_2],  [row].[don_gia_dvt2_3],  [row].[don_gia_dvt2_4],  [row].[Not_VAT],  [row].[CensorStatusId],  [row].[CheckStatusId],  [row].[sl_lsx],  [row].[CensorUserId],  [row].[CensorDatetimeUtc],  [row].[cptt],  [row].[kh4],  [row].[Mat_hang_VAT],  [row].[kh_co1],  [row].[ngoai_te1],  [row].[So_ct_goc]
		FROM InputValueRow as row WITH(NOLOCK)
			JOIN vInputBill WITH(NOLOCK) ON row.InputBill_F_Id		= vInputBill.F_Id
			JOIN vInputType WITH(NOLOCK) ON row.InputTypeId		= vInputType.F_Id	
	
	WHERE [row].IsDeleted = 0
	

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[_rc] AS 
	
	SELECT d.F_Id,d.IsBillEntry,d.SubsidiaryId,d.InputBill_F_Id,d.CreatedByUserId,d.CreatedDatetimeUtc,d.UpdatedByUserId,d.UpdatedDatetimeUtc,d.LatestBillVersion,d.InputTypeId,d.InputType_Title,d.InputType_IsOpenning,d.InputType_InputTypeCode,d.ngay_ct,d.so_ct,d.mau_hd,d.seri_hd,d.ngay_hd,d.attachment,d.loai_tien,d.ty_gia,d.tk_no0,d.tk_co0,d.ong_ba,d.dia_chi,d.bo_phan,d.kh0,d.kh_co0,d.stt,d.noi_dung,d.vthhtp,d.so_luong,d.don_gia0,d.ngoai_te0,d.vnd0,d.thue_suat_vat,d.ghi_chu,d.kho,d.kho_lc,d.khe_uoc_vay,d.tk_thu_kbnn,d.ma_chuong_nsnn,d.ma_muc_nsnn,d.cong_trinh,d.phan_xuong,d.khoan_muc_cp,d.khoan_muc_tc,d.po_code,d.order_code,d.ma_lsx,d.dien_giai,d.thue_suat_xnk,d.vnd3,d.vnd1,d.sl_po,d.sl_od,d.sl_ycvt,d.tk_no1,d.tk_co1,d.tk_no2,d.tk_co2,d.tk_no3,d.tk_co3,d.tscd,d.kh1,d.kh3,d.tknh,d.tknh_kh,d.ky_hieu_hd,d.ma_link_hd,d.constrain_ty_gia,d.vthhtp_dvt2,d.so_luong_dv2,d.don_gia_dv2_0,d.dv_ql_hc,d.constrain_sl_dg,d.vnd2,d.tk_no4,d.tk_co4,d.vnd4,d.sum_vnd0,d.sum_vnd1,d.sum_vnd2,d.sum_vnd3,d.sum_vnd4,d.sum_vnd5,d.test01,d.don_gia1,d.don_gia2,d.don_gia3,d.don_gia4,d.don_gia5,d.don_gia_dvt2_1,d.don_gia_dvt2_2,d.don_gia_dvt2_3,d.don_gia_dvt2_4,d.Not_VAT,d.CensorStatusId,d.CheckStatusId,d.sl_lsx,d.CensorUserId,d.CensorDatetimeUtc,d.cptt,d.kh4,d.Mat_hang_VAT,d.kh_co1,d.ngoai_te1,d.So_ct_goc, NULL AS loai_tien0, NULL AS ty_gia0, NULL AS loai_tien1, NULL AS ty_gia1, NULL AS kh2, NULL AS kh_co2, NULL AS loai_tien2, NULL AS ty_gia2, NULL AS ngoai_te2, NULL AS kh_co3, NULL AS loai_tien3, NULL AS ty_gia3, NULL AS ngoai_te3, NULL AS kh_co4, NULL AS loai_tien4, NULL AS ty_gia4, NULL AS ngoai_te4, NULL AS kh5, NULL AS kh_co5, NULL AS loai_tien5, NULL AS tk_co5, NULL AS tk_no5, NULL AS ty_gia5, NULL AS vnd5, NULL AS ngoai_te5

	, c.kh_no
	, c.kh_co
	, c.loai_tien_nt
	, c.tk_co
	, c.tk_no
	, c.don_gia
	, c.vnd
	, c.ngoai_te
	, c.BUT_TOAN

	FROM dbo.vInputBillRow d WITH(NOLOCK)
	
	CROSS APPLY
	(
		
			SELECT ISNULL(kh0, kh0) AS kh0,ISNULL(kh_co0, ISNULL(kh0,ISNULL(kh_co0,kh0))) AS kh_co0,NULL AS loai_tien0,tk_co0,tk_no0, NULL AS ty_gia0,don_gia0,vnd0,ngoai_te0,0 AS BUT_TOAN			
			WHERE Vnd0 <> 0 OR (tk_co0 IS NOT NULL AND tk_no0 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co0 IS NOT NULL OR tk_no0 IS NOT NULL))
			UNION ALL
			SELECT ISNULL(kh1, kh0) AS kh1,ISNULL(kh_co1, ISNULL(kh1,ISNULL(kh_co0,kh0))) AS kh_co1,NULL AS loai_tien1,tk_co1,tk_no1, NULL AS ty_gia1,don_gia1,vnd1,ngoai_te1,1 AS BUT_TOAN			
			WHERE Vnd1 <> 0 OR (tk_co1 IS NOT NULL AND tk_no1 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co1 IS NOT NULL OR tk_no1 IS NOT NULL))
			UNION ALL
			SELECT kh0 AS kh2,ISNULL(NULL,ISNULL(kh_co0,kh0)) AS kh_co2,NULL AS loai_tien2,tk_co2,tk_no2, NULL AS ty_gia2,don_gia2,vnd2, NULL AS ngoai_te2,2 AS BUT_TOAN			
			WHERE Vnd2 <> 0 OR (tk_co2 IS NOT NULL AND tk_no2 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co2 IS NOT NULL OR tk_no2 IS NOT NULL))
			UNION ALL
			SELECT ISNULL(kh3, kh0) AS kh3,ISNULL(kh3,ISNULL(kh_co0,kh0)) AS kh_co3,NULL AS loai_tien3,tk_co3,tk_no3, NULL AS ty_gia3,don_gia3,vnd3, NULL AS ngoai_te3,3 AS BUT_TOAN			
			WHERE Vnd3 <> 0 OR (tk_co3 IS NOT NULL AND tk_no3 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co3 IS NOT NULL OR tk_no3 IS NOT NULL))
			UNION ALL
			SELECT ISNULL(kh4, kh0) AS kh4,ISNULL(kh4,ISNULL(kh_co0,kh0)) AS kh_co4,NULL AS loai_tien4,tk_co4,tk_no4, NULL AS ty_gia4,don_gia4,vnd4, NULL AS ngoai_te4,4 AS BUT_TOAN			
			WHERE Vnd4 <> 0 OR (tk_co4 IS NOT NULL AND tk_no4 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co4 IS NOT NULL OR tk_no4 IS NOT NULL))

	) c (kh_no, kh_co, loai_tien_nt, tk_co, tk_no, ty_gia, don_gia, vnd, ngoai_te, BUT_TOAN)
	 WHERE d.CensorStatusId = 1 ;

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[_rc_all] AS 
	
	SELECT d.F_Id,d.IsBillEntry,d.SubsidiaryId,d.InputBill_F_Id,d.CreatedByUserId,d.CreatedDatetimeUtc,d.UpdatedByUserId,d.UpdatedDatetimeUtc,d.LatestBillVersion,d.InputTypeId,d.InputType_Title,d.InputType_IsOpenning,d.InputType_InputTypeCode,d.ngay_ct,d.so_ct,d.mau_hd,d.seri_hd,d.ngay_hd,d.attachment,d.loai_tien,d.ty_gia,d.tk_no0,d.tk_co0,d.ong_ba,d.dia_chi,d.bo_phan,d.kh0,d.kh_co0,d.stt,d.noi_dung,d.vthhtp,d.so_luong,d.don_gia0,d.ngoai_te0,d.vnd0,d.thue_suat_vat,d.ghi_chu,d.kho,d.kho_lc,d.khe_uoc_vay,d.tk_thu_kbnn,d.ma_chuong_nsnn,d.ma_muc_nsnn,d.cong_trinh,d.phan_xuong,d.khoan_muc_cp,d.khoan_muc_tc,d.po_code,d.order_code,d.ma_lsx,d.dien_giai,d.thue_suat_xnk,d.vnd3,d.vnd1,d.sl_po,d.sl_od,d.sl_ycvt,d.tk_no1,d.tk_co1,d.tk_no2,d.tk_co2,d.tk_no3,d.tk_co3,d.tscd,d.kh1,d.kh3,d.tknh,d.tknh_kh,d.ky_hieu_hd,d.ma_link_hd,d.constrain_ty_gia,d.vthhtp_dvt2,d.so_luong_dv2,d.don_gia_dv2_0,d.dv_ql_hc,d.constrain_sl_dg,d.vnd2,d.tk_no4,d.tk_co4,d.vnd4,d.sum_vnd0,d.sum_vnd1,d.sum_vnd2,d.sum_vnd3,d.sum_vnd4,d.sum_vnd5,d.test01,d.don_gia1,d.don_gia2,d.don_gia3,d.don_gia4,d.don_gia5,d.don_gia_dvt2_1,d.don_gia_dvt2_2,d.don_gia_dvt2_3,d.don_gia_dvt2_4,d.Not_VAT,d.CensorStatusId,d.CheckStatusId,d.sl_lsx,d.CensorUserId,d.CensorDatetimeUtc,d.cptt,d.kh4,d.Mat_hang_VAT,d.kh_co1,d.ngoai_te1,d.So_ct_goc, NULL AS loai_tien0, NULL AS ty_gia0, NULL AS loai_tien1, NULL AS ty_gia1, NULL AS kh2, NULL AS kh_co2, NULL AS loai_tien2, NULL AS ty_gia2, NULL AS ngoai_te2, NULL AS kh_co3, NULL AS loai_tien3, NULL AS ty_gia3, NULL AS ngoai_te3, NULL AS kh_co4, NULL AS loai_tien4, NULL AS ty_gia4, NULL AS ngoai_te4, NULL AS kh5, NULL AS kh_co5, NULL AS loai_tien5, NULL AS tk_co5, NULL AS tk_no5, NULL AS ty_gia5, NULL AS vnd5, NULL AS ngoai_te5

	, c.kh_no
	, c.kh_co
	, c.loai_tien_nt
	, c.tk_co
	, c.tk_no
	, c.don_gia
	, c.vnd
	, c.ngoai_te
	, c.BUT_TOAN

	FROM dbo.vInputBillRow d WITH(NOLOCK)
	
	CROSS APPLY
	(
		
			SELECT ISNULL(kh0, kh0) AS kh0,ISNULL(kh_co0, ISNULL(kh0,ISNULL(kh_co0,kh0))) AS kh_co0,NULL AS loai_tien0,tk_co0,tk_no0, NULL AS ty_gia0,don_gia0,vnd0,ngoai_te0,0 AS BUT_TOAN			
			WHERE Vnd0 <> 0 OR (tk_co0 IS NOT NULL AND tk_no0 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co0 IS NOT NULL OR tk_no0 IS NOT NULL))
			UNION ALL
			SELECT ISNULL(kh1, kh0) AS kh1,ISNULL(kh_co1, ISNULL(kh1,ISNULL(kh_co0,kh0))) AS kh_co1,NULL AS loai_tien1,tk_co1,tk_no1, NULL AS ty_gia1,don_gia1,vnd1,ngoai_te1,1 AS BUT_TOAN			
			WHERE Vnd1 <> 0 OR (tk_co1 IS NOT NULL AND tk_no1 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co1 IS NOT NULL OR tk_no1 IS NOT NULL))
			UNION ALL
			SELECT kh0 AS kh2,ISNULL(NULL,ISNULL(kh_co0,kh0)) AS kh_co2,NULL AS loai_tien2,tk_co2,tk_no2, NULL AS ty_gia2,don_gia2,vnd2, NULL AS ngoai_te2,2 AS BUT_TOAN			
			WHERE Vnd2 <> 0 OR (tk_co2 IS NOT NULL AND tk_no2 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co2 IS NOT NULL OR tk_no2 IS NOT NULL))
			UNION ALL
			SELECT ISNULL(kh3, kh0) AS kh3,ISNULL(kh3,ISNULL(kh_co0,kh0)) AS kh_co3,NULL AS loai_tien3,tk_co3,tk_no3, NULL AS ty_gia3,don_gia3,vnd3, NULL AS ngoai_te3,3 AS BUT_TOAN			
			WHERE Vnd3 <> 0 OR (tk_co3 IS NOT NULL AND tk_no3 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co3 IS NOT NULL OR tk_no3 IS NOT NULL))
			UNION ALL
			SELECT ISNULL(kh4, kh0) AS kh4,ISNULL(kh4,ISNULL(kh_co0,kh0)) AS kh_co4,NULL AS loai_tien4,tk_co4,tk_no4, NULL AS ty_gia4,don_gia4,vnd4, NULL AS ngoai_te4,4 AS BUT_TOAN			
			WHERE Vnd4 <> 0 OR (tk_co4 IS NOT NULL AND tk_no4 IS NOT NULL)
				OR (InputType_IsOpenning = 1 AND (tk_co4 IS NOT NULL OR tk_no4 IS NOT NULL))

	) c (kh_no, kh_co, loai_tien_nt, tk_co, tk_no, ty_gia, don_gia, vnd, ngoai_te, BUT_TOAN)
	

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[_rc_detail] AS  
    SELECT F_Id,IsBillEntry,SubsidiaryId,InputBill_F_Id,CreatedByUserId,CreatedDatetimeUtc,UpdatedByUserId,UpdatedDatetimeUtc,LatestBillVersion,InputTypeId,InputType_Title,InputType_IsOpenning,InputType_InputTypeCode,ngay_ct,so_ct,mau_hd,seri_hd,ngay_hd,attachment,loai_tien,ty_gia,tk_no0,tk_co0,ong_ba,dia_chi,bo_phan,kh0,kh_co0,stt,noi_dung,vthhtp,so_luong,don_gia0,ngoai_te0,vnd0,thue_suat_vat,ghi_chu,kho,kho_lc,khe_uoc_vay,tk_thu_kbnn,ma_chuong_nsnn,ma_muc_nsnn,cong_trinh,phan_xuong,khoan_muc_cp,khoan_muc_tc,po_code,order_code,ma_lsx,dien_giai,thue_suat_xnk,vnd3,vnd1,sl_po,sl_od,sl_ycvt,tk_no1,tk_co1,tk_no2,tk_co2,tk_no3,tk_co3,tscd,kh1,kh3,tknh,tknh_kh,ky_hieu_hd,ma_link_hd,constrain_ty_gia,vthhtp_dvt2,so_luong_dv2,don_gia_dv2_0,dv_ql_hc,constrain_sl_dg,vnd2,tk_no4,tk_co4,vnd4,sum_vnd0,sum_vnd1,sum_vnd2,sum_vnd3,sum_vnd4,sum_vnd5,test01,don_gia1,don_gia2,don_gia3,don_gia4,don_gia5,don_gia_dvt2_1,don_gia_dvt2_2,don_gia_dvt2_3,don_gia_dvt2_4,Not_VAT,CensorStatusId,CheckStatusId,sl_lsx,CensorUserId,CensorDatetimeUtc,cptt,kh4,Mat_hang_VAT,kh_co1,ngoai_te1,So_ct_goc, c.Tk, c.Tk_du, c.IsDebt, c.don_gia, c.Vnd_no, c.Vnd_co, c.Ngoai_te_no, c.Ngoai_te_co, c.kh, c.BUT_TOAN FROM vInputBillRow r WITH(NOLOCK)
    CROSS APPLY
    ( 
						SELECT r.tk_no0 Tk, r.tk_co0 Tk_du, 1 AS IsDebt, r.don_gia0 don_gia, r.vnd0 Vnd_no, NULL Vnd_co, r.ngoai_te0 Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh0, r.kh0) kh, 0 AS BUT_TOAN WHERE ((r.vnd0 <> 0 OR InputType_IsOpenning =1) OR r.tk_co0 IS NOT NULL) AND (r.tk_no0 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co0 Tk, r.tk_no0 Tk_du, 0 AS IsDebt, r.don_gia0 don_gia, NULL Vnd_no, r.vnd0 Vnd_co, NULL Ngoai_te_no,r.ngoai_te0 Ngoai_te_co, ISNULL(r.kh_co0,ISNULL(r.kh0,ISNULL(r.kh_co0, r.kh0))) kh, 0 AS BUT_TOAN WHERE ((r.vnd0<> 0 OR InputType_IsOpenning =1) OR r.tk_no0 IS NOT NULL) AND (r.tk_co0 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no1 Tk, r.tk_co1 Tk_du, 1 AS IsDebt, r.don_gia1 don_gia, r.vnd1 Vnd_no, NULL Vnd_co, r.ngoai_te1 Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh1, r.kh0) kh, 1 AS BUT_TOAN WHERE ((r.vnd1 <> 0 OR InputType_IsOpenning =1) OR r.tk_co1 IS NOT NULL) AND (r.tk_no1 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co1 Tk, r.tk_no1 Tk_du, 0 AS IsDebt, r.don_gia1 don_gia, NULL Vnd_no, r.vnd1 Vnd_co, NULL Ngoai_te_no,r.ngoai_te1 Ngoai_te_co, ISNULL(r.kh_co1,ISNULL(r.kh1,ISNULL(r.kh_co0, r.kh0))) kh, 1 AS BUT_TOAN WHERE ((r.vnd1<> 0 OR InputType_IsOpenning =1) OR r.tk_no1 IS NOT NULL) AND (r.tk_co1 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no2 Tk, r.tk_co2 Tk_du, 1 AS IsDebt, r.don_gia2 don_gia, r.vnd2 Vnd_no, NULL Vnd_co, NULL Ngoai_te_no, NULL Ngoai_te_co, ISNULL(NULL, r.kh0) kh, 2 AS BUT_TOAN WHERE ((r.vnd2 <> 0 OR InputType_IsOpenning =1) OR r.tk_co2 IS NOT NULL) AND (r.tk_no2 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co2 Tk, r.tk_no2 Tk_du, 0 AS IsDebt, r.don_gia2 don_gia, NULL Vnd_no, r.vnd2 Vnd_co, NULL Ngoai_te_no,NULL Ngoai_te_co, ISNULL(NULL,ISNULL(NULL,ISNULL(r.kh_co0, r.kh0))) kh, 2 AS BUT_TOAN WHERE ((r.vnd2<> 0 OR InputType_IsOpenning =1) OR r.tk_no2 IS NOT NULL) AND (r.tk_co2 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no3 Tk, r.tk_co3 Tk_du, 1 AS IsDebt, r.don_gia3 don_gia, r.vnd3 Vnd_no, NULL Vnd_co, NULL Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh3, r.kh0) kh, 3 AS BUT_TOAN WHERE ((r.vnd3 <> 0 OR InputType_IsOpenning =1) OR r.tk_co3 IS NOT NULL) AND (r.tk_no3 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co3 Tk, r.tk_no3 Tk_du, 0 AS IsDebt, r.don_gia3 don_gia, NULL Vnd_no, r.vnd3 Vnd_co, NULL Ngoai_te_no,NULL Ngoai_te_co, ISNULL(NULL,ISNULL(r.kh3,ISNULL(r.kh_co0, r.kh0))) kh, 3 AS BUT_TOAN WHERE ((r.vnd3<> 0 OR InputType_IsOpenning =1) OR r.tk_no3 IS NOT NULL) AND (r.tk_co3 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no4 Tk, r.tk_co4 Tk_du, 1 AS IsDebt, r.don_gia4 don_gia, r.vnd4 Vnd_no, NULL Vnd_co, NULL Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh4, r.kh0) kh, 4 AS BUT_TOAN WHERE ((r.vnd4 <> 0 OR InputType_IsOpenning =1) OR r.tk_co4 IS NOT NULL) AND (r.tk_no4 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co4 Tk, r.tk_no4 Tk_du, 0 AS IsDebt, r.don_gia4 don_gia, NULL Vnd_no, r.vnd4 Vnd_co, NULL Ngoai_te_no,NULL Ngoai_te_co, ISNULL(NULL,ISNULL(r.kh4,ISNULL(r.kh_co0, r.kh0))) kh, 4 AS BUT_TOAN WHERE ((r.vnd4<> 0 OR InputType_IsOpenning =1) OR r.tk_no4 IS NOT NULL) AND (r.tk_co4 IS NOT NULL)
						 ) c WHERE r.CensorStatusId = 1 ;

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[_rc_detail_all] AS  
    SELECT F_Id,IsBillEntry,SubsidiaryId,InputBill_F_Id,CreatedByUserId,CreatedDatetimeUtc,UpdatedByUserId,UpdatedDatetimeUtc,LatestBillVersion,InputTypeId,InputType_Title,InputType_IsOpenning,InputType_InputTypeCode,ngay_ct,so_ct,mau_hd,seri_hd,ngay_hd,attachment,loai_tien,ty_gia,tk_no0,tk_co0,ong_ba,dia_chi,bo_phan,kh0,kh_co0,stt,noi_dung,vthhtp,so_luong,don_gia0,ngoai_te0,vnd0,thue_suat_vat,ghi_chu,kho,kho_lc,khe_uoc_vay,tk_thu_kbnn,ma_chuong_nsnn,ma_muc_nsnn,cong_trinh,phan_xuong,khoan_muc_cp,khoan_muc_tc,po_code,order_code,ma_lsx,dien_giai,thue_suat_xnk,vnd3,vnd1,sl_po,sl_od,sl_ycvt,tk_no1,tk_co1,tk_no2,tk_co2,tk_no3,tk_co3,tscd,kh1,kh3,tknh,tknh_kh,ky_hieu_hd,ma_link_hd,constrain_ty_gia,vthhtp_dvt2,so_luong_dv2,don_gia_dv2_0,dv_ql_hc,constrain_sl_dg,vnd2,tk_no4,tk_co4,vnd4,sum_vnd0,sum_vnd1,sum_vnd2,sum_vnd3,sum_vnd4,sum_vnd5,test01,don_gia1,don_gia2,don_gia3,don_gia4,don_gia5,don_gia_dvt2_1,don_gia_dvt2_2,don_gia_dvt2_3,don_gia_dvt2_4,Not_VAT,CensorStatusId,CheckStatusId,sl_lsx,CensorUserId,CensorDatetimeUtc,cptt,kh4,Mat_hang_VAT,kh_co1,ngoai_te1,So_ct_goc, c.Tk, c.Tk_du, c.IsDebt, c.don_gia, c.Vnd_no, c.Vnd_co, c.Ngoai_te_no, c.Ngoai_te_co, c.kh, c.BUT_TOAN FROM vInputBillRow r WITH(NOLOCK)
    CROSS APPLY
    ( 
						SELECT r.tk_no0 Tk, r.tk_co0 Tk_du, 1 AS IsDebt, r.don_gia0 don_gia, r.vnd0 Vnd_no, NULL Vnd_co, r.ngoai_te0 Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh0, r.kh0) kh, 0 AS BUT_TOAN WHERE ((r.vnd0 <> 0 OR InputType_IsOpenning =1) OR r.tk_co0 IS NOT NULL) AND (r.tk_no0 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co0 Tk, r.tk_no0 Tk_du, 0 AS IsDebt, r.don_gia0 don_gia, NULL Vnd_no, r.vnd0 Vnd_co, NULL Ngoai_te_no,r.ngoai_te0 Ngoai_te_co, ISNULL(r.kh_co0,ISNULL(r.kh0,ISNULL(r.kh_co0, r.kh0))) kh, 0 AS BUT_TOAN WHERE ((r.vnd0<> 0 OR InputType_IsOpenning =1) OR r.tk_no0 IS NOT NULL) AND (r.tk_co0 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no1 Tk, r.tk_co1 Tk_du, 1 AS IsDebt, r.don_gia1 don_gia, r.vnd1 Vnd_no, NULL Vnd_co, r.ngoai_te1 Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh1, r.kh0) kh, 1 AS BUT_TOAN WHERE ((r.vnd1 <> 0 OR InputType_IsOpenning =1) OR r.tk_co1 IS NOT NULL) AND (r.tk_no1 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co1 Tk, r.tk_no1 Tk_du, 0 AS IsDebt, r.don_gia1 don_gia, NULL Vnd_no, r.vnd1 Vnd_co, NULL Ngoai_te_no,r.ngoai_te1 Ngoai_te_co, ISNULL(r.kh_co1,ISNULL(r.kh1,ISNULL(r.kh_co0, r.kh0))) kh, 1 AS BUT_TOAN WHERE ((r.vnd1<> 0 OR InputType_IsOpenning =1) OR r.tk_no1 IS NOT NULL) AND (r.tk_co1 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no2 Tk, r.tk_co2 Tk_du, 1 AS IsDebt, r.don_gia2 don_gia, r.vnd2 Vnd_no, NULL Vnd_co, NULL Ngoai_te_no, NULL Ngoai_te_co, ISNULL(NULL, r.kh0) kh, 2 AS BUT_TOAN WHERE ((r.vnd2 <> 0 OR InputType_IsOpenning =1) OR r.tk_co2 IS NOT NULL) AND (r.tk_no2 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co2 Tk, r.tk_no2 Tk_du, 0 AS IsDebt, r.don_gia2 don_gia, NULL Vnd_no, r.vnd2 Vnd_co, NULL Ngoai_te_no,NULL Ngoai_te_co, ISNULL(NULL,ISNULL(NULL,ISNULL(r.kh_co0, r.kh0))) kh, 2 AS BUT_TOAN WHERE ((r.vnd2<> 0 OR InputType_IsOpenning =1) OR r.tk_no2 IS NOT NULL) AND (r.tk_co2 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no3 Tk, r.tk_co3 Tk_du, 1 AS IsDebt, r.don_gia3 don_gia, r.vnd3 Vnd_no, NULL Vnd_co, NULL Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh3, r.kh0) kh, 3 AS BUT_TOAN WHERE ((r.vnd3 <> 0 OR InputType_IsOpenning =1) OR r.tk_co3 IS NOT NULL) AND (r.tk_no3 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co3 Tk, r.tk_no3 Tk_du, 0 AS IsDebt, r.don_gia3 don_gia, NULL Vnd_no, r.vnd3 Vnd_co, NULL Ngoai_te_no,NULL Ngoai_te_co, ISNULL(NULL,ISNULL(r.kh3,ISNULL(r.kh_co0, r.kh0))) kh, 3 AS BUT_TOAN WHERE ((r.vnd3<> 0 OR InputType_IsOpenning =1) OR r.tk_no3 IS NOT NULL) AND (r.tk_co3 IS NOT NULL)
						UNION ALL
						SELECT r.tk_no4 Tk, r.tk_co4 Tk_du, 1 AS IsDebt, r.don_gia4 don_gia, r.vnd4 Vnd_no, NULL Vnd_co, NULL Ngoai_te_no, NULL Ngoai_te_co, ISNULL(r.kh4, r.kh0) kh, 4 AS BUT_TOAN WHERE ((r.vnd4 <> 0 OR InputType_IsOpenning =1) OR r.tk_co4 IS NOT NULL) AND (r.tk_no4 IS NOT NULL) 
						UNION ALL
						SELECT r.tk_co4 Tk, r.tk_no4 Tk_du, 0 AS IsDebt, r.don_gia4 don_gia, NULL Vnd_no, r.vnd4 Vnd_co, NULL Ngoai_te_no,NULL Ngoai_te_co, ISNULL(NULL,ISNULL(r.kh4,ISNULL(r.kh_co0, r.kh0))) kh, 4 AS BUT_TOAN WHERE ((r.vnd4<> 0 OR InputType_IsOpenning =1) OR r.tk_no4 IS NOT NULL) AND (r.tk_co4 IS NOT NULL)
						 ) c

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_CalcProductPrice_WeightedAverage]
    @SubId INT,
    @Date DATETIME2 = NULL,
    @ProductIds _INTVALUES READONLY
AS
BEGIN;
    WITH tmp
      AS (SELECT d.Tk AS Tk,
                 d.vthhtp AS ProductId,
                 --SUM(CASE
                 --         WHEN d.InRowNumber = 1 THEN CASE d.IsDebt
                 --                                          WHEN 1 THEN d.so_luong
                 --                                          ELSE -d.so_luong END
                 --         ELSE 0 END) TotalQuantity,
				  SUM(CASE d.IsDebt
                                                           WHEN 1 THEN d.so_luong
                                                           ELSE -d.so_luong END
                         ) TotalQuantity,
                 SUM(CASE
                          WHEN d.IsDebt = 1 THEN d.Vnd_no
                          ELSE -d.Vnd_co END) TotalMoney
            FROM (   SELECT ROW_NUMBER() OVER (PARTITION BY d.F_Id ORDER BY d.ngay_ct) InRowNumber,
                            d.Vnd_no,
                            d.Vnd_co,
                            d.BUT_TOAN,
                            d.so_luong,
                            d.vthhtp,
                            d.Tk,
                            d.IsDebt
                       FROM dbo._rc_detail d
                      WHERE d.SubsidiaryId = @SubId
                        AND d.ngay_ct      <= @Date
                        AND d.vthhtp IN ( SELECT [Value] FROM @ProductIds )
                        AND (   d.Tk LIKE '151%'
                           OR   d.Tk LIKE '152%'
                           OR   d.Tk LIKE '153%'
                           OR   d.Tk LIKE '155%'
                           OR   d.Tk LIKE '156%'
                           OR   d.Tk LIKE '157%'
                           OR   d.Tk LIKE '158%')) d
           GROUP BY d.Tk,
                    d.vthhtp)
    SELECT Tk,
           ProductId,
           TotalQuantity,
           TotalMoney,
           CASE
                WHEN TotalQuantity <> 0 THEN TotalMoney / TotalQuantity
                ELSE NULL END WeightedAveragePrice
      FROM tmp;
END;

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_ProductByQuantity]
	@SubId int,
	@Tk nvarchar(128),
	@FromDate datetime2,
	@ToDate datetime2,
	@ProductCode nvarchar(128),
	@StockId int	
AS
BEGIN

	SELECT
		p.F_Id, 
		p.ProductCode, 
		p.ProductName, 
		p.UnitId_UnitName,

		SUM(CASE WHEN d.ngay_ct < @FromDate THEN
				CASE WHEN d.IsDebt = 1 THEN d.so_luong ELSE -d.so_luong END
			ELSE NULL
			END) AS dau_ky,

		SUM(CASE WHEN d.IsDebt = 1 THEN d.so_luong ELSE NULL END) AS nhap_trong_ky,

		SUM(CASE WHEN d.IsDebt = 0 THEN d.so_luong ELSE NULL END) AS xuat_trong_ky,

		SUM(CASE WHEN d.IsDebt = 1 THEN d.so_luong ELSE -d.so_luong END) AS cuoi_ky

		FROM dbo._rc_detail d

		JOIN dbo.v_Product p ON d.vthhtp = p.F_Id

	WHERE d.SubsidiaryId = @SubId
		AND d.ngay_ct BETWEEN @FromDate AND @ToDate
		AND (LEN(ISNULL(@Tk,''))=0 OR d.Tk LIKE @Tk + '%')
		AND (ISNULL(@StockId,0)= 0 OR  d.kho = @StockId)
		AND (LEN(ISNULL(@ProductCode,'')) = 0 OR p.ProductCode = @ProductCode)
	GROUP BY p.F_Id, p.ProductCode, p.ProductName, p.UnitId_UnitName
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedCostTransfer]
    @FromDate AS datetime,
    @ToDate AS datetime,
	@Type AS int,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	SET @ResStatus = 0

	IF (@Type = 1 AND EXISTS (
		SELECT 1 
			FROM [dbo].[_rc] tk 
			WHERE (tk.tk_co LIKE '621%' OR tk.tk_co LIKE '622%' OR tk.tk_co LIKE '627%') AND tk.tk_no LIKE '154%' 
				AND tk.InputType_InputTypeCode = 'CTGS_KCPB_COST' 
				AND tk.ngay_ct BETWEEN @FromDate AND @ToDate 
				AND tk.SubsidiaryId = @SubId
		)
	)
	BEGIN
	    SET @ResStatus = 1
	END
	
	IF ((@Type = 2 OR @Type = 3) AND EXISTS (
		SELECT 1 
			FROM [dbo].[_rc] tk 
			WHERE tk.tk_co LIKE '154%' AND tk.tk_no LIKE '155%' 
				AND tk.InputType_InputTypeCode = 'CTGS_KCPB_COST' 
				AND tk.ngay_ct BETWEEN @FromDate AND @ToDate 
				AND tk.SubsidiaryId = @SubId
		)
	)
	BEGIN
	    SET @ResStatus = 1
	END
		
END

GO

USE AccountancyDB
GO
/**
* 2022-05-22 Only delete details, update do not delete bill if not necessary
*/
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_DeleteCostTransfer]
  @FromDate AS datetime ,
  @ToDate AS datetime,
	@Type AS int,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	BEGIN TRANSACTION
		EXEC dbo.asp_ValidateBillDate @SubId = @SubId, @BillDate = NULL, @OldDate = @FromDate, @ResStatus = @ResStatus OUTPUT
		IF @ResStatus = 1
		BEGIN
			DECLARE @Rows TABLE
			(
				BillId BIGINT,
				F_Id BIGINT
			)
			
			IF @Type = 1--KC đầu 6 sang 154
			BEGIN
				INSERT INTO @Rows (BillId,
			                   F_Id)
				SELECT tk.InputBill_F_Id, tk.F_Id
				FROM dbo._rc_all tk
				WHERE tk.InputType_InputTypeCode = 'CTGS_KCPB_COST' AND (tk.tk_co LIKE '621%' OR tk.tk_co LIKE '622%' OR tk.tk_co LIKE '627%') AND tk.tk_no LIKE '154%' AND tk.ngay_ct BETWEEN @FromDate AND @ToDate AND tk.SubsidiaryId = @SubId
			END
			
			IF @Type = 2 OR @Type = 3--KC 154 sang 155 đích danh, --KC 154 sang 155 không đích danh
			BEGIN
				INSERT INTO @Rows (BillId,
			                   F_Id)
				SELECT tk.InputBill_F_Id, tk.F_Id
				FROM dbo._rc_all tk
				WHERE tk.InputType_InputTypeCode = 'CTGS_KCPB_COST' AND tk.tk_co LIKE '154%' AND tk.tk_no LIKE '155%' AND tk.ngay_ct BETWEEN @FromDate AND @ToDate AND tk.SubsidiaryId = @SubId
			END

			-- delete rows
			UPDATE d
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE(),
				SystemLog =  'Deleted by cost transfer'
			FROM dbo.InputValueRow d
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.F_Id = d.F_Id)
				AND d.IsDeleted = 0

			-- delete bills
			UPDATE b
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE()
			FROM dbo.InputBill b
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.BillId = b.F_Id)
			AND NOT EXISTS (SELECT 0 FROM dbo._rc_all a WHERE a.InputBill_F_Id = b.F_Id)
			AND b.IsDeleted = 0
		END
	COMMIT TRANSACTION
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcCostTransferBalanceZero]
	@ToDate AS datetime,
	@SubId AS int
AS
BEGIN

	/*
	SELECT
		total.*,
		acc_no.F_Id tk_no_id,
		acc_co.F_Id tk_co_id
	FROM
	(
		SELECT
			CASE 
				WHEN bc_sum.tk IS NULL AND bc_sum.vnd > 0 THEN '4211' 
				WHEN (bc_sum.tk IS NULL AND bc_sum.vnd < 0) OR (bc_sum.tk IS NOT NULL AND bc_sum.vnd > 0) THEN '911' 
				ELSE bc_sum.tk 
			END tk_no,
			CASE 
				WHEN bc_sum.tk IS NULL AND bc_sum.vnd < 0 THEN '4211'
				WHEN (bc_sum.tk IS NULL AND bc_sum.vnd > 0) OR (bc_sum.tk IS NOT NULL AND bc_sum.vnd < 0) THEN '911' 
				ELSE bc_sum.tk
			END tk_co,
			CASE 
				WHEN bc_sum.tk IS NOT NULL AND bc_sum.vnd > 0 THEN N'Kết chuyển chi phí' 
				WHEN bc_sum.tk IS NOT NULL AND bc_sum.vnd < 0 THEN N'Kết chuyển doanh thu và thu nhập khác' 
				WHEN bc_sum.tk IS NULL AND bc_sum.vnd > 0 THEN N'Kết chuyển lỗ' 
				ELSE N'Kết chuyển lãi' 
			END noi_dung,
			ABS(bc_sum.vnd) vnd
		FROM
		(SELECT
			bc.tk tk,
			SUM(bc.vnd) vnd
		FROM 
		
		(
			SELECT 
				ISNULL(no_ck.tk,co_ck.tk) tk,
				(ISNULL(no_ck.vnd,0) - ISNULL(co_ck.vnd,0)) vnd	
			FROM 
			(
				SELECT tk.tk_no tk, SUM(ISNULL(tk.vnd,0)) vnd
				FROM
				[dbo].[_rc] tk
				WHERE (tk.tk_no LIKE '631%' OR tk.tk_no LIKE '632%' OR tk.tk_no LIKE '635%' OR tk.tk_no LIKE '641%' OR tk.tk_no LIKE '642%' OR tk.tk_no LIKE '811%' 
				OR tk.tk_no LIKE '821%' OR tk.tk_no LIKE '511%' OR tk.tk_no LIKE '515%' OR tk.tk_no LIKE '711%') 
				AND tk.ngay_ct <= @ToDate AND tk.SubsidiaryId = @SubId
				GROUP BY tk.tk_no
			) no_ck
			FULL OUTER JOIN 
			(
				SELECT tk.tk_co tk, SUM(ISNULL(tk.vnd,0)) vnd
				FROM
				[dbo].[_rc] tk
				WHERE (tk.tk_co LIKE '631%' OR tk.tk_co LIKE '632%' OR tk.tk_co LIKE '635%' OR tk.tk_co LIKE '641%' OR tk.tk_co LIKE '642%' OR tk.tk_co LIKE '811%'
				OR tk.tk_co LIKE '821%' OR tk.tk_co LIKE '511%' OR tk.tk_co LIKE '515%' OR tk.tk_co LIKE '711%') 
				AND tk.ngay_ct <= @ToDate AND tk.SubsidiaryId = @SubId
				GROUP BY tk.tk_co
			) co_ck
			ON no_ck.tk = co_ck.tk WHERE ISNULL(no_ck.vnd,0) != ISNULL(co_ck.vnd,0)
		) bc
		GROUP BY ROLLUP(bc.tk)) bc_sum
	) total
	LEFT JOIN v_AccountingAccount acc_no ON total.tk_no = acc_no.AccountNumber
	LEFT JOIN v_AccountingAccount acc_co ON total.tk_co = acc_co.AccountNumber
	*/


	;WITH duTk AS
	(
		SELECT 
			d.Tk, 
			SUM(ISNULL(d.Vnd_no,0)) - SUM(ISNULL(d.Vnd_co,0)) Du_no,
			SUM(ISNULL(d.Vnd_co,0)) - SUM(ISNULL(d.Vnd_no,0)) Du_co
		FROM
				[dbo].[_rc_detail] d
		WHERE (
				d.Tk LIKE '631%' OR d.Tk LIKE '632%' OR d.Tk LIKE '635%' OR d.Tk LIKE '641%' OR d.Tk LIKE '642%' OR d.Tk LIKE '811%'
				OR d.Tk LIKE '821%' OR d.Tk LIKE '511%' OR d.Tk LIKE '515%' OR d.Tk LIKE '711%' OR d.Tk LIKE '911%'
			) 
			AND d.ngay_ct <= @ToDate AND d.SubsidiaryId = @SubId
		GROUP BY d.Tk
	), gtype AS (
		SELECT
			CASE 
				WHEN d.Tk LIKE '631%' OR d.Tk LIKE '632%' OR d.Tk LIKE '635%'  OR d.Tk LIKE '641%' OR d.Tk LIKE '642%' OR d.Tk LIKE '811%' OR d.Tk LIKE '821%' THEN 1
				WHEN d.Tk LIKE '511%' OR d.Tk LIKE '512%' OR d.Tk LIKE '515%'  OR d.Tk LIKE '711%' THEN 2
				WHEN d.Tk LIKE '911%' THEN 3
				ELSE NULL
			END GType,
			d.Tk,
			d.Du_no,
			d.Du_co
		FROM duTk d
	), sum911 AS (
		SELECT 
			sum911.duCo911C + sum911.sumCoB - sum911.sumNoA  AS DuNo911D
		FROM
		(
			SELECT 
				sumNoA = SUM(CASE WHEN gtype.GType = 1 THEN gtype.Du_no ELSE 0 END),
				sumCoB = SUM(CASE WHEN gtype.GType = 2 THEN gtype.Du_co ELSE 0 END),
				duCo911C = SUM(CASE WHEN gtype.GType = 3 THEN gtype.Du_co ELSE 0 END)
			FROM gtype
		) sum911
	)
	SELECT * FROM
	(
		SELECT
			gtype.GType,
			CASE 
				WHEN gtype.GType = 1 THEN '911'
				WHEN gtype.GType = 2 THEN gtype.Tk	
				ELSE NULL
			END tk_no,
			CASE 
				WHEN gtype.GType = 1 THEN gtype.Tk
				WHEN gtype.GType = 2 THEN '911'		
				ELSE NULL
			END tk_co,
			CASE 
				WHEN gtype.GType = 1 THEN N'Kết chuyển chi phí'
				WHEN gtype.GType = 2 THEN N'Kết chuyển doanh thu và thu nhập khác'	
				ELSE NULL
			END noi_dung,
			CASE 
				WHEN gtype.GType = 1 THEN gtype.Du_no
				WHEN gtype.GType = 2 THEN gtype.Du_co		
				ELSE NULL
			END vnd	
		FROM gtype WHERE gtype.GType IN (1,2)

		UNION

		SELECT
			3 AS GType,
			CASE 		
				WHEN DuNo911D > 0 THEN '911'
				ELSE '4212'
			END tk_no,
			CASE 		
				WHEN DuNo911D > 0 THEN '4212'
				ELSE '911'
			END tk_co,
			CASE 		
				WHEN DuNo911D>0 THEN N'Kết chuyển lãi'
				ELSE N'Kết chuyển lỗ'
			END noi_dung,
			ABS(DuNo911D) vnd
		FROM sum911
	) v
	WHERE v.vnd > 0
	ORDER BY v.GType, tk_no, tk_co

	
END


GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedCostTransferBalanceZero]
  @FromDate AS datetime,
  @ToDate AS datetime,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	SET @ResStatus = 0

	IF (EXISTS (SELECT 1 FROM [dbo].[_rc] tk WHERE tk.InputType_InputTypeCode = 'CTGS_KCPB_BALANCE_ZERO' AND tk.ngay_ct BETWEEN @FromDate AND @ToDate AND tk.SubsidiaryId = @SubId))
		SET @ResStatus = 1
		
END

GO

USE AccountancyDB
GO
/**
* 2022-05-22 Only delete details, update do not delete bill if not necessary
*/
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_DeleteCostTransferBalanceZero]
  @FromDate AS datetime ,
  @ToDate AS datetime,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	BEGIN TRANSACTION
		EXEC asp_ValidateBillDate @SubId = @SubId, @BillDate = NULL, @OldDate = @FromDate, @ResStatus = @ResStatus OUTPUT
		IF @ResStatus = 1
		BEGIN
			DECLARE @Rows TABLE
			(
				BillId BIGINT,
				F_Id BIGINT
			)

			INSERT INTO @Rows (BillId,
			                   F_Id)
			SELECT tk.InputBill_F_Id, tk.F_Id
			FROM dbo._rc_all tk
			WHERE tk.InputType_InputTypeCode = 'CTGS_KCPB_BALANCE_ZERO' AND tk.ngay_ct BETWEEN @FromDate AND @ToDate AND tk.SubsidiaryId = @SubId;

			-- delete rows
			UPDATE d
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE(),
				SystemLog =  'Deleted by transfer balance zero'
			FROM dbo.InputValueRow d
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.F_Id = d.F_Id)

			-- delete bills
			UPDATE b
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE()
			FROM dbo.InputBill b
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.BillId = b.F_Id)
			AND NOT EXISTS (SELECT 0 FROM dbo._rc_all a WHERE a.InputBill_F_Id = b.F_Id)			
		END
	COMMIT TRANSACTION
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedFixExchangeRate]
  @FromDate AS datetime,
  @ToDate AS datetime,
	@Currency AS int,
	@AccoutantNumber AS nvarchar(128),
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	IF EXISTS (SELECT 1 FROM [dbo].[_rc] tk WHERE (tk.tk_co LIKE '515%' OR tk.tk_co LIKE '635%' OR tk.tk_no LIKE '515%' OR tk.tk_no LIKE '635%') AND tk.InputType_InputTypeCode = 'CTGS_LTG' AND tk.ngay_ct BETWEEN @FromDate AND @ToDate AND tk.SubsidiaryId = @SubId AND ISNULL(tk.loai_tien_nt, tk.loai_tien) = @Currency AND (LEN(@AccoutantNumber) = 0 OR tk.tk_co LIKE CONCAT(@AccoutantNumber, '%')))
		SET @ResStatus = 1
	ELSE
		SET @ResStatus = 0
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_DeleteFixExchangeRate]
  @FromDate AS datetime ,
  @ToDate AS datetime,
	@Currency AS int,
	@AccoutantNumber AS nvarchar(128),
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	BEGIN TRANSACTION	
		EXEC asp_ValidateBillDate @SubId = @SubId, @BillDate = NULL, @OldDate = @FromDate, @ResStatus = @ResStatus OUTPUT
		IF @ResStatus = 1
		BEGIN
			DECLARE @Rows TABLE
			(
				BillId BIGINT,
				F_Id BIGINT
			)

				INSERT INTO @Rows (BillId,
			                   F_Id)
			SELECT r.InputBill_F_Id, r.F_Id
			FROM dbo._rc_all r
			WHERE r.InputType_InputTypeCode = 'CTGS_LTG' AND ngay_ct BETWEEN @FromDate AND @ToDate AND r.SubsidiaryId = @SubId AND r.loai_tien = @Currency AND (LEN(@AccoutantNumber) = 0 OR r.tk_co0 LIKE CONCAT(@AccoutantNumber, '%'));


			-- delete rows
			UPDATE d
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE(),
				SystemLog =  'Deleted by fix exchange rate'
			FROM dbo.InputValueRow d
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.F_Id = d.F_Id)

			-- delete bills
			UPDATE b
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE()
			FROM dbo.InputBill b
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.BillId = b.F_Id)
			AND NOT EXISTS (SELECT 0 FROM dbo._rc_all a WHERE a.InputBill_F_Id = b.F_Id)		
			
		END
	COMMIT TRANSACTION
END

GO

USE AccountancyDB
GO
/**
* 2022-05-22 Only delete details, update do not delete bill if not necessary
*/
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_DeletePrepaidExpense]
	@SoTK AS nvarchar(10),
	  @FromDate AS datetime ,
	  @ToDate AS datetime,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	BEGIN TRANSACTION
		EXEC asp_ValidateBillDate @SubId = @SubId, @BillDate = NULL, @OldDate = @FromDate, @ResStatus = @ResStatus OUTPUT
		IF @ResStatus = 1
		BEGIN
			DECLARE @cptt TABLE
			(
				Id int
			)

			-- Danh sách chi phí tính tới kì này
			INSERT INTO @cptt
			SELECT DISTINCT r.cptt FROM _rc r
			WHERE r.SubsidiaryId = @SubId AND r.ngay_ct <= @ToDate AND r.tk_no LIKE CONCAT(@SoTK, '%')
			
			DECLARE @Rows TABLE
			(
				BillId BIGINT,
				F_Id BIGINT
			)

			INSERT INTO @Rows (BillId,
			                   F_Id)
			SELECT rc.InputBill_F_Id, rc.F_Id
			FROM dbo._rc_all rc
			WHERE rc.InputType_InputTypeCode = 'CTGS_CPTT' AND rc.tk_co LIKE '242%' AND rc.ngay_ct BETWEEN @FromDate AND @ToDate AND rc.SubsidiaryId = @SubId AND EXISTS ( 
				SELECT 1 
				FROM @cptt r1
				WHERE (rc.cptt IS NULL AND r1.Id IS NULL) OR rc.cptt = r1.Id
			)

			-- delete rows
			UPDATE d
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE(),
				SystemLog =  'Deleted by prepaid expense'
			FROM dbo.InputValueRow d
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.F_Id = d.F_Id)

			-- delete bills
			UPDATE b
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE()
			FROM dbo.InputBill b
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.BillId = b.F_Id)
			AND NOT EXISTS (SELECT 0 FROM dbo._rc_all a WHERE a.InputBill_F_Id = b.F_Id)			
		END
	COMMIT TRANSACTION
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedPrepaidExpense]
	@SoTK AS nvarchar(10),
	@FromDate AS datetime,
	@ToDate AS datetime,
	@SubId AS int,
	@ResStatus AS bit OUTPUT
AS
BEGIN
	
	DECLARE @cptt TABLE
	(
		Id int
	)

	-- Danh sách chi phí tính tới kì này
	INSERT INTO @cptt
	SELECT DISTINCT r.cptt FROM _rc r
	WHERE r.SubsidiaryId = @SubId AND r.ngay_ct <= @ToDate AND r.tk_no LIKE CONCAT(@SoTK, '%')
	
	IF EXISTS (
		SELECT 1 
		FROM [dbo].[_rc] r 
		WHERE r.InputType_InputTypeCode = 'CTGS_CPTT' AND r.tk_co LIKE '242%' AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.SubsidiaryId = @SubId AND EXISTS ( 
			SELECT 1 
			FROM @cptt r1
			WHERE (r.cptt IS NULL AND r1.Id IS NULL) OR r.cptt = r1.Id
		)
	)
		SET @ResStatus = 1
	ELSE
		SET @ResStatus = 0
	
END

GO

USE AccountancyDB
GO

CREATE OR ALTER VIEW [dbo].[vDON_HANG]
AS
SELECT       *
FROM            PurchaseOrderDB.dbo.vDON_HANG


GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_CalcProfitAndLoss]
	@SubId INT,
	@IsByLsx BIT,
	@IsByOrder BIT,
	@ProductId INT,
	@OrderCode NVARCHAR(128),
	@MaLsx NVARCHAR(128),
	@FromDate DATETIME2,
	@ToDate DATETIME2,

	@Custom_AllocationRate			_DECIMAL_KEY_VALUES READONLY,

	@Custom_PriceSellDirectly		_DECIMAL_KEY_VALUES READONLY,
	@Custom_CostSellDirectly		_DECIMAL_KEY_VALUES READONLY,
	@Custom_CostManagerDirectly		_DECIMAL_KEY_VALUES READONLY,

	@Custom_OtherFee				_DECIMAL_KEY_VALUES READONLY,

	@PriceSellInDirectlyAllocationTypeId	INT,
	@PriceSellInDirectlySum					decimal(32,12) OUTPUT,
	@PriceSellInDirectlySumCustom			decimal(32,12),

	@CostAccountingAllocationTypeId	INT,
	@CostAccountingSum					decimal(32,12) OUTPUT,
	@CostAccountingSumCustom			decimal(32,12),

	@CostSellInDirectlyAllocationTypeId		INT= NULL,
	@CostSellInDirectlySum					DECIMAL(32,12) = NULL OUTPUT,
	@CostSellInDirectlySumCustom			DECIMAL(32,12) = NULL,

	@CostManagerAllowcationAllocationTypeId	INT,
	@CostManagerSum							DECIMAL(32,12) OUTPUT,
	@CostManagerSumCustom					DECIMAL(32,12)
AS
BEGIN
	SET @IsByLsx = ISNULL(@IsByLsx,0)
	SET @IsByOrder = ISNULL(@IsByOrder,0)
	IF LEN(@OrderCode)=0
		SET @OrderCode = NULL

	IF LEN(@MaLsx)=0
		SET @MaLsx = NULL


		DECLARE @tbl TABLE(
				sortOrder				int IDENTITY(1,1),
				group_id				nvarchar(512),
				row_id					nvarchar(512),			
				productionOrderCode		nvarchar(512),			
				orderCode				nvarchar(512),					
				productId				int,
				productCode				nvarchar(128),
				productName				nvarchar(128),
				unitName				nvarchar(128),
				partnerId				NVARCHAR(512),
				partnerCode				NVARCHAR(512),
				partnerName				NVARCHAR(512),
				orderQuantity			decimal(32,12),
				groupOutQuantity		decimal(32,12),
				outQuantity				decimal(32,12),
				allocationRate			decimal(32,12),
				priceSellDirectlyByProduct632		decimal(32,12),
				priceSellDirectlyByProduct635		decimal(32,12),
				priceSellDirectly		decimal(32,12),
				priceSellDirectlyCustom	decimal(32,12),
				costSellDirectly		decimal(32,12),
				costSellDirectlyCustom	decimal(32,12),
				costManagerDirectly		decimal(32,12),
				costManagerDirectlyCustom	decimal(32,12),
				otherFee				DECIMAL(32,12),					
				priceSellInDirectly		decimal(32,12),
				costAccounting			DECIMAL(32,12),
				costSellInDirectly		DECIMAL(32,12),
				costManagerAllowcation	decimal(32,12),
				allPrice				DECIMAL(32,12),
				groupAllPrice			DECIMAL(32,12),
				orderPrice				DECIMAL(32,12),
				totalOrderPrice			DECIMAL(32,12),
				diffMoney				decimal(32,12),
				diffInPecent		decimal(32,12)
		);

		/*
		Hệ thống tìm kiếm tất cả SP được xuất  kho trong kỳ lựa chọn hoặc dịc vụ ghi nhận doanh thu (Có 511, 512,515 ) để fill vào các trường SP 
		- Đồng thòi fill trường mã DH vào trường mã ĐH ( Chứng từ xuất kho SP, trường mã đơn hàng là trường bắt buộc nên trường này luôn có dữ liệu.								
		
		*/
		INSERT INTO @tbl
			(
				group_id,
				row_id,			
				productionOrderCode,
				orderCode,
				productId,
				productCode,
				productName,
				unitName,
				partnerId,
				partnerCode,
				partnerName,
				orderQuantity,
				outQuantity,
				allocationRate,
				--allPrice,
				orderPrice,
				totalOrderPrice
			)

			SELECT
				r.group_id,
				r.row_id,
				r.ma_lsx,
				r.order_code,
				r.vthhtp,
				r.ProductCode,
				r.ProductName,
				r.UnitId_UnitName,
				c.F_Id PartnerId,
				c.PartnerCode,
				c.PartnerName,
				dh.dh_so_luong,
				r.so_luong,
				r.vnd,
				--r.vnd,
				r.orderPrice,
				r.vnd
			FROM
			(
				SELECT 
					MAX(t.group_id) group_id, 
					CONCAT(t.group_id,'-product-', t.vthhtp) row_id,
					CASE @IsByLsx WHEN 1 THEN MAX(t.ma_lsx) ELSE ''END ma_lsx,
					CASE @IsByOrder WHEN 1 THEN MAX(t.order_code) ELSE ''END order_code,
					t.vthhtp,
					p.ProductCode,
					p.ProductName,
					p.UnitId_UnitName,
					MAX(t.kh_co) kh_co,					
					SUM(t.vnd) vnd,
					AVG(CASE WHEN t.vnd>0 THEN t.vnd/t.so_luong ELSE NULL END) orderPrice,
					--SUM(t.vnd)/SUM(t.so_luong) orderPrice,
					SUM(t.so_luong) so_luong	
				FROM
				(
					SELECT
						CONCAT('group',
							'-',CASE @IsByLsx WHEN 1 THEN t.ma_lsx ELSE ''END,
							'-',CASE @IsByOrder WHEN 1 THEN t.order_code ELSE ''END
						) AS group_id,				
						t.ma_lsx,
						t.order_code,
						t.kho,
						t.vthhtp,
						t.so_luong,
						t.vnd,
						t.kh_co
					FROM dbo._rc t
				
					WHERE t.SubsidiaryId = @SubId AND (t.tk_co LIKE '511%' OR t.tk_co LIKE '512%' OR t.tk_co LIKE '515%') AND t.ngay_ct BETWEEN @FromDate AND @ToDate AND t.vthhtp IS NOT NULL
						AND (@ProductId IS NULL OR t.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR t.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR t.ma_lsx = @MaLsx)
				) t
				JOIN dbo.v_Product p ON t.vthhtp = p.F_Id				
				GROUP BY
					t.group_id,
					t.vthhtp,
					p.ProductCode,
					p.ProductName,
					p.UnitId_UnitName
			) r
			OUTER APPLY (
				SELECT SUM(d.so_luong) dh_so_luong, SUM(d.vnd0) dh_vnd FROM dbo.vDON_HANG d WHERE r.order_code = d.so_ct AND r.vthhtp = d.vthhtp
			) dh
			LEFT JOIN dbo.v_Partner c ON r.kh_co = c.F_Id
			ORDER BY
				r.group_id,
				r.vthhtp,
				r.ProductCode,
				r.ProductName,
				r.UnitId_UnitName;
					
			
			UPDATE t 
				SET t.allocationRate	= r.[Value]
			FROM @tbl t
				JOIN @Custom_AllocationRate r ON t.row_id = r.[Key];

		
			DECLARE @IsInputRate BIT = 0;

			IF EXISTS(SELECT 0 FROM @Custom_AllocationRate)
				SET @IsInputRate = 1;


			--2. Trực tiếp theo sản phẩm				
			update t
			SET 
				priceSellDirectlyByProduct632 = (
						--Giá vốn hàng bán trực tiếp (cột H) 
						--Được tổng hợp từ các phiếu xuất vật tư vật tư và thành phẩm  cho bán hàng (Giá vốn hàng bán) để có số liệu H1, H2 ... Hn 
						--(Cột này người dùng có thể tự vào dữ liệu hoạc chỉnh sửa từ số của hệ thống đưa ra) 
						--Nợ 632, theo  mã lệnh đơn hàng tập hợp theo phiếu chi tiết (không xét thời gian														

						SELECT SUM(r.vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND (r.tk_no LIKE '632%')
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						AND (@IsByLsx = 0 OR (r.ma_lsx IS NULL AND t.productionOrderCode IS NULL) OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR (r.order_code IS NULL AND t.orderCode IS NULL) OR r.order_code = t.orderCode)

						AND (r.vthhtp = t.productId)
					),
				priceSellDirectlyByProduct635 = (
						--Giá vốn hàng bán trực tiếp (cột H) 
						--Được tổng hợp từ các phiếu xuất vật tư vật tư và thành phẩm  cho bán hàng (Giá vốn hàng bán) để có số liệu H1, H2 ... Hn 
						--(Cột này người dùng có thể tự vào dữ liệu hoạc chỉnh sửa từ số của hệ thống đưa ra) 
						--Nợ 632, theo  mã lệnh đơn hàng tập hợp theo phiếu chi tiết (không xét thời gian														

						SELECT SUM(r.vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND (r.tk_no LIKE '635%')
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						AND (@IsByLsx = 0 OR (r.ma_lsx IS NULL AND t.productionOrderCode IS NULL) OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR (r.order_code IS NULL AND t.orderCode IS NULL) OR r.order_code = t.orderCode)

						AND (r.vthhtp = t.productId)
					),

					costSellDirectly = (
						--Chi phí bán hàng trực tiếp theo đối tượng lựa chọn đê có số liệu I1, I2, In
						--((Cột này người dùng có thể tự vào dữ liệu hoạc chỉnh sửa từ số của hệ thống đưa ra) 
						--Nợ 641,  tập hợp theo LSX hoặc mã Đơn hàng không xét thòi gian														
						SELECT SUM(vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '641%'
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

					
						AND (@IsByLsx = 0 OR (r.ma_lsx IS NULL AND t.productionOrderCode IS NULL) OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR (r.order_code IS NULL AND t.orderCode IS NULL) OR r.order_code = t.orderCode)

						AND (r.vthhtp = t.productId)
					),

					costManagerDirectly = (
						--Chi phí QL  trực tiếp (Cột J) được tổng hợp từ các CTGS có phát sinh chỉ định các ĐH theo lựa chọn Nợ 642, 
						--tập hợp theo mã Đơn hàng  hoạc tiêu chí lựa chọn không xét thòi gian															

						SELECT SUM(vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '642%'
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						
						AND (@IsByLsx = 0 OR (r.ma_lsx IS NULL AND t.productionOrderCode IS NULL) OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR (r.order_code IS NULL AND t.orderCode IS NULL) OR r.order_code = t.orderCode)
						
						AND (r.vthhtp = t.productId)
					)
				
			FROM @tbl t;

			UPDATE @tbl SET priceSellDirectly = ISNULL(priceSellDirectlyByProduct632,0) + ISNULL(priceSellDirectlyByProduct635,0);
			
			--2. Trực tiếp										
			DECLARE @tblDirectly TABLE(
				group_id				nvarchar(512),
				outQuantity				decimal(32,12),

				allocationRateTotal	decimal(32,12),			

				priceSellDirectlyRateTotal			decimal(32,12),
				costSellDirectlyRateTotal			decimal(32,12),
				costManagerDirectlyRateTotal			decimal(32,12),

				totalOrderPrice			DECIMAL(32,12),

				priceSellDirectly632			decimal(32,12),
				priceSellDirectly635			decimal(32,12),
				priceSellDirectly		decimal(32,12),
				costSellDirectly		DECIMAL(32,12),
				costManagerDirectly		DECIMAL(32,12)
			);
		
			INSERT INTO @tblDirectly
			(	
				group_id,
				outQuantity,
				allocationRateTotal,			
				priceSellDirectlyRateTotal,
				costSellDirectlyRateTotal,
				costManagerDirectlyRateTotal,
				totalOrderPrice,

				priceSellDirectly632,
				priceSellDirectly635,

				costSellDirectly,
				costManagerDirectly
			)
			SELECT 

					group_id,
					SUM(t.outQuantity),
					SUM(t.allocationRate),

					SUM(CASE WHEN t.priceSellDirectly>0 THEN 0 ELSE  t.allocationRate END),--only sum rate if not exists yet

					SUM(CASE WHEN t.costSellDirectly>0 THEN 0 ELSE t.allocationRate END),

					SUM(CASE WHEN t.costManagerDirectly>0 THEN 0 ELSE t.allocationRate END),

					SUM(t.totalOrderPrice),				
					(
						--Giá vốn hàng bán trực tiếp (cột H) 
						--Được tổng hợp từ các phiếu xuất vật tư vật tư và thành phẩm  cho bán hàng (Giá vốn hàng bán) để có số liệu H1, H2 ... Hn 
						--(Cột này người dùng có thể tự vào dữ liệu hoạc chỉnh sửa từ số của hệ thống đưa ra) 
						--Nợ 632, theo  mã lệnh đơn hàng tập hợp theo phiếu chi tiết (không xét thời gian														

						SELECT SUM(r.vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND (r.tk_no LIKE '632%')
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						--AND (@IsByLsx = 0 OR (r.ma_lsx IS NULL AND MAX(t.productionOrderCode) IS NULL) OR r.ma_lsx = MAX(t.productionOrderCode))
						--AND (@IsByOrder = 0 OR (r.order_code IS NULL AND MAX(t.orderCode) IS NULL) OR r.order_code = MAX(t.orderCode))

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.productionOrderCode) AND LEN(MAX(t.productionOrderCode))>0)
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.orderCode)  AND LEN(MAX(t.orderCode))>0 )

						AND (r.vthhtp IS NULL)
					),			
					(
						--Giá vốn hàng bán trực tiếp (cột H) 
						--Được tổng hợp từ các phiếu xuất vật tư vật tư và thành phẩm  cho bán hàng (Giá vốn hàng bán) để có số liệu H1, H2 ... Hn 
						--(Cột này người dùng có thể tự vào dữ liệu hoạc chỉnh sửa từ số của hệ thống đưa ra) 
						--Nợ 632, theo  mã lệnh đơn hàng tập hợp theo phiếu chi tiết (không xét thời gian														

						SELECT SUM(r.vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND (r.tk_no LIKE '635%')
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.productionOrderCode) AND LEN(MAX(t.productionOrderCode))>0)
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.orderCode)  AND LEN(MAX(t.orderCode))>0 )

						AND (r.vthhtp IS NULL)
					),

					(
						--Chi phí bán hàng trực tiếp theo đối tượng lựa chọn đê có số liệu I1, I2, In
						--((Cột này người dùng có thể tự vào dữ liệu hoạc chỉnh sửa từ số của hệ thống đưa ra) 
						--Nợ 641,  tập hợp theo LSX hoặc mã Đơn hàng không xét thòi gian														
						SELECT SUM(vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '641%'
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.productionOrderCode) AND LEN(MAX(t.productionOrderCode))>0)
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.orderCode)  AND LEN(MAX(t.orderCode))>0 )

						AND (r.vthhtp IS NULL)
					),

					(
						--Chi phí QL  trực tiếp (Cột J) được tổng hợp từ các CTGS có phát sinh chỉ định các ĐH theo lựa chọn Nợ 642, 
						--tập hợp theo mã Đơn hàng  hoạc tiêu chí lựa chọn không xét thòi gian															

						SELECT SUM(vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '642%'
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.productionOrderCode) AND LEN(MAX(t.productionOrderCode))>0)
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.orderCode)  AND LEN(MAX(t.orderCode))>0 )
						
						AND (r.vthhtp IS NULL)
					)
				
			FROM @tbl t			
			GROUP BY t.group_id;

			UPDATE @tblDirectly  SET priceSellDirectly = ISNULL(priceSellDirectly632,0) + ISNULL(priceSellDirectly635,0)
			
			--select * from @tblDirectly
			--return

			DECLARE		@sortOrder				int;
			DECLARE 	@group_id				nvarchar(512);
			DECLARE 	@row_id					nvarchar(512);			

			DECLARE 	@orderQuantity			decimal(32,12);
			DECLARE 	@outQuantity				decimal(32,12);
			DECLARE 	@allocationRate			decimal(32,12);
			DECLARE 	@priceSellDirectly		decimal(32,12);
			DECLARE 	@priceSellDirectlyCustom	decimal(32,12);
			DECLARE 	@costSellDirectly		decimal(32,12);
			DECLARE 	@costSellDirectlyCustom	decimal(32,12);
			DECLARE 	@costManagerDirectly		decimal(32,12);
			DECLARE 	@costManagerDirectlyCustom	decimal(32,12);
			DECLARE 	@otherFee				DECIMAL(32,12);				
			DECLARE 	@priceSellInDirectly		decimal(32,12);
			DECLARE		@costAccounting			DECIMAL(32,12);
			DECLARE 	@costSellInDirectly		DECIMAL(32,12);
			DECLARE 	@costManagerAllowcation	decimal(32,12);
			DECLARE 	@allPrice				DECIMAL(32,12);
			DECLARE 	@totalOrderPrice			DECIMAL(32,12);
			DECLARE 	@diffMoney				decimal(32,12);
			DECLARE 	@diffInPecent		decimal(32,12);

			DECLARE cursor_calc CURSOR LOCAL FORWARD_ONLY READ_ONLY
			FOR 
				SELECT
					sortOrder				,
					group_id				,
					row_id					,			
					
					orderQuantity			,
					outQuantity				,
					allocationRate			,
					priceSellDirectly		,
					priceSellDirectlyCustom	,
					costSellDirectly		,
					costSellDirectlyCustom	,
					costManagerDirectly		,
					costManagerDirectlyCustom,
					otherFee				,					
					priceSellInDirectly		,
					costAccounting			,
					costSellInDirectly		,
					costManagerAllowcation	,
					allPrice				,
					totalOrderPrice			,
					diffMoney				,
					diffInPecent		
				FROM  @tbl

			--3. Tính Chi phí NVL trực tiếp, Nhân công trực tiếp theo tỷ lệ giá bán
			OPEN cursor_calc

			FETCH NEXT FROM cursor_calc INTO
					@sortOrder				,
					@group_id				,
					@row_id					,			
					
					@orderQuantity			,
					@outQuantity			,
					@allocationRate			,
					@priceSellDirectly		,
					@priceSellDirectlyCustom,
					@costSellDirectly		,
					@costSellDirectlyCustom	,
					@costManagerDirectly	,
					@costManagerDirectlyCustom,
					@otherFee				,					
					@priceSellInDirectly	,
					@costAccounting			,
					@costSellInDirectly		,
					@costManagerAllowcation	,
					@allPrice				,
					@totalOrderPrice		,
					@diffMoney				,
					@diffInPecent		
			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @calc_priceSellDirectly			decimal(32,12)	= NULL;
				DECLARE @calc_priceSellDirectlyCustom	decimal(32,12)	= NULL;

				DECLARE @calc_costSellDirectly			decimal(32,12)	= NULL;
				DECLARE @calc_costSellDirectlyCustom	decimal(32,12)	= NULL;

				DECLARE @calc_costManagerDirectly		decimal(32,12)	= NULL;
				DECLARE @calc_costManagerDirectlyCustom	decimal(32,12)	= NULL;

				DECLARE @calc_otherFee					DECIMAL(32,12)	= NULL;

		
				DECLARE @calc_allocationRate			decimal(32,12) = NULL;

				DECLARE @group_outQuantity				decimal(32,12) = NULL;

				/*
				Cách tập hợp chi phí: Lựa chọn tổng hợp các chi phí theo Mã đơn hàng sum lại đưa về cột chi phí tổng hợp tại dòng sản phẩm có cùng mã đơn hàng 
				- Nếu 1 đơn hàng có từ 2 sản phẩm trở lên thì thì mục chi phí theo đơn hàng này được phân bổ cho các SP cùng đơn hàng. 
				Nếu số SP xuất kho > hoạc bằng số SP theo yc của đơn hàng thì tình 100 % chi phí. 
				Nếu số SP nhập kho < sô SP yc theo đơn hàng, trong trường hợp có dữ liệu từ phân hệ bán hàng trả về là đơn hàng đã hoàn thành thì tính 100% phí,
				nếu chưa hoàn thành thì tính chi phí = Tổng mục chi phí * (Số SP nhập kho/Số SP theo đơn hàng)														
				
				*/
				DECLARE @orderRate DECIMAL(32,12) = 1;
				IF ISNULL(@outQuantity,0) < ISNULL(@orderQuantity,0) AND @orderQuantity > 0
				BEGIN
				    SET @orderRate = @outQuantity/@orderQuantity
				END

				SELECT 
						@calc_allocationRate			= CASE WHEN allocationRateTotal>0 THEN (@allocationRate/allocationRateTotal) ELSE 0 END * 100,
						@calc_priceSellDirectly			= @orderRate * CASE WHEN priceSellDirectlyRateTotal>0 THEN (@allocationRate/priceSellDirectlyRateTotal) ELSE 0 END *priceSellDirectly,
						@calc_costSellDirectly			= @orderRate * CASE WHEN costSellDirectlyRateTotal >0 THEN (@allocationRate/costSellDirectlyRateTotal) ELSE 0 END *costSellDirectly,
						@calc_costManagerDirectly		= @orderRate * CASE WHEN costManagerDirectlyRateTotal>0 THEN (@allocationRate/costManagerDirectlyRateTotal) ELSE 0 END *costManagerDirectly,
						@group_outQuantity				= outQuantity

					FROM  @tblDirectly
					WHERE group_id = @group_id;

				IF @priceSellDirectly>0
				BEGIN
					SET @calc_priceSellDirectly = @priceSellDirectly
				END

				IF @costSellDirectly>0
				BEGIN
					SET @calc_costSellDirectly = @costSellDirectly
				END

				IF @costManagerDirectly>0
				BEGIN
					SET @calc_costManagerDirectly = @costManagerDirectly
				END

				SELECT @calc_priceSellDirectlyCustom			= [Value]	FROM @Custom_PriceSellDirectly		WHERE [Key] = @row_id;

				SELECT @calc_costSellDirectlyCustom				= [Value]	FROM @Custom_CostSellDirectly		WHERE [Key] = @row_id;

				SELECT @calc_costManagerDirectlyCustom			= [Value]	FROM @Custom_CostManagerDirectly	WHERE [Key] = @row_id;

				SELECT @calc_otherFee							= [Value]	FROM @Custom_OtherFee				WHERE [Key] = @row_id;

				UPDATE  @tbl SET 
						groupOutQuantity			= @group_outQuantity,
						allocationRate				= @calc_allocationRate,

						priceSellDirectly			= @calc_priceSellDirectly,
						priceSellDirectlyCustom		= @calc_priceSellDirectlyCustom,

						costSellDirectly			= @calc_costSellDirectly,
						costSellDirectlyCustom		= @calc_costSellDirectlyCustom,

						costManagerDirectly			= @calc_costManagerDirectly,
						costManagerDirectlyCustom	= @calc_costManagerDirectlyCustom,

						otherFee					= @calc_otherFee

					WHERE row_id = @row_id
	
	
				FETCH NEXT FROM cursor_calc INTO
					@sortOrder				,
					@group_id				,
					@row_id					,			
					
					@orderQuantity			,
					@outQuantity			,
					@allocationRate			,
					@priceSellDirectly		,
					@priceSellDirectlyCustom,
					@costSellDirectly		,
					@costSellDirectlyCustom	,
					@costManagerDirectly	,
					@costManagerDirectlyCustom,
					@otherFee				,					
					@priceSellInDirectly	,
					@costAccounting			,
					@costSellInDirectly		,
					@costManagerAllowcation	,
					@allPrice				,
					@totalOrderPrice		,
					@diffMoney				,
					@diffInPecent		
			END

			CLOSE cursor_calc



			---phan 3

			DECLARE @ENUM_ALLOCATION_TYPE_PRICE_SELL_DIRECTLY		INT=1
			DECLARE @ENUM_ALLOCATION_TYPE_COST_SELL_DIRECTLY		INT=2
			DECLARE @ENUM_ALLOCATION_TYPE_COST_MANAGER_DIRECTLY		INT=3
			DECLARE @ENUM_ALLOCATION_TYPE_OTHER						INT=4
			DECLARE @ENUM_ALLOCATION_TYPE_TOTAL_ORDER_PRICE			INT=5


			--4. Tính Chi phí gián tiếp theo tiêu chí
			DECLARE @Sum_priceSellDirectly decimal(32,12)		
			DECLARE @Sum_costSellDirectly decimal(32,12)
			DECLARE @Sum_costManagerDirectly decimal(32,12)
			DECLARE @Sum_otherFee decimal(32,12)
			DECLARE @Sum_allPrice decimal(32,12)
			DECLARE @Sum_totalOrderPrice decimal(32,12)

			SELECT @Sum_priceSellDirectly	= SUM(CASE WHEN priceSellDirectlyCustom IS NOT NULL THEN priceSellDirectlyCustom ELSE priceSellDirectly END)			FROM @tbl
			SET @Sum_priceSellDirectly		= ISNULL(@Sum_priceSellDirectly,0)
			SELECT @Sum_costSellDirectly	= SUM(CASE WHEN costSellDirectlyCustom IS NOT NULL THEN costSellDirectlyCustom ELSE costSellDirectly END)				FROM @tbl
			SET @Sum_costSellDirectly		= ISNULL(@Sum_costSellDirectly,0)
			SELECT @Sum_costManagerDirectly	= SUM(CASE WHEN costManagerDirectlyCustom IS NOT NULL THEN costManagerDirectlyCustom ELSE costManagerDirectly END)		FROM @tbl
			SET @Sum_costManagerDirectly	= ISNULL(@Sum_costManagerDirectly,0)
			SELECT @Sum_otherFee			= SUM(otherFee)																											FROM @tbl
			SET @Sum_otherFee				= ISNULL(@Sum_otherFee,0)
			SELECT @Sum_allPrice			= SUM(allPrice)																											FROM @tbl
			SET @Sum_allPrice				= ISNULL(@Sum_allPrice,0)
			SELECT @Sum_totalOrderPrice		= SUM(totalOrderPrice)																											FROM @tbl
			SET @Sum_totalOrderPrice		= ISNULL(@Sum_totalOrderPrice,0)

			DECLARE @Sum_priceSellInDirectly decimal(32,12)
			DECLARE @Sum_costAccounting decimal(32,12)
			DECLARE @Sum_costSellInDirectly decimal(32,12)			
			DECLARE @Sum_costManagerAllowcation decimal(32,12)

			DECLARE @PriceSellInDirectlySum_final decimal(32,12)
			DECLARE @CostAccountingSum_final decimal(32,12)
			DECLARE @CostSellInDirectlySum_final decimal(32,12)			
			DECLARE @CostManagerSum_final decimal(32,12)
		
		/*

			--SL = Sum C632, N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon) 
			--< Hay nói cách khác là giá vốn hàng bán Gián tiếp  (cột M) Bằng tổng phát sinh phiếu xuất vật tư, hàng hóa  cho bán SP N 632,   
			--tập hợp theo phiếu chi tiết trong kỳ lựa chọn  nhưng không có tiêu chí đưa vào cột Trực tiếp  														
			SELECT @Sum_priceSellInDirectly = SUM(r.Vnd)	
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR r.order_code = t.orderCode)
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '632%' AND t.group_id IS NULL
			*/
			--SL = Sum N632- Có 632 không đối ứng  N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon) 
			--SUM(N632) - SUM(C632,N!=911) - SUM H
			DECLARE @SumN632 DECIMAL(32,12)
			DECLARE @SumC632_N_NE911 DECIMAL(32,12)
			DECLARE @SumH_N632 DECIMAL(32,12)

			SELECT @SumN632 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '632%';

			SELECT @SumC632_N_NE911 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_co LIKE '632%'AND r.tk_no NOT LIKE '911%';

			SELECT @SumH_N632 = SUM(priceSellDirectlyByProduct632) FROM  @tbl t

			SELECT @SumH_N632 = ISNULL(@SumH_N632,0) + ISNULL(SUM(priceSellDirectly632),0) FROM  @tblDirectly
					

			SET @Sum_priceSellInDirectly = ISNULL(@SumN632,0) - ISNULL(@SumC632_N_NE911,0) - ISNULL(@SumH_N632,0)
	

			SET @PriceSellInDirectlySum		= @Sum_priceSellInDirectly
			SET @PriceSellInDirectlySum_final = @PriceSellInDirectlySum
			
			IF @PriceSellInDirectlySumCustom IS NOT NULL
			BEGIN
				SET @PriceSellInDirectlySum_final = @PriceSellInDirectlySumCustom
			END

			/*
			--SN = Sum C635, N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon) 
			--< Hay nói cách khác là giá vốn hàng bán Gián tiếp  (cột N) Bằng tổng phát sinh phiếu xuất vật tư, hàng hóa  cho bán SP N 635,   
			--tập hợp theo phiếu chi tiết trong kỳ lựa chọn  nhưng không có tiêu chí đưa vào cột Trực tiếp  															  														
			SELECT @Sum_costAccounting = SUM(r.Vnd)	
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR r.order_code = t.orderCode)
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '635%' AND t.group_id IS NULL
			*/
			--SN = Sum N635 - C635 không đối ứng N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon) 															
			--SUM(N635) - SUM(C635,N!=911) - SUM H
			DECLARE @SumN635 DECIMAL(32,12)
			DECLARE @SumC635_N_NE911 DECIMAL(32,12)
			DECLARE @SumH_N635 DECIMAL(32,12)

			SELECT @SumN635 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '635%';

			SELECT @SumC635_N_NE911 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_co LIKE '635%'AND r.tk_no NOT LIKE '911%';

			SELECT @SumH_N635 = SUM(priceSellDirectlyByProduct635) FROM  @tbl t
			SELECT @SumH_N635 = ISNULL(@SumH_N635,0) + ISNULL(SUM(priceSellDirectly635),0) FROM  @tblDirectly

			SET @Sum_costAccounting = ISNULL(@SumN635,0) - ISNULL(@SumC635_N_NE911,0) - ISNULL(@SumH_N635,0)


			SET @CostAccountingSum		= @Sum_costAccounting
			SET @CostAccountingSum_final = @CostAccountingSum
			
			IF @CostAccountingSumCustom IS NOT NULL
			BEGIN
				SET @CostAccountingSum_final = @CostAccountingSumCustom
			END

			/*
			--SM =  Sum C641, N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon) 
			--Hay nói cách khác là Chi phí bán hàng gián tiếp  (cột N) Bằng tổng phát sinh phiếu xuất vật tư hàng hóa cho  SP N641  
			--tập hợp theo phiếu chi tiết trong kỳ lựa chọn  nhưng không có tiêu chí đưa vào cột chi phí bán hàng  Trực tiếp
			SELECT @Sum_costSellInDirectly = SUM(r.Vnd)
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR r.order_code = t.orderCode)
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '641%' AND t.group_id IS NULL
			*/
			--SM =  Sum N641- C641 không đối ứng N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon)
			--SUM(N641) - SUM(C641,N!=911) - SUM H
			DECLARE @SumN641 DECIMAL(32,12)
			DECLARE @SumC641_N_NE911 DECIMAL(32,12)
			DECLARE @SumH_N641 DECIMAL(32,12)

			SELECT @SumN641 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '641%';

			SELECT @SumC641_N_NE911 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_co LIKE '641%'AND r.tk_no NOT LIKE '911%';

			SELECT @SumH_N641 = SUM(costSellDirectly) FROM  @tbl t
					

			SET @Sum_costSellInDirectly = ISNULL(@SumN641,0) - ISNULL(@SumC641_N_NE911,0) - ISNULL(@SumH_N641,0)

		
			SET @CostSellInDirectlySum		= @Sum_costSellInDirectly
			SET @CostSellInDirectlySum_final = @CostSellInDirectlySum

			IF @CostSellInDirectlySumCustom IS NOT NULL
			BEGIN
				SET @CostSellInDirectlySum_final = @CostSellInDirectlySumCustom
			END
		
			/*
			--SN = Sum C642, N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon) 
			-- Hay nói cách khác là Chi phí QL  gián tiếp  (cột O) Bằng tổng phát sinh phiếu xuất vật tư bán trong kỳ  N642, 
			--tập hợp theo phiếu chi tiết trong kỳ lựa chọn  nhưng không có tiêu chí đưa vào cột Trực tiếp  														
			SELECT @Sum_costManagerAllowcation = SUM(r.Vnd)
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR r.order_code = t.orderCode)
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate  AND r.tk_no LIKE '642%' AND t.group_id IS NULL
			*/
			--SM =  Sum N641- C641 không đối ứng N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon)
			--SUM(N641) - SUM(C641,N!=911) - SUM H
			DECLARE @SumN642 DECIMAL(32,12)
			DECLARE @SumC642_N_NE911 DECIMAL(32,12)
			DECLARE @SumH_N642 DECIMAL(32,12)

			SELECT @SumN642 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '642%';

			SELECT @SumC642_N_NE911 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_co LIKE '642%'AND r.tk_no NOT LIKE '911%';

			SELECT @SumH_N642 = SUM(costManagerDirectly) FROM  @tbl t
					

			SET @Sum_costManagerAllowcation = ISNULL(@SumN642,0) - ISNULL(@SumC642_N_NE911,0) - ISNULL(@SumH_N642,0)

			SET @CostManagerSum	= @Sum_costManagerAllowcation
			SET @CostManagerSum_final = @CostManagerSum

			IF @CostManagerSumCustom IS NOT NULL
			BEGIN
				SET @CostManagerSum_final = @CostManagerSumCustom
			END
	

			OPEN cursor_calc

			FETCH NEXT FROM cursor_calc INTO 
					@sortOrder				,
					@group_id				,
					@row_id					,			
					
					@orderQuantity			,
					@outQuantity			,
					@allocationRate			,
					@priceSellDirectly		,
					@priceSellDirectlyCustom,
					@costSellDirectly		,
					@costSellDirectlyCustom	,
					@costManagerDirectly	,
					@costManagerDirectlyCustom,
					@otherFee				,					
					@priceSellInDirectly	,
					@costAccounting			,
					@costSellInDirectly		,
					@costManagerAllowcation	,
					@allPrice				,
					@totalOrderPrice		,
					@diffMoney				,
					@diffInPecent		
			WHILE @@FETCH_STATUS = 0
			BEGIN
		
				--Jn=(SumJ/Sum (tiêu chí lựu chọn))*Thành phần lựa chọn
				DECLARE @calc_priceSellInDirectly		DECIMAL(32,12) = NULL;
				DECLARE @calc_costAccounting			DECIMAL(32,12) = NULL;
				DECLARE @calc_costSellInDirectly		DECIMAL(32,12) = NULL;				
				DECLARE @calc_costManagerAllowcation	DECIMAL(32,12) = NULL;
	
				DECLARE @priceSellDirectly_final		DECIMAL(32,12) = @priceSellDirectly;			
				DECLARE @costSellDirectly_final			DECIMAL(32,12) = @costSellDirectly;
				DECLARE @costManagerDirectly_final		DECIMAL(32,12) = @costManagerDirectly;

				IF @priceSellDirectlyCustom IS NOT NULL
				BEGIN
					SET @priceSellDirectly_final = @priceSellDirectlyCustom
				END

				IF @costSellDirectlyCustom IS NOT NULL
				BEGIN
					SET @costSellDirectly_final = @costSellDirectlyCustom
				END

				
				IF @costManagerDirectlyCustom IS NOT NULL
				BEGIN
					SET @costManagerDirectly_final = @costManagerDirectlyCustom
				END


				--Giá vốn hàng bán gián tiếp				
				IF @PriceSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_PRICE_SELL_DIRECTLY AND @Sum_priceSellDirectly > 0
				BEGIN
					SET @calc_priceSellInDirectly = (@PriceSellInDirectlySum_final/@Sum_priceSellDirectly) * @priceSellDirectly_final
				END
				IF @PriceSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_SELL_DIRECTLY AND @Sum_costSellDirectly > 0
				BEGIN
					SET @calc_priceSellInDirectly = (@PriceSellInDirectlySum_final/@Sum_costSellDirectly) * @costSellDirectly_final
				END
				IF @PriceSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_MANAGER_DIRECTLY AND @Sum_costManagerDirectly > 0
				BEGIN
					SET @calc_priceSellInDirectly = (@PriceSellInDirectlySum_final/@Sum_costManagerDirectly) * @costManagerDirectly_final
				END
				IF @PriceSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Sum_otherFee > 0
				BEGIN
					SET @calc_priceSellInDirectly = (@PriceSellInDirectlySum_final/@Sum_otherFee) * @otherFee
				END
				IF @PriceSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_ORDER_PRICE AND @Sum_totalOrderPrice > 0
				BEGIN
					SET @calc_priceSellInDirectly = (@PriceSellInDirectlySum_final/@Sum_totalOrderPrice) * @totalOrderPrice
				END
				

				--Chi phí tài chính
				IF @CostAccountingAllocationTypeId = @ENUM_ALLOCATION_TYPE_PRICE_SELL_DIRECTLY AND @Sum_priceSellDirectly > 0
				BEGIN
					SET @calc_costAccounting = (@CostAccountingSum_final/@Sum_priceSellDirectly) * @priceSellDirectly_final
				END
				IF @CostAccountingAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_SELL_DIRECTLY AND @Sum_costSellDirectly > 0
				BEGIN
					SET @calc_costAccounting = (@CostAccountingSum_final/@Sum_costSellDirectly) * @costSellDirectly_final
				END
				IF @CostAccountingAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_MANAGER_DIRECTLY AND @Sum_costManagerDirectly > 0
				BEGIN
					SET @calc_costAccounting = (@CostAccountingSum_final/@Sum_costManagerDirectly) * @costManagerDirectly_final
				END
				IF @CostAccountingAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Sum_otherFee > 0
				BEGIN
					SET @calc_costAccounting = (@CostAccountingSum_final/@Sum_otherFee) * @otherFee
				END
				IF @CostAccountingAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_ORDER_PRICE AND @Sum_totalOrderPrice > 0
				BEGIN
					SET @calc_costAccounting = (@CostAccountingSum_final/@Sum_totalOrderPrice) * @totalOrderPrice
				END


				--Chi phí ưu thông gián tiếp			
				IF @CostSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_PRICE_SELL_DIRECTLY AND @Sum_priceSellDirectly > 0
				BEGIN
					SET @calc_costSellInDirectly = (@CostSellInDirectlySum_final/@Sum_priceSellDirectly) * @priceSellDirectly_final
				END
				IF @CostSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_SELL_DIRECTLY AND @Sum_costSellDirectly > 0
				BEGIN
					SET @calc_costSellInDirectly = (@CostSellInDirectlySum_final/@Sum_costSellDirectly) * @costSellDirectly_final
				END
				IF @CostSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_MANAGER_DIRECTLY AND @Sum_costManagerDirectly > 0
				BEGIN
					SET @calc_costSellInDirectly = (@CostSellInDirectlySum_final/@Sum_costManagerDirectly) * @costManagerDirectly_final
				END
				IF @CostSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Sum_otherFee > 0
				BEGIN
					SET @calc_costSellInDirectly = (@CostSellInDirectlySum_final/@Sum_otherFee) * @otherFee
				END
				IF @CostSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_ORDER_PRICE AND @Sum_totalOrderPrice > 0
				BEGIN
					SET @calc_costSellInDirectly = (@CostSellInDirectlySum_final/@Sum_totalOrderPrice) * @totalOrderPrice
				END

				--Chi phí quản lý phân bổ
				IF @CostManagerAllowcationAllocationTypeId = @ENUM_ALLOCATION_TYPE_PRICE_SELL_DIRECTLY AND @Sum_priceSellDirectly > 0
				BEGIN
					SET @calc_costManagerAllowcation = (@CostManagerSum_final/@Sum_priceSellDirectly) * @priceSellDirectly_final
				END
				IF @CostManagerAllowcationAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_SELL_DIRECTLY AND @Sum_costSellDirectly > 0
				BEGIN
					SET @calc_costManagerAllowcation = (@CostManagerSum_final/@Sum_costSellDirectly) * @costSellDirectly_final
				END
				IF @CostManagerAllowcationAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_MANAGER_DIRECTLY AND @Sum_costManagerDirectly > 0
				BEGIN
					SET @calc_costManagerAllowcation = (@CostManagerSum_final/@Sum_costManagerDirectly) * @costManagerDirectly_final
				END
				IF @CostManagerAllowcationAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Sum_otherFee > 0
				BEGIN
					SET @calc_costManagerAllowcation = (@CostManagerSum_final/@Sum_otherFee) * @otherFee
				END
				IF @CostManagerAllowcationAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_ORDER_PRICE AND @Sum_totalOrderPrice > 0
				BEGIN
					SET @calc_costManagerAllowcation = (@CostManagerSum_final/@Sum_totalOrderPrice) * @totalOrderPrice
				END



				DECLARE @calc_all_price DECIMAL(32,12);
				DECLARE @calc_diffMoney DECIMAL(32,12);
				DECLARE @calc_diffInPecent DECIMAL(32,12);

				SET @calc_all_price = ISNULL(@priceSellDirectly_final,0)
				+ ISNULL(@costSellDirectly_final,0)
				+ ISNULL(@costManagerDirectly_final,0)
				+ ISNULL(@calc_priceSellInDirectly,0) 
				+ ISNULL(@calc_costAccounting,0)
				+ ISNULL(@calc_costSellInDirectly,0) 
				+ ISNULL(@calc_costManagerAllowcation,0);

				SET	@calc_diffMoney = @totalOrderPrice - @calc_all_price
				SET	@calc_diffInPecent = CASE WHEN @totalOrderPrice>0 THEN (@calc_all_price/@totalOrderPrice) ELSE 1 END;
				SET @calc_diffInPecent = @calc_diffInPecent * 100

				UPDATE @tbl SET 
						priceSellInDirectly			= @calc_priceSellInDirectly,
						costAccounting				= @calc_costAccounting,
						costSellInDirectly			= @calc_costSellInDirectly,
						costManagerAllowcation		= @calc_costManagerAllowcation,
						groupAllPrice				= @Sum_allPrice,
						allPrice					= @calc_all_price,
						diffMoney					= @calc_diffMoney,
						diffInPecent			= @calc_diffInPecent

					WHERE row_id = @row_id
	
	
				FETCH NEXT FROM cursor_calc INTO
					@sortOrder				,
					@group_id				,
					@row_id					,			
					
					@orderQuantity			,
					@outQuantity			,
					@allocationRate			,
					@priceSellDirectly		,
					@priceSellDirectlyCustom,
					@costSellDirectly		,
					@costSellDirectlyCustom	,
					@costManagerDirectly	,
					@costManagerDirectlyCustom,
					@otherFee				,					
					@priceSellInDirectly	,
					@costAccounting			,
					@costSellInDirectly		,
					@costManagerAllowcation	,
					@allPrice				,
					@totalOrderPrice		,
					@diffMoney				,
					@diffInPecent		
			END

			CLOSE cursor_calc

			DEALLOCATE cursor_calc	

		SELECT  * FROM @tbl ORDER BY sortOrder
END


GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_nsnn] AS SELECT  _nsnn.F_Id, _nsnn.UpdatedDatetimeUtc, _nsnn.Code, _nsnn.Name, _nsnn.Level, _Cap_NSNN_0.[Ten_cap_QLNS] AS [Level_Ten_cap_QLNS] FROM [MasterDB].[dbo]._nsnn LEFT JOIN [MasterDB].[dbo].v_Cap_NSNN AS _Cap_NSNN_0 ON _nsnn.Level = _Cap_NSNN_0.Ten_cap_QLNS WHERE _nsnn.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedFixExchangeRate]
  @FromDate AS datetime,
  @ToDate AS datetime,
	@Currency AS int,
	@AccoutantNumber AS nvarchar(128),
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	IF EXISTS (SELECT 1 FROM [dbo].[_rc] tk WHERE (tk.tk_co LIKE '515%' OR tk.tk_co LIKE '635%' OR tk.tk_no LIKE '515%' OR tk.tk_no LIKE '635%') AND tk.InputType_InputTypeCode = 'CTGS_LTG' AND tk.ngay_ct BETWEEN @FromDate AND @ToDate AND tk.SubsidiaryId = @SubId AND ISNULL(tk.loai_tien_nt, tk.loai_tien) = @Currency AND (LEN(@AccoutantNumber) = 0 OR tk.tk_co LIKE CONCAT(@AccoutantNumber, '%')))
		SET @ResStatus = 1
	ELSE
		SET @ResStatus = 0
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedPrepaidExpense]
	@SoTK AS nvarchar(10),
	@FromDate AS datetime,
	@ToDate AS datetime,
	@SubId AS int,
	@ResStatus AS bit OUTPUT
AS
BEGIN
	
	DECLARE @cptt TABLE
	(
		Id int
	)

	-- Danh sách chi phí tính tới kì này
	INSERT INTO @cptt
	SELECT DISTINCT r.cptt FROM _rc r
	WHERE r.SubsidiaryId = @SubId AND r.ngay_ct <= @ToDate AND r.tk_no LIKE CONCAT(@SoTK, '%')
	
	IF EXISTS (
		SELECT 1 
		FROM [dbo].[_rc] r 
		WHERE r.InputType_InputTypeCode = 'CTGS_CPTT' AND r.tk_co LIKE '242%' AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.SubsidiaryId = @SubId AND EXISTS ( 
			SELECT 1 
			FROM @cptt r1
			WHERE (r.cptt IS NULL AND r1.Id IS NULL) OR r.cptt = r1.Id
		)
	)
		SET @ResStatus = 1
	ELSE
		SET @ResStatus = 0
	
END


GO

USE AccountancyPublicDB
GO

CREATE OR ALTER VIEW [dbo].[vDON_HANG]
AS
SELECT       *
FROM            PurchaseOrderDB.dbo.vDON_HANG



GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[vProductionOrderDetailSimple]
AS
SELECT        ProductionOrderDetailId, ProductionOrderId, ProductId, Quantity, ReserveQuantity, Note, CreatedByUserId, CreatedDatetimeUtc, UpdatedByUserId, UpdatedDatetimeUtc, IsDeleted, DeletedDatetimeUtc, OrderDetailId, 
                         SubsidiaryId, ProductionOrderCode
FROM            ManufacturingDB.dbo.vProductionOrderDetailSimple



GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_nsnn] AS SELECT  _nsnn.F_Id, _nsnn.UpdatedDatetimeUtc, _nsnn.Code, _nsnn.Name, _nsnn.Level, _Cap_NSNN_0.[Ten_cap_QLNS] AS [Level_Ten_cap_QLNS] FROM [MasterDB].[dbo]._nsnn LEFT JOIN [MasterDB].[dbo].v_Cap_NSNN AS _Cap_NSNN_0 ON _nsnn.Level = _Cap_NSNN_0.Ten_cap_QLNS WHERE _nsnn.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Currency] AS SELECT  _Currency.F_Id, _Currency.UpdatedDatetimeUtc, _Currency.CurrencyName, _Currency.CurrencyCode, _Currency.CurrencyCountry, _Currency.IsPrimary, _Currency.DecimalPlace, _Currency.ty_gia, _nations_0.[NationName] AS [CurrencyCountry_NationName] FROM [MasterDB].[dbo]._Currency LEFT JOIN [MasterDB].[dbo].v_nations AS _nations_0 ON _Currency.CurrencyCountry = _nations_0.F_Id WHERE _Currency.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcCostTransferBalanceZeroV2]
	@SubId AS INT,
	@ToDate AS datetime,
	@DuCo911 DECIMAL(32,12) OUTPUT
AS
BEGIN

	/*
	SELECT
		total.*,
		acc_no.F_Id tk_no_id,
		acc_co.F_Id tk_co_id
	FROM
	(
		SELECT
			CASE 
				WHEN bc_sum.tk IS NULL AND bc_sum.vnd > 0 THEN '4211' 
				WHEN (bc_sum.tk IS NULL AND bc_sum.vnd < 0) OR (bc_sum.tk IS NOT NULL AND bc_sum.vnd > 0) THEN '911' 
				ELSE bc_sum.tk 
			END tk_no,
			CASE 
				WHEN bc_sum.tk IS NULL AND bc_sum.vnd < 0 THEN '4211'
				WHEN (bc_sum.tk IS NULL AND bc_sum.vnd > 0) OR (bc_sum.tk IS NOT NULL AND bc_sum.vnd < 0) THEN '911' 
				ELSE bc_sum.tk
			END tk_co,
			CASE 
				WHEN bc_sum.tk IS NOT NULL AND bc_sum.vnd > 0 THEN N'Kết chuyển chi phí' 
				WHEN bc_sum.tk IS NOT NULL AND bc_sum.vnd < 0 THEN N'Kết chuyển doanh thu và thu nhập khác' 
				WHEN bc_sum.tk IS NULL AND bc_sum.vnd > 0 THEN N'Kết chuyển lỗ' 
				ELSE N'Kết chuyển lãi' 
			END noi_dung,
			ABS(bc_sum.vnd) vnd
		FROM
		(SELECT
			bc.tk tk,
			SUM(bc.vnd) vnd
		FROM 
		
		(
			SELECT 
				ISNULL(no_ck.tk,co_ck.tk) tk,
				(ISNULL(no_ck.vnd,0) - ISNULL(co_ck.vnd,0)) vnd	
			FROM 
			(
				SELECT tk.tk_no tk, SUM(ISNULL(tk.vnd,0)) vnd
				FROM
				[dbo].[_rc] tk
				WHERE (tk.tk_no LIKE '631%' OR tk.tk_no LIKE '632%' OR tk.tk_no LIKE '635%' OR tk.tk_no LIKE '641%' OR tk.tk_no LIKE '642%' OR tk.tk_no LIKE '811%' 
				OR tk.tk_no LIKE '821%' OR tk.tk_no LIKE '511%' OR tk.tk_no LIKE '515%' OR tk.tk_no LIKE '711%') 
				AND tk.ngay_ct <= @ToDate AND tk.SubsidiaryId = @SubId
				GROUP BY tk.tk_no
			) no_ck
			FULL OUTER JOIN 
			(
				SELECT tk.tk_co tk, SUM(ISNULL(tk.vnd,0)) vnd
				FROM
				[dbo].[_rc] tk
				WHERE (tk.tk_co LIKE '631%' OR tk.tk_co LIKE '632%' OR tk.tk_co LIKE '635%' OR tk.tk_co LIKE '641%' OR tk.tk_co LIKE '642%' OR tk.tk_co LIKE '811%'
				OR tk.tk_co LIKE '821%' OR tk.tk_co LIKE '511%' OR tk.tk_co LIKE '515%' OR tk.tk_co LIKE '711%') 
				AND tk.ngay_ct <= @ToDate AND tk.SubsidiaryId = @SubId
				GROUP BY tk.tk_co
			) co_ck
			ON no_ck.tk = co_ck.tk WHERE ISNULL(no_ck.vnd,0) != ISNULL(co_ck.vnd,0)
		) bc
		GROUP BY ROLLUP(bc.tk)) bc_sum
	) total
	LEFT JOIN v_AccountingAccount acc_no ON total.tk_no = acc_no.AccountNumber
	LEFT JOIN v_AccountingAccount acc_co ON total.tk_co = acc_co.AccountNumber
	*/

	DECLARE @TransferType_Cost INT = 1
	DECLARE @TransferType_Revenue INT = 2

	DROP TABLE IF EXISTS #data
	;WITH duTk AS
	(
		SELECT 
			d.Tk, 
			SUM(ISNULL(d.Vnd_no,0)) - SUM(ISNULL(d.Vnd_co,0)) Du_no,
			SUM(ISNULL(d.Vnd_co,0)) - SUM(ISNULL(d.Vnd_no,0)) Du_co
		FROM
				[dbo].[_rc_detail] d
		WHERE (
				d.Tk LIKE '631%' OR d.Tk LIKE '632%' OR d.Tk LIKE '635%' OR d.Tk LIKE '641%' OR d.Tk LIKE '642%' OR d.Tk LIKE '811%'
				OR d.Tk LIKE '821%' OR d.Tk LIKE '511%' OR d.Tk LIKE '515%' OR d.Tk LIKE '711%' 
				OR d.Tk LIKE '911%'
			) 
			AND d.ngay_ct <= @ToDate AND d.SubsidiaryId = @SubId
		GROUP BY d.Tk
	)	
	SELECT
			CASE 
				WHEN d.Tk LIKE '631%' OR d.Tk LIKE '632%' OR d.Tk LIKE '635%'  OR d.Tk LIKE '641%' OR d.Tk LIKE '642%' OR d.Tk LIKE '811%' OR d.Tk LIKE '821%' THEN @TransferType_Cost
				WHEN d.Tk LIKE '511%' OR d.Tk LIKE '512%' OR d.Tk LIKE '515%'  OR d.Tk LIKE '711%' THEN @TransferType_Revenue				
				ELSE NULL
			END TransferType,
			d.Tk,
			d.Du_no,
			d.Du_co
	INTO #data
	FROM duTk d
	
	SELECT @DuCo911 = SUM(Du_co) FROM #data WHERE Tk LIKE '911%'
	SELECT TransferType, Tk, Du_no, Du_co FROM #data WHERE TransferType > 0
END


GO

USE AccountancyPublicDB
GO

/**
* Tính giá vốn
*/
CREATE OR ALTER PROCEDURE [dbo].[asp_CalcProduct_OutputPrice]
	@SubId			INT,
	@Tk				NVARCHAR(128),	
	@ProductId		INT,
	@FromDate		DATETIME2,
	@ToDate			DATETIME2,
	@IsIgnoreZeroPrice	BIT = 1,
	@IsUpdate		BIT = 0,
	@IsInvalid		BIT OUTPUT,
	@IsError		BIT OUTPUT
AS
BEGIN

	DECLARE @DIEU_CHUYEN_KHO_TYPE NVARCHAR(128) = N'DIEU_CHUYEN_KHO';

	BEGIN TRANSACTION;

	DECLARE @OpenningDept TABLE
	(
		tk nvarchar(128),
		vthhtp int,
		balance_quantity decimal(32,12),
		balance_money decimal(32,12)
	)

	INSERT INTO @OpenningDept
	(
		tk,
		vthhtp,
		balance_quantity,
		balance_money
	)
	SELECT 
		d.tk, 
		d.vthhtp,
		sum(CASE WHEN d.IsDebt = 1 THEN d.so_luong ELSE -d.so_luong END),
		sum(CASE WHEN d.IsDebt = 1 THEN d.Vnd_no ELSE -d.Vnd_co END)
	FROM dbo._rc_detail d
	WHERE d.SubsidiaryId = @SubId 
		AND d.ngay_ct < @FromDate
		AND d.vthhtp IS NOT NULL
		AND (@ProductId IS NULL OR d.vthhtp = @ProductId)
		AND (@Tk IS NULL OR d.Tk LIKE CONCAT(@Tk,'%'))
		AND
		(d.Tk LIKE '151%'
			OR d.Tk LIKE '152%'
			OR d.Tk LIKE '153%'
			OR d.Tk LIKE '155%'
			OR d.Tk LIKE '156%'
			OR d.Tk LIKE '157%'
			OR d.Tk LIKE '158%'
		)
		
	GROUP BY d.tk, d.vthhtp


	IF @IsIgnoreZeroPrice = 0 AND EXISTS (
			SELECT 
				0
			FROM dbo._rc_detail d	
	
			WHERE d.SubsidiaryId = @SubId
			AND d.ngay_ct BETWEEN @FromDate AND @ToDate
			AND d.vthhtp IS NOT NULL
			AND (@ProductId IS NULL OR d.vthhtp = @ProductId)
			AND (@Tk IS NULL OR d.Tk LIKE CONCAT(@Tk,'%'))
			AND
			(d.Tk LIKE '151%'
				OR d.Tk LIKE '152%'
				OR d.Tk LIKE '153%'
				OR d.Tk LIKE '155%'
				OR d.Tk LIKE '156%'
				OR d.Tk LIKE '157%'
				OR d.Tk LIKE '158%'
			)
			AND d.IsDebt = 1
			AND d.BUT_TOAN = 0
			AND ISNULL(d.don_gia,0)=0
			AND ISNULL(d.Vnd_no,0) = 0
			AND d.InputType_InputTypeCode <> @DIEU_CHUYEN_KHO_TYPE
	)
	BEGIN
	    SET @IsInvalid = 1
		 
			SELECT					
						ROW_NUMBER() OVER(ORDER BY(SELECT NULL)) stt,
						p.ProductCode vthhtp_ProductCode,
						p.ProductName vthhtp_ProductName,
						d.InputType_Title,
						d.InputTypeId,
						d.InputBill_F_Id,
						d.ngay_ct,
						d.so_ct,
						d.tk tk_no,
						d.Tk_du tk_co,
						d.don_gia,
						d.so_luong,
						d.Vnd_no									
						
			FROM dbo._rc_detail d	
				LEFT JOIN dbo.v_Product p ON d.vthhtp = p.F_Id
			WHERE d.SubsidiaryId = @SubId
			AND d.ngay_ct BETWEEN @FromDate AND @ToDate
			AND d.vthhtp IS NOT NULL
			AND (@ProductId IS NULL OR d.vthhtp = @ProductId)			
			AND (@Tk IS NULL OR d.Tk LIKE CONCAT(@Tk,'%'))
			AND
			(d.Tk LIKE '151%'
				OR d.Tk LIKE '152%'
				OR d.Tk LIKE '153%'
				OR d.Tk LIKE '155%'
				OR d.Tk LIKE '156%'
				OR d.Tk LIKE '157%'
				OR d.Tk LIKE '158%'
			)
			AND d.IsDebt = 1
			AND d.so_luong > 0
			AND ISNULL(d.don_gia,0)=0
			AND ISNULL(d.Vnd_no,0) = 0
			AND d.InputType_InputTypeCode <> @DIEU_CHUYEN_KHO_TYPE
			ORDER BY d.Tk, d.vthhtp, d.ngay_ct, d.IsDebt DESC, d.F_Id
		ROLLBACK
		RETURN
	END
	SET @IsInvalid = 0;
	SET @IsError = 0;

	CREATE TABLE #GiaVon
	(	
		InputBill_F_Id bigint,
		BillVersion int,
		f_Id bigint,
		tk nvarchar(128),
		vthhtp int,	
		current_quantity decimal(32,12),	
		current_money decimal(32,12),	
		don_gia decimal(32,12),
		don_gia_vnd decimal(32,12),
		vnd decimal(32,12),
		BUT_TOAN int
	)
	

	DECLARE @current_tk nvarchar(128) = null
	DECLARE @current_vthhtp int = null
	DECLARE @current_quantity decimal(32,12)
	DECLARE @current_money decimal(32,12)

	DECLARE @inputType_InputTypeCode NVARCHAR(128)
	DECLARE @gv_billId bigint
	DECLARE @gv_billVersion int
	DECLARE @gv_f_Id int
	DECLARE @gv_tk nvarchar(128)
	DECLARE @gv_vthhtp int
	DECLARE @gv_IsDebt int
	DECLARE @gv_so_luong decimal(32,12)
	DECLARE @gv_ty_gia decimal(32,12)
	DECLARE @gv_don_gia decimal(32,12)
	DECLARE @gv_vnd_no decimal(32,12)
	DECLARE @gv_vnd_co decimal(32,12)
	DECLARE @gv_BUT_TOAN INT
    DECLARE @gv_DecimalPlace INT

	
	DECLARE @VndDecimalPlace INT = 0;
	SELECT @VndDecimalPlace = DecimalPlace FROM dbo.InputField WHERE FieldName = 'vnd0'
	SET @VndDecimalPlace = ISNULL(@VndDecimalPlace,0)

	DECLARE @CurrencyDefaultDecimalPlace INT
	SELECT @CurrencyDefaultDecimalPlace = DecimalPlace FROM dbo.v_Currency WHERE IsPrimary = 1
	IF ISNULL(@CurrencyDefaultDecimalPlace,0) < @VndDecimalPlace
	BEGIN
	    SET @VndDecimalPlace = ISNULL(@CurrencyDefaultDecimalPlace,0)
	END

	DECLARE cursor_gia_von CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR

	SELECT
		d.InputType_InputTypeCode,
		d.InputBill_F_Id,
		d.LatestBillVersion,
		d.F_Id, 
		d.Tk, 	
		d.vthhtp, 
		d.so_luong,
		d.IsDebt,
		d.ty_gia,
		d.don_gia don_gia,
		d.Vnd_no,
		d.Vnd_co,
		d.BUT_TOAN,
		c.DecimalPlace
	FROM dbo._rc_detail d	
		LEFT JOIN dbo.v_Currency c ON d.loai_tien = c.F_Id
	WHERE d.SubsidiaryId = @SubId
	AND d.ngay_ct BETWEEN @FromDate AND @ToDate
	AND d.vthhtp IS NOT NULL
	AND (@ProductId IS NULL OR d.vthhtp = @ProductId)
	AND (@Tk IS NULL OR d.Tk LIKE CONCAT(@Tk,'%'))
	AND
	(d.Tk LIKE '151%'
		OR d.Tk LIKE '152%'
		OR d.Tk LIKE '153%'
		OR d.Tk LIKE '155%'
		OR d.Tk LIKE '156%'
		OR d.Tk LIKE '157%'
		OR d.Tk LIKE '158%'
	)
	--AND d.so_luong > 0	//thue xnk nhap vao chung tu rieng biet
	ORDER BY d.Tk, d.vthhtp, d.ngay_ct, 
	CASE WHEN d.IsDebt = 1 AND d.InputType_InputTypeCode <> @DIEU_CHUYEN_KHO_TYPE THEN 0 ELSE 1 END,
	CASE WHEN d.InputType_InputTypeCode = @DIEU_CHUYEN_KHO_TYPE THEN d.IsDebt ELSE 2 END,
	d.F_Id

	OPEN cursor_gia_von

	FETCH NEXT FROM cursor_gia_von
	INTO
		@inputType_InputTypeCode,
		@gv_billId,
		@gv_billVersion,
		@gv_f_Id,
		@gv_tk,	
		@gv_vthhtp,		
		@gv_so_luong,
		@gv_IsDebt,		
		@gv_ty_gia,
		@gv_don_gia,
		@gv_vnd_no,
		@gv_vnd_co,
		@gv_BUT_TOAN,
		@gv_DecimalPlace

	WHILE @@FETCH_STATUS = 0
	BEGIN
	
		--Chỉ tính số lượng đối với bút toán thành tiền và trường giá vốn
		--Nếu có thêm bút toán thuế (XNK) thì chỉ cộng thêm lượng tiền vào (tổng tiền = tiền hàng + thuế XNK), số lượng thì chỉ tính 1 lần
		IF @gv_BUT_TOAN <> 0 AND  @gv_BUT_TOAN <> 2--except tax, VND0 = Thanh tien, VND2= Gia von
		BEGIN
			SET @gv_so_luong = 0
		END

		DECLARE @gv_don_gia_vnd DECIMAL(32,12) = 0
		
		IF @inputType_InputTypeCode = @DIEU_CHUYEN_KHO_TYPE AND EXISTS(SELECT 0 FROM #GiaVon WHERE f_Id = @gv_f_Id) AND @gv_IsDebt = 1
		BEGIN
		    SELECT @gv_vnd_no = vnd FROM #GiaVon WHERE f_Id = @gv_f_Id
		END

		--IF @current_vthhtp =4849
		--	BEGIN
		--		SELECT @current_money, @current_vthhtp,1,@gv_vthhtp
		--		ROLLBACK
		--		RETURN
		--	END

		IF ISNULL(@current_tk,'') <> ISNULL(@gv_tk,'') OR ISNULL(@current_vthhtp,0) <> ISNULL(@gv_vthhtp,0)
		BEGIN					
			--important: reinforcement need to reset, because if not exists in OpenningDept it will be keep old value
			SET @current_quantity = 0;
			SET @current_money = 0

			SET @current_tk = @gv_tk
			SET @current_vthhtp = @gv_vthhtp
			SELECT @current_quantity =  balance_quantity, @current_money  = o.balance_money FROM  @OpenningDept o WHERE  o.tk = @gv_tk AND o.vthhtp = @gv_vthhtp
			SET @current_quantity = ISNULL( @current_quantity,0)
			SET @current_money = ISNULL(@current_money,0)

			SET @gv_don_gia_vnd = 0

			IF @current_quantity > 0
			BEGIN
				SET @gv_don_gia_vnd = @current_money/@current_quantity;
			END

			print CONCAT('tk-',@gv_tk,'vthh-',@gv_vthhtp,'current_quantity-',@current_quantity,'current_money-',@current_money,'-','-')
		END
			
		IF @current_money >200000000000
		BEGIN
			SELECT @current_money, @current_vthhtp, 'max ' max1
			ROLLBACK
			RETURN
		END
		IF @gv_IsDebt = 1
		BEGIN
			
				SET @current_quantity = ISNULL(@current_quantity,0) + ISNULL(@gv_so_luong,0)
				SET @current_money = ISNULL(@current_money,0) + ISNULL(@gv_vnd_no,0)		
				
				
		END
		ELSE
		BEGIN
			
			IF ISNULL(@current_quantity,0) - @gv_so_luong < 0
			BEGIN
			    SET @IsError = 1;

				SELECT					
						ROW_NUMBER() OVER(ORDER BY(SELECT NULL)) stt,
						p.ProductCode vthhtp_ProductCode,
						p.ProductName vthhtp_ProductName,
						d.InputType_Title,
						d.InputTypeId,
						d.InputBill_F_Id,
						d.ngay_ct,
						d.so_ct,
						d.tk_no,
						d.tk_co,
						d.don_gia,
						d.so_luong,
						
						@current_quantity current_quantity,
						@current_money current_money
						
				FROM dbo._rc d	
					LEFT JOIN dbo.v_Product p ON d.vthhtp = p.F_Id
				WHERE d.F_Id = @gv_f_Id
				AND (@Tk IS NULL OR d.tk_co LIKE CONCAT(@Tk,'%'))
					AND
					(d.tk_co LIKE '151%'
						OR d.tk_co LIKE '152%'
						OR d.tk_co LIKE '153%'
						OR d.tk_co LIKE '155%'
						OR d.tk_co LIKE '156%'
						OR d.tk_co LIKE '157%'
						OR d.tk_co LIKE '158%'
					)
				ROLLBACK
				RETURN
			END


			SET @gv_don_gia_vnd = 0

			IF @current_quantity > 0
			BEGIN
				SET @gv_don_gia_vnd = @current_money/@current_quantity;
			END

			SET @gv_don_gia = @gv_don_gia_vnd / CASE WHEN @gv_ty_gia >0 THEN @gv_ty_gia ELSE 1 END
			IF @gv_DecimalPlace >= 0
			BEGIN
				SET @gv_don_gia = ROUND(@gv_don_gia, @gv_DecimalPlace);  
			END

			DECLARE @gv_thanh_tien DECIMAL(32,12) = @gv_so_luong *  @gv_don_gia_vnd

			SET @current_quantity = ISNULL(@current_quantity,0) - @gv_so_luong

			IF @current_quantity = 0
			BEGIN
			    SET @gv_thanh_tien = ISNULL(@current_money,0)
			END

			SET @current_money = ISNULL(@current_money,0) - @gv_thanh_tien			
			SET @current_money = ROUND(@current_money, @VndDecimalPlace);
			SET @gv_don_gia_vnd = ROUND(@gv_don_gia_vnd, @VndDecimalPlace);
			SET @gv_thanh_tien = ROUND(@gv_thanh_tien, @VndDecimalPlace);
			
						
			INSERT INTO #GiaVon
					(
						InputBill_F_Id,
						BillVersion,
						f_Id,
						tk,
						vthhtp,
						current_quantity,
						current_money,
						don_gia,
						don_gia_vnd,
						vnd,
						BUT_TOAN
					)
					VALUES
					(
						@gv_billId,
						@gv_billVersion,
						@gv_f_Id, -- f_Id - bigint
						@gv_tk, -- tk - int
						@gv_vthhtp, -- vthhtp - int
						@current_quantity,
						@current_money,
						@gv_don_gia,
						@gv_don_gia_vnd,
						@gv_thanh_tien,
						@gv_BUT_TOAN
					)				
		END	

		FETCH NEXT FROM cursor_gia_von
		INTO
			@inputType_InputTypeCode,
			@gv_billId,
			@gv_billVersion,
			@gv_f_Id,
			@gv_tk,			
			@gv_vthhtp,		
			@gv_so_luong,
			@gv_IsDebt,		
			@gv_ty_gia,
			@gv_don_gia,
			@gv_vnd_no,
			@gv_vnd_co,
			@gv_BUT_TOAN,
			@gv_DecimalPlace
	END

	CLOSE cursor_gia_von
	DEALLOCATE cursor_gia_von

	IF @IsUpdate = 1
	BEGIN
			DECLARE @InputValueRowColumns nvarchar(max) = ''
			SELECT @InputValueRowColumns += ','+[COLUMN_NAME] 
				FROM [INFORMATION_SCHEMA].[COLUMNS] 
				WHERE [TABLE_NAME] = 'InputValueRow' 
					AND [COLUMN_NAME] NOT IN('F_Id','BillVersion','CreatedDatetimeUtc','UpdatedDatetimeUtc','SystemLog',
											'don_gia0','don_gia1','don_gia2','don_gia3','don_gia4',
											'vnd0','vnd1','vnd2','vnd3','vnd4','vnd5');

			DECLARE @Sql NVARCHAR(max) = N'
			INSERT INTO InputValueRow(
				BillVersion,CreatedDatetimeUtc,UpdatedDatetimeUtc,SystemLog,
				don_gia0, don_gia1, don_gia2, don_gia3, don_gia4,
				vnd0,vnd1,vnd2,vnd3,vnd4
			' + @InputValueRowColumns + N')

			SELECT 
				BillVersion + 1, GETUTCDATE(), GETUTCDATE(),N''Created automatic by UpdateOutputPrice'', 
				ISNULL(p.don_gia0, r.don_gia0), ISNULL(p.don_gia1, r.don_gia1), ISNULL(p.don_gia2, r.don_gia2), ISNULL(p.don_gia3, r.don_gia3), ISNULL(p.don_gia4, r.don_gia4),
				ISNULL(p.vnd0, r.vnd0), ISNULL(p.vnd1, r.vnd1), ISNULL(p.vnd2, r.vnd2), ISNULL(p.vnd3, r.vnd3), ISNULL(p.vnd4, r.vnd4)
				' + @InputValueRowColumns + N'

				FROM InputValueRow r
					LEFT JOIN (
						SELECT 
							p.f_Id, 
							MAX(CASE WHEN p.BUT_TOAN = 0 THEN p.don_gia ELSE NULL END) don_gia0,
							MAX(CASE WHEN p.BUT_TOAN = 1 THEN p.don_gia ELSE NULL END) don_gia1,
							MAX(CASE WHEN p.BUT_TOAN = 2 THEN p.don_gia ELSE NULL END) don_gia2,
							MAX(CASE WHEN p.BUT_TOAN = 3 THEN p.don_gia ELSE NULL END) don_gia3,
							MAX(CASE WHEN p.BUT_TOAN = 4 THEN p.don_gia ELSE NULL END) don_gia4,

							MAX(CASE WHEN p.BUT_TOAN = 0 THEN p.vnd ELSE NULL END) vnd0,
							MAX(CASE WHEN p.BUT_TOAN = 1 THEN p.vnd ELSE NULL END) vnd1,
							MAX(CASE WHEN p.BUT_TOAN = 2 THEN p.vnd ELSE NULL END) vnd2,
							MAX(CASE WHEN p.BUT_TOAN = 3 THEN p.vnd ELSE NULL END) vnd3,
							MAX(CASE WHEN p.BUT_TOAN = 4 THEN p.vnd ELSE NULL END) vnd4
						FROM #GiaVon p 
						GROUP BY p.f_Id
					) as p ON r.F_Id = p.f_Id
				WHERE r.IsDeleted=0 AND r.SubsidiaryId = @SubId AND r.InputBill_F_Id IN (SELECT DISTINCT InputBill_F_Id FROM #GiaVon)';
			EXECUTE dbo.sp_executesql @stmt = @Sql, @params = N'@SubId INT', @SubId = @SubId;

			UPDATE r 
				SET IsDeleted = 1,
					SystemLog = N'Deleted automatic by Update product cost Output Price',
					DeletedDatetimeUtc = GETUTCDATE()
				FROM dbo.InputValueRow r
				JOIN (
					SELECT DISTINCT InputBill_F_Id, BillVersion FROM #GiaVon
				) p ON r.InputBill_F_Id = p.InputBill_F_Id AND r.BillVersion <= p.BillVersion
				WHERE r.SubsidiaryId = @SubId AND r.IsDeleted=0;		

			UPDATE b 
				SET LatestBillVersion = b.LatestBillVersion + 1,
					UpdatedDatetimeUtc = GETUTCDATE()
				FROM dbo.InputBill b
				JOIN (
					SELECT DISTINCT InputBill_F_Id FROM #GiaVon
				) p ON b.F_Id = p.InputBill_F_Id
				WHERE b.SubsidiaryId = @SubId;

			UPDATE u
				SET sum_vnd0 = (SELECT SUM(r.vnd0) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
					sum_vnd1 = (SELECT SUM(r.vnd1) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
					sum_vnd2 = (SELECT SUM(r.vnd2) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
					sum_vnd3 = (SELECT SUM(r.vnd3) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
					sum_vnd4 = (SELECT SUM(r.vnd4) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion)
			FROM dbo.InputValueRow u
			WHERE u.SubsidiaryId = @SubId AND u.IsBillEntry = 1 AND u.IsDeleted = 0 AND u.InputBill_F_Id IN (SELECT DISTINCT InputBill_F_Id FROM #GiaVon)
		
	END

	
	SELECT					
			ROW_NUMBER() OVER(ORDER BY(SELECT NULL)) stt,
			v.vthhtp,
			p.ProductCode vthhtp_ProductCode,
			p.ProductName vthhtp_ProductName,
			v.InputType_Title,
			v.InputTypeId,
			v.InputBill_F_Id,
			v.ngay_ct,
			v.so_ct,
			v.tk_no,
			v.tk_co,
			v.don_gia * CASE WHEN v.ty_gia>0 THEN v.ty_gia ELSE 1 END don_gia,
			v.so_luong,
			v.vnd,
			gv.don_gia * CASE WHEN v.ty_gia>0 THEN v.ty_gia ELSE 1 END AS don_gia_update,
			gv.vnd as vnd_update,
			v.BUT_TOAN

		FROM #GiaVon gv
			JOIN dbo._rc as v ON gv.f_Id = v.F_Id AND gv.BUT_TOAN = v.BUT_TOAN
			LEFT JOIN dbo.v_Product p ON v.vthhtp = p.F_Id					
		--WHERE gv.vnd > 0
		ORDER BY v.vthhtp, v.ngay_ct, v.InputTypeId, v.InputBill_F_Id, v.BUT_TOAN, v.F_Id
				
		
	DROP TABLE IF EXISTS #GiaVon
	COMMIT TRANSACTION
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcFixExchangeRateByOrder]	
	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@Currency INT,
	@Tk NVARCHAR(128),
	@SubId AS int
AS
BEGIN
	--SELECT @Currency loait
	SET @Tk = CONCAT(@Tk,'%')
	;WITH ps_co AS
	(
		SELECT
			tk.kh_co,
			tk.order_code,
			tk.ngay_ct,
			tk.so_ct,
			tk.tk_co,
			tk.InputTypeId,
			tk.InputBill_F_Id,
			SUM(tk.ngoai_te) ngoai_te,
			SUM(tk.vnd) vnd,
			AVG(tk.ty_gia) ty_gia
		FROM dbo._rc tk
		WHERE  tk.tk_co LIKE @Tk
			AND tk.tk_no LIKE N'1122%'
			AND tk.ngay_ct BETWEEN @FromDate AND @ToDate
			AND tk.loai_tien = @Currency
			AND tk.SubsidiaryId = @SubId
			AND tk.vnd>0
			AND tk.ngoai_te>0
		GROUP BY
			tk.kh_co,
			tk.order_code,
			tk.ngay_ct,
			tk.so_ct,
			tk.tk_co,
			tk.InputTypeId,
			tk.InputBill_F_Id
	), ps_no AS
	(
		SELECT
			tk.kh_no,
			tk.tk_no,
			tk.order_code,
			
			STRING_AGG(tk.InputBill_F_Id,',') InputBill_F_Ids,
			STRING_AGG(tk.InputTypeId,',') InputTypeIds,
			STRING_AGG(tk.so_ct,',') so_cts,

			SUM(tk.ngoai_te) ngoai_te,
			SUM(tk.vnd) vnd,
			AVG(tk.ty_gia) ty_gia
		FROM (
			SELECT
				tk.kh_no,
				tk.tk_no,
				tk.order_code,

				tk.InputBill_F_Id,
				tk.InputTypeId,
				tk.so_ct,				

				SUM(tk.ngoai_te) ngoai_te,
				SUM(tk.vnd) vnd,
				SUM(tk.ty_gia * tk.ngoai_te)/SUM(tk.ngoai_te) ty_gia
			FROM dbo._rc tk
			WHERE tk.tk_no LIKE @Tk
				--AND tk.ngay_ct BETWEEN @FromDate AND @ToDate
				AND tk.loai_tien = @Currency
				AND tk.SubsidiaryId = @SubId
				AND EXISTS(SELECT 0 FROM ps_co c WHERE tk.order_code = c.order_code)
			GROUP BY
				tk.kh_no,
				tk.tk_no,
				tk.order_code,
				tk.InputBill_F_Id,
				tk.InputTypeId,
				tk.so_ct
		) tk
		GROUP BY
				tk.kh_no,							
				tk.tk_no,
				tk.order_code

	),v AS(
		SELECT 
			ps_co.kh_co kh,
			ps_co.order_code,
			ps_no.tk_no,
			ps_no.ngoai_te			no_ngoai_te,
			ps_no.vnd				no_vnd,
			ps_no.ty_gia			no_ty_gia,
			ps_no.InputBill_F_Ids	no_InputBill_F_Ids,
			ps_no.InputTypeIds		no_InputTypeIds,
			ps_no.so_cts			no_so_cts,
		
			ps_co.ngay_ct			co_ngay_ct,
			ps_co.so_ct				co_so_ct,
			ps_co.InputTypeId		co_InputTypeId,
			ps_co.InputBill_F_Id	co_InputBill_F_Id,
			ps_co.ngoai_te			co_ngoai_te,
			ps_co.vnd				co_vnd,
			ps_co.ty_gia			co_ty_gia,
			(ps_co.ty_gia - ps_no.ty_gia)*ps_co.ngoai_te chenh_lech--,
			--CONCAT('N',ps_no.tk_no,'/C',ps_co.tk_co) hach_toan
		
		FROM ps_co
		LEFT JOIN  ps_no ON  ps_co.kh_co = ps_no.kh_no AND ps_no.order_code = ps_co.order_code AND ps_no.tk_no = ps_co.tk_co
	)
	SELECT
		v.kh,
		c.CustomerId customerId,
		c.PartnerCode kh_PartnerCode,
		c.PartnerName kh_PartnerName,
		v.order_code,
		v.tk_no,
		v.no_ngoai_te,
		v.no_vnd,
		v.no_ty_gia,
		v.no_InputBill_F_Ids,
		v.no_InputTypeIds,
		v.no_so_cts,
		
		v.co_ngay_ct,
		v.co_so_ct,
		v.co_InputTypeId,
		v.co_InputBill_F_Id,
		v.co_ngoai_te,
		v.co_vnd,
		v.co_ty_gia,
		v.chenh_lech,
		CASE WHEN v.chenh_lech>0 THEN v.tk_no ELSE '515' END ket_chuyen_no,
		CASE WHEN v.chenh_lech>0 THEN '515' ELSE v.tk_no END ket_chuyen_co,
		
		CASE WHEN v.chenh_lech IS NULL OR v.chenh_lech = 0 THEN NULL
		ELSE
		CONCAT(
			'N',
			CASE WHEN v.chenh_lech>0 THEN v.tk_no ELSE '515' END,
			'/C',
			CASE WHEN v.chenh_lech>0 THEN '515' ELSE v.tk_no END
		) 
		END
		hach_toan
	FROM v
	LEFT JOIN dbo.v_Partner c ON v.kh = c.F_Id
	ORDER BY v.co_ngay_ct, v.co_InputTypeId, v.co_InputBill_F_Id
END

GO

USE AccountancyPublicDB
GO
/*
* Tính giá thành
*/
CREATE OR ALTER PROCEDURE [dbo].[asp_CalcProductPrice]
	@SubId INT,
	@IsByLsx BIT,
	@IsByOrder BIT,
	@IsByStock BIT,
	@ProductId INT,
	@OrderCode NVARCHAR(128),
	@MaLsx NVARCHAR(128),
	@StockId INT,

	@ProgressMaterialOpen DECIMAL(32,12) = NULL,
	@ProgressMaterialEnd DECIMAL(32,12) = NULL,		

	@ProgressLaborsOpen DECIMAL(32,12) = NULL,
	@ProgressLaborsEnd DECIMAL(32,12) = NULL,

	@ProgressFactoriesOpen DECIMAL(32,12) = NULL,
	@ProgressFactoriesEnd DECIMAL(32,12) = NULL,

	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@CustomPrice			_DECIMAL_KEY_VALUES READONLY,
	@AllocationRate			_DECIMAL_KEY_VALUES READONLY,
	@OtherFee				_DECIMAL_KEY_VALUES READONLY,
	@DirectMaterialFee		_DECIMAL_KEY_VALUES READONLY,
	@DirectLaborFee			_DECIMAL_KEY_VALUES READONLY,
	@DirectGeneralFee		_DECIMAL_KEY_VALUES READONLY,

	@IndirectMaterialFeeAllocationTypeId	INT,
	@IndirectMaterialFeeSum					decimal(32,12) OUTPUT,
	@IndirectMaterialFeeSumCustom			decimal(32,12),

	@IndirectLaborFeeAllocationTypeId		INT,
	@IndirectLaborFeeSum					decimal(32,12) OUTPUT,
	@IndirectLaborFeeSumCustom				decimal(32,12),

	@GeneralManufacturingAllocationTypeId	INT,
	@GeneralManufacturingSum				decimal(32,12) OUTPUT,
	@GeneralManufacturingSumCustom			decimal(32,12),

	@IsReviewUpdate							BIT = 0,
	@IsUpdate								BIT = 0
AS
BEGIN
	SET @IsByLsx = ISNULL(@IsByLsx,0)
	SET @IsByOrder = ISNULL(@IsByOrder,0)
	SET @IsByStock = ISNULL(@IsByStock,0)
	IF LEN(@OrderCode)=0
		SET @OrderCode = NULL

	IF LEN(@MaLsx)=0
		SET @MaLsx = NULL
	IF @StockId=0
		SET @StockId = NULL	

	BEGIN TRANSACTION

		DECLARE @tbl TABLE(
				stt						int IDENTITY(1,1),
				group_id				nvarchar(512),
				row_id					nvarchar(512),			
				ma_lsx					nvarchar(512),			
				order_code				nvarchar(512),			
				kho						int,			
				vthhtp					int,
				vthhtp_ProductCode		nvarchar(128),
				vthhtp_ProductName		nvarchar(128),
				vthhtp_UnitId_UnitName	nvarchar(128),
				group_so_luong			decimal(32,12),
				so_luong				decimal(32,12),
				so_luong_lsx				decimal(32,12),
				allocation_rate			decimal(32,12),
				chi_phi_nvl_tt			decimal(32,12),
				chi_phi_nvl_tt_custom	decimal(32,12),
				chi_phi_nhan_cong_tt	decimal(32,12),
				chi_phi_nhan_cong_tt_custom	decimal(32,12),
				chi_phi_chung_tt		DECIMAL(32,12),
				chi_phi_chung_tt_custom	decimal(32,12),
				chi_phi_khac			decimal(32,12),
				chi_phi_nvl_gt			decimal(32,12),
				chi_phi_nhan_cong_gt	decimal(32,12),
				chi_phi_sx_chung		decimal(32,12),
				gia_thanh				decimal(32,12),
				gia_thanh_tong_tien		decimal(32,12),
				gia_ban					decimal(32,12),
				gia_ban_custom			decimal(32,12),
				gia_ban_tong_tien		decimal(32,12),
				chenh_lech				decimal(32,12),
				ty_le					decimal(32,12)
		);

		INSERT INTO @tbl
			(
				group_id,
				row_id,			
				ma_lsx,
				order_code,
				kho,
				vthhtp,
				vthhtp_ProductCode,
				vthhtp_ProductName,
				vthhtp_UnitId_UnitName,
				so_luong_lsx,
				so_luong,
				allocation_rate			
			)

			SELECT 
				MAX(t.group_id), 
				CONCAT(t.group_id,'-product-', t.vthhtp),
				CASE @IsByLsx WHEN 1 THEN MAX(t.ma_lsx) ELSE ''END,
				CASE @IsByOrder WHEN 1 THEN MAX(t.order_code) ELSE ''END,
				CASE @IsByStock WHEN 1 THEN MAX(t.kho) ELSE NULL END,		
				t.vthhtp,
				p.ProductCode,
				p.ProductName,
				p.UnitId_UnitName,
				MAX(t.Quantity),
				SUM(t.so_luong),
				SUM(t.so_luong)			
			FROM
			(
				SELECT
					CONCAT('group',
						'-',CASE @IsByLsx WHEN 1 THEN t.ma_lsx ELSE ''END,
						'-',CASE @IsByOrder WHEN 1 THEN t.order_code ELSE ''END,
						'-',CASE @IsByStock WHEN 1 THEN t.kho ELSE ''END
					) AS group_id,				
					t.ma_lsx,
					t.order_code,
					t.kho,
					t.vthhtp,
					t.so_luong,
					lsx.Quantity
				FROM dbo._rc t
					OUTER APPLY (
						SELECT d.ProductionOrderCode,d.ProductId, SUM(d.Quantity) Quantity 
						FROM dbo.vProductionOrderDetailSimple d 
						WHERE ISNULL(d.ProductionOrderCode,'') = ISNULL(t.ma_lsx,'') AND d.ProductId = t.vthhtp
						GROUP BY d.ProductionOrderCode,d.ProductId
					) lsx
				WHERE t.SubsidiaryId = @SubId AND t.tk_no LIKE '155%' AND t.ngay_ct BETWEEN @FromDate AND @ToDate AND t.vthhtp IS NOT NULL
					AND (@ProductId IS NULL OR t.vthhtp = @ProductId)
					AND (@OrderCode IS NULL OR t.order_code = @OrderCode)
					AND (@MaLsx IS NULL OR t.ma_lsx = @MaLsx)
					AND (@StockId IS NULL OR t.kho = @StockId)
			) t
			JOIN dbo.v_Product p ON t.vthhtp = p.F_Id
					
			GROUP BY
				t.group_id,
				t.vthhtp,
				p.ProductCode,
				p.ProductName,
				p.UnitId_UnitName
			ORDER BY
				t.group_id,
				t.vthhtp,
				p.ProductCode,
				p.ProductName,
				p.UnitId_UnitName;
			
			--1 b. Lấy thông tin giá bán/tổng tiền bán
			DECLARE @tbl_tong_gia_ban TABLE (				
				row_id				nvarchar(512),
				gia_ban				decimal(32,12),
				tong_gia_ban		decimal(32,12)
			);

			INSERT INTO @tbl_tong_gia_ban
			(					
				row_id,
				gia_ban,
				tong_gia_ban		
			)
			SELECT				
				CONCAT(t.group_id,'-product-', t.vthhtp),
				sum(t.vnd)/sum(t.so_luong),--gia_ban
				sum(t.vnd)--tong_gia_ban			
			FROM (
				SELECT
					CONCAT('group',
						'-',CASE @IsByLsx WHEN 1 THEN t.ma_lsx ELSE ''END,
						'-',CASE @IsByOrder WHEN 1 THEN t.order_code ELSE ''END,
						'-',CASE @IsByStock WHEN 1 THEN t.kho ELSE ''END
					) AS group_id,				
					t.vthhtp,
					t.so_luong,
					t.vnd
				FROM dbo._rc t				
				WHERE t.SubsidiaryId = @SubId  AND t.tk_co LIKE '511%'  AND t.vthhtp IS NOT NULL--AND t.tk_no LIKE '131%'AND t.ngay_ct BETWEEN @FromDate AND @ToDate
				AND (@ProductId IS NULL OR t.vthhtp = @ProductId)
				AND EXISTS(SELECT 0 FROM @tbl b WHERE b.vthhtp = t.vthhtp)
			) AS t
			
			GROUP BY
				t.group_id,
				t.vthhtp			

			UPDATE t 
				SET t.gia_ban			= s.gia_ban--,
					--t.gia_ban_custom	= cp.[Value],
					--t.gia_ban_tong_tien = t.so_luong * ISNULL(cp.[Value], s.gia_ban)
			FROM @tbl t
				JOIN @tbl_tong_gia_ban s ON t.row_id = s.row_id
				--LEFT JOIN @CustomPrice cp ON t.row_id = cp.[Key];


			DECLARE @tbl_lastest_price TABLE (
				productId INT,
				price	decimal(32,12)
			);

			INSERT INTO @tbl_lastest_price
			(	
				productId,
				price
			)
			SELECT t.vthhtp, t.vnd/t.so_luong FROM
			(
				SELECT
					ROW_NUMBER() OVER (PARTITION BY t.vthhtp ORDER BY t.ngay_ct DESC) stt,
					t.vthhtp,					
					t.vnd,
					t.so_luong
				FROM dbo._rc t

				WHERE t.SubsidiaryId = @SubId AND t.tk_co LIKE '511%'  AND t.vthhtp IS NOT NULL--AND t.tk_no LIKE '131%' AND t.ngay_ct BETWEEN @FromDate AND @ToDate
				AND (@ProductId IS NULL OR t.vthhtp = @ProductId) AND t.vnd>0  AND t.so_luong > 0
			) t WHERE t.stt = 1 AND t.so_luong > 0

			UPDATE t 
				SET t.gia_ban			= s.price
			FROM @tbl t
				JOIN @tbl_lastest_price s ON t.vthhtp = s.productId
			WHERE t.gia_ban IS NULL

			UPDATE t 
				SET t.gia_ban_custom	= cp.[Value],
					t.gia_ban_tong_tien = t.so_luong * ISNULL(cp.[Value], t.gia_ban)
			FROM @tbl t				
				LEFT JOIN @CustomPrice cp ON t.row_id = cp.[Key];

			UPDATE t 
				SET t.allocation_rate	= r.[Value]
			FROM @tbl t
				JOIN @AllocationRate r ON t.row_id = r.[Key];

			DECLARE @IsInputRate BIT = 0;

			IF EXISTS(SELECT 0 FROM @AllocationRate)
				SET @IsInputRate = 1;

			--2. Tính tổng chi phí trực tiếp theo lsx
			DECLARE @tbl_tong_truc_tiep TABLE(
				group_id				nvarchar(512),
				so_luong				decimal(32,12),
				allocation_rate			decimal(32,12),
				gia_ban_tong_tien		decimal(32,12),
				chi_phi_nvl_tt			decimal(32,12),
				chi_phi_nhan_cong_tt	decimal(32,12),
				chi_phi_chung_tt		DECIMAL(32,12)
			);

			--DECLARE @tong_nvl_tt decimal(32,12)
			--DECLARE @tong_nhan_cong_tt decimal(32,12)

			--SELECT @tong_nvl_tt = SUM(vnd) FROM _rc WHERE SubsidiaryId = @SubId AND ngay_ct BETWEEN @FromDate AND @ToDate AND tk_no LIKE ''621%'' AND (tk_co LIKE ''152%'' OR tk_co LIKE ''153%'' OR tk_co LIKE ''156%'')
			--SELECT @tong_nhan_cong_tt = SUM(vnd) FROM _rc WHERE SubsidiaryId = @SubId AND ngay_ct BETWEEN @FromDate AND @ToDate AND tk_no LIKE ''622%'' AND (tk_co LIKE ''334%'')

			INSERT INTO @tbl_tong_truc_tiep
			(	
				group_id,
				so_luong,
				allocation_rate,
				gia_ban_tong_tien,
				chi_phi_nvl_tt,
				chi_phi_nhan_cong_tt,
				chi_phi_chung_tt
			)
			SELECT 

					group_id,
					SUM(t.so_luong),
					SUM(CASE WHEN @IsInputRate = 1 THEN t.allocation_rate ELSE t.so_luong END),
					SUM(t.gia_ban_tong_tien),
				
					(
						--Chi phí NVL trực tiếp: Nợ 621, có 152, 153,156 theo mã đơn hàng hoặc mã lệnh SX tập hợp theo phiếu chi tiết--BETWEEN @FromDate AND @ToDate (update: bo tk co)
						SELECT SUM(r.vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct <= @ToDate AND r.tk_no LIKE '621%'-- AND (r.tk_co LIKE '152%' OR r.tk_co LIKE '153%' OR r.tk_co LIKE '156%')
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)
						AND (@StockId IS NULL OR r.kho = @StockId)

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.ma_lsx))
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.order_code))
						AND (@IsByStock = 0 OR r.kho = MAX(t.kho))					
					),

					(
						--Chi phí nhân công trực tiếp: Nợ 622, có 334 tập hợp theo LSX hoặc mã Đơn hàng
						SELECT SUM(vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct <= @ToDate AND r.tk_no LIKE '622%'-- AND (r.tk_co LIKE '334%') 
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)
						AND (@StockId IS NULL OR r.kho = @StockId)

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.ma_lsx))
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.order_code))
						AND (@IsByStock = 0 OR r.kho = MAX(t.kho))	
					),

					(
						--Chi phí chung trực tiếp (Cột J) được tổng hợp từ các CTGS có phát sinh chỉ định các LSX và ĐH theo lựa chọn Nợ 627,  tập hợp theo LSX hoặc mã Đơn hàng không xét thòi gian														
						SELECT SUM(vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct <= @ToDate AND r.tk_no LIKE '627%'
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)
						AND (@StockId IS NULL OR r.kho = @StockId)

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.ma_lsx))
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.order_code))
						AND (@IsByStock = 0 OR r.kho = MAX(t.kho))				
					)
				
			FROM @tbl t			
			GROUP BY t.group_id;

			DECLARE @group_id				nvarchar(512)
			DECLARE @row_id					nvarchar(512)		
			DECLARE @vthhtp					int		
			DECLARE @vthhtp_ProductCode		nvarchar(128)
			DECLARE @vthhtp_ProductName		nvarchar(128)
			DECLARE @vthhtp_UnitId_UnitName	nvarchar(128)
			DECLARE @so_luong				decimal(32,12)
			DECLARE @so_luong_lsx			decimal(32,12)
			DECLARE @allocation_rate		decimal(32,12)
			DECLARE @chi_phi_nvl_tt			decimal(32,12)
			DECLARE @chi_phi_nvl_tt_custom	decimal(32,12)
			DECLARE @chi_phi_nhan_cong_tt	decimal(32,12)
			DECLARE @chi_phi_nhan_cong_tt_custom	decimal(32,12)
			DECLARE @chi_phi_chung_tt		DECIMAL(32,12)
			DECLARE @chi_phi_chung_tt_custom	decimal(32,12)
			DECLARE @chi_phi_khac			decimal(32,12)
			DECLARE @chi_phi_nvl_gt			decimal(32,12)
			DECLARE @chi_phi_nhan_cong_gt	decimal(32,12)
			DECLARE @chi_phi_sx_chung		decimal(32,12)
			DECLARE @gia_thanh				decimal(32,12)
			DECLARE @gia_thanh_tong_tien	decimal(32,12)
			DECLARE @gia_ban				decimal(32,12)
			DECLARE @gia_ban_tong_tien		decimal(32,12)
			DECLARE @chenh_lech				decimal(32,12)
			DECLARE @ty_le					decimal(32,12)

			DECLARE cursor_tinh_gia CURSOR LOCAL
			READ_ONLY
			FOR 
				SELECT
					group_id,
					row_id,			
					vthhtp,
					vthhtp_ProductCode,
					vthhtp_ProductName,
					vthhtp_UnitId_UnitName,
					so_luong,
					so_luong_lsx,
					allocation_rate,
					chi_phi_nvl_tt,
					chi_phi_nvl_tt_custom,
					chi_phi_nhan_cong_tt,
					chi_phi_nhan_cong_tt_custom,
					chi_phi_chung_tt,
					chi_phi_chung_tt_custom,
					chi_phi_khac,
					chi_phi_nvl_gt,
					chi_phi_nhan_cong_gt,
					chi_phi_sx_chung,
					gia_thanh,
					gia_thanh_tong_tien,
					gia_ban,
					gia_ban_tong_tien,
					chenh_lech,
					ty_le
				FROM  @tbl

			--3. Tính Chi phí NVL trực tiếp, Nhân công trực tiếp theo tỷ lệ giá bán
			OPEN cursor_tinh_gia

			FETCH NEXT FROM cursor_tinh_gia INTO
					@group_id,
					@row_id,				
					@vthhtp,
					@vthhtp_ProductCode,
					@vthhtp_ProductName,
					@vthhtp_UnitId_UnitName,
					@so_luong,
					@so_luong_lsx,
					@allocation_rate,
					@chi_phi_nvl_tt,
					@chi_phi_nvl_tt_custom,
					@chi_phi_nhan_cong_tt,
					@chi_phi_nhan_cong_tt_custom,
					@chi_phi_chung_tt,
					@chi_phi_chung_tt_custom,
					@chi_phi_khac,
					@chi_phi_nvl_gt,
					@chi_phi_nhan_cong_gt,
					@chi_phi_sx_chung,
					@gia_thanh,
					@gia_thanh_tong_tien,
					@gia_ban,
					@gia_ban_tong_tien,
					@chenh_lech,
					@ty_le
			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @calc_chi_phi_nvl_tt			decimal(32,12)	= NULL;
				DECLARE @calc_chi_phi_nvl_tt_custom		decimal(32,12)	= NULL;

				DECLARE @calc_chi_phi_nhan_cong_tt			decimal(32,12)	= NULL;
				DECLARE @calc_chi_phi_nhan_cong_tt_custom	decimal(32,12)	= NULL;

				DECLARE @calc_chi_phi_chung_tt			decimal(32,12)	= NULL;
				DECLARE @calc_chi_phi_chung_tt_custom	decimal(32,12)	= NULL;

				DECLARE @calc_chi_phi_khac				decimal(32,12)	= NULL;

		
				DECLARE @calc_allocation_rate			decimal(32,12) = NULL;

				DECLARE @group_so_luong					decimal(32,12) = NULL;

				DECLARE @orderRate DECIMAL(32,12) = 1;
				IF ISNULL(@so_luong,0) < ISNULL(@so_luong_lsx,0) AND @so_luong_lsx > 0
				BEGIN
				    SET @orderRate = @so_luong/@so_luong_lsx
				END

				SELECT 
						@calc_allocation_rate			= (@allocation_rate/allocation_rate) * 100,
						@calc_chi_phi_nvl_tt			= @orderRate *  (@allocation_rate/allocation_rate)*chi_phi_nvl_tt,
						@calc_chi_phi_nhan_cong_tt		= @orderRate * (@allocation_rate/allocation_rate)*chi_phi_nhan_cong_tt,
						@calc_chi_phi_chung_tt			= @orderRate * (@allocation_rate/allocation_rate)*chi_phi_chung_tt,
						@group_so_luong					= so_luong

					FROM  @tbl_tong_truc_tiep
					WHERE group_id = @group_id;

				SELECT @calc_chi_phi_khac					= [Value]	FROM @OtherFee			WHERE [Key] = @row_id;

				SELECT @calc_chi_phi_nvl_tt_custom			= [Value]	FROM @DirectMaterialFee WHERE [Key] = @row_id;

				SELECT @calc_chi_phi_nhan_cong_tt_custom	= [Value]	FROM @DirectLaborFee	WHERE [Key] = @row_id;

				SELECT @calc_chi_phi_chung_tt_custom		= [Value]	FROM @DirectGeneralFee	WHERE [Key] = @row_id;

				UPDATE  @tbl SET 
						group_so_luong			= @group_so_luong,
						allocation_rate			= @calc_allocation_rate,
						chi_phi_nvl_tt			= @calc_chi_phi_nvl_tt,
						chi_phi_nvl_tt_custom	= @calc_chi_phi_nvl_tt_custom,

						chi_phi_nhan_cong_tt		= @calc_chi_phi_nhan_cong_tt,
						chi_phi_nhan_cong_tt_custom	= @calc_chi_phi_nhan_cong_tt_custom,

						chi_phi_chung_tt		= @calc_chi_phi_chung_tt,
						chi_phi_chung_tt_custom	= @calc_chi_phi_chung_tt_custom,

						chi_phi_khac			= @calc_chi_phi_khac

					WHERE row_id = @row_id
	
	
				FETCH NEXT FROM cursor_tinh_gia INTO
					@group_id,
					@row_id,				
					@vthhtp,
					@vthhtp_ProductCode,
					@vthhtp_ProductName,
					@vthhtp_UnitId_UnitName,
					@so_luong,
					@so_luong_lsx,
					@allocation_rate,
					@chi_phi_nvl_tt,
					@chi_phi_nvl_tt_custom,
					@chi_phi_nhan_cong_tt,
					@chi_phi_nhan_cong_tt_custom,
					@chi_phi_chung_tt,
					@chi_phi_chung_tt_custom,
					@chi_phi_khac,
					@chi_phi_nvl_gt,
					@chi_phi_nhan_cong_gt,
					@chi_phi_sx_chung,
					@gia_thanh,
					@gia_thanh_tong_tien,
					@gia_ban,
					@gia_ban_tong_tien,
					@chenh_lech,
					@ty_le
			END

			CLOSE cursor_tinh_gia



			---phan 3

			DECLARE @ENUM_ALLOCATION_TYPE_DIRECT_MATERIAL		INT=1
			DECLARE @ENUM_ALLOCATION_TYPE_DIRECT_LABOR			INT=2
			DECLARE @ENUM_ALLOCATION_TYPE_TOTAL_SELL_PRICE		INT=3
			DECLARE @ENUM_ALLOCATION_TYPE_OTHER					INT=4


			--4. Tính Chi phí NVL gián tiếp, Nhân công gián tiếp, chi phí chung theo tiêu chí
			DECLARE @Tong_chi_phi_nvl_tt decimal(32,12)
			DECLARE @Tong_chi_phi_nhan_cong_tt decimal(32,12)
			DECLARE @Tong_chi_phi_chung_tt decimal(32,12)
			DECLARE @Tong_gia_ban_tong_tien decimal(32,12)
			DECLARE @Tong_chi_phi_khac decimal(32,12)

			SELECT @Tong_chi_phi_nvl_tt			= SUM(CASE WHEN chi_phi_nvl_tt_custom IS NOT NULL THEN chi_phi_nvl_tt_custom ELSE chi_phi_nvl_tt END)					FROM @tbl
			SET @Tong_chi_phi_nvl_tt = ISNULL(@Tong_chi_phi_nvl_tt,0)
			SELECT @Tong_chi_phi_nhan_cong_tt	= SUM(CASE WHEN chi_phi_nhan_cong_tt_custom IS NOT NULL THEN chi_phi_nhan_cong_tt_custom ELSE chi_phi_nhan_cong_tt END)	FROM @tbl
			SET @Tong_chi_phi_nhan_cong_tt = ISNULL(@Tong_chi_phi_nhan_cong_tt,0)
			SELECT @Tong_chi_phi_chung_tt		= SUM(CASE WHEN chi_phi_chung_tt_custom IS NOT NULL THEN chi_phi_chung_tt_custom ELSE chi_phi_chung_tt END)	FROM @tbl
			SET @Tong_chi_phi_chung_tt = ISNULL(@Tong_chi_phi_chung_tt,0)
			SELECT @Tong_chi_phi_khac			= SUM(chi_phi_khac)																							FROM @tbl
			SET @Tong_chi_phi_khac = ISNULL(@Tong_chi_phi_khac,0)
			SELECT @Tong_gia_ban_tong_tien		= SUM(gia_ban_tong_tien)																					FROM @tbl
			SET @Tong_gia_ban_tong_tien = ISNULL(@Tong_gia_ban_tong_tien,0)

			DECLARE @Tong_chi_phi_nvl_gt decimal(32,12)
			DECLARE @Tong_chi_phi_nhan_cong_gt decimal(32,12)			
			DECLARE @Tong_chi_phi_sx_chung decimal(32,12)
		

			--SL = Sum C621, N154 trong kỳ lựa chọn không nằm trong tiêu chí
			/*
			SELECT @Tong_chi_phi_nvl_gt = SUM(r.Vnd)	
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.ma_lsx)
						AND (@IsByOrder = 0 OR r.order_code = t.order_code)
						AND (@IsByStock = 0 OR r.kho = t.kho)	
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '621%' AND t.group_id IS NULL
			*/
			DECLARE @TotalC612N154 DECIMAL(32,12) = 0
			SELECT @TotalC612N154 = SUM(t.vnd) 
					FROM dbo._rc t
					WHERE t.SubsidiaryId = @SubId AND t.tk_co LIKE '621%' AND t.tk_no LIKE '154%' AND t.ngay_ct BETWEEN @FromDate AND @ToDate --AND t.vthhtp IS NOT NULL
					AND (@ProductId IS NULL OR t.vthhtp = @ProductId)
					AND (@OrderCode IS NULL OR t.order_code = @OrderCode)
					AND (@MaLsx IS NULL OR t.ma_lsx = @MaLsx)
					AND (@StockId IS NULL OR t.kho = @StockId);

			SET @Tong_chi_phi_nvl_gt = @TotalC612N154 - @Tong_chi_phi_nvl_tt;			
			SET @IndirectMaterialFeeSum		= @Tong_chi_phi_nvl_gt
			SET @Tong_chi_phi_nvl_gt = @Tong_chi_phi_nvl_gt  + ISNULL(@ProgressMaterialOpen,0) - ISNULL(@ProgressMaterialEnd,0);

			
			/*
			SELECT @Tong_chi_phi_nhan_cong_gt = SUM(r.Vnd)
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.ma_lsx)
						AND (@IsByOrder = 0 OR r.order_code = t.order_code)
						AND (@IsByStock = 0 OR r.kho = t.kho)	
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '622%' AND t.group_id IS NULL
			*/
			DECLARE @TotalC622 DECIMAL(32,12) = 0
			SELECT @TotalC622 = SUM(t.vnd) 
					FROM dbo._rc t
					WHERE t.SubsidiaryId = @SubId AND t.tk_co LIKE '622%' AND t.tk_no LIKE '154%' AND t.ngay_ct BETWEEN @FromDate AND @ToDate --AND t.vthhtp IS NOT NULL
					AND (@ProductId IS NULL OR t.vthhtp = @ProductId)
					AND (@OrderCode IS NULL OR t.order_code = @OrderCode)
					AND (@MaLsx IS NULL OR t.ma_lsx = @MaLsx)
					AND (@StockId IS NULL OR t.kho = @StockId);

			SET @Tong_chi_phi_nhan_cong_gt = @TotalC622 - @Tong_chi_phi_nhan_cong_tt;

			--SELECT @Tong_chi_phi_nhan_cong_gt = SUM(Vnd)- ISNULL(@Tong_chi_phi_nhan_cong_tt,0) FROM dbo._rc WHERE SubsidiaryId = @SubId AND ngay_ct BETWEEN @FromDate AND @ToDate AND tk_co LIKE '622%' AND tk_no LIKE '154%'

			SET @IndirectLaborFeeSum		= @Tong_chi_phi_nhan_cong_gt

			SET @Tong_chi_phi_nhan_cong_gt		= @Tong_chi_phi_nhan_cong_gt + ISNULL(@ProgressLaborsOpen,0) - ISNULL(@ProgressLaborsEnd,0)

			--print  CONCAT('Tong_chi_phi_nhan_cong_gt => ',@Tong_chi_phi_nhan_cong_gt,'=',@avc,'-',@Tong_chi_phi_nhan_cong_tt)

			--SELECT @Tong_chi_phi_sx_chung = SUM(Vnd)-ISNULL(@Tong_chi_phi_chung_tt,0)			FROM dbo._rc WHERE SubsidiaryId = @SubId AND ngay_ct BETWEEN @FromDate AND @ToDate AND tk_co LIKE '627%' AND tk_no LIKE '154%'
		
		/*
			SELECT @Tong_chi_phi_sx_chung = SUM(r.Vnd)
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.ma_lsx)
						AND (@IsByOrder = 0 OR r.order_code = t.order_code)
						AND (@IsByStock = 0 OR r.kho = t.kho)	
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate  AND r.tk_no LIKE '627%' AND t.group_id IS NULL
		*/

			DECLARE @TotalC627 DECIMAL(32,12) = 0
			SELECT @TotalC627 = SUM(t.vnd) 
					FROM dbo._rc t
					WHERE t.SubsidiaryId = @SubId AND t.tk_co LIKE '627%' AND t.tk_no LIKE '154%' AND t.ngay_ct BETWEEN @FromDate AND @ToDate-- AND t.vthhtp IS NOT NULL
					AND (@ProductId IS NULL OR t.vthhtp = @ProductId)
					AND (@OrderCode IS NULL OR t.order_code = @OrderCode)
					AND (@MaLsx IS NULL OR t.ma_lsx = @MaLsx)
					AND (@StockId IS NULL OR t.kho = @StockId);

			SET @Tong_chi_phi_sx_chung = @TotalC627 - @Tong_chi_phi_chung_tt;

			print  CONCAT('chung',@Tong_chi_phi_sx_chung)

			SET @GeneralManufacturingSum	= @Tong_chi_phi_sx_chung

			SET @Tong_chi_phi_sx_chung	= @Tong_chi_phi_sx_chung + ISNULL(@ProgressFactoriesOpen,0) - ISNULL(@ProgressFactoriesEnd,0)

			IF @IndirectMaterialFeeSumCustom IS NOT NULL
			BEGIN
				SET @Tong_chi_phi_nvl_gt = @IndirectMaterialFeeSumCustom
			END

			IF @IndirectLaborFeeSumCustom IS NOT NULL
			BEGIN
				SET @Tong_chi_phi_nhan_cong_gt = @IndirectLaborFeeSumCustom
			END

			IF @GeneralManufacturingSumCustom IS NOT NULL
			BEGIN
				SET @Tong_chi_phi_sx_chung = @GeneralManufacturingSumCustom
			END
	

			OPEN cursor_tinh_gia

			FETCH NEXT FROM cursor_tinh_gia INTO 
					@group_id,
					@row_id,				
					@vthhtp,
					@vthhtp_ProductCode,
					@vthhtp_ProductName,
					@vthhtp_UnitId_UnitName,
					@so_luong,
					@so_luong_lsx,
					@allocation_rate,
					@chi_phi_nvl_tt,
					@chi_phi_nvl_tt_custom,
					@chi_phi_nhan_cong_tt,
					@chi_phi_nhan_cong_tt_custom,
					@chi_phi_chung_tt,
					@chi_phi_chung_tt_custom,
					@chi_phi_khac,
					@chi_phi_nvl_gt,
					@chi_phi_nhan_cong_gt,
					@chi_phi_sx_chung,
					@gia_thanh,
					@gia_thanh_tong_tien,
					@gia_ban,
					@gia_ban_tong_tien,
					@chenh_lech,
					@ty_le
			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @calc_gia_thanh_tong_tien	decimal(32,12) = NULL;
				DECLARE @calc_chenh_lech			decimal(32,12) = NULL;
				DECLARE @calc_ty_le					decimal(32,12) = NULL;

				--Jn=(SumJ/Sum (tiêu chí lựu chọn))*Thành phần lựa chọn
				DECLARE @calc_chi_phi_nvl_gt		decimal(32,12) = NULL;
				DECLARE @calc_chi_phi_nhan_cong_gt	decimal(32,12) = NULL;				
				DECLARE @calc_chi_phi_sx_chung		decimal(32,12) = NULL;
	
				DECLARE @chi_phi_nvl_tt_final		decimal(32,12) = @chi_phi_nvl_tt;
				DECLARE @chi_phi_nhan_cong_tt_final	decimal(32,12) = @chi_phi_nhan_cong_tt;
				DECLARE @chi_phi_chung_tt_final		DECIMAL(32,12) = @chi_phi_chung_tt;

				IF @chi_phi_nvl_tt_custom IS NOT NULL
				BEGIN
					SET @chi_phi_nvl_tt_final = @chi_phi_nvl_tt_custom
				END

				IF @chi_phi_nhan_cong_tt_custom IS NOT NULL
				BEGIN
					SET @chi_phi_nhan_cong_tt_final = @chi_phi_nhan_cong_tt_custom
				END

				
				IF @chi_phi_chung_tt_custom IS NOT NULL
				BEGIN
					SET @chi_phi_chung_tt_final = @chi_phi_chung_tt_custom
				END


				--Chi phí NVL Gián tiếp
				IF @IndirectMaterialFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_DIRECT_MATERIAL AND @Tong_chi_phi_nvl_tt > 0
				BEGIN
					SET @calc_chi_phi_nvl_gt = (@Tong_chi_phi_nvl_gt* @chi_phi_nvl_tt_final)/@Tong_chi_phi_nvl_tt
				END
				IF @IndirectMaterialFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_DIRECT_LABOR AND @Tong_chi_phi_nhan_cong_tt > 0
				BEGIN
					SET @calc_chi_phi_nvl_gt = (@Tong_chi_phi_nvl_gt* @chi_phi_nhan_cong_tt_final)/@Tong_chi_phi_nhan_cong_tt
				END
				IF @IndirectMaterialFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_SELL_PRICE AND @Tong_gia_ban_tong_tien > 0
				BEGIN
					SET @calc_chi_phi_nvl_gt = (@Tong_chi_phi_nvl_gt* @gia_ban_tong_tien)/@Tong_gia_ban_tong_tien
				END
				IF @IndirectMaterialFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Tong_chi_phi_khac > 0
				BEGIN
					SET @calc_chi_phi_nvl_gt = (@Tong_chi_phi_nvl_gt* @chi_phi_khac)/@Tong_chi_phi_khac
				END

				--Chi phí nhân công gián tiếp
				IF @IndirectLaborFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_DIRECT_MATERIAL AND @Tong_chi_phi_nvl_tt > 0
				BEGIN
					SET @calc_chi_phi_nhan_cong_gt = (@Tong_chi_phi_nhan_cong_gt* @chi_phi_nvl_tt_final)/@Tong_chi_phi_nvl_tt
				END
				IF @IndirectLaborFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_DIRECT_LABOR AND @Tong_chi_phi_nhan_cong_tt > 0
				BEGIN
					SET @calc_chi_phi_nhan_cong_gt = (@Tong_chi_phi_nhan_cong_gt* @chi_phi_nhan_cong_tt_final)/@Tong_chi_phi_nhan_cong_tt
				END
				IF @IndirectLaborFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_SELL_PRICE AND @Tong_gia_ban_tong_tien > 0
				BEGIN
					SET @calc_chi_phi_nhan_cong_gt = (@Tong_chi_phi_nhan_cong_gt* @gia_ban_tong_tien)/@Tong_gia_ban_tong_tien
				END
				IF @IndirectLaborFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Tong_chi_phi_khac > 0
				BEGIN
					SET @calc_chi_phi_nhan_cong_gt = (@Tong_chi_phi_nhan_cong_gt* @chi_phi_khac)/@Tong_chi_phi_khac
				END

				--Chi phí sản xuất chung
				IF @GeneralManufacturingAllocationTypeId = @ENUM_ALLOCATION_TYPE_DIRECT_MATERIAL AND @Tong_chi_phi_nvl_tt > 0
				BEGIN
					SET @calc_chi_phi_sx_chung = (@Tong_chi_phi_sx_chung* @chi_phi_nvl_tt_final)/@Tong_chi_phi_nvl_tt
				END
				IF @GeneralManufacturingAllocationTypeId = @ENUM_ALLOCATION_TYPE_DIRECT_LABOR AND @Tong_chi_phi_nhan_cong_tt > 0
				BEGIN
					SET @calc_chi_phi_sx_chung = (@Tong_chi_phi_sx_chung * @chi_phi_nhan_cong_tt_final)/@Tong_chi_phi_nhan_cong_tt
				END
				IF @GeneralManufacturingAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_SELL_PRICE AND @Tong_gia_ban_tong_tien > 0
				BEGIN
					SET @calc_chi_phi_sx_chung = (@Tong_chi_phi_sx_chung* @gia_ban_tong_tien)/@Tong_gia_ban_tong_tien
				END
				IF @GeneralManufacturingAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Tong_chi_phi_khac > 0
				BEGIN
					SET @calc_chi_phi_sx_chung = (@Tong_chi_phi_sx_chung* @chi_phi_khac)/@Tong_chi_phi_khac
				END


				SET @calc_gia_thanh_tong_tien = ISNULL(@chi_phi_nvl_tt_final,0)
				+ ISNULL(@chi_phi_nhan_cong_tt_final,0)
				+ ISNULL(@chi_phi_chung_tt_final,0)
				+ ISNULL(@calc_chi_phi_nvl_gt,0) 
				+ ISNULL(@calc_chi_phi_nhan_cong_gt,0) 
				+ ISNULL(@calc_chi_phi_sx_chung,0)

				SET	@calc_chenh_lech = @gia_ban_tong_tien - @calc_gia_thanh_tong_tien
				SET	@calc_ty_le = CASE WHEN @gia_ban_tong_tien>0 THEN (@calc_chenh_lech / @gia_ban_tong_tien) ELSE NULL END;

				UPDATE @tbl SET 
						chi_phi_nvl_gt			= @calc_chi_phi_nvl_gt,
						chi_phi_nhan_cong_gt	= @calc_chi_phi_nhan_cong_gt,
						chi_phi_sx_chung		= @calc_chi_phi_sx_chung,
						gia_thanh_tong_tien		= @calc_gia_thanh_tong_tien,
						gia_thanh				= @calc_gia_thanh_tong_tien/@so_luong,
						chenh_lech				= @calc_chenh_lech,
						ty_le					= @calc_ty_le

					WHERE row_id = @row_id
	
	
				FETCH NEXT FROM cursor_tinh_gia INTO
					@group_id,
					@row_id,				
					@vthhtp,
					@vthhtp_ProductCode,
					@vthhtp_ProductName,
					@vthhtp_UnitId_UnitName,
					@so_luong,
					@so_luong_lsx,
					@allocation_rate,
					@chi_phi_nvl_tt,
					@chi_phi_nvl_tt_custom,
					@chi_phi_nhan_cong_tt,
					@chi_phi_nhan_cong_tt_custom,
					@chi_phi_chung_tt,
					@chi_phi_chung_tt_custom,
					@chi_phi_khac,
					@chi_phi_nvl_gt,
					@chi_phi_nhan_cong_gt,
					@chi_phi_sx_chung,
					@gia_thanh,
					@gia_thanh_tong_tien,
					@gia_ban,
					@gia_ban_tong_tien,
					@chenh_lech,
					@ty_le
			END

			CLOSE cursor_tinh_gia

			DEALLOCATE cursor_tinh_gia	



		
			CREATE TABLE #tblProductPrice(
				InputBill_F_Id		BIGINT,
				InputValueRow_F_Id	BIGINT,
				BillVersion			INT,
				BUT_TOAN			INT,
				ty_gia			DECIMAL(32,12),
				don_gia			DECIMAL(32,12),		
				vnd				DECIMAL(32,12)
			);
		
			INSERT INTO #tblProductPrice(
				InputBill_F_Id,
				InputValueRow_F_Id,
				BillVersion,
				BUT_TOAN,
				ty_gia,
				don_gia,		
				vnd	
			)
			SELECT 
				t.InputBill_F_Id,
				t.F_Id,
				t.LatestBillVersion,
				t.BUT_TOAN,
				t.ty_gia,
				p.gia_thanh/ CASE WHEN t.ty_gia >0 THEN t.ty_gia ELSE 1 END,
				t.so_luong * p.gia_thanh

			FROM dbo._rc t 
				JOIN @tbl p ON p.row_id = CONCAT('group',
						'-',CASE @IsByLsx WHEN 1 THEN t.ma_lsx ELSE ''END,
						'-',CASE @IsByOrder WHEN 1 THEN t.order_code ELSE ''END,
						'-',CASE @IsByStock WHEN 1 THEN t.kho ELSE ''END,
						'-product-', t.vthhtp
					)

			WHERE t.SubsidiaryId = @SubId AND t.tk_no LIKE '155%' AND t.ngay_ct BETWEEN @FromDate AND @ToDate AND t.vthhtp IS NOT NULL

		
			IF @IsUpdate = 1
			BEGIN
				DECLARE @InputValueRowColumns nvarchar(max) = ''

				SELECT @InputValueRowColumns += N','+[COLUMN_NAME] 
					FROM [INFORMATION_SCHEMA].[COLUMNS] 
					WHERE [TABLE_NAME] = 'InputValueRow' 
						AND [COLUMN_NAME] NOT IN('F_Id','BillVersion','CreatedDatetimeUtc','UpdatedDatetimeUtc','SystemLog',
												'don_gia0','don_gia1','don_gia2','don_gia3','don_gia4',
												'vnd0','vnd1','vnd2','vnd3','vnd4');
	

				DECLARE @Sql NVARCHAR(max) = N'
				INSERT INTO InputValueRow(
					BillVersion,CreatedDatetimeUtc,UpdatedDatetimeUtc,SystemLog,
					don_gia0, don_gia1, don_gia2, don_gia3, don_gia4,
					vnd0,vnd1,vnd2,vnd3,vnd4
				' + @InputValueRowColumns + N')

				SELECT 
					BillVersion + 1, GETUTCDATE(), GETUTCDATE(),N''Created automatic by UpdateInputPrice'', 
					ISNULL(p.don_gia0, r.don_gia0), ISNULL(p.don_gia1, r.don_gia1), ISNULL(p.don_gia2, r.don_gia2), ISNULL(p.don_gia3, r.don_gia3), ISNULL(p.don_gia4, r.don_gia4),
					ISNULL(p.vnd0, r.vnd0), ISNULL(p.vnd1, r.vnd1), ISNULL(p.vnd2, r.vnd2), ISNULL(p.vnd3, r.vnd3), ISNULL(p.vnd4, r.vnd4)
					' + @InputValueRowColumns + N'

					FROM InputValueRow r
						LEFT JOIN (
							SELECT 
								p.InputValueRow_F_Id, 
								MAX(CASE WHEN p.BUT_TOAN = 0 THEN p.don_gia ELSE NULL END) don_gia0,
								MAX(CASE WHEN p.BUT_TOAN = 1 THEN p.don_gia ELSE NULL END) don_gia1,
								MAX(CASE WHEN p.BUT_TOAN = 2 THEN p.don_gia ELSE NULL END) don_gia2,
								MAX(CASE WHEN p.BUT_TOAN = 3 THEN p.don_gia ELSE NULL END) don_gia3,
								MAX(CASE WHEN p.BUT_TOAN = 4 THEN p.don_gia ELSE NULL END) don_gia4,

								MAX(CASE WHEN p.BUT_TOAN = 0 THEN p.vnd ELSE NULL END) vnd0,
								MAX(CASE WHEN p.BUT_TOAN = 1 THEN p.vnd ELSE NULL END) vnd1,
								MAX(CASE WHEN p.BUT_TOAN = 2 THEN p.vnd ELSE NULL END) vnd2,
								MAX(CASE WHEN p.BUT_TOAN = 3 THEN p.vnd ELSE NULL END) vnd3,
								MAX(CASE WHEN p.BUT_TOAN = 4 THEN p.vnd ELSE NULL END) vnd4
							FROM #tblProductPrice p 
							GROUP BY p.InputValueRow_F_Id
						) as p ON r.F_Id = p.InputValueRow_F_Id
					WHERE r.IsDeleted=0 AND r.SubsidiaryId = @SubId AND r.InputBill_F_Id IN (SELECT DISTINCT InputBill_F_Id FROM #tblProductPrice)';
			
				EXECUTE dbo.sp_executesql @stmt = @Sql, @params = N'@SubId INT', @SubId = @SubId;

				UPDATE r 
					SET IsDeleted = 1,
						SystemLog = N'Deleted automatic by UpdateInputPrice',
						DeletedDatetimeUtc = GETUTCDATE()
					FROM dbo.InputValueRow r
					JOIN (
						SELECT DISTINCT InputBill_F_Id, BillVersion FROM #tblProductPrice
					) p ON r.InputBill_F_Id = p.InputBill_F_Id AND r.BillVersion <= p.BillVersion
					WHERE r.SubsidiaryId = @SubId AND r.IsDeleted=0;

				UPDATE b 
					SET LatestBillVersion = b.LatestBillVersion + 1,
						UpdatedDatetimeUtc = GETUTCDATE()
					FROM dbo.InputBill b
					JOIN (
						SELECT DISTINCT InputBill_F_Id FROM #tblProductPrice
					) p ON b.F_Id = p.InputBill_F_Id
					WHERE b.SubsidiaryId = @SubId;
			
				UPDATE u
					SET sum_vnd0 = (SELECT SUM(r.vnd0) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
						sum_vnd1 = (SELECT SUM(r.vnd1) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
						sum_vnd2 = (SELECT SUM(r.vnd2) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
						sum_vnd3 = (SELECT SUM(r.vnd3) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
						sum_vnd4 = (SELECT SUM(r.vnd4) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion)
				FROM dbo.InputValueRow u
				WHERE u.SubsidiaryId = @SubId AND u.IsBillEntry = 1 AND u.IsDeleted = 0 AND u.InputBill_F_Id IN (SELECT DISTINCT InputBill_F_Id FROM #tblProductPrice)
		END
	
		SELECT  * FROM @tbl ORDER BY stt
		IF @IsUpdate = 1 OR @IsReviewUpdate = 1
		BEGIN
      
				--SELECT * FROM  @OpenningDept ORDER BY tk, vthhtp
				--SELECT * FROM  @GiaVon ORDER BY tk, vthhtp
				--SELECT * FROM @GiaVon gv;

				--;WITH _tbl AS (
				--	SELECT af.InputTypeId, f.FieldName, af.Title
				--	FROM dbo.InputAreaField af
				--	JOIN dbo.InputField f ON af.InputFieldId = f.InputFieldId
				--	WHERE f.FieldName IN(N'don_gia0', N'don_gia1', N'don_gia2', N'don_gia3', N'don_gia4',
				--			N'vnd0', N'vnd1', N'vnd2', N'vnd3', N'vnd4'
				--	)

				--)
					--SELECT * FROM @tbl
					SELECT					
						ROW_NUMBER() OVER(ORDER BY(SELECT NULL)) 
						stt,
						v.vthhtp,
						p.ProductCode vthhtp_ProductCode,
						p.ProductName vthhtp_ProductName,
						v.InputType_Title,
						v.InputTypeId,
						v.InputBill_F_Id,
						v.ngay_ct,
						v.so_ct,
						v.tk_no,
						v.tk_co,
						v.don_gia,
						v.vnd,
						gv.don_gia as don_gia_update,
						gv.vnd as vnd_update,
						v.BUT_TOAN

						FROM #tblProductPrice gv
						JOIN dbo._rc as v ON gv.InputValueRow_F_Id = v.F_Id AND gv.BUT_TOAN = v.BUT_TOAN
						LEFT JOIN dbo.v_Product p ON v.vthhtp = p.F_Id
						--LEFT JOIN _tbl l ON v.InputTypeId = l.InputTypeId AND CONCAT(''don_gia'',v.BUT_TOAN) = l.FieldName
						--LEFT JOIN _tbl vl ON v.InputTypeId = vl.InputTypeId AND CONCAT(''vnd'',v.BUT_TOAN) = vl.FieldName
						--WHERE gv.vnd > 0
						ORDER BY v.vthhtp, v.ngay_ct, v.InputTypeId, v.InputBill_F_Id, v.BUT_TOAN, v.F_Id
				
		END
		
		DROP TABLE IF EXISTS #tblProductPrice
	COMMIT TRANSACTION
END

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_CalcProductPrice_WeightedAverage]
    @SubId INT,
    @Date DATETIME2 = NULL,
    @ProductIds _INTVALUES READONLY
AS
BEGIN;
    WITH tmp
      AS (SELECT d.Tk AS Tk,
                 d.vthhtp AS ProductId,
                 --SUM(CASE
                 --         WHEN d.InRowNumber = 1 THEN CASE d.IsDebt
                 --                                          WHEN 1 THEN d.so_luong
                 --                                          ELSE -d.so_luong END
                 --         ELSE 0 END) TotalQuantity,
				  SUM(CASE d.IsDebt
                                                           WHEN 1 THEN d.so_luong
                                                           ELSE -d.so_luong END
                         ) TotalQuantity,
                 SUM(CASE
                          WHEN d.IsDebt = 1 THEN d.Vnd_no
                          ELSE -d.Vnd_co END) TotalMoney
            FROM (   SELECT ROW_NUMBER() OVER (PARTITION BY d.F_Id ORDER BY d.ngay_ct) InRowNumber,
                            d.Vnd_no,
                            d.Vnd_co,
                            d.BUT_TOAN,
                            d.so_luong,
                            d.vthhtp,
                            d.Tk,
                            d.IsDebt
                       FROM dbo._rc_detail d
                      WHERE d.SubsidiaryId = @SubId
                        AND d.ngay_ct      <= @Date
                        AND d.vthhtp IN ( SELECT [Value] FROM @ProductIds )
                        AND (   d.Tk LIKE '151%'
                           OR   d.Tk LIKE '152%'
                           OR   d.Tk LIKE '153%'
                           OR   d.Tk LIKE '155%'
                           OR   d.Tk LIKE '156%'
                           OR   d.Tk LIKE '157%'
                           OR   d.Tk LIKE '158%')) d
           GROUP BY d.Tk,
                    d.vthhtp)
    SELECT Tk,
           ProductId,
           TotalQuantity,
           TotalMoney,
           CASE
                WHEN TotalQuantity <> 0 THEN TotalMoney / TotalQuantity
                ELSE NULL END WeightedAveragePrice
      FROM tmp;
END;

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcCostTransferBalanceZero]
	@ToDate AS datetime,
	@SubId AS int
AS
BEGIN

	/*
	SELECT
		total.*,
		acc_no.F_Id tk_no_id,
		acc_co.F_Id tk_co_id
	FROM
	(
		SELECT
			CASE 
				WHEN bc_sum.tk IS NULL AND bc_sum.vnd > 0 THEN '4211' 
				WHEN (bc_sum.tk IS NULL AND bc_sum.vnd < 0) OR (bc_sum.tk IS NOT NULL AND bc_sum.vnd > 0) THEN '911' 
				ELSE bc_sum.tk 
			END tk_no,
			CASE 
				WHEN bc_sum.tk IS NULL AND bc_sum.vnd < 0 THEN '4211'
				WHEN (bc_sum.tk IS NULL AND bc_sum.vnd > 0) OR (bc_sum.tk IS NOT NULL AND bc_sum.vnd < 0) THEN '911' 
				ELSE bc_sum.tk
			END tk_co,
			CASE 
				WHEN bc_sum.tk IS NOT NULL AND bc_sum.vnd > 0 THEN N'Kết chuyển chi phí' 
				WHEN bc_sum.tk IS NOT NULL AND bc_sum.vnd < 0 THEN N'Kết chuyển doanh thu và thu nhập khác' 
				WHEN bc_sum.tk IS NULL AND bc_sum.vnd > 0 THEN N'Kết chuyển lỗ' 
				ELSE N'Kết chuyển lãi' 
			END noi_dung,
			ABS(bc_sum.vnd) vnd
		FROM
		(SELECT
			bc.tk tk,
			SUM(bc.vnd) vnd
		FROM 
		
		(
			SELECT 
				ISNULL(no_ck.tk,co_ck.tk) tk,
				(ISNULL(no_ck.vnd,0) - ISNULL(co_ck.vnd,0)) vnd	
			FROM 
			(
				SELECT tk.tk_no tk, SUM(ISNULL(tk.vnd,0)) vnd
				FROM
				[dbo].[_rc] tk
				WHERE (tk.tk_no LIKE '631%' OR tk.tk_no LIKE '632%' OR tk.tk_no LIKE '635%' OR tk.tk_no LIKE '641%' OR tk.tk_no LIKE '642%' OR tk.tk_no LIKE '811%' 
				OR tk.tk_no LIKE '821%' OR tk.tk_no LIKE '511%' OR tk.tk_no LIKE '515%' OR tk.tk_no LIKE '711%') 
				AND tk.ngay_ct <= @ToDate AND tk.SubsidiaryId = @SubId
				GROUP BY tk.tk_no
			) no_ck
			FULL OUTER JOIN 
			(
				SELECT tk.tk_co tk, SUM(ISNULL(tk.vnd,0)) vnd
				FROM
				[dbo].[_rc] tk
				WHERE (tk.tk_co LIKE '631%' OR tk.tk_co LIKE '632%' OR tk.tk_co LIKE '635%' OR tk.tk_co LIKE '641%' OR tk.tk_co LIKE '642%' OR tk.tk_co LIKE '811%'
				OR tk.tk_co LIKE '821%' OR tk.tk_co LIKE '511%' OR tk.tk_co LIKE '515%' OR tk.tk_co LIKE '711%') 
				AND tk.ngay_ct <= @ToDate AND tk.SubsidiaryId = @SubId
				GROUP BY tk.tk_co
			) co_ck
			ON no_ck.tk = co_ck.tk WHERE ISNULL(no_ck.vnd,0) != ISNULL(co_ck.vnd,0)
		) bc
		GROUP BY ROLLUP(bc.tk)) bc_sum
	) total
	LEFT JOIN v_AccountingAccount acc_no ON total.tk_no = acc_no.AccountNumber
	LEFT JOIN v_AccountingAccount acc_co ON total.tk_co = acc_co.AccountNumber
	*/


	;WITH duTk AS
	(
		SELECT 
			d.Tk, 
			SUM(ISNULL(d.Vnd_no,0)) - SUM(ISNULL(d.Vnd_co,0)) Du_no,
			SUM(ISNULL(d.Vnd_co,0)) - SUM(ISNULL(d.Vnd_no,0)) Du_co
		FROM
				[dbo].[_rc_detail] d
		WHERE (
				d.Tk LIKE '631%' OR d.Tk LIKE '632%' OR d.Tk LIKE '635%' OR d.Tk LIKE '641%' OR d.Tk LIKE '642%' OR d.Tk LIKE '811%'
				OR d.Tk LIKE '821%' OR d.Tk LIKE '511%' OR d.Tk LIKE '515%' OR d.Tk LIKE '711%' OR d.Tk LIKE '911%'
			) 
			AND d.ngay_ct <= @ToDate AND d.SubsidiaryId = @SubId
		GROUP BY d.Tk
	), gtype AS (
		SELECT
			CASE 
				WHEN d.Tk LIKE '631%' OR d.Tk LIKE '632%' OR d.Tk LIKE '635%'  OR d.Tk LIKE '641%' OR d.Tk LIKE '642%' OR d.Tk LIKE '811%' OR d.Tk LIKE '821%' THEN 1
				WHEN d.Tk LIKE '511%' OR d.Tk LIKE '512%' OR d.Tk LIKE '515%'  OR d.Tk LIKE '711%' THEN 2
				WHEN d.Tk LIKE '911%' THEN 3
				ELSE NULL
			END GType,
			d.Tk,
			d.Du_no,
			d.Du_co
		FROM duTk d
	), sum911 AS (
		SELECT 
			sum911.duCo911C + sum911.sumCoB - sum911.sumNoA  AS DuNo911D
		FROM
		(
			SELECT 
				sumNoA = SUM(CASE WHEN gtype.GType = 1 THEN gtype.Du_no ELSE 0 END),
				sumCoB = SUM(CASE WHEN gtype.GType = 2 THEN gtype.Du_co ELSE 0 END),
				duCo911C = SUM(CASE WHEN gtype.GType = 3 THEN gtype.Du_co ELSE 0 END)
			FROM gtype
		) sum911
	)
	SELECT * FROM
	(
		SELECT
			gtype.GType,
			CASE 
				WHEN gtype.GType = 1 THEN '911'
				WHEN gtype.GType = 2 THEN gtype.Tk	
				ELSE NULL
			END tk_no,
			CASE 
				WHEN gtype.GType = 1 THEN gtype.Tk
				WHEN gtype.GType = 2 THEN '911'		
				ELSE NULL
			END tk_co,
			CASE 
				WHEN gtype.GType = 1 THEN N'Kết chuyển chi phí'
				WHEN gtype.GType = 2 THEN N'Kết chuyển doanh thu và thu nhập khác'	
				ELSE NULL
			END noi_dung,
			CASE 
				WHEN gtype.GType = 1 THEN gtype.Du_no
				WHEN gtype.GType = 2 THEN gtype.Du_co		
				ELSE NULL
			END vnd	
		FROM gtype WHERE gtype.GType IN (1,2)

		UNION

		SELECT
			3 AS GType,
			CASE 		
				WHEN DuNo911D > 0 THEN '911'
				ELSE '4212'
			END tk_no,
			CASE 		
				WHEN DuNo911D > 0 THEN '4212'
				ELSE '911'
			END tk_co,
			CASE 		
				WHEN DuNo911D>0 THEN N'Kết chuyển lãi'
				ELSE N'Kết chuyển lỗ'
			END noi_dung,
			ABS(DuNo911D) vnd
		FROM sum911
	) v
	WHERE v.vnd > 0
	ORDER BY v.GType, tk_no, tk_co

	
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_CalcProfitAndLoss]
	@SubId INT,
	@IsByLsx BIT,
	@IsByOrder BIT,
	@ProductId INT,
	@OrderCode NVARCHAR(128),
	@MaLsx NVARCHAR(128),
	@FromDate DATETIME2,
	@ToDate DATETIME2,

	@Custom_AllocationRate			_DECIMAL_KEY_VALUES READONLY,

	@Custom_PriceSellDirectly		_DECIMAL_KEY_VALUES READONLY,
	@Custom_CostSellDirectly		_DECIMAL_KEY_VALUES READONLY,
	@Custom_CostManagerDirectly		_DECIMAL_KEY_VALUES READONLY,

	@Custom_OtherFee				_DECIMAL_KEY_VALUES READONLY,

	@PriceSellInDirectlyAllocationTypeId	INT,
	@PriceSellInDirectlySum					decimal(32,12) OUTPUT,
	@PriceSellInDirectlySumCustom			decimal(32,12),

	@CostAccountingAllocationTypeId	INT,
	@CostAccountingSum					decimal(32,12) OUTPUT,
	@CostAccountingSumCustom			decimal(32,12),

	@CostSellInDirectlyAllocationTypeId		INT= NULL,
	@CostSellInDirectlySum					DECIMAL(32,12) = NULL OUTPUT,
	@CostSellInDirectlySumCustom			DECIMAL(32,12) = NULL,

	@CostManagerAllowcationAllocationTypeId	INT,
	@CostManagerSum							DECIMAL(32,12) OUTPUT,
	@CostManagerSumCustom					DECIMAL(32,12)
AS
BEGIN
	SET @IsByLsx = ISNULL(@IsByLsx,0)
	SET @IsByOrder = ISNULL(@IsByOrder,0)
	IF LEN(@OrderCode)=0
		SET @OrderCode = NULL

	IF LEN(@MaLsx)=0
		SET @MaLsx = NULL


		DECLARE @tbl TABLE(
				sortOrder				int IDENTITY(1,1),
				group_id				nvarchar(512),
				row_id					nvarchar(512),			
				productionOrderCode		nvarchar(512),			
				orderCode				nvarchar(512),					
				productId				int,
				productCode				nvarchar(128),
				productName				nvarchar(128),
				unitName				nvarchar(128),
				partnerId				NVARCHAR(512),
				partnerCode				NVARCHAR(512),
				partnerName				NVARCHAR(512),
				orderQuantity			decimal(32,12),
				groupOutQuantity		decimal(32,12),
				outQuantity				decimal(32,12),
				allocationRate			decimal(32,12),
				priceSellDirectlyByProduct632		decimal(32,12),
				priceSellDirectlyByProduct635		decimal(32,12),
				priceSellDirectly		decimal(32,12),
				priceSellDirectlyCustom	decimal(32,12),
				costSellDirectly		decimal(32,12),
				costSellDirectlyCustom	decimal(32,12),
				costManagerDirectly		decimal(32,12),
				costManagerDirectlyCustom	decimal(32,12),
				otherFee				DECIMAL(32,12),					
				priceSellInDirectly		decimal(32,12),
				costAccounting			DECIMAL(32,12),
				costSellInDirectly		DECIMAL(32,12),
				costManagerAllowcation	decimal(32,12),
				allPrice				DECIMAL(32,12),
				groupAllPrice			DECIMAL(32,12),
				orderPrice				DECIMAL(32,12),
				totalOrderPrice			DECIMAL(32,12),
				diffMoney				decimal(32,12),
				diffInPecent		decimal(32,12)
		);

		/*
		Hệ thống tìm kiếm tất cả SP được xuất  kho trong kỳ lựa chọn hoặc dịc vụ ghi nhận doanh thu (Có 511, 512,515 ) để fill vào các trường SP 
		- Đồng thòi fill trường mã DH vào trường mã ĐH ( Chứng từ xuất kho SP, trường mã đơn hàng là trường bắt buộc nên trường này luôn có dữ liệu.								
		
		*/
		INSERT INTO @tbl
			(
				group_id,
				row_id,			
				productionOrderCode,
				orderCode,
				productId,
				productCode,
				productName,
				unitName,
				partnerId,
				partnerCode,
				partnerName,
				orderQuantity,
				outQuantity,
				allocationRate,
				--allPrice,
				orderPrice,
				totalOrderPrice
			)

			SELECT
				r.group_id,
				r.row_id,
				r.ma_lsx,
				r.order_code,
				r.vthhtp,
				r.ProductCode,
				r.ProductName,
				r.UnitId_UnitName,
				c.F_Id PartnerId,
				c.PartnerCode,
				c.PartnerName,
				dh.dh_so_luong,
				r.so_luong,
				r.vnd,
				--r.vnd,
				r.orderPrice,
				r.vnd
			FROM
			(
				SELECT 
					MAX(t.group_id) group_id, 
					CONCAT(t.group_id,'-product-', t.vthhtp) row_id,
					CASE @IsByLsx WHEN 1 THEN MAX(t.ma_lsx) ELSE ''END ma_lsx,
					CASE @IsByOrder WHEN 1 THEN MAX(t.order_code) ELSE ''END order_code,
					t.vthhtp,
					p.ProductCode,
					p.ProductName,
					p.UnitId_UnitName,
					MAX(t.kh_co) kh_co,					
					SUM(t.vnd) vnd,
					AVG(CASE WHEN t.vnd>0 THEN t.vnd/t.so_luong ELSE NULL END) orderPrice,
					--SUM(t.vnd)/SUM(t.so_luong) orderPrice,
					SUM(t.so_luong) so_luong	
				FROM
				(
					SELECT
						CONCAT('group',
							'-',CASE @IsByLsx WHEN 1 THEN t.ma_lsx ELSE ''END,
							'-',CASE @IsByOrder WHEN 1 THEN t.order_code ELSE ''END
						) AS group_id,				
						t.ma_lsx,
						t.order_code,
						t.kho,
						t.vthhtp,
						t.so_luong,
						t.vnd,
						t.kh_co
					FROM dbo._rc t
				
					WHERE t.SubsidiaryId = @SubId AND (t.tk_co LIKE '511%' OR t.tk_co LIKE '512%' OR t.tk_co LIKE '515%') AND t.ngay_ct BETWEEN @FromDate AND @ToDate AND t.vthhtp IS NOT NULL
						AND (@ProductId IS NULL OR t.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR t.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR t.ma_lsx = @MaLsx)
				) t
				JOIN dbo.v_Product p ON t.vthhtp = p.F_Id				
				GROUP BY
					t.group_id,
					t.vthhtp,
					p.ProductCode,
					p.ProductName,
					p.UnitId_UnitName
			) r
			OUTER APPLY (
				SELECT SUM(d.so_luong) dh_so_luong, SUM(d.vnd0) dh_vnd FROM dbo.vDON_HANG d WHERE r.order_code = d.so_ct AND r.vthhtp = d.vthhtp
			) dh
			LEFT JOIN dbo.v_Partner c ON r.kh_co = c.F_Id
			ORDER BY
				r.group_id,
				r.vthhtp,
				r.ProductCode,
				r.ProductName,
				r.UnitId_UnitName;
					
			
			UPDATE t 
				SET t.allocationRate	= r.[Value]
			FROM @tbl t
				JOIN @Custom_AllocationRate r ON t.row_id = r.[Key];

		
			DECLARE @IsInputRate BIT = 0;

			IF EXISTS(SELECT 0 FROM @Custom_AllocationRate)
				SET @IsInputRate = 1;


			--2. Trực tiếp theo sản phẩm				
			update t
			SET 
				priceSellDirectlyByProduct632 = (
						--Giá vốn hàng bán trực tiếp (cột H) 
						--Được tổng hợp từ các phiếu xuất vật tư vật tư và thành phẩm  cho bán hàng (Giá vốn hàng bán) để có số liệu H1, H2 ... Hn 
						--(Cột này người dùng có thể tự vào dữ liệu hoạc chỉnh sửa từ số của hệ thống đưa ra) 
						--Nợ 632, theo  mã lệnh đơn hàng tập hợp theo phiếu chi tiết (không xét thời gian														

						SELECT SUM(r.vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND (r.tk_no LIKE '632%')
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						AND (@IsByLsx = 0 OR (r.ma_lsx IS NULL AND t.productionOrderCode IS NULL) OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR (r.order_code IS NULL AND t.orderCode IS NULL) OR r.order_code = t.orderCode)

						AND (r.vthhtp = t.productId)
					),
				priceSellDirectlyByProduct635 = (
						--Giá vốn hàng bán trực tiếp (cột H) 
						--Được tổng hợp từ các phiếu xuất vật tư vật tư và thành phẩm  cho bán hàng (Giá vốn hàng bán) để có số liệu H1, H2 ... Hn 
						--(Cột này người dùng có thể tự vào dữ liệu hoạc chỉnh sửa từ số của hệ thống đưa ra) 
						--Nợ 632, theo  mã lệnh đơn hàng tập hợp theo phiếu chi tiết (không xét thời gian														

						SELECT SUM(r.vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND (r.tk_no LIKE '635%')
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						AND (@IsByLsx = 0 OR (r.ma_lsx IS NULL AND t.productionOrderCode IS NULL) OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR (r.order_code IS NULL AND t.orderCode IS NULL) OR r.order_code = t.orderCode)

						AND (r.vthhtp = t.productId)
					),

					costSellDirectly = (
						--Chi phí bán hàng trực tiếp theo đối tượng lựa chọn đê có số liệu I1, I2, In
						--((Cột này người dùng có thể tự vào dữ liệu hoạc chỉnh sửa từ số của hệ thống đưa ra) 
						--Nợ 641,  tập hợp theo LSX hoặc mã Đơn hàng không xét thòi gian														
						SELECT SUM(vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '641%'
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

					
						AND (@IsByLsx = 0 OR (r.ma_lsx IS NULL AND t.productionOrderCode IS NULL) OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR (r.order_code IS NULL AND t.orderCode IS NULL) OR r.order_code = t.orderCode)

						AND (r.vthhtp = t.productId)
					),

					costManagerDirectly = (
						--Chi phí QL  trực tiếp (Cột J) được tổng hợp từ các CTGS có phát sinh chỉ định các ĐH theo lựa chọn Nợ 642, 
						--tập hợp theo mã Đơn hàng  hoạc tiêu chí lựa chọn không xét thòi gian															

						SELECT SUM(vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '642%'
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						
						AND (@IsByLsx = 0 OR (r.ma_lsx IS NULL AND t.productionOrderCode IS NULL) OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR (r.order_code IS NULL AND t.orderCode IS NULL) OR r.order_code = t.orderCode)
						
						AND (r.vthhtp = t.productId)
					)
				
			FROM @tbl t;

			UPDATE @tbl SET priceSellDirectly = ISNULL(priceSellDirectlyByProduct632,0) + ISNULL(priceSellDirectlyByProduct635,0);
			
			--2. Trực tiếp										
			DECLARE @tblDirectly TABLE(
				group_id				nvarchar(512),
				outQuantity				decimal(32,12),

				allocationRateTotal	decimal(32,12),			

				priceSellDirectlyRateTotal			decimal(32,12),
				costSellDirectlyRateTotal			decimal(32,12),
				costManagerDirectlyRateTotal			decimal(32,12),

				totalOrderPrice			DECIMAL(32,12),

				priceSellDirectly632			decimal(32,12),
				priceSellDirectly635			decimal(32,12),
				priceSellDirectly		decimal(32,12),
				costSellDirectly		DECIMAL(32,12),
				costManagerDirectly		DECIMAL(32,12)
			);
		
			INSERT INTO @tblDirectly
			(	
				group_id,
				outQuantity,
				allocationRateTotal,			
				priceSellDirectlyRateTotal,
				costSellDirectlyRateTotal,
				costManagerDirectlyRateTotal,
				totalOrderPrice,

				priceSellDirectly632,
				priceSellDirectly635,

				costSellDirectly,
				costManagerDirectly
			)
			SELECT 

					group_id,
					SUM(t.outQuantity),
					SUM(t.allocationRate),

					SUM(CASE WHEN t.priceSellDirectly>0 THEN 0 ELSE  t.allocationRate END),--only sum rate if not exists yet

					SUM(CASE WHEN t.costSellDirectly>0 THEN 0 ELSE t.allocationRate END),

					SUM(CASE WHEN t.costManagerDirectly>0 THEN 0 ELSE t.allocationRate END),

					SUM(t.totalOrderPrice),				
					(
						--Giá vốn hàng bán trực tiếp (cột H) 
						--Được tổng hợp từ các phiếu xuất vật tư vật tư và thành phẩm  cho bán hàng (Giá vốn hàng bán) để có số liệu H1, H2 ... Hn 
						--(Cột này người dùng có thể tự vào dữ liệu hoạc chỉnh sửa từ số của hệ thống đưa ra) 
						--Nợ 632, theo  mã lệnh đơn hàng tập hợp theo phiếu chi tiết (không xét thời gian														

						SELECT SUM(r.vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND (r.tk_no LIKE '632%')
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						--AND (@IsByLsx = 0 OR (r.ma_lsx IS NULL AND MAX(t.productionOrderCode) IS NULL) OR r.ma_lsx = MAX(t.productionOrderCode))
						--AND (@IsByOrder = 0 OR (r.order_code IS NULL AND MAX(t.orderCode) IS NULL) OR r.order_code = MAX(t.orderCode))

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.productionOrderCode) AND LEN(MAX(t.productionOrderCode))>0)
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.orderCode)  AND LEN(MAX(t.orderCode))>0 )

						AND (r.vthhtp IS NULL)
					),			
					(
						--Giá vốn hàng bán trực tiếp (cột H) 
						--Được tổng hợp từ các phiếu xuất vật tư vật tư và thành phẩm  cho bán hàng (Giá vốn hàng bán) để có số liệu H1, H2 ... Hn 
						--(Cột này người dùng có thể tự vào dữ liệu hoạc chỉnh sửa từ số của hệ thống đưa ra) 
						--Nợ 632, theo  mã lệnh đơn hàng tập hợp theo phiếu chi tiết (không xét thời gian														

						SELECT SUM(r.vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND (r.tk_no LIKE '635%')
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.productionOrderCode) AND LEN(MAX(t.productionOrderCode))>0)
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.orderCode)  AND LEN(MAX(t.orderCode))>0 )

						AND (r.vthhtp IS NULL)
					),

					(
						--Chi phí bán hàng trực tiếp theo đối tượng lựa chọn đê có số liệu I1, I2, In
						--((Cột này người dùng có thể tự vào dữ liệu hoạc chỉnh sửa từ số của hệ thống đưa ra) 
						--Nợ 641,  tập hợp theo LSX hoặc mã Đơn hàng không xét thòi gian														
						SELECT SUM(vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '641%'
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.productionOrderCode) AND LEN(MAX(t.productionOrderCode))>0)
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.orderCode)  AND LEN(MAX(t.orderCode))>0 )

						AND (r.vthhtp IS NULL)
					),

					(
						--Chi phí QL  trực tiếp (Cột J) được tổng hợp từ các CTGS có phát sinh chỉ định các ĐH theo lựa chọn Nợ 642, 
						--tập hợp theo mã Đơn hàng  hoạc tiêu chí lựa chọn không xét thòi gian															

						SELECT SUM(vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '642%'
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.productionOrderCode) AND LEN(MAX(t.productionOrderCode))>0)
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.orderCode)  AND LEN(MAX(t.orderCode))>0 )
						
						AND (r.vthhtp IS NULL)
					)
				
			FROM @tbl t			
			GROUP BY t.group_id;

			UPDATE @tblDirectly  SET priceSellDirectly = ISNULL(priceSellDirectly632,0) + ISNULL(priceSellDirectly635,0)
			
			--select * from @tblDirectly
			--return

			DECLARE		@sortOrder				int;
			DECLARE 	@group_id				nvarchar(512);
			DECLARE 	@row_id					nvarchar(512);			

			DECLARE 	@orderQuantity			decimal(32,12);
			DECLARE 	@outQuantity				decimal(32,12);
			DECLARE 	@allocationRate			decimal(32,12);
			DECLARE 	@priceSellDirectly		decimal(32,12);
			DECLARE 	@priceSellDirectlyCustom	decimal(32,12);
			DECLARE 	@costSellDirectly		decimal(32,12);
			DECLARE 	@costSellDirectlyCustom	decimal(32,12);
			DECLARE 	@costManagerDirectly		decimal(32,12);
			DECLARE 	@costManagerDirectlyCustom	decimal(32,12);
			DECLARE 	@otherFee				DECIMAL(32,12);				
			DECLARE 	@priceSellInDirectly		decimal(32,12);
			DECLARE		@costAccounting			DECIMAL(32,12);
			DECLARE 	@costSellInDirectly		DECIMAL(32,12);
			DECLARE 	@costManagerAllowcation	decimal(32,12);
			DECLARE 	@allPrice				DECIMAL(32,12);
			DECLARE 	@totalOrderPrice			DECIMAL(32,12);
			DECLARE 	@diffMoney				decimal(32,12);
			DECLARE 	@diffInPecent		decimal(32,12);

			DECLARE cursor_calc CURSOR LOCAL FORWARD_ONLY READ_ONLY
			FOR 
				SELECT
					sortOrder				,
					group_id				,
					row_id					,			
					
					orderQuantity			,
					outQuantity				,
					allocationRate			,
					priceSellDirectly		,
					priceSellDirectlyCustom	,
					costSellDirectly		,
					costSellDirectlyCustom	,
					costManagerDirectly		,
					costManagerDirectlyCustom,
					otherFee				,					
					priceSellInDirectly		,
					costAccounting			,
					costSellInDirectly		,
					costManagerAllowcation	,
					allPrice				,
					totalOrderPrice			,
					diffMoney				,
					diffInPecent		
				FROM  @tbl

			--3. Tính Chi phí NVL trực tiếp, Nhân công trực tiếp theo tỷ lệ giá bán
			OPEN cursor_calc

			FETCH NEXT FROM cursor_calc INTO
					@sortOrder				,
					@group_id				,
					@row_id					,			
					
					@orderQuantity			,
					@outQuantity			,
					@allocationRate			,
					@priceSellDirectly		,
					@priceSellDirectlyCustom,
					@costSellDirectly		,
					@costSellDirectlyCustom	,
					@costManagerDirectly	,
					@costManagerDirectlyCustom,
					@otherFee				,					
					@priceSellInDirectly	,
					@costAccounting			,
					@costSellInDirectly		,
					@costManagerAllowcation	,
					@allPrice				,
					@totalOrderPrice		,
					@diffMoney				,
					@diffInPecent		
			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @calc_priceSellDirectly			decimal(32,12)	= NULL;
				DECLARE @calc_priceSellDirectlyCustom	decimal(32,12)	= NULL;

				DECLARE @calc_costSellDirectly			decimal(32,12)	= NULL;
				DECLARE @calc_costSellDirectlyCustom	decimal(32,12)	= NULL;

				DECLARE @calc_costManagerDirectly		decimal(32,12)	= NULL;
				DECLARE @calc_costManagerDirectlyCustom	decimal(32,12)	= NULL;

				DECLARE @calc_otherFee					DECIMAL(32,12)	= NULL;

		
				DECLARE @calc_allocationRate			decimal(32,12) = NULL;

				DECLARE @group_outQuantity				decimal(32,12) = NULL;

				/*
				Cách tập hợp chi phí: Lựa chọn tổng hợp các chi phí theo Mã đơn hàng sum lại đưa về cột chi phí tổng hợp tại dòng sản phẩm có cùng mã đơn hàng 
				- Nếu 1 đơn hàng có từ 2 sản phẩm trở lên thì thì mục chi phí theo đơn hàng này được phân bổ cho các SP cùng đơn hàng. 
				Nếu số SP xuất kho > hoạc bằng số SP theo yc của đơn hàng thì tình 100 % chi phí. 
				Nếu số SP nhập kho < sô SP yc theo đơn hàng, trong trường hợp có dữ liệu từ phân hệ bán hàng trả về là đơn hàng đã hoàn thành thì tính 100% phí,
				nếu chưa hoàn thành thì tính chi phí = Tổng mục chi phí * (Số SP nhập kho/Số SP theo đơn hàng)														
				
				*/
				DECLARE @orderRate DECIMAL(32,12) = 1;
				IF ISNULL(@outQuantity,0) < ISNULL(@orderQuantity,0) AND @orderQuantity > 0
				BEGIN
				    SET @orderRate = @outQuantity/@orderQuantity
				END

				SELECT 
						@calc_allocationRate			= CASE WHEN allocationRateTotal>0 THEN (@allocationRate/allocationRateTotal) ELSE 0 END * 100,
						@calc_priceSellDirectly			= @orderRate * CASE WHEN priceSellDirectlyRateTotal>0 THEN (@allocationRate/priceSellDirectlyRateTotal) ELSE 0 END *priceSellDirectly,
						@calc_costSellDirectly			= @orderRate * CASE WHEN costSellDirectlyRateTotal >0 THEN (@allocationRate/costSellDirectlyRateTotal) ELSE 0 END *costSellDirectly,
						@calc_costManagerDirectly		= @orderRate * CASE WHEN costManagerDirectlyRateTotal>0 THEN (@allocationRate/costManagerDirectlyRateTotal) ELSE 0 END *costManagerDirectly,
						@group_outQuantity				= outQuantity

					FROM  @tblDirectly
					WHERE group_id = @group_id;

				IF @priceSellDirectly>0
				BEGIN
					SET @calc_priceSellDirectly = @priceSellDirectly
				END

				IF @costSellDirectly>0
				BEGIN
					SET @calc_costSellDirectly = @costSellDirectly
				END

				IF @costManagerDirectly>0
				BEGIN
					SET @calc_costManagerDirectly = @costManagerDirectly
				END

				SELECT @calc_priceSellDirectlyCustom			= [Value]	FROM @Custom_PriceSellDirectly		WHERE [Key] = @row_id;

				SELECT @calc_costSellDirectlyCustom				= [Value]	FROM @Custom_CostSellDirectly		WHERE [Key] = @row_id;

				SELECT @calc_costManagerDirectlyCustom			= [Value]	FROM @Custom_CostManagerDirectly	WHERE [Key] = @row_id;

				SELECT @calc_otherFee							= [Value]	FROM @Custom_OtherFee				WHERE [Key] = @row_id;

				UPDATE  @tbl SET 
						groupOutQuantity			= @group_outQuantity,
						allocationRate				= @calc_allocationRate,

						priceSellDirectly			= @calc_priceSellDirectly,
						priceSellDirectlyCustom		= @calc_priceSellDirectlyCustom,

						costSellDirectly			= @calc_costSellDirectly,
						costSellDirectlyCustom		= @calc_costSellDirectlyCustom,

						costManagerDirectly			= @calc_costManagerDirectly,
						costManagerDirectlyCustom	= @calc_costManagerDirectlyCustom,

						otherFee					= @calc_otherFee

					WHERE row_id = @row_id
	
	
				FETCH NEXT FROM cursor_calc INTO
					@sortOrder				,
					@group_id				,
					@row_id					,			
					
					@orderQuantity			,
					@outQuantity			,
					@allocationRate			,
					@priceSellDirectly		,
					@priceSellDirectlyCustom,
					@costSellDirectly		,
					@costSellDirectlyCustom	,
					@costManagerDirectly	,
					@costManagerDirectlyCustom,
					@otherFee				,					
					@priceSellInDirectly	,
					@costAccounting			,
					@costSellInDirectly		,
					@costManagerAllowcation	,
					@allPrice				,
					@totalOrderPrice		,
					@diffMoney				,
					@diffInPecent		
			END

			CLOSE cursor_calc



			---phan 3

			DECLARE @ENUM_ALLOCATION_TYPE_PRICE_SELL_DIRECTLY		INT=1
			DECLARE @ENUM_ALLOCATION_TYPE_COST_SELL_DIRECTLY		INT=2
			DECLARE @ENUM_ALLOCATION_TYPE_COST_MANAGER_DIRECTLY		INT=3
			DECLARE @ENUM_ALLOCATION_TYPE_OTHER						INT=4
			DECLARE @ENUM_ALLOCATION_TYPE_TOTAL_ORDER_PRICE			INT=5


			--4. Tính Chi phí gián tiếp theo tiêu chí
			DECLARE @Sum_priceSellDirectly decimal(32,12)		
			DECLARE @Sum_costSellDirectly decimal(32,12)
			DECLARE @Sum_costManagerDirectly decimal(32,12)
			DECLARE @Sum_otherFee decimal(32,12)
			DECLARE @Sum_allPrice decimal(32,12)
			DECLARE @Sum_totalOrderPrice decimal(32,12)

			SELECT @Sum_priceSellDirectly	= SUM(CASE WHEN priceSellDirectlyCustom IS NOT NULL THEN priceSellDirectlyCustom ELSE priceSellDirectly END)			FROM @tbl
			SET @Sum_priceSellDirectly		= ISNULL(@Sum_priceSellDirectly,0)
			SELECT @Sum_costSellDirectly	= SUM(CASE WHEN costSellDirectlyCustom IS NOT NULL THEN costSellDirectlyCustom ELSE costSellDirectly END)				FROM @tbl
			SET @Sum_costSellDirectly		= ISNULL(@Sum_costSellDirectly,0)
			SELECT @Sum_costManagerDirectly	= SUM(CASE WHEN costManagerDirectlyCustom IS NOT NULL THEN costManagerDirectlyCustom ELSE costManagerDirectly END)		FROM @tbl
			SET @Sum_costManagerDirectly	= ISNULL(@Sum_costManagerDirectly,0)
			SELECT @Sum_otherFee			= SUM(otherFee)																											FROM @tbl
			SET @Sum_otherFee				= ISNULL(@Sum_otherFee,0)
			SELECT @Sum_allPrice			= SUM(allPrice)																											FROM @tbl
			SET @Sum_allPrice				= ISNULL(@Sum_allPrice,0)
			SELECT @Sum_totalOrderPrice		= SUM(totalOrderPrice)																											FROM @tbl
			SET @Sum_totalOrderPrice		= ISNULL(@Sum_totalOrderPrice,0)

			DECLARE @Sum_priceSellInDirectly decimal(32,12)
			DECLARE @Sum_costAccounting decimal(32,12)
			DECLARE @Sum_costSellInDirectly decimal(32,12)			
			DECLARE @Sum_costManagerAllowcation decimal(32,12)

			DECLARE @PriceSellInDirectlySum_final decimal(32,12)
			DECLARE @CostAccountingSum_final decimal(32,12)
			DECLARE @CostSellInDirectlySum_final decimal(32,12)			
			DECLARE @CostManagerSum_final decimal(32,12)
		
		/*

			--SL = Sum C632, N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon) 
			--< Hay nói cách khác là giá vốn hàng bán Gián tiếp  (cột M) Bằng tổng phát sinh phiếu xuất vật tư, hàng hóa  cho bán SP N 632,   
			--tập hợp theo phiếu chi tiết trong kỳ lựa chọn  nhưng không có tiêu chí đưa vào cột Trực tiếp  														
			SELECT @Sum_priceSellInDirectly = SUM(r.Vnd)	
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR r.order_code = t.orderCode)
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '632%' AND t.group_id IS NULL
			*/
			--SL = Sum N632- Có 632 không đối ứng  N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon) 
			--SUM(N632) - SUM(C632,N!=911) - SUM H
			DECLARE @SumN632 DECIMAL(32,12)
			DECLARE @SumC632_N_NE911 DECIMAL(32,12)
			DECLARE @SumH_N632 DECIMAL(32,12)

			SELECT @SumN632 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '632%';

			SELECT @SumC632_N_NE911 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_co LIKE '632%'AND r.tk_no NOT LIKE '911%';

			SELECT @SumH_N632 = SUM(priceSellDirectlyByProduct632) FROM  @tbl t

			SELECT @SumH_N632 = ISNULL(@SumH_N632,0) + ISNULL(SUM(priceSellDirectly632),0) FROM  @tblDirectly
					

			SET @Sum_priceSellInDirectly = ISNULL(@SumN632,0) - ISNULL(@SumC632_N_NE911,0) - ISNULL(@SumH_N632,0)
	

			SET @PriceSellInDirectlySum		= @Sum_priceSellInDirectly
			SET @PriceSellInDirectlySum_final = @PriceSellInDirectlySum
			
			IF @PriceSellInDirectlySumCustom IS NOT NULL
			BEGIN
				SET @PriceSellInDirectlySum_final = @PriceSellInDirectlySumCustom
			END

			/*
			--SN = Sum C635, N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon) 
			--< Hay nói cách khác là giá vốn hàng bán Gián tiếp  (cột N) Bằng tổng phát sinh phiếu xuất vật tư, hàng hóa  cho bán SP N 635,   
			--tập hợp theo phiếu chi tiết trong kỳ lựa chọn  nhưng không có tiêu chí đưa vào cột Trực tiếp  															  														
			SELECT @Sum_costAccounting = SUM(r.Vnd)	
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR r.order_code = t.orderCode)
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '635%' AND t.group_id IS NULL
			*/
			--SN = Sum N635 - C635 không đối ứng N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon) 															
			--SUM(N635) - SUM(C635,N!=911) - SUM H
			DECLARE @SumN635 DECIMAL(32,12)
			DECLARE @SumC635_N_NE911 DECIMAL(32,12)
			DECLARE @SumH_N635 DECIMAL(32,12)

			SELECT @SumN635 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '635%';

			SELECT @SumC635_N_NE911 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_co LIKE '635%'AND r.tk_no NOT LIKE '911%';

			SELECT @SumH_N635 = SUM(priceSellDirectlyByProduct635) FROM  @tbl t
			SELECT @SumH_N635 = ISNULL(@SumH_N635,0) + ISNULL(SUM(priceSellDirectly635),0) FROM  @tblDirectly

			SET @Sum_costAccounting = ISNULL(@SumN635,0) - ISNULL(@SumC635_N_NE911,0) - ISNULL(@SumH_N635,0)


			SET @CostAccountingSum		= @Sum_costAccounting
			SET @CostAccountingSum_final = @CostAccountingSum
			
			IF @CostAccountingSumCustom IS NOT NULL
			BEGIN
				SET @CostAccountingSum_final = @CostAccountingSumCustom
			END

			/*
			--SM =  Sum C641, N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon) 
			--Hay nói cách khác là Chi phí bán hàng gián tiếp  (cột N) Bằng tổng phát sinh phiếu xuất vật tư hàng hóa cho  SP N641  
			--tập hợp theo phiếu chi tiết trong kỳ lựa chọn  nhưng không có tiêu chí đưa vào cột chi phí bán hàng  Trực tiếp
			SELECT @Sum_costSellInDirectly = SUM(r.Vnd)
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR r.order_code = t.orderCode)
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '641%' AND t.group_id IS NULL
			*/
			--SM =  Sum N641- C641 không đối ứng N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon)
			--SUM(N641) - SUM(C641,N!=911) - SUM H
			DECLARE @SumN641 DECIMAL(32,12)
			DECLARE @SumC641_N_NE911 DECIMAL(32,12)
			DECLARE @SumH_N641 DECIMAL(32,12)

			SELECT @SumN641 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '641%';

			SELECT @SumC641_N_NE911 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_co LIKE '641%'AND r.tk_no NOT LIKE '911%';

			SELECT @SumH_N641 = SUM(costSellDirectly) FROM  @tbl t
					

			SET @Sum_costSellInDirectly = ISNULL(@SumN641,0) - ISNULL(@SumC641_N_NE911,0) - ISNULL(@SumH_N641,0)

		
			SET @CostSellInDirectlySum		= @Sum_costSellInDirectly
			SET @CostSellInDirectlySum_final = @CostSellInDirectlySum

			IF @CostSellInDirectlySumCustom IS NOT NULL
			BEGIN
				SET @CostSellInDirectlySum_final = @CostSellInDirectlySumCustom
			END
		
			/*
			--SN = Sum C642, N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon) 
			-- Hay nói cách khác là Chi phí QL  gián tiếp  (cột O) Bằng tổng phát sinh phiếu xuất vật tư bán trong kỳ  N642, 
			--tập hợp theo phiếu chi tiết trong kỳ lựa chọn  nhưng không có tiêu chí đưa vào cột Trực tiếp  														
			SELECT @Sum_costManagerAllowcation = SUM(r.Vnd)
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.productionOrderCode)
						AND (@IsByOrder = 0 OR r.order_code = t.orderCode)
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate  AND r.tk_no LIKE '642%' AND t.group_id IS NULL
			*/
			--SM =  Sum N641- C641 không đối ứng N911 trong kỳ lựa chọn -Chi phí đã tập hợp vào cột H phát sinh trong kỳ lựa chon)
			--SUM(N641) - SUM(C641,N!=911) - SUM H
			DECLARE @SumN642 DECIMAL(32,12)
			DECLARE @SumC642_N_NE911 DECIMAL(32,12)
			DECLARE @SumH_N642 DECIMAL(32,12)

			SELECT @SumN642 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '642%';

			SELECT @SumC642_N_NE911 = SUM(r.Vnd)	
				FROM dbo._rc r					
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_co LIKE '642%'AND r.tk_no NOT LIKE '911%';

			SELECT @SumH_N642 = SUM(costManagerDirectly) FROM  @tbl t
					

			SET @Sum_costManagerAllowcation = ISNULL(@SumN642,0) - ISNULL(@SumC642_N_NE911,0) - ISNULL(@SumH_N642,0)

			SET @CostManagerSum	= @Sum_costManagerAllowcation
			SET @CostManagerSum_final = @CostManagerSum

			IF @CostManagerSumCustom IS NOT NULL
			BEGIN
				SET @CostManagerSum_final = @CostManagerSumCustom
			END
	

			OPEN cursor_calc

			FETCH NEXT FROM cursor_calc INTO 
					@sortOrder				,
					@group_id				,
					@row_id					,			
					
					@orderQuantity			,
					@outQuantity			,
					@allocationRate			,
					@priceSellDirectly		,
					@priceSellDirectlyCustom,
					@costSellDirectly		,
					@costSellDirectlyCustom	,
					@costManagerDirectly	,
					@costManagerDirectlyCustom,
					@otherFee				,					
					@priceSellInDirectly	,
					@costAccounting			,
					@costSellInDirectly		,
					@costManagerAllowcation	,
					@allPrice				,
					@totalOrderPrice		,
					@diffMoney				,
					@diffInPecent		
			WHILE @@FETCH_STATUS = 0
			BEGIN
		
				--Jn=(SumJ/Sum (tiêu chí lựu chọn))*Thành phần lựa chọn
				DECLARE @calc_priceSellInDirectly		DECIMAL(32,12) = NULL;
				DECLARE @calc_costAccounting			DECIMAL(32,12) = NULL;
				DECLARE @calc_costSellInDirectly		DECIMAL(32,12) = NULL;				
				DECLARE @calc_costManagerAllowcation	DECIMAL(32,12) = NULL;
	
				DECLARE @priceSellDirectly_final		DECIMAL(32,12) = @priceSellDirectly;			
				DECLARE @costSellDirectly_final			DECIMAL(32,12) = @costSellDirectly;
				DECLARE @costManagerDirectly_final		DECIMAL(32,12) = @costManagerDirectly;

				IF @priceSellDirectlyCustom IS NOT NULL
				BEGIN
					SET @priceSellDirectly_final = @priceSellDirectlyCustom
				END

				IF @costSellDirectlyCustom IS NOT NULL
				BEGIN
					SET @costSellDirectly_final = @costSellDirectlyCustom
				END

				
				IF @costManagerDirectlyCustom IS NOT NULL
				BEGIN
					SET @costManagerDirectly_final = @costManagerDirectlyCustom
				END


				--Giá vốn hàng bán gián tiếp				
				IF @PriceSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_PRICE_SELL_DIRECTLY AND @Sum_priceSellDirectly > 0
				BEGIN
					SET @calc_priceSellInDirectly = (@PriceSellInDirectlySum_final/@Sum_priceSellDirectly) * @priceSellDirectly_final
				END
				IF @PriceSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_SELL_DIRECTLY AND @Sum_costSellDirectly > 0
				BEGIN
					SET @calc_priceSellInDirectly = (@PriceSellInDirectlySum_final/@Sum_costSellDirectly) * @costSellDirectly_final
				END
				IF @PriceSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_MANAGER_DIRECTLY AND @Sum_costManagerDirectly > 0
				BEGIN
					SET @calc_priceSellInDirectly = (@PriceSellInDirectlySum_final/@Sum_costManagerDirectly) * @costManagerDirectly_final
				END
				IF @PriceSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Sum_otherFee > 0
				BEGIN
					SET @calc_priceSellInDirectly = (@PriceSellInDirectlySum_final/@Sum_otherFee) * @otherFee
				END
				IF @PriceSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_ORDER_PRICE AND @Sum_totalOrderPrice > 0
				BEGIN
					SET @calc_priceSellInDirectly = (@PriceSellInDirectlySum_final/@Sum_totalOrderPrice) * @totalOrderPrice
				END
				

				--Chi phí tài chính
				IF @CostAccountingAllocationTypeId = @ENUM_ALLOCATION_TYPE_PRICE_SELL_DIRECTLY AND @Sum_priceSellDirectly > 0
				BEGIN
					SET @calc_costAccounting = (@CostAccountingSum_final/@Sum_priceSellDirectly) * @priceSellDirectly_final
				END
				IF @CostAccountingAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_SELL_DIRECTLY AND @Sum_costSellDirectly > 0
				BEGIN
					SET @calc_costAccounting = (@CostAccountingSum_final/@Sum_costSellDirectly) * @costSellDirectly_final
				END
				IF @CostAccountingAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_MANAGER_DIRECTLY AND @Sum_costManagerDirectly > 0
				BEGIN
					SET @calc_costAccounting = (@CostAccountingSum_final/@Sum_costManagerDirectly) * @costManagerDirectly_final
				END
				IF @CostAccountingAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Sum_otherFee > 0
				BEGIN
					SET @calc_costAccounting = (@CostAccountingSum_final/@Sum_otherFee) * @otherFee
				END
				IF @CostAccountingAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_ORDER_PRICE AND @Sum_totalOrderPrice > 0
				BEGIN
					SET @calc_costAccounting = (@CostAccountingSum_final/@Sum_totalOrderPrice) * @totalOrderPrice
				END


				--Chi phí ưu thông gián tiếp			
				IF @CostSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_PRICE_SELL_DIRECTLY AND @Sum_priceSellDirectly > 0
				BEGIN
					SET @calc_costSellInDirectly = (@CostSellInDirectlySum_final/@Sum_priceSellDirectly) * @priceSellDirectly_final
				END
				IF @CostSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_SELL_DIRECTLY AND @Sum_costSellDirectly > 0
				BEGIN
					SET @calc_costSellInDirectly = (@CostSellInDirectlySum_final/@Sum_costSellDirectly) * @costSellDirectly_final
				END
				IF @CostSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_MANAGER_DIRECTLY AND @Sum_costManagerDirectly > 0
				BEGIN
					SET @calc_costSellInDirectly = (@CostSellInDirectlySum_final/@Sum_costManagerDirectly) * @costManagerDirectly_final
				END
				IF @CostSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Sum_otherFee > 0
				BEGIN
					SET @calc_costSellInDirectly = (@CostSellInDirectlySum_final/@Sum_otherFee) * @otherFee
				END
				IF @CostSellInDirectlyAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_ORDER_PRICE AND @Sum_totalOrderPrice > 0
				BEGIN
					SET @calc_costSellInDirectly = (@CostSellInDirectlySum_final/@Sum_totalOrderPrice) * @totalOrderPrice
				END

				--Chi phí quản lý phân bổ
				IF @CostManagerAllowcationAllocationTypeId = @ENUM_ALLOCATION_TYPE_PRICE_SELL_DIRECTLY AND @Sum_priceSellDirectly > 0
				BEGIN
					SET @calc_costManagerAllowcation = (@CostManagerSum_final/@Sum_priceSellDirectly) * @priceSellDirectly_final
				END
				IF @CostManagerAllowcationAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_SELL_DIRECTLY AND @Sum_costSellDirectly > 0
				BEGIN
					SET @calc_costManagerAllowcation = (@CostManagerSum_final/@Sum_costSellDirectly) * @costSellDirectly_final
				END
				IF @CostManagerAllowcationAllocationTypeId = @ENUM_ALLOCATION_TYPE_COST_MANAGER_DIRECTLY AND @Sum_costManagerDirectly > 0
				BEGIN
					SET @calc_costManagerAllowcation = (@CostManagerSum_final/@Sum_costManagerDirectly) * @costManagerDirectly_final
				END
				IF @CostManagerAllowcationAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Sum_otherFee > 0
				BEGIN
					SET @calc_costManagerAllowcation = (@CostManagerSum_final/@Sum_otherFee) * @otherFee
				END
				IF @CostManagerAllowcationAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_ORDER_PRICE AND @Sum_totalOrderPrice > 0
				BEGIN
					SET @calc_costManagerAllowcation = (@CostManagerSum_final/@Sum_totalOrderPrice) * @totalOrderPrice
				END



				DECLARE @calc_all_price DECIMAL(32,12);
				DECLARE @calc_diffMoney DECIMAL(32,12);
				DECLARE @calc_diffInPecent DECIMAL(32,12);

				SET @calc_all_price = ISNULL(@priceSellDirectly_final,0)
				+ ISNULL(@costSellDirectly_final,0)
				+ ISNULL(@costManagerDirectly_final,0)
				+ ISNULL(@calc_priceSellInDirectly,0) 
				+ ISNULL(@calc_costAccounting,0)
				+ ISNULL(@calc_costSellInDirectly,0) 
				+ ISNULL(@calc_costManagerAllowcation,0);

				SET	@calc_diffMoney = @totalOrderPrice - @calc_all_price
				SET	@calc_diffInPecent = CASE WHEN @totalOrderPrice>0 THEN (@calc_all_price/@totalOrderPrice) ELSE 1 END;
				SET @calc_diffInPecent = @calc_diffInPecent * 100

				UPDATE @tbl SET 
						priceSellInDirectly			= @calc_priceSellInDirectly,
						costAccounting				= @calc_costAccounting,
						costSellInDirectly			= @calc_costSellInDirectly,
						costManagerAllowcation		= @calc_costManagerAllowcation,
						groupAllPrice				= @Sum_allPrice,
						allPrice					= @calc_all_price,
						diffMoney					= @calc_diffMoney,
						diffInPecent			= @calc_diffInPecent

					WHERE row_id = @row_id
	
	
				FETCH NEXT FROM cursor_calc INTO
					@sortOrder				,
					@group_id				,
					@row_id					,			
					
					@orderQuantity			,
					@outQuantity			,
					@allocationRate			,
					@priceSellDirectly		,
					@priceSellDirectlyCustom,
					@costSellDirectly		,
					@costSellDirectlyCustom	,
					@costManagerDirectly	,
					@costManagerDirectlyCustom,
					@otherFee				,					
					@priceSellInDirectly	,
					@costAccounting			,
					@costSellInDirectly		,
					@costManagerAllowcation	,
					@allPrice				,
					@totalOrderPrice		,
					@diffMoney				,
					@diffInPecent		
			END

			CLOSE cursor_calc

			DEALLOCATE cursor_calc	

		SELECT  * FROM @tbl ORDER BY sortOrder
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcCostTransferDetail]
	@Tk NVARCHAR(128)=NULL,
	@FromDate AS datetime,
    @ToDate AS datetime,
	@Type AS int,
	@by_bo_phan AS bit,
	@by_kh AS bit,
	@by_tscd AS bit,
	@by_khoan_muc_cp AS bit,
	@by_phan_xuong AS bit,
	@by_vthhtp AS bit,
	@by_kho AS bit,
	@bo_phan AS int,
	@kh AS nvarchar(512),
	@tscd AS int,
	@khoan_muc_cp AS int,
	@phan_xuong AS int,
	@vthhtp AS int,
	@kho AS int,
	@Du_no_dau_ky AS decimal(24,5) OUTPUT,
	@Du_no_cuoi_ky AS decimal(24,5) OUTPUT,
	@SubId AS int
AS
BEGIN

	SET @by_bo_phan = ISNULL(@by_bo_phan,0)
	SET @by_kh = ISNULL(@by_kh,0)
	SET @by_tscd = ISNULL(@by_tscd,0)
	SET @by_khoan_muc_cp = ISNULL(@by_khoan_muc_cp,0)
	SET @by_phan_xuong = ISNULL(@by_phan_xuong,0)
	SET @by_vthhtp = ISNULL(@by_vthhtp,0)
	SET @by_kho = ISNULL(@by_kho,0)

	IF @kh = ''
		SET @kh = NULL

	DECLARE @tblTk TABLE
	(
		Tk NVARCHAR(128)
	)

	IF @Tk IS NOT NULL
	BEGIN
	    INSERT @tblTk
	    (
	        Tk
	    )
	    VALUES
	    (@Tk)
	END
	ELSE
	BEGIN
	    IF @Type = 1
		BEGIN
			INSERT INTO @tblTk
			(
				Tk
			)
			VALUES
			('621%'),('622%'),('627%');
		END

		IF @Type = 2 OR @Type = 3
		BEGIN
			INSERT INTO @tblTk
			(
				Tk
			)
			VALUES
			('154%');			    
		END
	END
	

	IF @Type = 3
	BEGIN
	    SET @by_bo_phan = 0
		SET @by_kh = 0
		SET @by_tscd = 0
		SET @by_khoan_muc_cp = 0
		SET @by_phan_xuong = 0
		SET @by_vthhtp = 0
		SET @by_kho = 0
	END

	SELECT					
		@Du_no_dau_ky = SUM(CASE WHEN d.ngay_ct < @FromDate THEN ISNULL(d.Vnd_no,0) - ISNULL(d.Vnd_co,0) ELSE 0 END),
		@Du_no_cuoi_ky = SUM(ISNULL(d.Vnd_no,0) - ISNULL(d.Vnd_co,0))
	FROM dbo._rc_detail d
		JOIN @tblTk t ON d.Tk LIKE t.Tk
	WHERE d.SubsidiaryId=@SubId AND d.ngay_ct <= @ToDate
		AND  (@by_bo_phan = 0 OR d.bo_phan = @bo_phan OR d.bo_phan IS NULL AND @bo_phan IS NULL)
		AND  (@by_kh = 0 OR d.kh = @kh OR d.kh IS NULL AND @kh IS NULL)
		AND  (@by_tscd = 0 OR d.tscd = @tscd OR d.tscd IS NULL AND @tscd IS NULL)
		AND  (@by_khoan_muc_cp = 0 OR d.khoan_muc_cp = @khoan_muc_cp OR d.khoan_muc_cp IS NULL AND @khoan_muc_cp IS NULL)
		AND  (@by_phan_xuong = 0 OR d.phan_xuong = @phan_xuong OR d.phan_xuong IS NULL AND @phan_xuong IS NULL)
		AND  (@by_vthhtp = 0 OR d.vthhtp = @vthhtp OR d.vthhtp IS NULL AND @vthhtp IS NULL)
		AND  (@by_kho = 0 OR d.kho = @kho OR d.kho IS NULL AND @kho IS NULL)

	
	SELECT 
			d.InputBill_F_Id billId,
			d.InputTypeId billTypeId,  
			d.so_ct, 
			d.ngay_ct, 
			d.dien_giai, 
			d.tk_co, 
			d.tk_no, 
			d.vnd
		FROM [dbo]._rc d
			JOIN @tblTk t ON d.tk_co LIKE t.Tk OR d.tk_no LIKE t.Tk
		WHERE d.ngay_ct BETWEEN @FromDate AND @ToDate
		AND  d.SubsidiaryId = @SubId		
		AND  (@by_bo_phan = 0 OR d.bo_phan = @bo_phan OR d.bo_phan IS NULL AND @bo_phan IS NULL)
		AND  (@by_kh = 0 OR d.kh_co = @kh OR d.kh_co IS NULL AND @kh IS NULL OR d.kh_no = @kh OR d.kh_no IS NULL AND @kh IS NULL)
		AND  (@by_tscd = 0 OR d.tscd = @tscd OR d.tscd IS NULL AND @tscd IS NULL)
		AND  (@by_khoan_muc_cp = 0 OR d.khoan_muc_cp = @khoan_muc_cp OR d.khoan_muc_cp IS NULL AND @khoan_muc_cp IS NULL)
		AND  (@by_phan_xuong = 0 OR d.phan_xuong = @phan_xuong OR d.phan_xuong IS NULL AND @phan_xuong IS NULL)
		AND  (@by_vthhtp = 0 OR d.vthhtp = @vthhtp OR d.vthhtp IS NULL AND @vthhtp IS NULL)
		AND  (@by_kho = 0 OR d.kho = @kho OR d.kho IS NULL AND @kho IS NULL)
	
END

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_ValidateBillDate]
	@SubId int = 0,
	@OldDate datetime2 = NULL,
	@BillDate datetime2= NULL,
	@TimeZoneOffset INT = -420,
	@ResStatus bit  = 0 OUTPUT
AS
BEGIN
	EXEC [MasterDB].dbo.asp_ValidateBillDate
	@SubId = @SubId,
	@OldDate = @OldDate,
	@BillDate = @BillDate,
	@TimeZoneOffset = @TimeZoneOffset,
	@ResStatus = @ResStatus OUt
END

GO

USE AccountancyPublicDB
GO
/**
* 2022-05-22 Only delete details, update do not delete bill if not necessary
*/
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_DeleteCostTransfer]
  @FromDate AS datetime ,
  @ToDate AS datetime,
	@Type AS int,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	BEGIN TRANSACTION
		EXEC dbo.asp_ValidateBillDate @SubId = @SubId, @BillDate = NULL, @OldDate = @FromDate, @ResStatus = @ResStatus OUTPUT
		IF @ResStatus = 1
		BEGIN
			DECLARE @Rows TABLE
			(
				BillId BIGINT,
				F_Id BIGINT
			)
			
			IF @Type = 1--KC đầu 6 sang 154
			BEGIN
				INSERT INTO @Rows (BillId,
			                   F_Id)
				SELECT tk.InputBill_F_Id, tk.F_Id
				FROM dbo._rc_all tk
				WHERE tk.InputType_InputTypeCode = 'CTGS_KCPB_COST' AND (tk.tk_co LIKE '621%' OR tk.tk_co LIKE '622%' OR tk.tk_co LIKE '627%') AND tk.tk_no LIKE '154%' AND tk.ngay_ct BETWEEN @FromDate AND @ToDate AND tk.SubsidiaryId = @SubId
			END
			
			IF @Type = 2 OR @Type = 3--KC 154 sang 155 đích danh, --KC 154 sang 155 không đích danh
			BEGIN
				INSERT INTO @Rows (BillId,
			                   F_Id)
				SELECT tk.InputBill_F_Id, tk.F_Id
				FROM dbo._rc_all tk
				WHERE tk.InputType_InputTypeCode = 'CTGS_KCPB_COST' AND tk.tk_co LIKE '154%' AND tk.tk_no LIKE '155%' AND tk.ngay_ct BETWEEN @FromDate AND @ToDate AND tk.SubsidiaryId = @SubId
			END

			-- delete rows
			UPDATE d
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE(),
				SystemLog =  'Deleted by cost transfer'
			FROM dbo.InputValueRow d
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.F_Id = d.F_Id)
				AND d.IsDeleted = 0

			-- delete bills
			UPDATE b
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE()
			FROM dbo.InputBill b
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.BillId = b.F_Id)
			AND NOT EXISTS (SELECT 0 FROM dbo._rc_all a WHERE a.InputBill_F_Id = b.F_Id)
			AND b.IsDeleted = 0
		END
	COMMIT TRANSACTION
END

GO

USE AccountancyPublicDB
GO
/**
* 2022-05-22 Only delete details, update do not delete bill if not necessary
*/
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_DeleteCostTransferBalanceZero]
  @FromDate AS datetime ,
  @ToDate AS datetime,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	BEGIN TRANSACTION
		EXEC asp_ValidateBillDate @SubId = @SubId, @BillDate = NULL, @OldDate = @FromDate, @ResStatus = @ResStatus OUTPUT
		IF @ResStatus = 1
		BEGIN
			DECLARE @Rows TABLE
			(
				BillId BIGINT,
				F_Id BIGINT
			)

			INSERT INTO @Rows (BillId,
			                   F_Id)
			SELECT tk.InputBill_F_Id, tk.F_Id
			FROM dbo._rc_all tk
			WHERE tk.InputType_InputTypeCode = 'CTGS_KCPB_BALANCE_ZERO' AND tk.ngay_ct BETWEEN @FromDate AND @ToDate AND tk.SubsidiaryId = @SubId;

			-- delete rows
			UPDATE d
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE(),
				SystemLog =  'Deleted by transfer balance zero'
			FROM dbo.InputValueRow d
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.F_Id = d.F_Id)

			-- delete bills
			UPDATE b
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE()
			FROM dbo.InputBill b
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.BillId = b.F_Id)
			AND NOT EXISTS (SELECT 0 FROM dbo._rc_all a WHERE a.InputBill_F_Id = b.F_Id)			
		END
	COMMIT TRANSACTION
END


GO

USE ManufacturingDB
GO

CREATE OR ALTER PROCEDURE [dbo].[asp_VoucherType_Order_Status]
	@SubId INT,
	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@ProductId INT,
	@OrderCode NVARCHAR(255)
AS
BEGIN 
SET TRAN ISOLATION LEVEL READ UNCOMMITTED;
--DECLARE @SubId INT = 2
--DECLARE @FROMDATE DATETIME2 = '2021-01-01'
--DECLARE @TODATE DATETIME2 = '2021-12-31'
--DECLARE @ProductId bigint
DECLARE @INVENTORY_TYPE_INPUT INT = 1
DECLARE @INVENTORY_TYPE_OUTPUT INT = 2

DECLARE @result _VoucherTypeOrderStatus;

SET @ProductId = ISNULL(@ProductId,0)
SET @OrderCode = ISNULL(@OrderCode,'')


--Get merge all inout whichs have OrderCode by order
;WITH inoutByOrder AS
(
	SELECT 
		isnull(inp.OrderCode, outp.OrderCode) orderCode, 
		ISNULL(inp.CustomerId, outp.CustomerId) customerId,
		ISNULL(inp.ProductId, outp.ProductId) productId,
		inp.PrimaryQuantity inventoryInQuantity,
		outp.PrimaryQuantity inventoryOutQuantity,
		inp.inventoryInDate,
		outp.inventoryOutDate
	FROM
	(
		SELECT d.OrderCode, d.ProductId, MIN(i.[Date]) inventoryInDate, max(i.CustomerId) CustomerId, sum(d.PrimaryQuantity) AS PrimaryQuantity
		FROM StockDB.dbo.Inventory i
			JOIN StockDB.dbo.InventoryDetail d ON i.InventoryId = d.InventoryId	

		WHERE i.SubsidiaryId = @SubId AND i.IsDeleted = 0 AND d.IsDeleted = 0 AND i.IsApproved = 1 AND i.InventoryTypeId = @INVENTORY_TYPE_INPUT AND d.OrderCode IS NOT NULL AND d.OrderCode <> ''

		GROUP BY d.OrderCode, d.ProductId
	) inp

	FULL OUTER JOIN
	(
		SELECT d.OrderCode, d.ProductId, MIN(i.[Date]) inventoryOutDate, max(i.CustomerId) CustomerId, sum(d.PrimaryQuantity) AS PrimaryQuantity
		FROM StockDB.dbo.Inventory i
			JOIN StockDB.dbo.InventoryDetail d ON i.InventoryId = d.InventoryId	

		WHERE  i.SubsidiaryId = @SubId AND i.IsDeleted = 0 AND d.IsDeleted = 0 AND i.IsApproved = 1 AND i.InventoryTypeId = @INVENTORY_TYPE_OUTPUT AND  d.OrderCode IS NOT NULL AND d.OrderCode <> ''

		GROUP BY d.OrderCode, d.ProductId
	) outp ON inp.OrderCode = outp.OrderCode AND inp.ProductId = outp.ProductId
),
--Get merge all inout whichs have OrderCode by production order (exept by order)
inoutByProduction AS
(
	SELECT 
		isnull(inp.ProductionOrderCode, outp.ProductionOrderCode) ProductionOrderCode, 
		ISNULL(inp.CustomerId, outp.CustomerId) customerId,
		ISNULL(inp.ProductId, outp.ProductId) productId,
		inp.PrimaryQuantity inventoryInQuantity,
		outp.PrimaryQuantity inventoryOutQuantity,
		inp.inventoryInDate,
		outp.inventoryOutDate
	FROM
	(
		SELECT d.ProductionOrderCode, d.ProductId, MIN(i.[Date]) inventoryInDate, max(i.CustomerId) CustomerId, sum(d.PrimaryQuantity) AS PrimaryQuantity
		FROM StockDB.dbo.Inventory i
			JOIN StockDB.dbo.InventoryDetail d ON i.InventoryId = d.InventoryId	

		WHERE  i.SubsidiaryId = @SubId AND i.IsDeleted = 0 AND d.IsDeleted = 0 AND i.IsApproved = 1 AND i.InventoryTypeId = @INVENTORY_TYPE_INPUT AND (d.OrderCode IS NULL OR d.OrderCode = '') AND (d.ProductionOrderCode IS NOT NULL AND d.ProductionOrderCode <> '')

		GROUP BY d.ProductionOrderCode, d.ProductId
	) inp

	FULL OUTER JOIN
	(
		SELECT d.ProductionOrderCode, d.ProductId, MIN(i.[Date]) inventoryOutDate, max(i.CustomerId) CustomerId, sum(d.PrimaryQuantity) AS PrimaryQuantity
		FROM StockDB.dbo.Inventory i
			JOIN StockDB.dbo.InventoryDetail d ON i.InventoryId = d.InventoryId	

		WHERE  i.SubsidiaryId = @SubId AND i.IsDeleted = 0 AND d.IsDeleted = 0 AND i.IsApproved = 1 AND i.InventoryTypeId = @INVENTORY_TYPE_OUTPUT AND (d.OrderCode IS NULL OR d.OrderCode = '') AND (d.ProductionOrderCode IS NOT NULL AND d.ProductionOrderCode <> '')

		GROUP BY d.ProductionOrderCode, d.ProductId
	) outp ON inp.ProductionOrderCode = outp.ProductionOrderCode AND inp.ProductId = outp.ProductId
)
/*
* Be carefull when change columns (type, quantity,...) ref to report 120 and 158
*/

INSERT INTO @result
	
SELECT
* 
	
FROM
(
	SELECT
		Dense_rank() OVER (ORDER BY ord.ngay_ct DESC, ord.so_ct) sortOrder,		
		ROW_NUMBER() OVER (PARTITION BY ord.ngay_ct, ord.so_ct 
			ORDER BY CASE WHEN inoutByOrder.inventoryInDate< ord.inventoryInDate THEN inoutByOrder.inventoryInDate ELSE ord.inventoryInDate END, 
			product.F_Id
		) sortProduct,

		ord.VoucherBill_F_Id voucherBill_F_Id,
		ord.VoucherTypeId voucherTypeId,
		ord.ngay_ct orderDate,
		ord.so_ct orderCode,
		ord.productionOrderIds,
		ord.productionDate,
		ord.ngay_gh deliverRequestDate,
		p.F_Id partnerId,
		p.CustomerId,
		p.PartnerCode partnerCode,
		p.PartnerName partnerName,
		product.F_Id productId,
		product.ProductCode productCode,
		product.ProductName productName,
		product.UnitId_UnitName unitName,
		ord.so_luong orderQuantity,
		ord.productionQuantity,
		ord.productionOrderCodes,
		ISNULL(inoutByOrder.inventoryInQuantity,0) + ISNULL(ord.inventoryInQuantity,0) inventoryInQuantity,
		ISNULL(inoutByOrder.inventoryOutQuantity,0)  + ISNULL(ord.inventoryOutQuantity,0) inventoryOutQuantity,
		(ord.so_luong - ISNULL(inoutByOrder.inventoryOutQuantity,0) - ISNULL(ord.inventoryOutQuantity,0)) deltaOrderAndOut,
		CASE WHEN inoutByOrder.inventoryInDate< ord.inventoryInDate THEN inoutByOrder.inventoryInDate ELSE ord.inventoryInDate END inventoryInDate,
		e.UserId,
		e.FullName manager
	FROM
	(
		SELECT v.VoucherBill_F_Id, v.VoucherTypeId, v.so_ct, v.vthhtp, 
			max(v.ngay_ct) ngay_ct, 
			max(v.ngay_gh) ngay_gh, 
			max(v.kh0) partnerId, 
			sum(v.so_luong) so_luong, 
			sum(m.productionQuantity) productionQuantity,
			max(m.productionDate) productionDate,
		
			min(inoutProd.inventoryInDate) inventoryInDate,
			min(inoutProd.inventoryOutDate) inventoryOutDate,
			sum(inoutProd.inventoryInQuantity) inventoryInQuantity,
			sum(inoutProd.inventoryOutQuantity) inventoryOutQuantity,

			string_agg(CONCAT(m.ProductionOrderId,''),',') productionOrderIds,
			string_agg(m.ProductionOrderCode,',') productionOrderCodes
		FROM 
			(
			SELECT 
				v.so_ct,
				v.vthhtp, 
				MAX(v.VoucherBill_F_Id) VoucherBill_F_Id, 
				MAX(v.VoucherTypeId) VoucherTypeId, 
				MAX(v.ngay_ct) ngay_ct, 
				MAX(v.ngay_gh) ngay_gh,
				MAX(v.kh0) kh0, 
				SUM(v.so_luong) so_luong
			FROM  PurchaseOrderDB.dbo.VoucherBill o
				JOIN PurchaseOrderDB.dbo.VoucherValueRow v ON o.F_Id = v.VoucherBill_F_Id
				JOIN PurchaseOrderDB.dbo.VoucherType vt ON o.VoucherTypeId = vt.VoucherTypeId
				WHERE v.SubsidiaryId = @SubId AND v.IsDeleted = 0 AND o.IsDeleted = 0 AND v.IsBillEntry = 0 AND vt.VoucherTypeCode LIKE N'CTBH_DON_HANG%'--	AND v.so_ct='202100270'	
				GROUP BY v.so_ct, v.vthhtp
			) v
			LEFT JOIN (
				SELECT ProductionOrderId, ProductionOrderCode, ProductId, OrderCode, max([Date]) productionDate, sum(Quantity) productionQuantity 
				FROM [ManufacturingDB].dbo.vProductionOrderDetailSimple 
				GROUP BY ProductionOrderId, ProductionOrderCode, ProductId, OrderCode
			)m ON v.so_ct = m.orderCode AND v.vthhtp = m.productId
			OUTER APPLY(
				SELECT ProductionOrderCode, 
						MAX(customerId) customerId,
						productId,
						SUM(inventoryInQuantity) inventoryInQuantity,
						SUM(inventoryOutQuantity) inventoryOutQuantity,
						MIN(inventoryInDate) inventoryInDate,
						MIN(inventoryOutDate) inventoryOutDate
				FROM inoutByProduction 
				WHERE m.ProductId = inoutByProduction.ProductId AND inoutByProduction.ProductionOrderCode = m.ProductionOrderCode
				GROUP BY ProductionOrderCode, productId
			) inoutProd

		GROUP BY v.VoucherBill_F_Id, v.VoucherTypeId, v.so_ct, v.vthhtp
	) ord 

	LEFT JOIN inoutByOrder ON ord.so_ct = inoutByOrder.orderCode AND ord.vthhtp = inoutByOrder.productId

	LEFT JOIN PurchaseOrderDB.dbo.v_Partner p ON ord.partnerId = p.F_Id
	LEFT JOIN PurchaseOrderDB.dbo.v_Product product ON ord.vthhtp = product.F_Id
	LEFT JOIN [OrganizationDB].[dbo].Employee e ON p.DebtManagerUserId = e.UserId

	WHERE ord.ngay_gh BETWEEN @FromDate AND @ToDate
	AND (@ProductId =0 OR ord.vthhtp = @ProductId)
	AND (@OrderCode = '' OR ord.so_ct = @OrderCode)
) r WHERE r.inventoryInQuantity < r.orderQuantity
;

SELECT * FROM @result  --ORDER BY r.sortOrder, r.sortProduct
END

GO

USE ManufacturingDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_ProductionHandover_GetInventoryRequirementByProductionOrder]
  @ProductionOrderId AS bigint ,
  @SubId AS int 
AS
BEGIN
	DECLARE @ProductionOrderCode nvarchar(128);
	SELECT @ProductionOrderCode = po.ProductionOrderCode FROM ProductionOrder po WHERE po.ProductionOrderId = @ProductionOrderId;
	EXEC [StockDB].dbo.asp_ProductionHandover_GetInventoryRequirementByProductionOrder @ProductionOrderCode = @ProductionOrderCode, @SubId = @SubId
END

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TINH_CHAT_LD] AS SELECT  _TINH_CHAT_LD.F_Id, _TINH_CHAT_LD.UpdatedDatetimeUtc, _TINH_CHAT_LD.workPropertyTitle, _TINH_CHAT_LD.value, _TINH_CHAT_LD.workState, _TRANG_THAI_LAO_DONG_0.[title] AS [workState_title] FROM [MasterDB].[dbo]._TINH_CHAT_LD LEFT JOIN [MasterDB].[dbo].v_TRANG_THAI_LAO_DONG AS _TRANG_THAI_LAO_DONG_0 ON _TINH_CHAT_LD.workState = _TRANG_THAI_LAO_DONG_0.F_Id WHERE _TINH_CHAT_LD.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Currency] AS SELECT  _Currency.F_Id, _Currency.UpdatedDatetimeUtc, _Currency.CurrencyName, _Currency.CurrencyCode, _Currency.CurrencyCountry, _Currency.IsPrimary, _Currency.DecimalPlace, _Currency.ty_gia, _nations_0.[NationName] AS [CurrencyCountry_NationName] FROM [MasterDB].[dbo]._Currency LEFT JOIN [MasterDB].[dbo].v_nations AS _nations_0 ON _Currency.CurrencyCountry = _nations_0.F_Id WHERE _Currency.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_BAO_GIA_INFO_Search] AS 
								WITH tmp AS (
		SELECT r.VoucherBill_F_Id, MAX(F_Id) as F_Id
		FROM [PurchaseOrderDB].dbo.VoucherValueRow r
		INNER JOIN [PurchaseOrderDB].dbo.VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND t.VoucherTypeCode = 'CTBH_BAO_GIA' AND r.CensorStatusId = 1
		GROUP BY r.VoucherBill_F_Id    
)
SELECT 
	r.VoucherBill_F_Id F_Id, 
	r.VoucherTypeId,
	r.so_ct,
	r.SubsidiaryId,
	r.ngay_ct,
	r.kh0, 
	r.noi_dung,
	r.ngay_gh,
	r.dktt,
	r.dkgh,
	r.kh_vt,
	r.loai_tien,
	r.ty_gia,
	r.CensorStatus,
	p1.PartnerCode kh0_PartnerCode,
	p1.PartnerName kh0_PartnerName,
	p1.Address kh0_Address,
	c.CurrencyCode loai_tien_CurrencyCode,
	r.nguoi_phu_trach,
	u.FullName nguoi_phu_trach_FullName,
	r.thhl,
	s.CensorStatusName CensorStatus_CensorStatusName
FROM tmp
INNER JOIN [PurchaseOrderDB].dbo.VoucherValueRow r ON tmp.F_Id = r.F_Id
LEFT JOIN v_Partner p1 ON r.kh0 = p1.F_Id
LEFT JOIN v_Currency c ON r.loai_tien = c.F_Id
LEFT JOIN v_User u ON r.nguoi_phu_trach = u.F_Id
LEFT JOIN v_CensorStatus s ON r.CensorStatus = s.CensorStatusId

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_AccountingAccount] AS SELECT  _AccountingAccount.F_Id, _AccountingAccount.UpdatedDatetimeUtc, _AccountingAccount.ParentId, _AccountingAccount.AccountNumber, _AccountingAccount.AccountNameVi, _AccountingAccount.AccountNameEn, _AccountingAccount.Currency, _AccountingAccount.AccountNote, _AccountingAccount.IsStock, _AccountingAccount.IsLiability, _AccountingAccount.IsForeignCurrency, _AccountingAccount.IsBranch, _AccountingAccount.IsGroup, _Currency_0.[CurrencyCode] AS [Currency_CurrencyCode] FROM [MasterDB].[dbo]._AccountingAccount LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_0 ON _AccountingAccount.Currency = _Currency_0.F_Id WHERE _AccountingAccount.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_LoanConvenant] AS SELECT  _LoanConvenant.F_Id, _LoanConvenant.UpdatedDatetimeUtc, _LoanConvenant.ConvenantNumber, _LoanConvenant.PaymentTerms, _LoanConvenant.DebtAcknowledgmentDate, _LoanConvenant.DueDate, _LoanConvenant.LoanNumber, _LoanConvenant.LoanCurrency, _LoanConvenant.InterestRepaymentTermType, _LoanConvenant.InterestRepaymentTerm, _LoanConvenant.PrincipalRepaymentTermType, _LoanConvenant.PrincipalRepaymentTermOfPeriod, _LoanConvenant.PeriodAmountPaid, _LoanConvenant.InterestRate, _LoanConvenant.bank_name, _LoanConvenant.No_acc_loan_bank, _LoanConvenant.PrincipalRepaymentTerm1, _LoanConvenant.IsBorrow, _LoanConvenant.Noi_dung, _timingType_0.[Name] AS [PaymentTerms_Name], _Currency_1.[CurrencyName] AS [LoanCurrency_CurrencyName], _timingType_2.[Name] AS [InterestRepaymentTermType_Name], _timingType_3.[Name] AS [PrincipalRepaymentTermType_Name], _Partner_4.[PartnerName] AS [bank_name_PartnerName] FROM [MasterDB].[dbo]._LoanConvenant LEFT JOIN [MasterDB].[dbo].v_timingType AS _timingType_0 ON _LoanConvenant.PaymentTerms = _timingType_0.F_Id LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_1 ON _LoanConvenant.LoanCurrency = _Currency_1.F_Id LEFT JOIN [MasterDB].[dbo].v_timingType AS _timingType_2 ON _LoanConvenant.InterestRepaymentTermType = _timingType_2.F_Id LEFT JOIN [MasterDB].[dbo].v_timingType AS _timingType_3 ON _LoanConvenant.PrincipalRepaymentTermType = _timingType_3.F_Id LEFT JOIN [MasterDB].[dbo].v_Partner AS _Partner_4 ON _LoanConvenant.bank_name = _Partner_4.F_Id WHERE _LoanConvenant.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_Contract] AS SELECT  _Contract.F_Id, _Contract.UpdatedDatetimeUtc, _Contract.ContractNumber, _Contract.ContractCode, _Contract.ContractName, _Contract.ContractSigningDate, _Contract.DeliveryConditions, _Contract.ContractValue, _Contract.ContractCurrency, _Contract.ContractPaymentTerms, _Contract.WarrantyPeriod, _Contract.DeliveryPlace, _Contract.ContractNote, _Currency_0.[CurrencyCode] AS [ContractCurrency_CurrencyCode] FROM [MasterDB].[dbo]._Contract LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_0 ON _Contract.ContractCurrency = _Currency_0.F_Id WHERE _Contract.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_nsnn] AS SELECT  _nsnn.F_Id, _nsnn.UpdatedDatetimeUtc, _nsnn.Code, _nsnn.Name, _nsnn.Level, _Cap_NSNN_0.[Ten_cap_QLNS] AS [Level_Ten_cap_QLNS] FROM [MasterDB].[dbo]._nsnn LEFT JOIN [MasterDB].[dbo].v_Cap_NSNN AS _Cap_NSNN_0 ON _nsnn.Level = _Cap_NSNN_0.Ten_cap_QLNS WHERE _nsnn.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_FixedAsset] AS SELECT  _FixedAsset.F_Id, _FixedAsset.UpdatedDatetimeUtc, _FixedAsset.FixedAssetCode, _FixedAsset.FixedAssetName, _FixedAsset.FixedAssetUnit, _FixedAsset.FixedAssetUsedDate, _FixedAsset.FixedAssetNumber, _FixedAsset.FixedAssetCountry, _FixedAsset.FixedAssetDepreciationCriteria, _FixedAsset.FixedAssetTotalDepreciationCriteria, _FixedAsset.FixedAssetYearNumber, _FixedAsset.FixedAssetNote, _FixedAsset.FixedAssetQty, _FixedAsset.FixedAssetTk, _FixedAsset.FixedAssetUsedUsed, _AccountingAccount_0.[AccountNumber] AS [FixedAssetTk_AccountNumber], _Department_1.[DepartmentName] AS [FixedAssetUsedUsed_DepartmentName] FROM [MasterDB].[dbo]._FixedAsset LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_0 ON _FixedAsset.FixedAssetTk = _AccountingAccount_0.F_Id LEFT JOIN [MasterDB].[dbo].v_Department AS _Department_1 ON _FixedAsset.FixedAssetUsedUsed = _Department_1.F_Id WHERE _FixedAsset.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_TK_nganhang_DN] AS SELECT  _TK_nganhang_DN.F_Id, _TK_nganhang_DN.UpdatedDatetimeUtc, _TK_nganhang_DN.Ten_tk, _TK_nganhang_DN.So_TKNH, _TK_nganhang_DN.Loai_tien, _TK_nganhang_DN.Ngan_hang, _TK_nganhang_DN.Chi_nhanh_NH, _TK_nganhang_DN.Tinh_TP, _TK_nganhang_DN.Code_NH, _TK_nganhang_DN.TK_HT, _Currency_0.[CurrencyCode] AS [Loai_tien_CurrencyCode], _AccountingAccount_1.[AccountNumber] AS [TK_HT_AccountNumber] FROM [MasterDB].[dbo]._TK_nganhang_DN LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_0 ON _TK_nganhang_DN.Loai_tien = _Currency_0.F_Id LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_1 ON _TK_nganhang_DN.TK_HT = _AccountingAccount_1.F_Id WHERE _TK_nganhang_DN.IsDeleted = 0

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_TINH_GIA_INFO] AS 
							WITH tmp AS (
		SELECT r.VoucherBill_F_Id, MAX(F_Id) as F_Id
		FROM [PurchaseOrderDB].dbo.VoucherValueRow r
		INNER JOIN [PurchaseOrderDB].dbo.VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND t.VoucherTypeCode = 'CTBH_TINH_GIA' AND r.CensorStatusId = 1
		GROUP BY r.VoucherBill_F_Id    
)
SELECT 
	r.VoucherBill_F_Id F_Id, 
	r.VoucherTypeId,
	r.so_ct,
	r.SubsidiaryId,
	r.ngay_ct,
	r.kh0, 
	r.noi_dung,
	r.loai_tien,
	r.attachment,
	r.ty_gia,
	r.CensorStatus,
	p1.PartnerCode kh0_PartnerCode,
	p1.PartnerName kh0_PartnerName,
	p1.Address kh0_Address,
	c.CurrencyCode loai_tien_CurrencyCode,
	r.nguoi_phu_trach,
	u.FullName nguoi_phu_trach_FullName,
	r.thhl,
	s.CensorStatusName CensorStatus_CensorStatusName
FROM tmp
INNER JOIN [PurchaseOrderDB].dbo.VoucherValueRow r ON tmp.F_Id = r.F_Id
LEFT JOIN v_Partner p1 ON r.kh0 = p1.F_Id
LEFT JOIN v_Currency c ON r.loai_tien = c.F_Id
LEFT JOIN v_User u ON r.nguoi_phu_trach = u.F_Id
LEFT JOIN v_CensorStatus s ON r.CensorStatus = s.CensorStatusId
							;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_BAO_GIA_XK_INFO] AS 
							WITH tmp AS (
		SELECT r.VoucherBill_F_Id, MAX(F_Id) as F_Id
		FROM [PurchaseOrderDB].dbo.VoucherValueRow r
		INNER JOIN [PurchaseOrderDB].dbo.VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND t.VoucherTypeCode = 'CTBH_BAO_GIA_XK' AND r.CensorStatusId = 1
		GROUP BY r.VoucherBill_F_Id    
)
SELECT 
	r.VoucherBill_F_Id F_Id,
	r.VoucherTypeId,	
	r.so_ct,
	r.SubsidiaryId,
	r.ngay_ct,
	r.kh0, 
	r.noi_dung,
	r.ngay_gh,
	r.dktt,
	r.dkgh,
	r.kh_vt,
	r.loai_tien,
	r.ty_gia,
	r.CensorStatus,
	p1.PartnerCode kh0_PartnerCode,
	p1.PartnerName kh0_PartnerName,
	p1.Address kh0_Address,
	c.CurrencyCode loai_tien_CurrencyCode,
	r.nguoi_phu_trach,
	u.FullName nguoi_phu_trach_FullName,
	r.thhl,
	s.CensorStatusName CensorStatus_CensorStatusName
FROM tmp
INNER JOIN [PurchaseOrderDB].dbo.VoucherValueRow r ON tmp.F_Id = r.F_Id
LEFT JOIN v_Partner p1 ON r.kh0 = p1.F_Id
LEFT JOIN v_Currency c ON r.loai_tien = c.F_Id
LEFT JOIN v_User u ON r.nguoi_phu_trach = u.F_Id
LEFT JOIN v_CensorStatus s ON r.CensorStatus = s.CensorStatusId

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_DON_HANG_ALL_INFO] AS 
							WITH tmp AS (
		SELECT r.VoucherBill_F_Id, MAX(F_Id) as F_Id
		FROM PurchaseOrderDB.dbo.VoucherValueRow r
		INNER JOIN PurchaseOrderDB.dbo.VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND (t.VoucherTypeCode = 'CTBH_DON_HANG_XK' OR t.VoucherTypeCode = 'CTBH_DON_HANG') AND r.CensorStatusId = 1
		GROUP BY r.VoucherBill_F_Id    
)
SELECT 
	r.VoucherBill_F_Id F_Id, 
	r.VoucherTypeId,
	r.so_ct,
	r.SubsidiaryId,
	r.ngay_ct,
	r.ma_bg_bh,
	r.attachment,
	r.ong_ba,
	r.bo_phan,
	r.kh0, 
	r.noi_dung,
	r.ngay_gh,
	r.kh_nguoi_lh,
	r.dktt,
	r.dkgh,
	r.kh_vt,
	r.loai_tien,
	r.ty_gia,
	r.so_po_dt,
	p1.PartnerCode kh_vt_PartnerCode,
	p2.PartnerCode kh0_PartnerCode,
	p2.PartnerName kh0_PartnerName,
	p2.Address kh0_Address,
	c.CurrencyCode loai_tien_CurrencyCode,
	d.DepartmentCode bo_phan_DepartmentCode
FROM tmp
INNER JOIN PurchaseOrderDB.dbo.VoucherValueRow r ON tmp.F_Id = r.F_Id
LEFT JOIN MasterDB.dbo.v_Partner p1 ON r.kh_vt = p1.F_Id
LEFT JOIN MasterDB.dbo.v_Partner p2 ON r.kh0 = p2.F_Id
LEFT JOIN MasterDB.dbo.v_Currency c ON r.loai_tien = c.F_Id
LEFT JOIN MasterDB.dbo.v_Department d ON r.bo_phan = d.F_Id

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_FixedAsset] AS SELECT  _FixedAsset.F_Id, _FixedAsset.UpdatedDatetimeUtc, _FixedAsset.FixedAssetCode, _FixedAsset.FixedAssetName, _FixedAsset.FixedAssetUnit, _FixedAsset.FixedAssetUsedDate, _FixedAsset.FixedAssetNumber, _FixedAsset.FixedAssetCountry, _FixedAsset.FixedAssetDepreciationCriteria, _FixedAsset.FixedAssetTotalDepreciationCriteria, _FixedAsset.FixedAssetYearNumber, _FixedAsset.FixedAssetNote, _FixedAsset.FixedAssetQty, _FixedAsset.FixedAssetTk, _FixedAsset.FixedAssetUsedUsed, _AccountingAccount_0.[AccountNumber] AS [FixedAssetTk_AccountNumber], _Department_1.[DepartmentName] AS [FixedAssetUsedUsed_DepartmentName] FROM [MasterDB].[dbo]._FixedAsset LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_0 ON _FixedAsset.FixedAssetTk = _AccountingAccount_0.F_Id LEFT JOIN [MasterDB].[dbo].v_Department AS _Department_1 ON _FixedAsset.FixedAssetUsedUsed = _Department_1.F_Id WHERE _FixedAsset.IsDeleted = 0

GO

USE OrganizationDB
GO
CREATE OR ALTER VIEW [dbo].[v_HDLD_Current] AS 
							WITH hd AS (
	SELECT
		ROW_NUMBER() OVER(PARTITION BY hd.nhan_vien ORDER BY hd.ngay_co_hieu_luc DESC) RowNumber,
		hd.HrBill_F_Id F_Id,
		hd.nhan_vien,
		hd.so_ct,
		hd.loai_hdld,
		loaiHd.title loai_hdld_title
	FROM OrganizationDB.dbo._HR_CTNS_HDLD_General_Info hd 
		LEFT JOIN dbo.v_LOAI_HDLD loaiHd ON loaiHd.F_Id = hd.loai_hdld
	WHERE hd.IsDeleted = 0 AND GETUTCDATE() > hd.ngay_co_hieu_luc
) 
SELECT 
		hd.F_Id,
		hd.nhan_vien,
		hd.so_ct,
		hd.loai_hdld,
		hd.loai_hdld_title
FROM hd
WHERE hd.RowNumber = 1
							;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_BAO_GIA_XK_INFO] AS 
							WITH tmp AS (
		SELECT r.VoucherBill_F_Id, MAX(F_Id) as F_Id
		FROM [PurchaseOrderDB].dbo.VoucherValueRow r
		INNER JOIN [PurchaseOrderDB].dbo.VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND t.VoucherTypeCode = 'CTBH_BAO_GIA_XK' AND r.CensorStatusId = 1
		GROUP BY r.VoucherBill_F_Id    
)
SELECT 
	r.VoucherBill_F_Id F_Id,
	r.VoucherTypeId,	
	r.so_ct,
	r.SubsidiaryId,
	r.ngay_ct,
	r.kh0, 
	r.noi_dung,
	r.ngay_gh,
	r.dktt,
	r.dkgh,
	r.kh_vt,
	r.loai_tien,
	r.ty_gia,
	r.CensorStatus,
	p1.PartnerCode kh0_PartnerCode,
	p1.PartnerName kh0_PartnerName,
	p1.Address kh0_Address,
	c.CurrencyCode loai_tien_CurrencyCode,
	r.nguoi_phu_trach,
	u.FullName nguoi_phu_trach_FullName,
	r.thhl,
	s.CensorStatusName CensorStatus_CensorStatusName
FROM tmp
INNER JOIN [PurchaseOrderDB].dbo.VoucherValueRow r ON tmp.F_Id = r.F_Id
LEFT JOIN v_Partner p1 ON r.kh0 = p1.F_Id
LEFT JOIN v_Currency c ON r.loai_tien = c.F_Id
LEFT JOIN v_User u ON r.nguoi_phu_trach = u.F_Id
LEFT JOIN v_CensorStatus s ON r.CensorStatus = s.CensorStatusId

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_DON_HANG_ALL_INFO] AS 
							WITH tmp AS (
		SELECT r.VoucherBill_F_Id, MAX(F_Id) as F_Id
		FROM PurchaseOrderDB.dbo.VoucherValueRow r
		INNER JOIN PurchaseOrderDB.dbo.VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND (t.VoucherTypeCode = 'CTBH_DON_HANG_XK' OR t.VoucherTypeCode = 'CTBH_DON_HANG') AND r.CensorStatusId = 1
		GROUP BY r.VoucherBill_F_Id    
)
SELECT 
	r.VoucherBill_F_Id F_Id, 
	r.VoucherTypeId,
	r.so_ct,
	r.SubsidiaryId,
	r.ngay_ct,
	r.ma_bg_bh,
	r.attachment,
	r.ong_ba,
	r.bo_phan,
	r.kh0, 
	r.noi_dung,
	r.ngay_gh,
	r.kh_nguoi_lh,
	r.dktt,
	r.dkgh,
	r.kh_vt,
	r.loai_tien,
	r.ty_gia,
	r.so_po_dt,
	p1.PartnerCode kh_vt_PartnerCode,
	p2.PartnerCode kh0_PartnerCode,
	p2.PartnerName kh0_PartnerName,
	p2.Address kh0_Address,
	c.CurrencyCode loai_tien_CurrencyCode,
	d.DepartmentCode bo_phan_DepartmentCode
FROM tmp
INNER JOIN PurchaseOrderDB.dbo.VoucherValueRow r ON tmp.F_Id = r.F_Id
LEFT JOIN MasterDB.dbo.v_Partner p1 ON r.kh_vt = p1.F_Id
LEFT JOIN MasterDB.dbo.v_Partner p2 ON r.kh0 = p2.F_Id
LEFT JOIN MasterDB.dbo.v_Currency c ON r.loai_tien = c.F_Id
LEFT JOIN MasterDB.dbo.v_Department d ON r.bo_phan = d.F_Id

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_VoucherType_Order_Status]--report 120
	@SubId INT,
	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@OrderCode NVARCHAR(128) = '',
	@ProductId INT,
	@PartnerId NVARCHAR(128),
	@ManagerUserId INT
AS
BEGIN
	SET TRAN ISOLATION LEVEL READ UNCOMMITTED;
	DECLARE @INVENTORY_TYPE_INPUT INT = 1
	DECLARE @INVENTORY_TYPE_OUTPUT INT = 2

	DECLARE @result _VoucherTypeOrderStatus;

	SET @PartnerId = ISNULL(@PartnerId,'')
	SET @ProductId = ISNULL(@ProductId,0)
	SET @OrderCode = ISNULL(@OrderCode,'')


	--Get merge all inout whichs have OrderCode by order
	;WITH inoutByOrder AS
	(
		SELECT 
			isnull(inp.OrderCode, outp.OrderCode) orderCode, 
			ISNULL(inp.CustomerId, outp.CustomerId) customerId,
			ISNULL(inp.ProductId, outp.ProductId) productId,
			inp.PrimaryQuantity inventoryInQuantity,
			outp.PrimaryQuantity inventoryOutQuantity,
			inp.inventoryInDate,
			outp.inventoryOutDate
		FROM
		(
			SELECT d.OrderCode, d.ProductId, MIN(i.[Date]) inventoryInDate, max(i.CustomerId) CustomerId, sum(d.PrimaryQuantity) AS PrimaryQuantity
			FROM StockDB.dbo.Inventory i
				JOIN StockDB.dbo.InventoryDetail d ON i.InventoryId = d.InventoryId	

			WHERE i.SubsidiaryId = @SubId AND i.IsDeleted = 0 AND d.IsDeleted = 0 AND i.IsApproved = 1 AND i.InventoryTypeId = @INVENTORY_TYPE_INPUT AND d.OrderCode IS NOT NULL AND d.OrderCode <> ''
				AND (@OrderCode = '' OR d.OrderCode = @OrderCode)
			GROUP BY d.OrderCode, d.ProductId
		) inp

		FULL OUTER JOIN
		(
			SELECT d.OrderCode, d.ProductId, MIN(i.[Date]) inventoryOutDate, max(i.CustomerId) CustomerId, sum(d.PrimaryQuantity) AS PrimaryQuantity
			FROM StockDB.dbo.Inventory i
				JOIN StockDB.dbo.InventoryDetail d ON i.InventoryId = d.InventoryId	

			WHERE  i.SubsidiaryId = @SubId AND i.IsDeleted = 0 AND d.IsDeleted = 0 AND i.IsApproved = 1 AND i.InventoryTypeId = @INVENTORY_TYPE_OUTPUT AND  d.OrderCode IS NOT NULL AND d.OrderCode <> ''
				AND (@OrderCode = '' OR d.OrderCode = @OrderCode)
			GROUP BY d.OrderCode, d.ProductId
		) outp ON inp.OrderCode = outp.OrderCode AND inp.ProductId = outp.ProductId
	),
	--Get merge all inout whichs have OrderCode by production order (exept by order)
	inoutByProduction AS
	(
		SELECT 
			isnull(inp.ProductionOrderCode, outp.ProductionOrderCode) ProductionOrderCode, 
			ISNULL(inp.CustomerId, outp.CustomerId) customerId,
			ISNULL(inp.ProductId, outp.ProductId) productId,
			inp.PrimaryQuantity inventoryInQuantity,
			outp.PrimaryQuantity inventoryOutQuantity,
			inp.inventoryInDate,
			outp.inventoryOutDate
		FROM
		(
			SELECT d.ProductionOrderCode, d.ProductId, MIN(i.[Date]) inventoryInDate, max(i.CustomerId) CustomerId, sum(d.PrimaryQuantity) AS PrimaryQuantity
			FROM StockDB.dbo.Inventory i
				JOIN StockDB.dbo.InventoryDetail d ON i.InventoryId = d.InventoryId	

			WHERE  i.SubsidiaryId = @SubId AND i.IsDeleted = 0 AND d.IsDeleted = 0 AND i.IsApproved = 1 AND i.InventoryTypeId = @INVENTORY_TYPE_INPUT AND (d.OrderCode IS NULL OR d.OrderCode = '') AND (d.ProductionOrderCode IS NOT NULL AND d.ProductionOrderCode <> '')

			GROUP BY d.ProductionOrderCode, d.ProductId
		) inp

		FULL OUTER JOIN
		(
			SELECT d.ProductionOrderCode, d.ProductId, MIN(i.[Date]) inventoryOutDate, max(i.CustomerId) CustomerId, sum(d.PrimaryQuantity) AS PrimaryQuantity
			FROM StockDB.dbo.Inventory i
				JOIN StockDB.dbo.InventoryDetail d ON i.InventoryId = d.InventoryId	

			WHERE  i.SubsidiaryId = @SubId AND i.IsDeleted = 0 AND d.IsDeleted = 0 AND i.IsApproved = 1 AND i.InventoryTypeId = @INVENTORY_TYPE_OUTPUT AND (d.OrderCode IS NULL OR d.OrderCode = '') AND (d.ProductionOrderCode IS NOT NULL AND d.ProductionOrderCode <> '')

			GROUP BY d.ProductionOrderCode, d.ProductId
		) outp ON inp.ProductionOrderCode = outp.ProductionOrderCode AND inp.ProductId = outp.ProductId
	)
	/*
	* Be carefull when change columns (type, quantity,...) ref to report 120 and 158
	*/

	--INSERT INTO @result
	
	SELECT
	* 
	
	FROM
	(
		SELECT
			Dense_rank() OVER (ORDER BY ord.ngay_ct DESC, ord.so_ct) sortOrder,		
			ROW_NUMBER() OVER (PARTITION BY ord.ngay_ct, ord.so_ct 
				ORDER BY CASE WHEN inoutByOrder.inventoryInDate< ord.inventoryInDate THEN inoutByOrder.inventoryInDate ELSE ord.inventoryInDate END, 
				product.F_Id
			) sortProduct,

			ord.VoucherBill_F_Id voucherBill_F_Id,
			ord.VoucherTypeId voucherTypeId,
			ord.ngay_ct orderDate,
			ord.so_ct orderCode,
			ord.productionOrderIds,
			ord.productionDate,
			ord.ngay_gh deliverRequestDate,
			p.F_Id partnerId,
			p.CustomerId,
			p.PartnerCode partnerCode,
			p.PartnerName partnerName,
			product.F_Id productId,
			product.ProductCode productCode,
			product.ProductName productName,
			product.UnitId_UnitName unitName,
			ord.so_luong orderQuantity,
			ord.productionQuantity,
			ord.productionOrderCodes,
			ISNULL(inoutByOrder.inventoryInQuantity,0) + ISNULL(ord.inventoryInQuantity,0) inventoryInQuantity,
			ISNULL(inoutByOrder.inventoryOutQuantity,0)  + ISNULL(ord.inventoryOutQuantity,0) inventoryOutQuantity,
			(ord.so_luong - ISNULL(inoutByOrder.inventoryOutQuantity,0) - ISNULL(ord.inventoryOutQuantity,0)) deltaOrderAndOut,
			CASE WHEN inoutByOrder.inventoryInDate< ord.inventoryInDate THEN inoutByOrder.inventoryInDate ELSE ord.inventoryInDate END inventoryInDate,
			e.UserId,
			e.FullName manager
		FROM
		(
			SELECT v.VoucherBill_F_Id, v.VoucherTypeId, v.so_ct, v.vthhtp, 
				max(v.ngay_ct) ngay_ct, 
				max(v.ngay_gh) ngay_gh, 
				max(v.kh0) partnerId, 
				sum(v.so_luong) so_luong, 
				sum(m.productionQuantity) productionQuantity,
				max(m.productionDate) productionDate,
		
				min(inoutProd.inventoryInDate) inventoryInDate,
				min(inoutProd.inventoryOutDate) inventoryOutDate,
				sum(inoutProd.inventoryInQuantity) inventoryInQuantity,
				sum(inoutProd.inventoryOutQuantity) inventoryOutQuantity,

				string_agg(CONCAT(m.ProductionOrderId,''),',') productionOrderIds,
				string_agg(m.ProductionOrderCode,',') productionOrderCodes
			FROM 
				(
				SELECT 
					v.so_ct,
					v.vthhtp, 
					MAX(v.VoucherBill_F_Id) VoucherBill_F_Id, 
					MAX(v.VoucherTypeId) VoucherTypeId, 
					MAX(v.ngay_ct) ngay_ct, 
					MAX(v.ngay_gh) ngay_gh,
					MAX(v.kh0) kh0, 
					SUM(v.so_luong) so_luong
				FROM dbo.VoucherBill o
					JOIN dbo.VoucherValueRow v ON o.F_Id = v.VoucherBill_F_Id
					JOIN dbo.VoucherType vt ON o.VoucherTypeId = vt.VoucherTypeId
					WHERE v.SubsidiaryId = @SubId AND v.IsDeleted = 0 AND o.IsDeleted = 0 AND v.IsBillEntry = 0 AND vt.VoucherTypeCode LIKE N'CTBH_DON_HANG%'--	AND v.so_ct='202100270'	
					AND (@OrderCode = '' OR v.so_ct = @OrderCode)
					GROUP BY v.so_ct, v.vthhtp
				) v
				LEFT JOIN (
					SELECT ProductionOrderId, ProductionOrderCode, ProductId, OrderCode, max([Date]) productionDate, sum(Quantity) productionQuantity 
					FROM [ManufacturingDB].dbo.vProductionOrderDetailSimple 
					GROUP BY ProductionOrderId, ProductionOrderCode, ProductId, OrderCode
				)m ON v.so_ct = m.orderCode AND v.vthhtp = m.productId
				OUTER APPLY(
					SELECT ProductionOrderCode, 
							MAX(customerId) customerId,
							productId,
							SUM(inventoryInQuantity) inventoryInQuantity,
							SUM(inventoryOutQuantity) inventoryOutQuantity,
							MIN(inventoryInDate) inventoryInDate,
							MIN(inventoryOutDate) inventoryOutDate
					FROM inoutByProduction 
					WHERE m.ProductId = inoutByProduction.ProductId AND inoutByProduction.ProductionOrderCode = m.ProductionOrderCode
					GROUP BY ProductionOrderCode, productId
				) inoutProd

			GROUP BY v.VoucherBill_F_Id, v.VoucherTypeId, v.so_ct, v.vthhtp
		) ord 

		LEFT JOIN inoutByOrder inoutByOrder ON ord.so_ct = inoutByOrder.orderCode AND ord.vthhtp = inoutByOrder.productId

		LEFT JOIN dbo.v_Partner p ON ord.partnerId = p.F_Id
		LEFT JOIN dbo.v_Product product ON ord.vthhtp = product.F_Id
		LEFT JOIN [OrganizationDB].[dbo].Employee e ON p.DebtManagerUserId = e.UserId

		WHERE ord.ngay_ct BETWEEN @FromDate AND @ToDate
		AND (@PartnerId = '' OR ord.partnerId = @PartnerId)
		AND (@ProductId =0 OR ord.vthhtp = @ProductId)
		AND (@ManagerUserId IS NULL OR p.DebtManagerUserId = @ManagerUserId)
	) r
	;

	--SELECT * FROM @result  --ORDER BY r.sortOrder, r.sortProduct
END


GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucherBillRow] AS 
	SELECT  	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[tk_co0],  [row].[ngay_ct],  [row].[kh0],  [row].[noi_dung],  [row].[ngay_gh],  [row].[dktt],  [row].[dkgh],  [row].[thhl],  [row].[vthhtp],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[vnd1],  [row].[thue_suat_vat],  [row].[nguoi_phu_trach],  [row].[ty_gia],  [row].[loai_tien],  [row].[attachment],  [row].[ong_ba],  [row].[bo_phan],  [row].[kh_nguoi_lh],  [row].[kh_vt],  [row].[stt],  [row].[dien_giai],  [row].[vthhtp_dvt2],  [row].[so_luong_dv2],  [row].[don_gia_dv2_0],  [row].[ghi_chu],  [row].[vthhtp_yc],  [row].[dvt],  [row].[ma_vthhtp_yc],  [row].[tt_vthhtp_yc],  [row].[the_tich],  [row].[tong_the_tich],  [row].[vnd3],  [row].[thue_suat_xnk],  [row].[kho],  [row].[tk_no0],  [row].[mau_hd],  [row].[ky_hieu_hd],  [row].[seri_hd],  [row].[ngay_hd],  [row].[order_code],  [row].[sl_od],  [row].[tk_no1],  [row].[tk_co1],  [row].[ma_lsx],  [row].[CensorStatus],  [row].[so_dh],  [row].[ten_tau],  [row].[so_po_dt],  [row].[ma_scac],  [row].[phi_tai_cang],  [row].[seller_phi_tai_cang],  [row].[consignee_phi_tai_cang],  [row].[ship_to_phi_tai_cang],  [row].[cuoc_van_tai],  [row].[seller_cuoc_van_tai],  [row].[consignee_cuoc_van_tai],  [row].[ship_to_cuoc_van_tai],  [row].[manifest_fee],  [row].[seller_manifest_fee],  [row].[consignee_manifest_fee],  [row].[ship_to_manifest_fee],  [row].[container],  [row].[so_container],  [row].[mo_ta],  [row].[package_dimension],  [row].[gross_weight],  [row].[total_measure],  [row].[pol],  [row].[pod],  [row].[final_destination],  [row].[delivery_place],  [row].[cargo_stuff_place],  [row].[full_laden_place],  [row].[confirmation_info],  [row].[nguoi_mua],  [row].[nguoi_nhan_hang],  [row].[tt_ship],  [row].[tt_nguoi_nhan_hang],  [row].[tt_nguoi_mua],  [row].[nguoi_ban_giao],  [row].[so_bh_xk],  [row].[cont_seal_no],  [row].[mhbhxk],  [row].[net_weight],  [row].[ma_vthhtp_khach],  [row].[package],  [row].[ma_bg_bh],  [row].[kh1],  [row].[kh3],  [row].[CensorStatusId],  [row].[CheckStatusId],  [row].[vthhtp_estimatePrice],  [row].[kh_thang],  [row].[container_quantity],  [row].[Cont_type],  [row].[don_vi_mua],  [row].[ma_so_thue],  [row].[tk0],  [row].[tk0_bank],  [row].[method_payment],  [row].[no],  [row].[ref_so_ct],  [row].[no_charge],  [row].[requirements],  [row].[loi_nhuan],  [row].[gia_dinh_muc],  [row].[quotationStatus],  [row].[requestSampleStatus],  [row].[bang_chu],  [row].[einvoice_lookup_code],  [row].[einvoice_issue_date],  [row].[einvoice_invoice_status],  [row].[einvoice_ikey],  [row].[don_gia_vnd],  [row].[einvoice_pattern],  [row].[einvoice_serial],  [row].[einvoice_type],  [row].[einvoice_adjust_type],  [row].[einvoice_parent],  [row].[einvoice_tong_vnd0],  [row].[einvoice_tong_cong],  [row].[einvoice_vnd1],  [row].[einvoice_url_search],  [row].[einvoice_thue_suat_vat],  [row].[einvoice_provider],  [row].[not_vat],  [row].[einvoice_ProductName],  [row].[yc_code],  [row].[einvoice_invoice_status_easy_invoice],  [row].[einvoice_adjust_type_easy_invoice],  [row].[einvoice_type_easy_invoice],  [row].[bank_dn],  [row].[CensorUserId],  [row].[booking_vt_qt],  [row].[ngan_hang_doanh_nghiep],  [row].[notify_party],  [row].[shipment],  [row].[Dieu_kien_tt],  [row].[Dkien_giao_hang],  [row].[mhbhxk_dvt2],  [row].[tinh_gia_code],  [row].[consignee_info]
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_PHIEU_YEU_CAU] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[stt],  [row].[ghi_chu],  [row].[vthhtp_yc],  [row].[dvt], [vdvt].[UnitName] AS [dvt_UnitName],  [row].[ma_vthhtp_yc],  [row].[tt_vthhtp_yc],  [row].[seri_hd],  [row].[CensorStatus], [vCensorStatus].[CensorStatusName] AS [CensorStatus_CensorStatusName],  [row].[CensorStatusId], [vCensorStatusId].[CensorStatusName] AS [CensorStatusId_CensorStatusName],  [row].[requirements],  [row].[CensorUserId], [vCensorUserId].[FullName] AS [CensorUserId_FullName]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_Unit] as [vdvt] WITH(NOLOCK) ON [row].[dvt] = [vdvt].[F_Id] LEFT JOIN [v_CensorStatus] as [vCensorStatus] WITH(NOLOCK) ON [row].[CensorStatus] = [vCensorStatus].[CensorStatusId] LEFT JOIN [v_CensorStatus] as [vCensorStatusId] WITH(NOLOCK) ON [row].[CensorStatusId] = [vCensorStatusId].[CensorStatusId] LEFT JOIN [v_User] as [vCensorUserId] WITH(NOLOCK) ON [row].[CensorUserId] = [vCensorUserId].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_BAO_GIA] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[ngay_gh],  [row].[dktt],  [row].[dkgh],  [row].[thhl],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[vnd1],  [row].[thue_suat_vat],  [row].[nguoi_phu_trach], [vnguoi_phu_trach].[FullName] AS [nguoi_phu_trach_FullName],  [row].[ty_gia],  [row].[loai_tien], [vloai_tien].[CurrencyCode] AS [loai_tien_CurrencyCode], [vloai_tien].[IsPrimary] AS [loai_tien_IsPrimary], [vloai_tien].[ty_gia] AS [loai_tien_ty_gia],  [row].[attachment],  [row].[stt],  [row].[ghi_chu],  [row].[CensorStatus], [vCensorStatus].[CensorStatusName] AS [CensorStatus_CensorStatusName],  [row].[CensorStatusId], [vCensorStatusId].[CensorStatusName] AS [CensorStatusId_CensorStatusName],  [row].[CheckStatusId], [vCheckStatusId].[CensorStatusName] AS [CheckStatusId_CensorStatusName],  [row].[container_quantity],  [row].[loi_nhuan],  [row].[gia_dinh_muc],  [row].[quotationStatus], [vquotationStatus].[QuotationStatusName] AS [quotationStatus_QuotationStatusName],  [row].[CensorUserId], [vCensorUserId].[FullName] AS [CensorUserId_FullName],  [row].[tinh_gia_code]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_User] as [vnguoi_phu_trach] WITH(NOLOCK) ON [row].[nguoi_phu_trach] = [vnguoi_phu_trach].[F_Id] LEFT JOIN [v_Currency] as [vloai_tien] WITH(NOLOCK) ON [row].[loai_tien] = [vloai_tien].[F_Id] LEFT JOIN [v_CensorStatus] as [vCensorStatus] WITH(NOLOCK) ON [row].[CensorStatus] = [vCensorStatus].[CensorStatusId] LEFT JOIN [v_CensorStatus] as [vCensorStatusId] WITH(NOLOCK) ON [row].[CensorStatusId] = [vCensorStatusId].[CensorStatusId] LEFT JOIN [v_CensorStatus] as [vCheckStatusId] WITH(NOLOCK) ON [row].[CheckStatusId] = [vCheckStatusId].[CensorStatusId] LEFT JOIN [v_QuotationStatus] as [vquotationStatus] WITH(NOLOCK) ON [row].[quotationStatus] = [vquotationStatus].[QuotationStatus] LEFT JOIN [v_User] as [vCensorUserId] WITH(NOLOCK) ON [row].[CensorUserId] = [vCensorUserId].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_DON_HANG] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[ngay_gh],  [row].[dktt],  [row].[dkgh],  [row].[thhl],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[vnd1],  [row].[thue_suat_vat],  [row].[ty_gia],  [row].[loai_tien], [vloai_tien].[CurrencyCode] AS [loai_tien_CurrencyCode], [vloai_tien].[IsPrimary] AS [loai_tien_IsPrimary], [vloai_tien].[ty_gia] AS [loai_tien_ty_gia],  [row].[attachment],  [row].[ong_ba],  [row].[bo_phan], [vbo_phan].[DepartmentCode] AS [bo_phan_DepartmentCode],  [row].[kh_nguoi_lh],  [row].[kh_vt], [vkh_vt].[PartnerCode] AS [kh_vt_PartnerCode], [vkh_vt].[PartnerName] AS [kh_vt_PartnerName],  [row].[stt],  [row].[vthhtp_dvt2], [vvthhtp_dvt2].[ProductUnitConversionName] AS [vthhtp_dvt2_ProductUnitConversionName], [vvthhtp_dvt2].[FactorExpression] AS [vthhtp_dvt2_FactorExpression], [vvthhtp_dvt2].[DecimalPlace] AS [vthhtp_dvt2_DecimalPlace],  [row].[so_luong_dv2],  [row].[don_gia_dv2_0],  [row].[ghi_chu],  [row].[so_po_dt],  [row].[so_container],  [row].[ma_bg_bh], [vma_bg_bh].[so_ct] AS [ma_bg_bh_so_ct],  [row].[CensorStatusId], [vCensorStatusId].[CensorStatusName] AS [CensorStatusId_CensorStatusName],  [row].[CheckStatusId], [vCheckStatusId].[CensorStatusName] AS [CheckStatusId_CensorStatusName],  [row].[kh_thang], [vkh_thang].[MonthPlanName] AS [kh_thang_MonthPlanName],  [row].[container_quantity]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_Currency] as [vloai_tien] WITH(NOLOCK) ON [row].[loai_tien] = [vloai_tien].[F_Id] LEFT JOIN [v_Department] as [vbo_phan] WITH(NOLOCK) ON [row].[bo_phan] = [vbo_phan].[F_Id] LEFT JOIN [v_Partner] as [vkh_vt] WITH(NOLOCK) ON [row].[kh_vt] = [vkh_vt].[F_Id] LEFT JOIN [v_ProductUnitConversion] as [vvthhtp_dvt2] WITH(NOLOCK) ON [row].[vthhtp_dvt2] = [vvthhtp_dvt2].[F_Id] LEFT JOIN [v_CTBH_BAO_GIA_INFO] as [vma_bg_bh] WITH(NOLOCK) ON [row].[ma_bg_bh] = [vma_bg_bh].[F_Id] LEFT JOIN [v_CensorStatus] as [vCensorStatusId] WITH(NOLOCK) ON [row].[CensorStatusId] = [vCensorStatusId].[CensorStatusId] LEFT JOIN [v_CensorStatus] as [vCheckStatusId] WITH(NOLOCK) ON [row].[CheckStatusId] = [vCheckStatusId].[CensorStatusId] LEFT JOIN [v_MonthPlan] as [vkh_thang] WITH(NOLOCK) ON [row].[kh_thang] = [vkh_thang].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_HDBH] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[ngay_gh],  [row].[dktt],  [row].[dkgh],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[vnd1],  [row].[thue_suat_vat],  [row].[ty_gia],  [row].[loai_tien], [vloai_tien].[CurrencyCode] AS [loai_tien_CurrencyCode], [vloai_tien].[IsPrimary] AS [loai_tien_IsPrimary], [vloai_tien].[ty_gia] AS [loai_tien_ty_gia],  [row].[attachment],  [row].[ong_ba],  [row].[bo_phan], [vbo_phan].[DepartmentCode] AS [bo_phan_DepartmentCode],  [row].[kh_nguoi_lh],  [row].[kh_vt], [vkh_vt].[PartnerCode] AS [kh_vt_PartnerCode], [vkh_vt].[PartnerName] AS [kh_vt_PartnerName],  [row].[stt],  [row].[vthhtp_dvt2], [vvthhtp_dvt2].[ProductUnitConversionName] AS [vthhtp_dvt2_ProductUnitConversionName], [vvthhtp_dvt2].[FactorExpression] AS [vthhtp_dvt2_FactorExpression], [vvthhtp_dvt2].[DecimalPlace] AS [vthhtp_dvt2_DecimalPlace],  [row].[so_luong_dv2],  [row].[don_gia_dv2_0],  [row].[ghi_chu],  [row].[ma_bg_bh], [vma_bg_bh].[so_ct] AS [ma_bg_bh_so_ct]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_Currency] as [vloai_tien] WITH(NOLOCK) ON [row].[loai_tien] = [vloai_tien].[F_Id] LEFT JOIN [v_Department] as [vbo_phan] WITH(NOLOCK) ON [row].[bo_phan] = [vbo_phan].[F_Id] LEFT JOIN [v_Partner] as [vkh_vt] WITH(NOLOCK) ON [row].[kh_vt] = [vkh_vt].[F_Id] LEFT JOIN [v_ProductUnitConversion] as [vvthhtp_dvt2] WITH(NOLOCK) ON [row].[vthhtp_dvt2] = [vvthhtp_dvt2].[F_Id] LEFT JOIN [v_CTBH_BAO_GIA_INFO] as [vma_bg_bh] WITH(NOLOCK) ON [row].[ma_bg_bh] = [vma_bg_bh].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[CTBH_BH_XK_MH_INFO]
AS
WITH temp AS (SELECT        r.mhbhxk, r.so_bh_xk, SUM(r.so_luong) AS total_so_luong
                                 FROM            dbo.VoucherValueRow AS r INNER JOIN
                                                           dbo.VoucherType AS t ON r.VoucherTypeId = t.VoucherTypeId
                                 WHERE        (r.IsDeleted = 0) AND (t.VoucherTypeCode = 'CTBH_PL_CONT')
                                 GROUP BY r.mhbhxk, r.so_bh_xk)
    SELECT        v.F_Id, v.VoucherBill_F_Id, v.vthhtp, v.order_code, v.so_luong AS sl_ban_dau, ISNULL(temp_1.total_so_luong, 0) AS sl_da_chia, v.so_luong - ISNULL(temp_1.total_so_luong, 0) AS sl_con_lai, 
                              p.ProductCode AS product_code
     FROM            dbo.VoucherValueRow AS v WITH (nolock) LEFT OUTER JOIN
                              temp AS temp_1 ON temp_1.so_bh_xk = v.VoucherBill_F_Id AND temp_1.mhbhxk = v.vthhtp LEFT OUTER JOIN
                              dbo.v_Product AS p ON p.F_Id = v.vthhtp
     WHERE        (v.IsDeleted = 0)


GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_BAO_GIA_XK] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[ngay_gh],  [row].[dktt],  [row].[dkgh],  [row].[thhl],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[vnd1],  [row].[thue_suat_vat],  [row].[nguoi_phu_trach], [vnguoi_phu_trach].[FullName] AS [nguoi_phu_trach_FullName],  [row].[ty_gia],  [row].[loai_tien], [vloai_tien].[CurrencyCode] AS [loai_tien_CurrencyCode], [vloai_tien].[IsPrimary] AS [loai_tien_IsPrimary], [vloai_tien].[ty_gia] AS [loai_tien_ty_gia],  [row].[attachment],  [row].[stt],  [row].[ghi_chu],  [row].[the_tich],  [row].[tong_the_tich],  [row].[CensorStatus], [vCensorStatus].[CensorStatusName] AS [CensorStatus_CensorStatusName],  [row].[CensorStatusId], [vCensorStatusId].[CensorStatusName] AS [CensorStatusId_CensorStatusName],  [row].[loi_nhuan],  [row].[gia_dinh_muc],  [row].[quotationStatus], [vquotationStatus].[QuotationStatusName] AS [quotationStatus_QuotationStatusName],  [row].[CensorUserId], [vCensorUserId].[FullName] AS [CensorUserId_FullName],  [row].[tinh_gia_code]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_User] as [vnguoi_phu_trach] WITH(NOLOCK) ON [row].[nguoi_phu_trach] = [vnguoi_phu_trach].[F_Id] LEFT JOIN [v_Currency] as [vloai_tien] WITH(NOLOCK) ON [row].[loai_tien] = [vloai_tien].[F_Id] LEFT JOIN [v_CensorStatus] as [vCensorStatus] WITH(NOLOCK) ON [row].[CensorStatus] = [vCensorStatus].[CensorStatusId] LEFT JOIN [v_CensorStatus] as [vCensorStatusId] WITH(NOLOCK) ON [row].[CensorStatusId] = [vCensorStatusId].[CensorStatusId] LEFT JOIN [v_QuotationStatus] as [vquotationStatus] WITH(NOLOCK) ON [row].[quotationStatus] = [vquotationStatus].[QuotationStatus] LEFT JOIN [v_User] as [vCensorUserId] WITH(NOLOCK) ON [row].[CensorUserId] = [vCensorUserId].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_VoucherArea_Delete]
	@VoucherTypeId int,
	@VoucherAreaId int,	
	@ResStatus int OUTPUT
AS
BEGIN
	BEGIN TRANSACTION
		
		DECLARE @FieldName nvarchar(64);		

		DECLARE fieldCursor CURSOR FOR   
		SELECT FieldName
		FROM VoucherAreaField AS af
			JOIN VoucherField AS f ON af.VoucherFieldId = f.VoucherFieldId
		WHERE af.VoucherTypeId = @VoucherTypeId AND af.VoucherAreaId = @VoucherAreaId		  
		OPEN fieldCursor  
		
		FETCH NEXT FROM fieldCursor   
		INTO @FieldName
  
		WHILE @@FETCH_STATUS = 0  
		BEGIN  

			EXEC asp_VoucherType_Clear_FieldData @VoucherTypeId = @VoucherTypeId,
											@FieldName = @FieldName,
											@ResStatus = @ResStatus OUTPUT 			

			FETCH NEXT FROM fieldCursor   
			INTO @FieldName
		END   
		CLOSE fieldCursor;  
		DEALLOCATE fieldCursor;  
		

		UPDATE dbo.VoucherAreaField
		SET IsDeleted = 1,
			DeletedDatetimeUtc = GETUTCDATE()
		WHERE VoucherTypeId = @VoucherTypeId
			AND VoucherAreaId = @VoucherAreaId
		
		SET @ResStatus = 1
	COMMIT TRANSACTION
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[CTBH_DON_HANG_XK_INFO] AS WITH tmp AS (
		SELECT r.VoucherBill_F_Id, MAX(F_Id) as F_Id
		FROM VoucherValueRow r
		INNER JOIN VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND t.VoucherTypeCode = 'CTBH_DON_HANG_XK'
		GROUP BY r.VoucherBill_F_Id    
)
SELECT 
	r.VoucherBill_F_Id F_Id, 
	r.so_ct,
	r.SubsidiaryId,
	r.ngay_ct,
	r.ma_bg_bh,
	r.attachment,
	r.ong_ba,
	r.bo_phan,
	r.kh0, 
	r.noi_dung,
	r.ngay_gh,
	r.kh_nguoi_lh,
	r.dktt,
	r.dkgh,
	r.kh_vt,
	r.loai_tien,
	r.ty_gia,
	p1.PartnerCode kh_vt_PartnerCode,
	p2.PartnerCode kh0_PartnerCode,
	p2.PartnerName kh0_PartnerName,
	p2.Address kh0_Address,
	c.CurrencyCode loai_tien_CurrencyCode,
	d.DepartmentCode bo_phan_DepartmentCode
FROM tmp
INNER JOIN VoucherValueRow r ON tmp.F_Id = r.F_Id
LEFT JOIN v_Partner p1 ON r.kh_vt = p1.F_Id
LEFT JOIN v_Partner p2 ON r.kh0 = p2.F_Id
LEFT JOIN v_Currency c ON r.loai_tien = c.F_Id
LEFT JOIN v_Department d ON r.bo_phan = d.F_Id

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_BOOKING_XK] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[ngay_gh],  [row].[dkgh],  [row].[attachment],  [row].[kh_nguoi_lh],  [row].[kh_vt], [vkh_vt].[PartnerCode] AS [kh_vt_PartnerCode], [vkh_vt].[PartnerName] AS [kh_vt_PartnerName],  [row].[ghi_chu],  [row].[so_dh], [vso_dh].[so_ct] AS [so_dh_so_ct], [vso_dh].[kh0_PartnerName] AS [so_dh_kh0_PartnerName], [vso_dh].[kh0_PartnerCode] AS [so_dh_kh0_PartnerCode], [vso_dh].[kh_vt_PartnerCode] AS [so_dh_kh_vt_PartnerCode], [vso_dh].[so_po_dt] AS [so_dh_so_po_dt],  [row].[ten_tau],  [row].[so_po_dt],  [row].[ma_scac],  [row].[phi_tai_cang],  [row].[seller_phi_tai_cang],  [row].[consignee_phi_tai_cang],  [row].[ship_to_phi_tai_cang],  [row].[cuoc_van_tai],  [row].[seller_cuoc_van_tai],  [row].[consignee_cuoc_van_tai],  [row].[ship_to_cuoc_van_tai],  [row].[manifest_fee],  [row].[seller_manifest_fee],  [row].[consignee_manifest_fee],  [row].[ship_to_manifest_fee],  [row].[container], [vcontainer].[ContainerCode] AS [container_ContainerCode],  [row].[so_container],  [row].[mo_ta],  [row].[package_dimension],  [row].[gross_weight],  [row].[total_measure],  [row].[pol],  [row].[pod],  [row].[final_destination],  [row].[delivery_place],  [row].[cargo_stuff_place],  [row].[full_laden_place],  [row].[confirmation_info]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Partner] as [vkh_vt] WITH(NOLOCK) ON [row].[kh_vt] = [vkh_vt].[F_Id] LEFT JOIN [v_CTBH_DON_HANG_ALL_INFO] as [vso_dh] WITH(NOLOCK) ON [row].[so_dh] = [vso_dh].[F_Id] LEFT JOIN [v_Container] as [vcontainer] WITH(NOLOCK) ON [row].[container] = [vcontainer].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_PHIEU_YC_MAU] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[stt],  [row].[ghi_chu],  [row].[vthhtp_yc],  [row].[dvt], [vdvt].[UnitName] AS [dvt_UnitName],  [row].[ma_vthhtp_yc],  [row].[tt_vthhtp_yc],  [row].[CensorStatus], [vCensorStatus].[CensorStatusName] AS [CensorStatus_CensorStatusName],  [row].[ma_bg_bh], [vma_bg_bh].[so_ct] AS [ma_bg_bh_so_ct],  [row].[CensorStatusId], [vCensorStatusId].[CensorStatusName] AS [CensorStatusId_CensorStatusName],  [row].[requirements],  [row].[requestSampleStatus], [vrequestSampleStatus].[RequestSampleStatusName] AS [requestSampleStatus_RequestSampleStatusName],  [row].[CensorUserId], [vCensorUserId].[FullName] AS [CensorUserId_FullName]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_Unit] as [vdvt] WITH(NOLOCK) ON [row].[dvt] = [vdvt].[F_Id] LEFT JOIN [v_CensorStatus] as [vCensorStatus] WITH(NOLOCK) ON [row].[CensorStatus] = [vCensorStatus].[CensorStatusId] LEFT JOIN [v_CTBH_BAO_GIA_INFO] as [vma_bg_bh] WITH(NOLOCK) ON [row].[ma_bg_bh] = [vma_bg_bh].[F_Id] LEFT JOIN [v_CensorStatus] as [vCensorStatusId] WITH(NOLOCK) ON [row].[CensorStatusId] = [vCensorStatusId].[CensorStatusId] LEFT JOIN [v_RequestSampleStatus] as [vrequestSampleStatus] WITH(NOLOCK) ON [row].[requestSampleStatus] = [vrequestSampleStatus].[RequestSampleStatusId] LEFT JOIN [v_User] as [vCensorUserId] WITH(NOLOCK) ON [row].[CensorUserId] = [vCensorUserId].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_PHIEU_YC_Cont] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[stt],  [row].[ghi_chu],  [row].[vthhtp_yc],  [row].[dvt], [vdvt].[UnitName] AS [dvt_UnitName],  [row].[ma_vthhtp_yc],  [row].[tt_vthhtp_yc],  [row].[CensorStatus], [vCensorStatus].[CensorStatusName] AS [CensorStatus_CensorStatusName],  [row].[CensorStatusId], [vCensorStatusId].[CensorStatusName] AS [CensorStatusId_CensorStatusName],  [row].[CensorUserId], [vCensorUserId].[FullName] AS [CensorUserId_FullName]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_Unit] as [vdvt] WITH(NOLOCK) ON [row].[dvt] = [vdvt].[F_Id] LEFT JOIN [v_CensorStatus] as [vCensorStatus] WITH(NOLOCK) ON [row].[CensorStatus] = [vCensorStatus].[CensorStatusId] LEFT JOIN [v_CensorStatus] as [vCensorStatusId] WITH(NOLOCK) ON [row].[CensorStatusId] = [vCensorStatusId].[CensorStatusId] LEFT JOIN [v_User] as [vCensorUserId] WITH(NOLOCK) ON [row].[CensorUserId] = [vCensorUserId].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_TINH_GIA] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[ty_gia],  [row].[loai_tien], [vloai_tien].[CurrencyCode] AS [loai_tien_CurrencyCode], [vloai_tien].[IsPrimary] AS [loai_tien_IsPrimary], [vloai_tien].[ty_gia] AS [loai_tien_ty_gia],  [row].[attachment],  [row].[stt],  [row].[ghi_chu],  [row].[vthhtp_yc],  [row].[vthhtp_estimatePrice],  [row].[gia_dinh_muc],  [row].[don_gia_vnd],  [row].[yc_code]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_Currency] as [vloai_tien] WITH(NOLOCK) ON [row].[loai_tien] = [vloai_tien].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[CTBH_BAO_GIA_INFO] AS WITH tmp AS (
		SELECT r.VoucherBill_F_Id, MAX(F_Id) as F_Id
		FROM VoucherValueRow r
		INNER JOIN VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND t.VoucherTypeCode = 'CTBH_BAO_GIA'
		GROUP BY r.VoucherBill_F_Id    
)
SELECT 
	r.VoucherBill_F_Id F_Id, 
	r.VoucherTypeId,
	r.so_ct,
	r.SubsidiaryId,
	r.ngay_ct,
	r.kh0, 
	r.noi_dung,
	r.ngay_gh,
	r.dktt,
	r.dkgh,
	r.kh_vt,
	r.loai_tien,
	r.ty_gia,
	r.CensorStatus,
	p1.PartnerCode kh0_PartnerCode,
	p1.PartnerName kh0_PartnerName,
	p1.Address kh0_Address,
	c.CurrencyCode loai_tien_CurrencyCode,
	r.nguoi_phu_trach,
	u.FullName nguoi_phu_trach_FullName,
	r.thhl,
	s.CensorStatusName CensorStatus_CensorStatusName
FROM tmp
INNER JOIN VoucherValueRow r ON tmp.F_Id = r.F_Id
LEFT JOIN v_Partner p1 ON r.kh0 = p1.F_Id
LEFT JOIN v_Currency c ON r.loai_tien = c.F_Id
LEFT JOIN v_User u ON r.nguoi_phu_trach = u.F_Id
LEFT JOIN v_CensorStatus s ON r.CensorStatus = s.CensorStatusId

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_HOA_DON_DIEN_TU] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[don_gia0],  [row].[vnd0],  [row].[vnd1],  [row].[thue_suat_vat],  [row].[attachment],  [row].[stt],  [row].[ghi_chu],  [row].[mau_hd],  [row].[ky_hieu_hd],  [row].[ngay_hd],  [row].[don_vi_mua],  [row].[ma_so_thue],  [row].[method_payment], [vmethod_payment].[title] AS [method_payment_title],  [row].[no],  [row].[ref_so_ct],  [row].[no_charge],  [row].[bang_chu],  [row].[einvoice_lookup_code],  [row].[einvoice_issue_date],  [row].[einvoice_invoice_status], [veinvoice_invoice_status].[title] AS [einvoice_invoice_status_title],  [row].[einvoice_ikey],  [row].[einvoice_pattern], [veinvoice_pattern].[title] AS [einvoice_pattern_title],  [row].[einvoice_serial], [veinvoice_serial].[title] AS [einvoice_serial_title],  [row].[einvoice_type], [veinvoice_type].[EInvoiceTypeName] AS [einvoice_type_EInvoiceTypeName],  [row].[einvoice_adjust_type], [veinvoice_adjust_type].[AdjustTitle] AS [einvoice_adjust_type_AdjustTitle],  [row].[einvoice_parent],  [row].[einvoice_tong_vnd0],  [row].[einvoice_tong_cong],  [row].[einvoice_vnd1],  [row].[einvoice_url_search],  [row].[einvoice_thue_suat_vat],  [row].[einvoice_provider], [veinvoice_provider].[title] AS [einvoice_provider_title],  [row].[not_vat],  [row].[einvoice_ProductName],  [row].[einvoice_invoice_status_easy_invoice],  [row].[einvoice_adjust_type_easy_invoice],  [row].[einvoice_type_easy_invoice]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_E_INVOICE_METHOD_PAYMENT] as [vmethod_payment] WITH(NOLOCK) ON [row].[method_payment] = [vmethod_payment].[code] LEFT JOIN [v_EASY_INV_STATUS] as [veinvoice_invoice_status] WITH(NOLOCK) ON [row].[einvoice_invoice_status] = [veinvoice_invoice_status].[value] LEFT JOIN [v_E_INVOICE_PATERM_CODE] as [veinvoice_pattern] WITH(NOLOCK) ON [row].[einvoice_pattern] = [veinvoice_pattern].[code] LEFT JOIN [v_E_INVOICE_SERIAL] as [veinvoice_serial] WITH(NOLOCK) ON [row].[einvoice_serial] = [veinvoice_serial].[code] LEFT JOIN [v_E_INVOICE_TYPE] as [veinvoice_type] WITH(NOLOCK) ON [row].[einvoice_type] = [veinvoice_type].[EInvoiceTypeId] LEFT JOIN [v_E_INVOICE_ADJUST_TYPE] as [veinvoice_adjust_type] WITH(NOLOCK) ON [row].[einvoice_adjust_type] = [veinvoice_adjust_type].[AdjustTypeId] LEFT JOIN [v_E_INVOICE_PROVIDER] as [veinvoice_provider] WITH(NOLOCK) ON [row].[einvoice_provider] = [veinvoice_provider].[value]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[CTBH_BAO_GIA_XK_INFO] AS WITH tmp AS (
		SELECT r.VoucherBill_F_Id, MAX(F_Id) as F_Id
		FROM VoucherValueRow r
		INNER JOIN VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND t.VoucherTypeCode = 'CTBH_BAO_GIA_XK'
		GROUP BY r.VoucherBill_F_Id    
)
SELECT 
	r.VoucherBill_F_Id F_Id,
	r.VoucherTypeId,	
	r.so_ct,
	r.SubsidiaryId,
	r.ngay_ct,
	r.kh0, 
	r.noi_dung,
	r.ngay_gh,
	r.dktt,
	r.dkgh,
	r.kh_vt,
	r.loai_tien,
	r.ty_gia,
	r.CensorStatus,
	p1.PartnerCode kh0_PartnerCode,
	p1.PartnerName kh0_PartnerName,
	p1.Address kh0_Address,
	c.CurrencyCode loai_tien_CurrencyCode,
	r.nguoi_phu_trach,
	u.FullName nguoi_phu_trach_FullName,
	r.thhl,
	s.CensorStatusName CensorStatus_CensorStatusName
FROM tmp
INNER JOIN VoucherValueRow r ON tmp.F_Id = r.F_Id
LEFT JOIN v_Partner p1 ON r.kh0 = p1.F_Id
LEFT JOIN v_Currency c ON r.loai_tien = c.F_Id
LEFT JOIN v_User u ON r.nguoi_phu_trach = u.F_Id
LEFT JOIN v_CensorStatus s ON r.CensorStatus = s.CensorStatusId

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_PL_CONT] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[vthhtp_dvt2], [vvthhtp_dvt2].[ProductUnitConversionName] AS [vthhtp_dvt2_ProductUnitConversionName], [vvthhtp_dvt2].[FactorExpression] AS [vthhtp_dvt2_FactorExpression], [vvthhtp_dvt2].[DecimalPlace] AS [vthhtp_dvt2_DecimalPlace],  [row].[so_luong_dv2],  [row].[ghi_chu],  [row].[sl_od],  [row].[gross_weight],  [row].[total_measure],  [row].[so_bh_xk], [vso_bh_xk].[so_ct] AS [so_bh_xk_so_ct],  [row].[cont_seal_no],  [row].[mhbhxk], [vmhbhxk].[ProductCode] AS [mhbhxk_ProductCode], [vmhbhxk].[ProductName] AS [mhbhxk_ProductName], [vmhbhxk].[NetWeight] AS [mhbhxk_NetWeight], [vmhbhxk].[GrossWeight] AS [mhbhxk_GrossWeight], [vmhbhxk].[Measurement] AS [mhbhxk_Measurement], [vmhbhxk].[ProductNameEng] AS [mhbhxk_ProductNameEng], [vmhbhxk].[PackingLong] AS [mhbhxk_PackingLong], [vmhbhxk].[PackingWidth] AS [mhbhxk_PackingWidth], [vmhbhxk].[PackingHeight] AS [mhbhxk_PackingHeight], [vmhbhxk].[UnitId_DecimalPlace] AS [mhbhxk_UnitId_DecimalPlace],  [row].[net_weight],  [row].[ma_vthhtp_khach],  [row].[package],  [row].[mhbhxk_dvt2], [vmhbhxk_dvt2].[ProductUnitConversionName] AS [mhbhxk_dvt2_ProductUnitConversionName], [vmhbhxk_dvt2].[FactorExpression] AS [mhbhxk_dvt2_FactorExpression], [vmhbhxk_dvt2].[DecimalPlace] AS [mhbhxk_dvt2_DecimalPlace]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_ProductUnitConversion] as [vvthhtp_dvt2] WITH(NOLOCK) ON [row].[vthhtp_dvt2] = [vvthhtp_dvt2].[F_Id] LEFT JOIN [v_CTBH_BH_XK_INFO] as [vso_bh_xk] WITH(NOLOCK) ON [row].[so_bh_xk] = [vso_bh_xk].[F_Id] LEFT JOIN [v_Product] as [vmhbhxk] WITH(NOLOCK) ON [row].[mhbhxk] = [vmhbhxk].[F_Id] LEFT JOIN [v_ProductUnitConversion] as [vmhbhxk_dvt2] WITH(NOLOCK) ON [row].[mhbhxk_dvt2] = [vmhbhxk_dvt2].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_TINH_GIA_INFO] AS 
							WITH tmp AS (
		SELECT r.VoucherBill_F_Id, MAX(F_Id) as F_Id
		FROM [PurchaseOrderDB].dbo.VoucherValueRow r
		INNER JOIN [PurchaseOrderDB].dbo.VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND t.VoucherTypeCode = 'CTBH_TINH_GIA' AND r.CensorStatusId = 1
		GROUP BY r.VoucherBill_F_Id    
)
SELECT 
	r.VoucherBill_F_Id F_Id, 
	r.VoucherTypeId,
	r.so_ct,
	r.SubsidiaryId,
	r.ngay_ct,
	r.kh0, 
	r.noi_dung,
	r.loai_tien,
	r.attachment,
	r.ty_gia,
	r.CensorStatus,
	p1.PartnerCode kh0_PartnerCode,
	p1.PartnerName kh0_PartnerName,
	p1.Address kh0_Address,
	c.CurrencyCode loai_tien_CurrencyCode,
	r.nguoi_phu_trach,
	u.FullName nguoi_phu_trach_FullName,
	r.thhl,
	s.CensorStatusName CensorStatus_CensorStatusName
FROM tmp
INNER JOIN [PurchaseOrderDB].dbo.VoucherValueRow r ON tmp.F_Id = r.F_Id
LEFT JOIN v_Partner p1 ON r.kh0 = p1.F_Id
LEFT JOIN v_Currency c ON r.loai_tien = c.F_Id
LEFT JOIN v_User u ON r.nguoi_phu_trach = u.F_Id
LEFT JOIN v_CensorStatus s ON r.CensorStatus = s.CensorStatusId
							;

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_BAO_GIA_INFO_Search] AS 
								WITH tmp AS (
		SELECT r.VoucherBill_F_Id, MAX(F_Id) as F_Id
		FROM [PurchaseOrderDB].dbo.VoucherValueRow r
		INNER JOIN [PurchaseOrderDB].dbo.VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
		WHERE r.IsDeleted = 0 AND t.VoucherTypeCode = 'CTBH_BAO_GIA' AND r.CensorStatusId = 1
		GROUP BY r.VoucherBill_F_Id    
)
SELECT 
	r.VoucherBill_F_Id F_Id, 
	r.VoucherTypeId,
	r.so_ct,
	r.SubsidiaryId,
	r.ngay_ct,
	r.kh0, 
	r.noi_dung,
	r.ngay_gh,
	r.dktt,
	r.dkgh,
	r.kh_vt,
	r.loai_tien,
	r.ty_gia,
	r.CensorStatus,
	p1.PartnerCode kh0_PartnerCode,
	p1.PartnerName kh0_PartnerName,
	p1.Address kh0_Address,
	c.CurrencyCode loai_tien_CurrencyCode,
	r.nguoi_phu_trach,
	u.FullName nguoi_phu_trach_FullName,
	r.thhl,
	s.CensorStatusName CensorStatus_CensorStatusName
FROM tmp
INNER JOIN [PurchaseOrderDB].dbo.VoucherValueRow r ON tmp.F_Id = r.F_Id
LEFT JOIN v_Partner p1 ON r.kh0 = p1.F_Id
LEFT JOIN v_Currency c ON r.loai_tien = c.F_Id
LEFT JOIN v_User u ON r.nguoi_phu_trach = u.F_Id
LEFT JOIN v_CensorStatus s ON r.CensorStatus = s.CensorStatusId

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_AccountingAccount] AS SELECT  _AccountingAccount.F_Id, _AccountingAccount.UpdatedDatetimeUtc, _AccountingAccount.ParentId, _AccountingAccount.AccountNumber, _AccountingAccount.AccountNameVi, _AccountingAccount.AccountNameEn, _AccountingAccount.Currency, _AccountingAccount.AccountNote, _AccountingAccount.IsStock, _AccountingAccount.IsLiability, _AccountingAccount.IsForeignCurrency, _AccountingAccount.IsBranch, _AccountingAccount.IsGroup, _Currency_0.[CurrencyCode] AS [Currency_CurrencyCode] FROM [MasterDB].[dbo]._AccountingAccount LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_0 ON _AccountingAccount.Currency = _Currency_0.F_Id WHERE _AccountingAccount.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[v_TK_nganhang_DN] AS SELECT  _TK_nganhang_DN.F_Id, _TK_nganhang_DN.UpdatedDatetimeUtc, _TK_nganhang_DN.Ten_tk, _TK_nganhang_DN.So_TKNH, _TK_nganhang_DN.Loai_tien, _TK_nganhang_DN.Ngan_hang, _TK_nganhang_DN.Chi_nhanh_NH, _TK_nganhang_DN.Tinh_TP, _TK_nganhang_DN.Code_NH, _TK_nganhang_DN.TK_HT, _Currency_0.[CurrencyCode] AS [Loai_tien_CurrencyCode], _AccountingAccount_1.[AccountNumber] AS [TK_HT_AccountNumber] FROM [MasterDB].[dbo]._TK_nganhang_DN LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_0 ON _TK_nganhang_DN.Loai_tien = _Currency_0.F_Id LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_1 ON _TK_nganhang_DN.TK_HT = _AccountingAccount_1.F_Id WHERE _TK_nganhang_DN.IsDeleted = 0

GO

USE AccountancyDB
GO

/**
* Tính giá vốn
*/
CREATE OR ALTER PROCEDURE [dbo].[asp_CalcProduct_OutputPrice]
	@SubId			INT,
	@Tk				NVARCHAR(128),	
	@ProductId		INT,
	@FromDate		DATETIME2,
	@ToDate			DATETIME2,
	@IsIgnoreZeroPrice	BIT = 1,
	@IsUpdate		BIT = 0,
	@IsInvalid		BIT OUTPUT,
	@IsError		BIT OUTPUT
AS
BEGIN

	DECLARE @DIEU_CHUYEN_KHO_TYPE NVARCHAR(128) = N'DIEU_CHUYEN_KHO';

	BEGIN TRANSACTION;

	DECLARE @OpenningDept TABLE
	(
		tk nvarchar(128),
		vthhtp int,
		balance_quantity decimal(32,12),
		balance_money decimal(32,12)
	)

	INSERT INTO @OpenningDept
	(
		tk,
		vthhtp,
		balance_quantity,
		balance_money
	)
	SELECT 
		d.tk, 
		d.vthhtp,
		sum(CASE WHEN d.IsDebt = 1 THEN d.so_luong ELSE -d.so_luong END),
		sum(CASE WHEN d.IsDebt = 1 THEN d.Vnd_no ELSE -d.Vnd_co END)
	FROM dbo._rc_detail d
	WHERE d.SubsidiaryId = @SubId 
		AND d.ngay_ct < @FromDate
		AND d.vthhtp IS NOT NULL
		AND (@ProductId IS NULL OR d.vthhtp = @ProductId)
		AND (@Tk IS NULL OR d.Tk LIKE CONCAT(@Tk,'%'))
		AND
		(d.Tk LIKE '151%'
			OR d.Tk LIKE '152%'
			OR d.Tk LIKE '153%'
			OR d.Tk LIKE '155%'
			OR d.Tk LIKE '156%'
			OR d.Tk LIKE '157%'
			OR d.Tk LIKE '158%'
		)
		
	GROUP BY d.tk, d.vthhtp


	IF @IsIgnoreZeroPrice = 0 AND EXISTS (
			SELECT 
				0
			FROM dbo._rc_detail d	
	
			WHERE d.SubsidiaryId = @SubId
			AND d.ngay_ct BETWEEN @FromDate AND @ToDate
			AND d.vthhtp IS NOT NULL
			AND (@ProductId IS NULL OR d.vthhtp = @ProductId)
			AND (@Tk IS NULL OR d.Tk LIKE CONCAT(@Tk,'%'))
			AND
			(d.Tk LIKE '151%'
				OR d.Tk LIKE '152%'
				OR d.Tk LIKE '153%'
				OR d.Tk LIKE '155%'
				OR d.Tk LIKE '156%'
				OR d.Tk LIKE '157%'
				OR d.Tk LIKE '158%'
			)
			AND d.IsDebt = 1
			AND d.BUT_TOAN = 0
			AND ISNULL(d.don_gia,0)=0
			AND ISNULL(d.Vnd_no,0) = 0
			AND d.InputType_InputTypeCode <> @DIEU_CHUYEN_KHO_TYPE
	)
	BEGIN
	    SET @IsInvalid = 1
		 
			SELECT					
						ROW_NUMBER() OVER(ORDER BY(SELECT NULL)) stt,
						p.ProductCode vthhtp_ProductCode,
						p.ProductName vthhtp_ProductName,
						d.InputType_Title,
						d.InputTypeId,
						d.InputBill_F_Id,
						d.ngay_ct,
						d.so_ct,
						d.tk tk_no,
						d.Tk_du tk_co,
						d.don_gia,
						d.so_luong,
						d.Vnd_no									
						
			FROM dbo._rc_detail d	
				LEFT JOIN dbo.v_Product p ON d.vthhtp = p.F_Id
			WHERE d.SubsidiaryId = @SubId
			AND d.ngay_ct BETWEEN @FromDate AND @ToDate
			AND d.vthhtp IS NOT NULL
			AND (@ProductId IS NULL OR d.vthhtp = @ProductId)			
			AND (@Tk IS NULL OR d.Tk LIKE CONCAT(@Tk,'%'))
			AND
			(d.Tk LIKE '151%'
				OR d.Tk LIKE '152%'
				OR d.Tk LIKE '153%'
				OR d.Tk LIKE '155%'
				OR d.Tk LIKE '156%'
				OR d.Tk LIKE '157%'
				OR d.Tk LIKE '158%'
			)
			AND d.IsDebt = 1
			AND d.so_luong > 0
			AND ISNULL(d.don_gia,0)=0
			AND ISNULL(d.Vnd_no,0) = 0
			AND d.InputType_InputTypeCode <> @DIEU_CHUYEN_KHO_TYPE
			ORDER BY d.Tk, d.vthhtp, d.ngay_ct, d.IsDebt DESC, d.F_Id
		ROLLBACK
		RETURN
	END
	SET @IsInvalid = 0;
	SET @IsError = 0;

	CREATE TABLE #GiaVon
	(	
		InputBill_F_Id bigint,
		BillVersion int,
		f_Id bigint,
		tk nvarchar(128),
		vthhtp int,	
		current_quantity decimal(32,12),	
		current_money decimal(32,12),	
		don_gia decimal(32,12),
		don_gia_vnd decimal(32,12),
		vnd decimal(32,12),
		BUT_TOAN int
	)
	

	DECLARE @current_tk nvarchar(128) = null
	DECLARE @current_vthhtp int = null
	DECLARE @current_quantity decimal(32,12)
	DECLARE @current_money decimal(32,12)

	DECLARE @inputType_InputTypeCode NVARCHAR(128)
	DECLARE @gv_billId bigint
	DECLARE @gv_billVersion int
	DECLARE @gv_f_Id int
	DECLARE @gv_tk nvarchar(128)
	DECLARE @gv_vthhtp int
	DECLARE @gv_IsDebt int
	DECLARE @gv_so_luong decimal(32,12)
	DECLARE @gv_ty_gia decimal(32,12)
	DECLARE @gv_don_gia decimal(32,12)
	DECLARE @gv_vnd_no decimal(32,12)
	DECLARE @gv_vnd_co decimal(32,12)
	DECLARE @gv_BUT_TOAN INT
    DECLARE @gv_DecimalPlace INT

	
	DECLARE @VndDecimalPlace INT = 0;
	SELECT @VndDecimalPlace = DecimalPlace FROM dbo.InputField WHERE FieldName = 'vnd0'
	SET @VndDecimalPlace = ISNULL(@VndDecimalPlace,0)

	DECLARE @CurrencyDefaultDecimalPlace INT
	SELECT @CurrencyDefaultDecimalPlace = DecimalPlace FROM dbo.v_Currency WHERE IsPrimary = 1
	IF ISNULL(@CurrencyDefaultDecimalPlace,0) < @VndDecimalPlace
	BEGIN
	    SET @VndDecimalPlace = ISNULL(@CurrencyDefaultDecimalPlace,0)
	END

	DECLARE cursor_gia_von CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR

	SELECT
		d.InputType_InputTypeCode,
		d.InputBill_F_Id,
		d.LatestBillVersion,
		d.F_Id, 
		d.Tk, 	
		d.vthhtp, 
		d.so_luong,
		d.IsDebt,
		d.ty_gia,
		d.don_gia don_gia,
		d.Vnd_no,
		d.Vnd_co,
		d.BUT_TOAN,
		c.DecimalPlace
	FROM dbo._rc_detail d	
		LEFT JOIN dbo.v_Currency c ON d.loai_tien = c.F_Id
	WHERE d.SubsidiaryId = @SubId
	AND d.ngay_ct BETWEEN @FromDate AND @ToDate
	AND d.vthhtp IS NOT NULL
	AND (@ProductId IS NULL OR d.vthhtp = @ProductId)
	AND (@Tk IS NULL OR d.Tk LIKE CONCAT(@Tk,'%'))
	AND
	(d.Tk LIKE '151%'
		OR d.Tk LIKE '152%'
		OR d.Tk LIKE '153%'
		OR d.Tk LIKE '155%'
		OR d.Tk LIKE '156%'
		OR d.Tk LIKE '157%'
		OR d.Tk LIKE '158%'
	)
	--AND d.so_luong > 0	//thue xnk nhap vao chung tu rieng biet
	ORDER BY d.Tk, d.vthhtp, d.ngay_ct, 
	CASE WHEN d.IsDebt = 1 AND d.InputType_InputTypeCode <> @DIEU_CHUYEN_KHO_TYPE THEN 0 ELSE 1 END,
	CASE WHEN d.InputType_InputTypeCode = @DIEU_CHUYEN_KHO_TYPE THEN d.IsDebt ELSE 2 END,
	d.F_Id

	OPEN cursor_gia_von

	FETCH NEXT FROM cursor_gia_von
	INTO
		@inputType_InputTypeCode,
		@gv_billId,
		@gv_billVersion,
		@gv_f_Id,
		@gv_tk,	
		@gv_vthhtp,		
		@gv_so_luong,
		@gv_IsDebt,		
		@gv_ty_gia,
		@gv_don_gia,
		@gv_vnd_no,
		@gv_vnd_co,
		@gv_BUT_TOAN,
		@gv_DecimalPlace

	WHILE @@FETCH_STATUS = 0
	BEGIN
	
		--Chỉ tính số lượng đối với bút toán thành tiền và trường giá vốn
		--Nếu có thêm bút toán thuế (XNK) thì chỉ cộng thêm lượng tiền vào (tổng tiền = tiền hàng + thuế XNK), số lượng thì chỉ tính 1 lần
		IF @gv_BUT_TOAN <> 0 AND  @gv_BUT_TOAN <> 2--except tax, VND0 = Thanh tien, VND2= Gia von
		BEGIN
			SET @gv_so_luong = 0
		END

		DECLARE @gv_don_gia_vnd DECIMAL(32,12) = 0
		
		IF @inputType_InputTypeCode = @DIEU_CHUYEN_KHO_TYPE AND EXISTS(SELECT 0 FROM #GiaVon WHERE f_Id = @gv_f_Id) AND @gv_IsDebt = 1
		BEGIN
		    SELECT @gv_vnd_no = vnd FROM #GiaVon WHERE f_Id = @gv_f_Id
		END

		--IF @current_vthhtp =4849
		--	BEGIN
		--		SELECT @current_money, @current_vthhtp,1,@gv_vthhtp
		--		ROLLBACK
		--		RETURN
		--	END

		IF ISNULL(@current_tk,'') <> ISNULL(@gv_tk,'') OR ISNULL(@current_vthhtp,0) <> ISNULL(@gv_vthhtp,0)
		BEGIN					
			--important: reinforcement need to reset, because if not exists in OpenningDept it will be keep old value
			SET @current_quantity = 0;
			SET @current_money = 0

			SET @current_tk = @gv_tk
			SET @current_vthhtp = @gv_vthhtp
			SELECT @current_quantity =  balance_quantity, @current_money  = o.balance_money FROM  @OpenningDept o WHERE  o.tk = @gv_tk AND o.vthhtp = @gv_vthhtp
			SET @current_quantity = ISNULL( @current_quantity,0)
			SET @current_money = ISNULL(@current_money,0)

			SET @gv_don_gia_vnd = 0

			IF @current_quantity > 0
			BEGIN
				SET @gv_don_gia_vnd = @current_money/@current_quantity;
			END

			print CONCAT('tk-',@gv_tk,'vthh-',@gv_vthhtp,'current_quantity-',@current_quantity,'current_money-',@current_money,'-','-')
		END
			
		IF @current_money >200000000000
		BEGIN
			SELECT @current_money, @current_vthhtp, 'max ' max1
			ROLLBACK
			RETURN
		END
		IF @gv_IsDebt = 1
		BEGIN
			
				SET @current_quantity = ISNULL(@current_quantity,0) + ISNULL(@gv_so_luong,0)
				SET @current_money = ISNULL(@current_money,0) + ISNULL(@gv_vnd_no,0)		
				
				
		END
		ELSE
		BEGIN
			
			IF ISNULL(@current_quantity,0) - @gv_so_luong < 0
			BEGIN
			    SET @IsError = 1;

				SELECT					
						ROW_NUMBER() OVER(ORDER BY(SELECT NULL)) stt,
						p.ProductCode vthhtp_ProductCode,
						p.ProductName vthhtp_ProductName,
						d.InputType_Title,
						d.InputTypeId,
						d.InputBill_F_Id,
						d.ngay_ct,
						d.so_ct,
						d.tk_no,
						d.tk_co,
						d.don_gia,
						d.so_luong,
						
						@current_quantity current_quantity,
						@current_money current_money
						
				FROM dbo._rc d	
					LEFT JOIN dbo.v_Product p ON d.vthhtp = p.F_Id
				WHERE d.F_Id = @gv_f_Id
				AND (@Tk IS NULL OR d.tk_co LIKE CONCAT(@Tk,'%'))
					AND
					(d.tk_co LIKE '151%'
						OR d.tk_co LIKE '152%'
						OR d.tk_co LIKE '153%'
						OR d.tk_co LIKE '155%'
						OR d.tk_co LIKE '156%'
						OR d.tk_co LIKE '157%'
						OR d.tk_co LIKE '158%'
					)
				ROLLBACK
				RETURN
			END


			SET @gv_don_gia_vnd = 0

			IF @current_quantity > 0
			BEGIN
				SET @gv_don_gia_vnd = @current_money/@current_quantity;
			END

			SET @gv_don_gia = @gv_don_gia_vnd / CASE WHEN @gv_ty_gia >0 THEN @gv_ty_gia ELSE 1 END
			IF @gv_DecimalPlace >= 0
			BEGIN
				SET @gv_don_gia = ROUND(@gv_don_gia, @gv_DecimalPlace);  
			END

			DECLARE @gv_thanh_tien DECIMAL(32,12) = @gv_so_luong *  @gv_don_gia_vnd

			SET @current_quantity = ISNULL(@current_quantity,0) - @gv_so_luong

			IF @current_quantity = 0
			BEGIN
			    SET @gv_thanh_tien = ISNULL(@current_money,0)
			END

			SET @current_money = ISNULL(@current_money,0) - @gv_thanh_tien			
			SET @current_money = ROUND(@current_money, @VndDecimalPlace);
			SET @gv_don_gia_vnd = ROUND(@gv_don_gia_vnd, @VndDecimalPlace);
			SET @gv_thanh_tien = ROUND(@gv_thanh_tien, @VndDecimalPlace);
			
						
			INSERT INTO #GiaVon
					(
						InputBill_F_Id,
						BillVersion,
						f_Id,
						tk,
						vthhtp,
						current_quantity,
						current_money,
						don_gia,
						don_gia_vnd,
						vnd,
						BUT_TOAN
					)
					VALUES
					(
						@gv_billId,
						@gv_billVersion,
						@gv_f_Id, -- f_Id - bigint
						@gv_tk, -- tk - int
						@gv_vthhtp, -- vthhtp - int
						@current_quantity,
						@current_money,
						@gv_don_gia,
						@gv_don_gia_vnd,
						@gv_thanh_tien,
						@gv_BUT_TOAN
					)				
		END	

		FETCH NEXT FROM cursor_gia_von
		INTO
			@inputType_InputTypeCode,
			@gv_billId,
			@gv_billVersion,
			@gv_f_Id,
			@gv_tk,			
			@gv_vthhtp,		
			@gv_so_luong,
			@gv_IsDebt,		
			@gv_ty_gia,
			@gv_don_gia,
			@gv_vnd_no,
			@gv_vnd_co,
			@gv_BUT_TOAN,
			@gv_DecimalPlace
	END

	CLOSE cursor_gia_von
	DEALLOCATE cursor_gia_von

	IF @IsUpdate = 1
	BEGIN
			DECLARE @InputValueRowColumns nvarchar(max) = ''
			SELECT @InputValueRowColumns += ','+[COLUMN_NAME] 
				FROM [INFORMATION_SCHEMA].[COLUMNS] 
				WHERE [TABLE_NAME] = 'InputValueRow' 
					AND [COLUMN_NAME] NOT IN('F_Id','BillVersion','CreatedDatetimeUtc','UpdatedDatetimeUtc','SystemLog',
											'don_gia0','don_gia1','don_gia2','don_gia3','don_gia4',
											'vnd0','vnd1','vnd2','vnd3','vnd4','vnd5');

			DECLARE @Sql NVARCHAR(max) = N'
			INSERT INTO InputValueRow(
				BillVersion,CreatedDatetimeUtc,UpdatedDatetimeUtc,SystemLog,
				don_gia0, don_gia1, don_gia2, don_gia3, don_gia4,
				vnd0,vnd1,vnd2,vnd3,vnd4
			' + @InputValueRowColumns + N')

			SELECT 
				BillVersion + 1, GETUTCDATE(), GETUTCDATE(),N''Created automatic by UpdateOutputPrice'', 
				ISNULL(p.don_gia0, r.don_gia0), ISNULL(p.don_gia1, r.don_gia1), ISNULL(p.don_gia2, r.don_gia2), ISNULL(p.don_gia3, r.don_gia3), ISNULL(p.don_gia4, r.don_gia4),
				ISNULL(p.vnd0, r.vnd0), ISNULL(p.vnd1, r.vnd1), ISNULL(p.vnd2, r.vnd2), ISNULL(p.vnd3, r.vnd3), ISNULL(p.vnd4, r.vnd4)
				' + @InputValueRowColumns + N'

				FROM InputValueRow r
					LEFT JOIN (
						SELECT 
							p.f_Id, 
							MAX(CASE WHEN p.BUT_TOAN = 0 THEN p.don_gia ELSE NULL END) don_gia0,
							MAX(CASE WHEN p.BUT_TOAN = 1 THEN p.don_gia ELSE NULL END) don_gia1,
							MAX(CASE WHEN p.BUT_TOAN = 2 THEN p.don_gia ELSE NULL END) don_gia2,
							MAX(CASE WHEN p.BUT_TOAN = 3 THEN p.don_gia ELSE NULL END) don_gia3,
							MAX(CASE WHEN p.BUT_TOAN = 4 THEN p.don_gia ELSE NULL END) don_gia4,

							MAX(CASE WHEN p.BUT_TOAN = 0 THEN p.vnd ELSE NULL END) vnd0,
							MAX(CASE WHEN p.BUT_TOAN = 1 THEN p.vnd ELSE NULL END) vnd1,
							MAX(CASE WHEN p.BUT_TOAN = 2 THEN p.vnd ELSE NULL END) vnd2,
							MAX(CASE WHEN p.BUT_TOAN = 3 THEN p.vnd ELSE NULL END) vnd3,
							MAX(CASE WHEN p.BUT_TOAN = 4 THEN p.vnd ELSE NULL END) vnd4
						FROM #GiaVon p 
						GROUP BY p.f_Id
					) as p ON r.F_Id = p.f_Id
				WHERE r.IsDeleted=0 AND r.SubsidiaryId = @SubId AND r.InputBill_F_Id IN (SELECT DISTINCT InputBill_F_Id FROM #GiaVon)';
			EXECUTE dbo.sp_executesql @stmt = @Sql, @params = N'@SubId INT', @SubId = @SubId;

			UPDATE r 
				SET IsDeleted = 1,
					SystemLog = N'Deleted automatic by Update product cost Output Price',
					DeletedDatetimeUtc = GETUTCDATE()
				FROM dbo.InputValueRow r
				JOIN (
					SELECT DISTINCT InputBill_F_Id, BillVersion FROM #GiaVon
				) p ON r.InputBill_F_Id = p.InputBill_F_Id AND r.BillVersion <= p.BillVersion
				WHERE r.SubsidiaryId = @SubId AND r.IsDeleted=0;		

			UPDATE b 
				SET LatestBillVersion = b.LatestBillVersion + 1,
					UpdatedDatetimeUtc = GETUTCDATE()
				FROM dbo.InputBill b
				JOIN (
					SELECT DISTINCT InputBill_F_Id FROM #GiaVon
				) p ON b.F_Id = p.InputBill_F_Id
				WHERE b.SubsidiaryId = @SubId;

			UPDATE u
				SET sum_vnd0 = (SELECT SUM(r.vnd0) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
					sum_vnd1 = (SELECT SUM(r.vnd1) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
					sum_vnd2 = (SELECT SUM(r.vnd2) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
					sum_vnd3 = (SELECT SUM(r.vnd3) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
					sum_vnd4 = (SELECT SUM(r.vnd4) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion)
			FROM dbo.InputValueRow u
			WHERE u.SubsidiaryId = @SubId AND u.IsBillEntry = 1 AND u.IsDeleted = 0 AND u.InputBill_F_Id IN (SELECT DISTINCT InputBill_F_Id FROM #GiaVon)
		
	END

	
	SELECT					
			ROW_NUMBER() OVER(ORDER BY(SELECT NULL)) stt,
			v.vthhtp,
			p.ProductCode vthhtp_ProductCode,
			p.ProductName vthhtp_ProductName,
			v.InputType_Title,
			v.InputTypeId,
			v.InputBill_F_Id,
			v.ngay_ct,
			v.so_ct,
			v.tk_no,
			v.tk_co,
			v.don_gia * CASE WHEN v.ty_gia>0 THEN v.ty_gia ELSE 1 END don_gia,
			v.so_luong,
			v.vnd,
			gv.don_gia * CASE WHEN v.ty_gia>0 THEN v.ty_gia ELSE 1 END AS don_gia_update,
			gv.vnd as vnd_update,
			v.BUT_TOAN

		FROM #GiaVon gv
			JOIN dbo._rc as v ON gv.f_Id = v.F_Id AND gv.BUT_TOAN = v.BUT_TOAN
			LEFT JOIN dbo.v_Product p ON v.vthhtp = p.F_Id					
		--WHERE gv.vnd > 0
		ORDER BY v.vthhtp, v.ngay_ct, v.InputTypeId, v.InputBill_F_Id, v.BUT_TOAN, v.F_Id
				
		
	DROP TABLE IF EXISTS #GiaVon
	COMMIT TRANSACTION
END


GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_PrepaidExpense] AS SELECT  _PrepaidExpense.F_Id, _PrepaidExpense.UpdatedDatetimeUtc, _PrepaidExpense.PrepaidExpenseCode, _PrepaidExpense.PrepaidExpenseName, _PrepaidExpense.PrepaidExpenseUnit, _PrepaidExpense.PrepaidExpenseQty, _PrepaidExpense.PrepaidExpenseDate, _PrepaidExpense.PrepaidExpenseUsed, _PrepaidExpense.PrepaidExpenseMonthNumber, _PrepaidExpense.PrepaidExpenseTk, _PrepaidExpense.PrepaidExpenseNote, _PrepaidExpense.PrepaidExpenseTk_no, _PrepaidExpense.PrepaidExpensePhan_xuong, _Department_0.[DepartmentName] AS [PrepaidExpenseUsed_DepartmentName], _AccountingAccount_1.[AccountNumber] AS [PrepaidExpenseTk_AccountNumber], _AccountingAccount_2.[AccountNumber] AS [PrepaidExpenseTk_no_AccountNumber], _Department_3.[DepartmentName] AS [PrepaidExpensePhan_xuong_DepartmentName] FROM [MasterDB].[dbo]._PrepaidExpense LEFT JOIN [MasterDB].[dbo].v_Department AS _Department_0 ON _PrepaidExpense.PrepaidExpenseUsed = _Department_0.F_Id LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_1 ON _PrepaidExpense.PrepaidExpenseTk = _AccountingAccount_1.F_Id LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_2 ON _PrepaidExpense.PrepaidExpenseTk_no = _AccountingAccount_2.F_Id LEFT JOIN [MasterDB].[dbo].v_Department AS _Department_3 ON _PrepaidExpense.PrepaidExpensePhan_xuong = _Department_3.F_Id WHERE _PrepaidExpense.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcFixExchangeRateByOrder]	
	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@Currency INT,
	@Tk NVARCHAR(128),
	@SubId AS int
AS
BEGIN
	--SELECT @Currency loait
	SET @Tk = CONCAT(@Tk,'%')
	;WITH ps_co AS
	(
		SELECT
			tk.kh_co,
			tk.order_code,
			tk.ngay_ct,
			tk.so_ct,
			tk.tk_co,
			tk.InputTypeId,
			tk.InputBill_F_Id,
			SUM(tk.ngoai_te) ngoai_te,
			SUM(tk.vnd) vnd,
			AVG(tk.ty_gia) ty_gia
		FROM dbo._rc tk
		WHERE  tk.tk_co LIKE @Tk
			AND tk.tk_no LIKE N'1122%'
			AND tk.ngay_ct BETWEEN @FromDate AND @ToDate
			AND tk.loai_tien = @Currency
			AND tk.SubsidiaryId = @SubId
			AND tk.vnd>0
			AND tk.ngoai_te>0
		GROUP BY
			tk.kh_co,
			tk.order_code,
			tk.ngay_ct,
			tk.so_ct,
			tk.tk_co,
			tk.InputTypeId,
			tk.InputBill_F_Id
	), ps_no AS
	(
		SELECT
			tk.kh_no,
			tk.tk_no,
			tk.order_code,
			
			STRING_AGG(tk.InputBill_F_Id,',') InputBill_F_Ids,
			STRING_AGG(tk.InputTypeId,',') InputTypeIds,
			STRING_AGG(tk.so_ct,',') so_cts,

			SUM(tk.ngoai_te) ngoai_te,
			SUM(tk.vnd) vnd,
			AVG(tk.ty_gia) ty_gia
		FROM (
			SELECT
				tk.kh_no,
				tk.tk_no,
				tk.order_code,

				tk.InputBill_F_Id,
				tk.InputTypeId,
				tk.so_ct,				

				SUM(tk.ngoai_te) ngoai_te,
				SUM(tk.vnd) vnd,
				SUM(tk.ty_gia * tk.ngoai_te)/SUM(tk.ngoai_te) ty_gia
			FROM dbo._rc tk
			WHERE tk.tk_no LIKE @Tk
				--AND tk.ngay_ct BETWEEN @FromDate AND @ToDate
				AND tk.loai_tien = @Currency
				AND tk.SubsidiaryId = @SubId
				AND EXISTS(SELECT 0 FROM ps_co c WHERE tk.order_code = c.order_code)
			GROUP BY
				tk.kh_no,
				tk.tk_no,
				tk.order_code,
				tk.InputBill_F_Id,
				tk.InputTypeId,
				tk.so_ct
		) tk
		GROUP BY
				tk.kh_no,							
				tk.tk_no,
				tk.order_code

	),v AS(
		SELECT 
			ps_co.kh_co kh,
			ps_co.order_code,
			ps_no.tk_no,
			ps_no.ngoai_te			no_ngoai_te,
			ps_no.vnd				no_vnd,
			ps_no.ty_gia			no_ty_gia,
			ps_no.InputBill_F_Ids	no_InputBill_F_Ids,
			ps_no.InputTypeIds		no_InputTypeIds,
			ps_no.so_cts			no_so_cts,
		
			ps_co.ngay_ct			co_ngay_ct,
			ps_co.so_ct				co_so_ct,
			ps_co.InputTypeId		co_InputTypeId,
			ps_co.InputBill_F_Id	co_InputBill_F_Id,
			ps_co.ngoai_te			co_ngoai_te,
			ps_co.vnd				co_vnd,
			ps_co.ty_gia			co_ty_gia,
			(ps_co.ty_gia - ps_no.ty_gia)*ps_co.ngoai_te chenh_lech--,
			--CONCAT('N',ps_no.tk_no,'/C',ps_co.tk_co) hach_toan
		
		FROM ps_co
		LEFT JOIN  ps_no ON  ps_co.kh_co = ps_no.kh_no AND ps_no.order_code = ps_co.order_code AND ps_no.tk_no = ps_co.tk_co
	)
	SELECT
		v.kh,
		c.CustomerId customerId,
		c.PartnerCode kh_PartnerCode,
		c.PartnerName kh_PartnerName,
		v.order_code,
		v.tk_no,
		v.no_ngoai_te,
		v.no_vnd,
		v.no_ty_gia,
		v.no_InputBill_F_Ids,
		v.no_InputTypeIds,
		v.no_so_cts,
		
		v.co_ngay_ct,
		v.co_so_ct,
		v.co_InputTypeId,
		v.co_InputBill_F_Id,
		v.co_ngoai_te,
		v.co_vnd,
		v.co_ty_gia,
		v.chenh_lech,
		CASE WHEN v.chenh_lech>0 THEN v.tk_no ELSE '515' END ket_chuyen_no,
		CASE WHEN v.chenh_lech>0 THEN '515' ELSE v.tk_no END ket_chuyen_co,
		
		CASE WHEN v.chenh_lech IS NULL OR v.chenh_lech = 0 THEN NULL
		ELSE
		CONCAT(
			'N',
			CASE WHEN v.chenh_lech>0 THEN v.tk_no ELSE '515' END,
			'/C',
			CASE WHEN v.chenh_lech>0 THEN '515' ELSE v.tk_no END
		) 
		END
		hach_toan
	FROM v
	LEFT JOIN dbo.v_Partner c ON v.kh = c.F_Id
	ORDER BY v.co_ngay_ct, v.co_InputTypeId, v.co_InputBill_F_Id
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcCostTransferDetail]
	@Tk NVARCHAR(128)=NULL,
	@FromDate AS datetime,
    @ToDate AS datetime,
	@Type AS int,
	@by_bo_phan AS bit,
	@by_kh AS bit,
	@by_tscd AS bit,
	@by_khoan_muc_cp AS bit,
	@by_phan_xuong AS bit,
	@by_vthhtp AS bit,
	@by_kho AS bit,
	@bo_phan AS int,
	@kh AS nvarchar(512),
	@tscd AS int,
	@khoan_muc_cp AS int,
	@phan_xuong AS int,
	@vthhtp AS int,
	@kho AS int,
	@Du_no_dau_ky AS decimal(24,5) OUTPUT,
	@Du_no_cuoi_ky AS decimal(24,5) OUTPUT,
	@SubId AS int
AS
BEGIN

	SET @by_bo_phan = ISNULL(@by_bo_phan,0)
	SET @by_kh = ISNULL(@by_kh,0)
	SET @by_tscd = ISNULL(@by_tscd,0)
	SET @by_khoan_muc_cp = ISNULL(@by_khoan_muc_cp,0)
	SET @by_phan_xuong = ISNULL(@by_phan_xuong,0)
	SET @by_vthhtp = ISNULL(@by_vthhtp,0)
	SET @by_kho = ISNULL(@by_kho,0)

	IF @kh = ''
		SET @kh = NULL

	DECLARE @tblTk TABLE
	(
		Tk NVARCHAR(128)
	)

	IF @Tk IS NOT NULL
	BEGIN
	    INSERT @tblTk
	    (
	        Tk
	    )
	    VALUES
	    (@Tk)
	END
	ELSE
	BEGIN
	    IF @Type = 1
		BEGIN
			INSERT INTO @tblTk
			(
				Tk
			)
			VALUES
			('621%'),('622%'),('627%');
		END

		IF @Type = 2 OR @Type = 3
		BEGIN
			INSERT INTO @tblTk
			(
				Tk
			)
			VALUES
			('154%');			    
		END
	END
	

	IF @Type = 3
	BEGIN
	    SET @by_bo_phan = 0
		SET @by_kh = 0
		SET @by_tscd = 0
		SET @by_khoan_muc_cp = 0
		SET @by_phan_xuong = 0
		SET @by_vthhtp = 0
		SET @by_kho = 0
	END

	SELECT					
		@Du_no_dau_ky = SUM(CASE WHEN d.ngay_ct < @FromDate THEN ISNULL(d.Vnd_no,0) - ISNULL(d.Vnd_co,0) ELSE 0 END),
		@Du_no_cuoi_ky = SUM(ISNULL(d.Vnd_no,0) - ISNULL(d.Vnd_co,0))
	FROM dbo._rc_detail d
		JOIN @tblTk t ON d.Tk LIKE t.Tk
	WHERE d.SubsidiaryId=@SubId AND d.ngay_ct <= @ToDate
		AND  (@by_bo_phan = 0 OR d.bo_phan = @bo_phan OR d.bo_phan IS NULL AND @bo_phan IS NULL)
		AND  (@by_kh = 0 OR d.kh = @kh OR d.kh IS NULL AND @kh IS NULL)
		AND  (@by_tscd = 0 OR d.tscd = @tscd OR d.tscd IS NULL AND @tscd IS NULL)
		AND  (@by_khoan_muc_cp = 0 OR d.khoan_muc_cp = @khoan_muc_cp OR d.khoan_muc_cp IS NULL AND @khoan_muc_cp IS NULL)
		AND  (@by_phan_xuong = 0 OR d.phan_xuong = @phan_xuong OR d.phan_xuong IS NULL AND @phan_xuong IS NULL)
		AND  (@by_vthhtp = 0 OR d.vthhtp = @vthhtp OR d.vthhtp IS NULL AND @vthhtp IS NULL)
		AND  (@by_kho = 0 OR d.kho = @kho OR d.kho IS NULL AND @kho IS NULL)

	
	SELECT 
			d.InputBill_F_Id billId,
			d.InputTypeId billTypeId,  
			d.so_ct, 
			d.ngay_ct, 
			d.dien_giai, 
			d.tk_co, 
			d.tk_no, 
			d.vnd
		FROM [dbo]._rc d
			JOIN @tblTk t ON d.tk_co LIKE t.Tk OR d.tk_no LIKE t.Tk
		WHERE d.ngay_ct BETWEEN @FromDate AND @ToDate
		AND  d.SubsidiaryId = @SubId		
		AND  (@by_bo_phan = 0 OR d.bo_phan = @bo_phan OR d.bo_phan IS NULL AND @bo_phan IS NULL)
		AND  (@by_kh = 0 OR d.kh_co = @kh OR d.kh_co IS NULL AND @kh IS NULL OR d.kh_no = @kh OR d.kh_no IS NULL AND @kh IS NULL)
		AND  (@by_tscd = 0 OR d.tscd = @tscd OR d.tscd IS NULL AND @tscd IS NULL)
		AND  (@by_khoan_muc_cp = 0 OR d.khoan_muc_cp = @khoan_muc_cp OR d.khoan_muc_cp IS NULL AND @khoan_muc_cp IS NULL)
		AND  (@by_phan_xuong = 0 OR d.phan_xuong = @phan_xuong OR d.phan_xuong IS NULL AND @phan_xuong IS NULL)
		AND  (@by_vthhtp = 0 OR d.vthhtp = @vthhtp OR d.vthhtp IS NULL AND @vthhtp IS NULL)
		AND  (@by_kho = 0 OR d.kho = @kho OR d.kho IS NULL AND @kho IS NULL)
	
END

GO

USE AccountancyDB
GO
/*
* Tính giá thành
*/
CREATE OR ALTER PROCEDURE [dbo].[asp_CalcProductPrice]
	@SubId INT,
	@IsByLsx BIT,
	@IsByOrder BIT,
	@IsByStock BIT,
	@ProductId INT,
	@OrderCode NVARCHAR(128),
	@MaLsx NVARCHAR(128),
	@StockId INT,

	@ProgressMaterialOpen DECIMAL(32,12) = NULL,
	@ProgressMaterialEnd DECIMAL(32,12) = NULL,		

	@ProgressLaborsOpen DECIMAL(32,12) = NULL,
	@ProgressLaborsEnd DECIMAL(32,12) = NULL,

	@ProgressFactoriesOpen DECIMAL(32,12) = NULL,
	@ProgressFactoriesEnd DECIMAL(32,12) = NULL,

	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@CustomPrice			_DECIMAL_KEY_VALUES READONLY,
	@AllocationRate			_DECIMAL_KEY_VALUES READONLY,
	@OtherFee				_DECIMAL_KEY_VALUES READONLY,
	@DirectMaterialFee		_DECIMAL_KEY_VALUES READONLY,
	@DirectLaborFee			_DECIMAL_KEY_VALUES READONLY,
	@DirectGeneralFee		_DECIMAL_KEY_VALUES READONLY,

	@IndirectMaterialFeeAllocationTypeId	INT,
	@IndirectMaterialFeeSum					decimal(32,12) OUTPUT,
	@IndirectMaterialFeeSumCustom			decimal(32,12),

	@IndirectLaborFeeAllocationTypeId		INT,
	@IndirectLaborFeeSum					decimal(32,12) OUTPUT,
	@IndirectLaborFeeSumCustom				decimal(32,12),

	@GeneralManufacturingAllocationTypeId	INT,
	@GeneralManufacturingSum				decimal(32,12) OUTPUT,
	@GeneralManufacturingSumCustom			decimal(32,12),

	@IsReviewUpdate							BIT = 0,
	@IsUpdate								BIT = 0
AS
BEGIN
	SET @IsByLsx = ISNULL(@IsByLsx,0)
	SET @IsByOrder = ISNULL(@IsByOrder,0)
	SET @IsByStock = ISNULL(@IsByStock,0)
	IF LEN(@OrderCode)=0
		SET @OrderCode = NULL

	IF LEN(@MaLsx)=0
		SET @MaLsx = NULL
	IF @StockId=0
		SET @StockId = NULL	

	BEGIN TRANSACTION

		DECLARE @tbl TABLE(
				stt						int IDENTITY(1,1),
				group_id				nvarchar(512),
				row_id					nvarchar(512),			
				ma_lsx					nvarchar(512),			
				order_code				nvarchar(512),			
				kho						int,			
				vthhtp					int,
				vthhtp_ProductCode		nvarchar(128),
				vthhtp_ProductName		nvarchar(128),
				vthhtp_UnitId_UnitName	nvarchar(128),
				group_so_luong			decimal(32,12),
				so_luong				decimal(32,12),
				so_luong_lsx				decimal(32,12),
				allocation_rate			decimal(32,12),
				chi_phi_nvl_tt			decimal(32,12),
				chi_phi_nvl_tt_custom	decimal(32,12),
				chi_phi_nhan_cong_tt	decimal(32,12),
				chi_phi_nhan_cong_tt_custom	decimal(32,12),
				chi_phi_chung_tt		DECIMAL(32,12),
				chi_phi_chung_tt_custom	decimal(32,12),
				chi_phi_khac			decimal(32,12),
				chi_phi_nvl_gt			decimal(32,12),
				chi_phi_nhan_cong_gt	decimal(32,12),
				chi_phi_sx_chung		decimal(32,12),
				gia_thanh				decimal(32,12),
				gia_thanh_tong_tien		decimal(32,12),
				gia_ban					decimal(32,12),
				gia_ban_custom			decimal(32,12),
				gia_ban_tong_tien		decimal(32,12),
				chenh_lech				decimal(32,12),
				ty_le					decimal(32,12)
		);

		INSERT INTO @tbl
			(
				group_id,
				row_id,			
				ma_lsx,
				order_code,
				kho,
				vthhtp,
				vthhtp_ProductCode,
				vthhtp_ProductName,
				vthhtp_UnitId_UnitName,
				so_luong_lsx,
				so_luong,
				allocation_rate			
			)

			SELECT 
				MAX(t.group_id), 
				CONCAT(t.group_id,'-product-', t.vthhtp),
				CASE @IsByLsx WHEN 1 THEN MAX(t.ma_lsx) ELSE ''END,
				CASE @IsByOrder WHEN 1 THEN MAX(t.order_code) ELSE ''END,
				CASE @IsByStock WHEN 1 THEN MAX(t.kho) ELSE NULL END,		
				t.vthhtp,
				p.ProductCode,
				p.ProductName,
				p.UnitId_UnitName,
				MAX(t.Quantity),
				SUM(t.so_luong),
				SUM(t.so_luong)			
			FROM
			(
				SELECT
					CONCAT('group',
						'-',CASE @IsByLsx WHEN 1 THEN t.ma_lsx ELSE ''END,
						'-',CASE @IsByOrder WHEN 1 THEN t.order_code ELSE ''END,
						'-',CASE @IsByStock WHEN 1 THEN t.kho ELSE ''END
					) AS group_id,				
					t.ma_lsx,
					t.order_code,
					t.kho,
					t.vthhtp,
					t.so_luong,
					lsx.Quantity
				FROM dbo._rc t
					OUTER APPLY (
						SELECT d.ProductionOrderCode,d.ProductId, SUM(d.Quantity) Quantity 
						FROM dbo.vProductionOrderDetailSimple d 
						WHERE ISNULL(d.ProductionOrderCode,'') = ISNULL(t.ma_lsx,'') AND d.ProductId = t.vthhtp
						GROUP BY d.ProductionOrderCode,d.ProductId
					) lsx
				WHERE t.SubsidiaryId = @SubId AND t.tk_no LIKE '155%' AND t.ngay_ct BETWEEN @FromDate AND @ToDate AND t.vthhtp IS NOT NULL
					AND (@ProductId IS NULL OR t.vthhtp = @ProductId)
					AND (@OrderCode IS NULL OR t.order_code = @OrderCode)
					AND (@MaLsx IS NULL OR t.ma_lsx = @MaLsx)
					AND (@StockId IS NULL OR t.kho = @StockId)
			) t
			JOIN dbo.v_Product p ON t.vthhtp = p.F_Id
					
			GROUP BY
				t.group_id,
				t.vthhtp,
				p.ProductCode,
				p.ProductName,
				p.UnitId_UnitName
			ORDER BY
				t.group_id,
				t.vthhtp,
				p.ProductCode,
				p.ProductName,
				p.UnitId_UnitName;
			
			--1 b. Lấy thông tin giá bán/tổng tiền bán
			DECLARE @tbl_tong_gia_ban TABLE (				
				row_id				nvarchar(512),
				gia_ban				decimal(32,12),
				tong_gia_ban		decimal(32,12)
			);

			INSERT INTO @tbl_tong_gia_ban
			(					
				row_id,
				gia_ban,
				tong_gia_ban		
			)
			SELECT				
				CONCAT(t.group_id,'-product-', t.vthhtp),
				sum(t.vnd)/sum(t.so_luong),--gia_ban
				sum(t.vnd)--tong_gia_ban			
			FROM (
				SELECT
					CONCAT('group',
						'-',CASE @IsByLsx WHEN 1 THEN t.ma_lsx ELSE ''END,
						'-',CASE @IsByOrder WHEN 1 THEN t.order_code ELSE ''END,
						'-',CASE @IsByStock WHEN 1 THEN t.kho ELSE ''END
					) AS group_id,				
					t.vthhtp,
					t.so_luong,
					t.vnd
				FROM dbo._rc t				
				WHERE t.SubsidiaryId = @SubId  AND t.tk_co LIKE '511%'  AND t.vthhtp IS NOT NULL--AND t.tk_no LIKE '131%'AND t.ngay_ct BETWEEN @FromDate AND @ToDate
				AND (@ProductId IS NULL OR t.vthhtp = @ProductId)
				AND EXISTS(SELECT 0 FROM @tbl b WHERE b.vthhtp = t.vthhtp)
			) AS t
			
			GROUP BY
				t.group_id,
				t.vthhtp			

			UPDATE t 
				SET t.gia_ban			= s.gia_ban--,
					--t.gia_ban_custom	= cp.[Value],
					--t.gia_ban_tong_tien = t.so_luong * ISNULL(cp.[Value], s.gia_ban)
			FROM @tbl t
				JOIN @tbl_tong_gia_ban s ON t.row_id = s.row_id
				--LEFT JOIN @CustomPrice cp ON t.row_id = cp.[Key];


			DECLARE @tbl_lastest_price TABLE (
				productId INT,
				price	decimal(32,12)
			);

			INSERT INTO @tbl_lastest_price
			(	
				productId,
				price
			)
			SELECT t.vthhtp, t.vnd/t.so_luong FROM
			(
				SELECT
					ROW_NUMBER() OVER (PARTITION BY t.vthhtp ORDER BY t.ngay_ct DESC) stt,
					t.vthhtp,					
					t.vnd,
					t.so_luong
				FROM dbo._rc t

				WHERE t.SubsidiaryId = @SubId AND t.tk_co LIKE '511%'  AND t.vthhtp IS NOT NULL--AND t.tk_no LIKE '131%' AND t.ngay_ct BETWEEN @FromDate AND @ToDate
				AND (@ProductId IS NULL OR t.vthhtp = @ProductId) AND t.vnd>0  AND t.so_luong > 0
			) t WHERE t.stt = 1 AND t.so_luong > 0

			UPDATE t 
				SET t.gia_ban			= s.price
			FROM @tbl t
				JOIN @tbl_lastest_price s ON t.vthhtp = s.productId
			WHERE t.gia_ban IS NULL

			UPDATE t 
				SET t.gia_ban_custom	= cp.[Value],
					t.gia_ban_tong_tien = t.so_luong * ISNULL(cp.[Value], t.gia_ban)
			FROM @tbl t				
				LEFT JOIN @CustomPrice cp ON t.row_id = cp.[Key];

			UPDATE t 
				SET t.allocation_rate	= r.[Value]
			FROM @tbl t
				JOIN @AllocationRate r ON t.row_id = r.[Key];

			DECLARE @IsInputRate BIT = 0;

			IF EXISTS(SELECT 0 FROM @AllocationRate)
				SET @IsInputRate = 1;

			--2. Tính tổng chi phí trực tiếp theo lsx
			DECLARE @tbl_tong_truc_tiep TABLE(
				group_id				nvarchar(512),
				so_luong				decimal(32,12),
				allocation_rate			decimal(32,12),
				gia_ban_tong_tien		decimal(32,12),
				chi_phi_nvl_tt			decimal(32,12),
				chi_phi_nhan_cong_tt	decimal(32,12),
				chi_phi_chung_tt		DECIMAL(32,12)
			);

			--DECLARE @tong_nvl_tt decimal(32,12)
			--DECLARE @tong_nhan_cong_tt decimal(32,12)

			--SELECT @tong_nvl_tt = SUM(vnd) FROM _rc WHERE SubsidiaryId = @SubId AND ngay_ct BETWEEN @FromDate AND @ToDate AND tk_no LIKE ''621%'' AND (tk_co LIKE ''152%'' OR tk_co LIKE ''153%'' OR tk_co LIKE ''156%'')
			--SELECT @tong_nhan_cong_tt = SUM(vnd) FROM _rc WHERE SubsidiaryId = @SubId AND ngay_ct BETWEEN @FromDate AND @ToDate AND tk_no LIKE ''622%'' AND (tk_co LIKE ''334%'')

			INSERT INTO @tbl_tong_truc_tiep
			(	
				group_id,
				so_luong,
				allocation_rate,
				gia_ban_tong_tien,
				chi_phi_nvl_tt,
				chi_phi_nhan_cong_tt,
				chi_phi_chung_tt
			)
			SELECT 

					group_id,
					SUM(t.so_luong),
					SUM(CASE WHEN @IsInputRate = 1 THEN t.allocation_rate ELSE t.so_luong END),
					SUM(t.gia_ban_tong_tien),
				
					(
						--Chi phí NVL trực tiếp: Nợ 621, có 152, 153,156 theo mã đơn hàng hoặc mã lệnh SX tập hợp theo phiếu chi tiết--BETWEEN @FromDate AND @ToDate (update: bo tk co)
						SELECT SUM(r.vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct <= @ToDate AND r.tk_no LIKE '621%'-- AND (r.tk_co LIKE '152%' OR r.tk_co LIKE '153%' OR r.tk_co LIKE '156%')
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)
						AND (@StockId IS NULL OR r.kho = @StockId)

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.ma_lsx))
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.order_code))
						AND (@IsByStock = 0 OR r.kho = MAX(t.kho))					
					),

					(
						--Chi phí nhân công trực tiếp: Nợ 622, có 334 tập hợp theo LSX hoặc mã Đơn hàng
						SELECT SUM(vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct <= @ToDate AND r.tk_no LIKE '622%'-- AND (r.tk_co LIKE '334%') 
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)
						AND (@StockId IS NULL OR r.kho = @StockId)

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.ma_lsx))
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.order_code))
						AND (@IsByStock = 0 OR r.kho = MAX(t.kho))	
					),

					(
						--Chi phí chung trực tiếp (Cột J) được tổng hợp từ các CTGS có phát sinh chỉ định các LSX và ĐH theo lựa chọn Nợ 627,  tập hợp theo LSX hoặc mã Đơn hàng không xét thòi gian														
						SELECT SUM(vnd) FROM dbo._rc r WHERE r.SubsidiaryId = @SubId AND r.ngay_ct <= @ToDate AND r.tk_no LIKE '627%'
						AND (@ProductId IS NULL OR r.vthhtp = @ProductId)
						AND (@OrderCode IS NULL OR r.order_code = @OrderCode)
						AND (@MaLsx IS NULL OR r.ma_lsx = @MaLsx)
						AND (@StockId IS NULL OR r.kho = @StockId)

						AND (@IsByLsx = 0 OR r.ma_lsx = MAX(t.ma_lsx))
						AND (@IsByOrder = 0 OR r.order_code = MAX(t.order_code))
						AND (@IsByStock = 0 OR r.kho = MAX(t.kho))				
					)
				
			FROM @tbl t			
			GROUP BY t.group_id;

			DECLARE @group_id				nvarchar(512)
			DECLARE @row_id					nvarchar(512)		
			DECLARE @vthhtp					int		
			DECLARE @vthhtp_ProductCode		nvarchar(128)
			DECLARE @vthhtp_ProductName		nvarchar(128)
			DECLARE @vthhtp_UnitId_UnitName	nvarchar(128)
			DECLARE @so_luong				decimal(32,12)
			DECLARE @so_luong_lsx			decimal(32,12)
			DECLARE @allocation_rate		decimal(32,12)
			DECLARE @chi_phi_nvl_tt			decimal(32,12)
			DECLARE @chi_phi_nvl_tt_custom	decimal(32,12)
			DECLARE @chi_phi_nhan_cong_tt	decimal(32,12)
			DECLARE @chi_phi_nhan_cong_tt_custom	decimal(32,12)
			DECLARE @chi_phi_chung_tt		DECIMAL(32,12)
			DECLARE @chi_phi_chung_tt_custom	decimal(32,12)
			DECLARE @chi_phi_khac			decimal(32,12)
			DECLARE @chi_phi_nvl_gt			decimal(32,12)
			DECLARE @chi_phi_nhan_cong_gt	decimal(32,12)
			DECLARE @chi_phi_sx_chung		decimal(32,12)
			DECLARE @gia_thanh				decimal(32,12)
			DECLARE @gia_thanh_tong_tien	decimal(32,12)
			DECLARE @gia_ban				decimal(32,12)
			DECLARE @gia_ban_tong_tien		decimal(32,12)
			DECLARE @chenh_lech				decimal(32,12)
			DECLARE @ty_le					decimal(32,12)

			DECLARE cursor_tinh_gia CURSOR LOCAL
			READ_ONLY
			FOR 
				SELECT
					group_id,
					row_id,			
					vthhtp,
					vthhtp_ProductCode,
					vthhtp_ProductName,
					vthhtp_UnitId_UnitName,
					so_luong,
					so_luong_lsx,
					allocation_rate,
					chi_phi_nvl_tt,
					chi_phi_nvl_tt_custom,
					chi_phi_nhan_cong_tt,
					chi_phi_nhan_cong_tt_custom,
					chi_phi_chung_tt,
					chi_phi_chung_tt_custom,
					chi_phi_khac,
					chi_phi_nvl_gt,
					chi_phi_nhan_cong_gt,
					chi_phi_sx_chung,
					gia_thanh,
					gia_thanh_tong_tien,
					gia_ban,
					gia_ban_tong_tien,
					chenh_lech,
					ty_le
				FROM  @tbl

			--3. Tính Chi phí NVL trực tiếp, Nhân công trực tiếp theo tỷ lệ giá bán
			OPEN cursor_tinh_gia

			FETCH NEXT FROM cursor_tinh_gia INTO
					@group_id,
					@row_id,				
					@vthhtp,
					@vthhtp_ProductCode,
					@vthhtp_ProductName,
					@vthhtp_UnitId_UnitName,
					@so_luong,
					@so_luong_lsx,
					@allocation_rate,
					@chi_phi_nvl_tt,
					@chi_phi_nvl_tt_custom,
					@chi_phi_nhan_cong_tt,
					@chi_phi_nhan_cong_tt_custom,
					@chi_phi_chung_tt,
					@chi_phi_chung_tt_custom,
					@chi_phi_khac,
					@chi_phi_nvl_gt,
					@chi_phi_nhan_cong_gt,
					@chi_phi_sx_chung,
					@gia_thanh,
					@gia_thanh_tong_tien,
					@gia_ban,
					@gia_ban_tong_tien,
					@chenh_lech,
					@ty_le
			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @calc_chi_phi_nvl_tt			decimal(32,12)	= NULL;
				DECLARE @calc_chi_phi_nvl_tt_custom		decimal(32,12)	= NULL;

				DECLARE @calc_chi_phi_nhan_cong_tt			decimal(32,12)	= NULL;
				DECLARE @calc_chi_phi_nhan_cong_tt_custom	decimal(32,12)	= NULL;

				DECLARE @calc_chi_phi_chung_tt			decimal(32,12)	= NULL;
				DECLARE @calc_chi_phi_chung_tt_custom	decimal(32,12)	= NULL;

				DECLARE @calc_chi_phi_khac				decimal(32,12)	= NULL;

		
				DECLARE @calc_allocation_rate			decimal(32,12) = NULL;

				DECLARE @group_so_luong					decimal(32,12) = NULL;

				DECLARE @orderRate DECIMAL(32,12) = 1;
				IF ISNULL(@so_luong,0) < ISNULL(@so_luong_lsx,0) AND @so_luong_lsx > 0
				BEGIN
				    SET @orderRate = @so_luong/@so_luong_lsx
				END

				SELECT 
						@calc_allocation_rate			= (@allocation_rate/allocation_rate) * 100,
						@calc_chi_phi_nvl_tt			= @orderRate *  (@allocation_rate/allocation_rate)*chi_phi_nvl_tt,
						@calc_chi_phi_nhan_cong_tt		= @orderRate * (@allocation_rate/allocation_rate)*chi_phi_nhan_cong_tt,
						@calc_chi_phi_chung_tt			= @orderRate * (@allocation_rate/allocation_rate)*chi_phi_chung_tt,
						@group_so_luong					= so_luong

					FROM  @tbl_tong_truc_tiep
					WHERE group_id = @group_id;

				SELECT @calc_chi_phi_khac					= [Value]	FROM @OtherFee			WHERE [Key] = @row_id;

				SELECT @calc_chi_phi_nvl_tt_custom			= [Value]	FROM @DirectMaterialFee WHERE [Key] = @row_id;

				SELECT @calc_chi_phi_nhan_cong_tt_custom	= [Value]	FROM @DirectLaborFee	WHERE [Key] = @row_id;

				SELECT @calc_chi_phi_chung_tt_custom		= [Value]	FROM @DirectGeneralFee	WHERE [Key] = @row_id;

				UPDATE  @tbl SET 
						group_so_luong			= @group_so_luong,
						allocation_rate			= @calc_allocation_rate,
						chi_phi_nvl_tt			= @calc_chi_phi_nvl_tt,
						chi_phi_nvl_tt_custom	= @calc_chi_phi_nvl_tt_custom,

						chi_phi_nhan_cong_tt		= @calc_chi_phi_nhan_cong_tt,
						chi_phi_nhan_cong_tt_custom	= @calc_chi_phi_nhan_cong_tt_custom,

						chi_phi_chung_tt		= @calc_chi_phi_chung_tt,
						chi_phi_chung_tt_custom	= @calc_chi_phi_chung_tt_custom,

						chi_phi_khac			= @calc_chi_phi_khac

					WHERE row_id = @row_id
	
	
				FETCH NEXT FROM cursor_tinh_gia INTO
					@group_id,
					@row_id,				
					@vthhtp,
					@vthhtp_ProductCode,
					@vthhtp_ProductName,
					@vthhtp_UnitId_UnitName,
					@so_luong,
					@so_luong_lsx,
					@allocation_rate,
					@chi_phi_nvl_tt,
					@chi_phi_nvl_tt_custom,
					@chi_phi_nhan_cong_tt,
					@chi_phi_nhan_cong_tt_custom,
					@chi_phi_chung_tt,
					@chi_phi_chung_tt_custom,
					@chi_phi_khac,
					@chi_phi_nvl_gt,
					@chi_phi_nhan_cong_gt,
					@chi_phi_sx_chung,
					@gia_thanh,
					@gia_thanh_tong_tien,
					@gia_ban,
					@gia_ban_tong_tien,
					@chenh_lech,
					@ty_le
			END

			CLOSE cursor_tinh_gia



			---phan 3

			DECLARE @ENUM_ALLOCATION_TYPE_DIRECT_MATERIAL		INT=1
			DECLARE @ENUM_ALLOCATION_TYPE_DIRECT_LABOR			INT=2
			DECLARE @ENUM_ALLOCATION_TYPE_TOTAL_SELL_PRICE		INT=3
			DECLARE @ENUM_ALLOCATION_TYPE_OTHER					INT=4


			--4. Tính Chi phí NVL gián tiếp, Nhân công gián tiếp, chi phí chung theo tiêu chí
			DECLARE @Tong_chi_phi_nvl_tt decimal(32,12)
			DECLARE @Tong_chi_phi_nhan_cong_tt decimal(32,12)
			DECLARE @Tong_chi_phi_chung_tt decimal(32,12)
			DECLARE @Tong_gia_ban_tong_tien decimal(32,12)
			DECLARE @Tong_chi_phi_khac decimal(32,12)

			SELECT @Tong_chi_phi_nvl_tt			= SUM(CASE WHEN chi_phi_nvl_tt_custom IS NOT NULL THEN chi_phi_nvl_tt_custom ELSE chi_phi_nvl_tt END)					FROM @tbl
			SET @Tong_chi_phi_nvl_tt = ISNULL(@Tong_chi_phi_nvl_tt,0)
			SELECT @Tong_chi_phi_nhan_cong_tt	= SUM(CASE WHEN chi_phi_nhan_cong_tt_custom IS NOT NULL THEN chi_phi_nhan_cong_tt_custom ELSE chi_phi_nhan_cong_tt END)	FROM @tbl
			SET @Tong_chi_phi_nhan_cong_tt = ISNULL(@Tong_chi_phi_nhan_cong_tt,0)
			SELECT @Tong_chi_phi_chung_tt		= SUM(CASE WHEN chi_phi_chung_tt_custom IS NOT NULL THEN chi_phi_chung_tt_custom ELSE chi_phi_chung_tt END)	FROM @tbl
			SET @Tong_chi_phi_chung_tt = ISNULL(@Tong_chi_phi_chung_tt,0)
			SELECT @Tong_chi_phi_khac			= SUM(chi_phi_khac)																							FROM @tbl
			SET @Tong_chi_phi_khac = ISNULL(@Tong_chi_phi_khac,0)
			SELECT @Tong_gia_ban_tong_tien		= SUM(gia_ban_tong_tien)																					FROM @tbl
			SET @Tong_gia_ban_tong_tien = ISNULL(@Tong_gia_ban_tong_tien,0)

			DECLARE @Tong_chi_phi_nvl_gt decimal(32,12)
			DECLARE @Tong_chi_phi_nhan_cong_gt decimal(32,12)			
			DECLARE @Tong_chi_phi_sx_chung decimal(32,12)
		

			--SL = Sum C621, N154 trong kỳ lựa chọn không nằm trong tiêu chí
			/*
			SELECT @Tong_chi_phi_nvl_gt = SUM(r.Vnd)	
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.ma_lsx)
						AND (@IsByOrder = 0 OR r.order_code = t.order_code)
						AND (@IsByStock = 0 OR r.kho = t.kho)	
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '621%' AND t.group_id IS NULL
			*/
			DECLARE @TotalC612N154 DECIMAL(32,12) = 0
			SELECT @TotalC612N154 = SUM(t.vnd) 
					FROM dbo._rc t
					WHERE t.SubsidiaryId = @SubId AND t.tk_co LIKE '621%' AND t.tk_no LIKE '154%' AND t.ngay_ct BETWEEN @FromDate AND @ToDate --AND t.vthhtp IS NOT NULL
					AND (@ProductId IS NULL OR t.vthhtp = @ProductId)
					AND (@OrderCode IS NULL OR t.order_code = @OrderCode)
					AND (@MaLsx IS NULL OR t.ma_lsx = @MaLsx)
					AND (@StockId IS NULL OR t.kho = @StockId);

			SET @Tong_chi_phi_nvl_gt = @TotalC612N154 - @Tong_chi_phi_nvl_tt;			
			SET @IndirectMaterialFeeSum		= @Tong_chi_phi_nvl_gt
			SET @Tong_chi_phi_nvl_gt = @Tong_chi_phi_nvl_gt  + ISNULL(@ProgressMaterialOpen,0) - ISNULL(@ProgressMaterialEnd,0);

			
			/*
			SELECT @Tong_chi_phi_nhan_cong_gt = SUM(r.Vnd)
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.ma_lsx)
						AND (@IsByOrder = 0 OR r.order_code = t.order_code)
						AND (@IsByStock = 0 OR r.kho = t.kho)	
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.tk_no LIKE '622%' AND t.group_id IS NULL
			*/
			DECLARE @TotalC622 DECIMAL(32,12) = 0
			SELECT @TotalC622 = SUM(t.vnd) 
					FROM dbo._rc t
					WHERE t.SubsidiaryId = @SubId AND t.tk_co LIKE '622%' AND t.tk_no LIKE '154%' AND t.ngay_ct BETWEEN @FromDate AND @ToDate --AND t.vthhtp IS NOT NULL
					AND (@ProductId IS NULL OR t.vthhtp = @ProductId)
					AND (@OrderCode IS NULL OR t.order_code = @OrderCode)
					AND (@MaLsx IS NULL OR t.ma_lsx = @MaLsx)
					AND (@StockId IS NULL OR t.kho = @StockId);

			SET @Tong_chi_phi_nhan_cong_gt = @TotalC622 - @Tong_chi_phi_nhan_cong_tt;

			--SELECT @Tong_chi_phi_nhan_cong_gt = SUM(Vnd)- ISNULL(@Tong_chi_phi_nhan_cong_tt,0) FROM dbo._rc WHERE SubsidiaryId = @SubId AND ngay_ct BETWEEN @FromDate AND @ToDate AND tk_co LIKE '622%' AND tk_no LIKE '154%'

			SET @IndirectLaborFeeSum		= @Tong_chi_phi_nhan_cong_gt

			SET @Tong_chi_phi_nhan_cong_gt		= @Tong_chi_phi_nhan_cong_gt + ISNULL(@ProgressLaborsOpen,0) - ISNULL(@ProgressLaborsEnd,0)

			--print  CONCAT('Tong_chi_phi_nhan_cong_gt => ',@Tong_chi_phi_nhan_cong_gt,'=',@avc,'-',@Tong_chi_phi_nhan_cong_tt)

			--SELECT @Tong_chi_phi_sx_chung = SUM(Vnd)-ISNULL(@Tong_chi_phi_chung_tt,0)			FROM dbo._rc WHERE SubsidiaryId = @SubId AND ngay_ct BETWEEN @FromDate AND @ToDate AND tk_co LIKE '627%' AND tk_no LIKE '154%'
		
		/*
			SELECT @Tong_chi_phi_sx_chung = SUM(r.Vnd)
				FROM dbo._rc r
					LEFT JOIN @tbl t  ON (@IsByLsx = 0 OR r.ma_lsx = t.ma_lsx)
						AND (@IsByOrder = 0 OR r.order_code = t.order_code)
						AND (@IsByStock = 0 OR r.kho = t.kho)	
				WHERE r.SubsidiaryId = @SubId AND r.ngay_ct BETWEEN @FromDate AND @ToDate  AND r.tk_no LIKE '627%' AND t.group_id IS NULL
		*/

			DECLARE @TotalC627 DECIMAL(32,12) = 0
			SELECT @TotalC627 = SUM(t.vnd) 
					FROM dbo._rc t
					WHERE t.SubsidiaryId = @SubId AND t.tk_co LIKE '627%' AND t.tk_no LIKE '154%' AND t.ngay_ct BETWEEN @FromDate AND @ToDate-- AND t.vthhtp IS NOT NULL
					AND (@ProductId IS NULL OR t.vthhtp = @ProductId)
					AND (@OrderCode IS NULL OR t.order_code = @OrderCode)
					AND (@MaLsx IS NULL OR t.ma_lsx = @MaLsx)
					AND (@StockId IS NULL OR t.kho = @StockId);

			SET @Tong_chi_phi_sx_chung = @TotalC627 - @Tong_chi_phi_chung_tt;

			print  CONCAT('chung',@Tong_chi_phi_sx_chung)

			SET @GeneralManufacturingSum	= @Tong_chi_phi_sx_chung

			SET @Tong_chi_phi_sx_chung	= @Tong_chi_phi_sx_chung + ISNULL(@ProgressFactoriesOpen,0) - ISNULL(@ProgressFactoriesEnd,0)

			IF @IndirectMaterialFeeSumCustom IS NOT NULL
			BEGIN
				SET @Tong_chi_phi_nvl_gt = @IndirectMaterialFeeSumCustom
			END

			IF @IndirectLaborFeeSumCustom IS NOT NULL
			BEGIN
				SET @Tong_chi_phi_nhan_cong_gt = @IndirectLaborFeeSumCustom
			END

			IF @GeneralManufacturingSumCustom IS NOT NULL
			BEGIN
				SET @Tong_chi_phi_sx_chung = @GeneralManufacturingSumCustom
			END
	

			OPEN cursor_tinh_gia

			FETCH NEXT FROM cursor_tinh_gia INTO 
					@group_id,
					@row_id,				
					@vthhtp,
					@vthhtp_ProductCode,
					@vthhtp_ProductName,
					@vthhtp_UnitId_UnitName,
					@so_luong,
					@so_luong_lsx,
					@allocation_rate,
					@chi_phi_nvl_tt,
					@chi_phi_nvl_tt_custom,
					@chi_phi_nhan_cong_tt,
					@chi_phi_nhan_cong_tt_custom,
					@chi_phi_chung_tt,
					@chi_phi_chung_tt_custom,
					@chi_phi_khac,
					@chi_phi_nvl_gt,
					@chi_phi_nhan_cong_gt,
					@chi_phi_sx_chung,
					@gia_thanh,
					@gia_thanh_tong_tien,
					@gia_ban,
					@gia_ban_tong_tien,
					@chenh_lech,
					@ty_le
			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @calc_gia_thanh_tong_tien	decimal(32,12) = NULL;
				DECLARE @calc_chenh_lech			decimal(32,12) = NULL;
				DECLARE @calc_ty_le					decimal(32,12) = NULL;

				--Jn=(SumJ/Sum (tiêu chí lựu chọn))*Thành phần lựa chọn
				DECLARE @calc_chi_phi_nvl_gt		decimal(32,12) = NULL;
				DECLARE @calc_chi_phi_nhan_cong_gt	decimal(32,12) = NULL;				
				DECLARE @calc_chi_phi_sx_chung		decimal(32,12) = NULL;
	
				DECLARE @chi_phi_nvl_tt_final		decimal(32,12) = @chi_phi_nvl_tt;
				DECLARE @chi_phi_nhan_cong_tt_final	decimal(32,12) = @chi_phi_nhan_cong_tt;
				DECLARE @chi_phi_chung_tt_final		DECIMAL(32,12) = @chi_phi_chung_tt;

				IF @chi_phi_nvl_tt_custom IS NOT NULL
				BEGIN
					SET @chi_phi_nvl_tt_final = @chi_phi_nvl_tt_custom
				END

				IF @chi_phi_nhan_cong_tt_custom IS NOT NULL
				BEGIN
					SET @chi_phi_nhan_cong_tt_final = @chi_phi_nhan_cong_tt_custom
				END

				
				IF @chi_phi_chung_tt_custom IS NOT NULL
				BEGIN
					SET @chi_phi_chung_tt_final = @chi_phi_chung_tt_custom
				END


				--Chi phí NVL Gián tiếp
				IF @IndirectMaterialFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_DIRECT_MATERIAL AND @Tong_chi_phi_nvl_tt > 0
				BEGIN
					SET @calc_chi_phi_nvl_gt = (@Tong_chi_phi_nvl_gt* @chi_phi_nvl_tt_final)/@Tong_chi_phi_nvl_tt
				END
				IF @IndirectMaterialFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_DIRECT_LABOR AND @Tong_chi_phi_nhan_cong_tt > 0
				BEGIN
					SET @calc_chi_phi_nvl_gt = (@Tong_chi_phi_nvl_gt* @chi_phi_nhan_cong_tt_final)/@Tong_chi_phi_nhan_cong_tt
				END
				IF @IndirectMaterialFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_SELL_PRICE AND @Tong_gia_ban_tong_tien > 0
				BEGIN
					SET @calc_chi_phi_nvl_gt = (@Tong_chi_phi_nvl_gt* @gia_ban_tong_tien)/@Tong_gia_ban_tong_tien
				END
				IF @IndirectMaterialFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Tong_chi_phi_khac > 0
				BEGIN
					SET @calc_chi_phi_nvl_gt = (@Tong_chi_phi_nvl_gt* @chi_phi_khac)/@Tong_chi_phi_khac
				END

				--Chi phí nhân công gián tiếp
				IF @IndirectLaborFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_DIRECT_MATERIAL AND @Tong_chi_phi_nvl_tt > 0
				BEGIN
					SET @calc_chi_phi_nhan_cong_gt = (@Tong_chi_phi_nhan_cong_gt* @chi_phi_nvl_tt_final)/@Tong_chi_phi_nvl_tt
				END
				IF @IndirectLaborFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_DIRECT_LABOR AND @Tong_chi_phi_nhan_cong_tt > 0
				BEGIN
					SET @calc_chi_phi_nhan_cong_gt = (@Tong_chi_phi_nhan_cong_gt* @chi_phi_nhan_cong_tt_final)/@Tong_chi_phi_nhan_cong_tt
				END
				IF @IndirectLaborFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_SELL_PRICE AND @Tong_gia_ban_tong_tien > 0
				BEGIN
					SET @calc_chi_phi_nhan_cong_gt = (@Tong_chi_phi_nhan_cong_gt* @gia_ban_tong_tien)/@Tong_gia_ban_tong_tien
				END
				IF @IndirectLaborFeeAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Tong_chi_phi_khac > 0
				BEGIN
					SET @calc_chi_phi_nhan_cong_gt = (@Tong_chi_phi_nhan_cong_gt* @chi_phi_khac)/@Tong_chi_phi_khac
				END

				--Chi phí sản xuất chung
				IF @GeneralManufacturingAllocationTypeId = @ENUM_ALLOCATION_TYPE_DIRECT_MATERIAL AND @Tong_chi_phi_nvl_tt > 0
				BEGIN
					SET @calc_chi_phi_sx_chung = (@Tong_chi_phi_sx_chung* @chi_phi_nvl_tt_final)/@Tong_chi_phi_nvl_tt
				END
				IF @GeneralManufacturingAllocationTypeId = @ENUM_ALLOCATION_TYPE_DIRECT_LABOR AND @Tong_chi_phi_nhan_cong_tt > 0
				BEGIN
					SET @calc_chi_phi_sx_chung = (@Tong_chi_phi_sx_chung * @chi_phi_nhan_cong_tt_final)/@Tong_chi_phi_nhan_cong_tt
				END
				IF @GeneralManufacturingAllocationTypeId = @ENUM_ALLOCATION_TYPE_TOTAL_SELL_PRICE AND @Tong_gia_ban_tong_tien > 0
				BEGIN
					SET @calc_chi_phi_sx_chung = (@Tong_chi_phi_sx_chung* @gia_ban_tong_tien)/@Tong_gia_ban_tong_tien
				END
				IF @GeneralManufacturingAllocationTypeId = @ENUM_ALLOCATION_TYPE_OTHER AND @Tong_chi_phi_khac > 0
				BEGIN
					SET @calc_chi_phi_sx_chung = (@Tong_chi_phi_sx_chung* @chi_phi_khac)/@Tong_chi_phi_khac
				END


				SET @calc_gia_thanh_tong_tien = ISNULL(@chi_phi_nvl_tt_final,0)
				+ ISNULL(@chi_phi_nhan_cong_tt_final,0)
				+ ISNULL(@chi_phi_chung_tt_final,0)
				+ ISNULL(@calc_chi_phi_nvl_gt,0) 
				+ ISNULL(@calc_chi_phi_nhan_cong_gt,0) 
				+ ISNULL(@calc_chi_phi_sx_chung,0)

				SET	@calc_chenh_lech = @gia_ban_tong_tien - @calc_gia_thanh_tong_tien
				SET	@calc_ty_le = CASE WHEN @gia_ban_tong_tien>0 THEN (@calc_chenh_lech / @gia_ban_tong_tien) ELSE NULL END;

				UPDATE @tbl SET 
						chi_phi_nvl_gt			= @calc_chi_phi_nvl_gt,
						chi_phi_nhan_cong_gt	= @calc_chi_phi_nhan_cong_gt,
						chi_phi_sx_chung		= @calc_chi_phi_sx_chung,
						gia_thanh_tong_tien		= @calc_gia_thanh_tong_tien,
						gia_thanh				= @calc_gia_thanh_tong_tien/@so_luong,
						chenh_lech				= @calc_chenh_lech,
						ty_le					= @calc_ty_le

					WHERE row_id = @row_id
	
	
				FETCH NEXT FROM cursor_tinh_gia INTO
					@group_id,
					@row_id,				
					@vthhtp,
					@vthhtp_ProductCode,
					@vthhtp_ProductName,
					@vthhtp_UnitId_UnitName,
					@so_luong,
					@so_luong_lsx,
					@allocation_rate,
					@chi_phi_nvl_tt,
					@chi_phi_nvl_tt_custom,
					@chi_phi_nhan_cong_tt,
					@chi_phi_nhan_cong_tt_custom,
					@chi_phi_chung_tt,
					@chi_phi_chung_tt_custom,
					@chi_phi_khac,
					@chi_phi_nvl_gt,
					@chi_phi_nhan_cong_gt,
					@chi_phi_sx_chung,
					@gia_thanh,
					@gia_thanh_tong_tien,
					@gia_ban,
					@gia_ban_tong_tien,
					@chenh_lech,
					@ty_le
			END

			CLOSE cursor_tinh_gia

			DEALLOCATE cursor_tinh_gia	



		
			CREATE TABLE #tblProductPrice(
				InputBill_F_Id		BIGINT,
				InputValueRow_F_Id	BIGINT,
				BillVersion			INT,
				BUT_TOAN			INT,
				ty_gia			DECIMAL(32,12),
				don_gia			DECIMAL(32,12),		
				vnd				DECIMAL(32,12)
			);
		
			INSERT INTO #tblProductPrice(
				InputBill_F_Id,
				InputValueRow_F_Id,
				BillVersion,
				BUT_TOAN,
				ty_gia,
				don_gia,		
				vnd	
			)
			SELECT 
				t.InputBill_F_Id,
				t.F_Id,
				t.LatestBillVersion,
				t.BUT_TOAN,
				t.ty_gia,
				p.gia_thanh/ CASE WHEN t.ty_gia >0 THEN t.ty_gia ELSE 1 END,
				t.so_luong * p.gia_thanh

			FROM dbo._rc t 
				JOIN @tbl p ON p.row_id = CONCAT('group',
						'-',CASE @IsByLsx WHEN 1 THEN t.ma_lsx ELSE ''END,
						'-',CASE @IsByOrder WHEN 1 THEN t.order_code ELSE ''END,
						'-',CASE @IsByStock WHEN 1 THEN t.kho ELSE ''END,
						'-product-', t.vthhtp
					)

			WHERE t.SubsidiaryId = @SubId AND t.tk_no LIKE '155%' AND t.ngay_ct BETWEEN @FromDate AND @ToDate AND t.vthhtp IS NOT NULL

		
			IF @IsUpdate = 1
			BEGIN
				DECLARE @InputValueRowColumns nvarchar(max) = ''

				SELECT @InputValueRowColumns += N','+[COLUMN_NAME] 
					FROM [INFORMATION_SCHEMA].[COLUMNS] 
					WHERE [TABLE_NAME] = 'InputValueRow' 
						AND [COLUMN_NAME] NOT IN('F_Id','BillVersion','CreatedDatetimeUtc','UpdatedDatetimeUtc','SystemLog',
												'don_gia0','don_gia1','don_gia2','don_gia3','don_gia4',
												'vnd0','vnd1','vnd2','vnd3','vnd4');
	

				DECLARE @Sql NVARCHAR(max) = N'
				INSERT INTO InputValueRow(
					BillVersion,CreatedDatetimeUtc,UpdatedDatetimeUtc,SystemLog,
					don_gia0, don_gia1, don_gia2, don_gia3, don_gia4,
					vnd0,vnd1,vnd2,vnd3,vnd4
				' + @InputValueRowColumns + N')

				SELECT 
					BillVersion + 1, GETUTCDATE(), GETUTCDATE(),N''Created automatic by UpdateInputPrice'', 
					ISNULL(p.don_gia0, r.don_gia0), ISNULL(p.don_gia1, r.don_gia1), ISNULL(p.don_gia2, r.don_gia2), ISNULL(p.don_gia3, r.don_gia3), ISNULL(p.don_gia4, r.don_gia4),
					ISNULL(p.vnd0, r.vnd0), ISNULL(p.vnd1, r.vnd1), ISNULL(p.vnd2, r.vnd2), ISNULL(p.vnd3, r.vnd3), ISNULL(p.vnd4, r.vnd4)
					' + @InputValueRowColumns + N'

					FROM InputValueRow r
						LEFT JOIN (
							SELECT 
								p.InputValueRow_F_Id, 
								MAX(CASE WHEN p.BUT_TOAN = 0 THEN p.don_gia ELSE NULL END) don_gia0,
								MAX(CASE WHEN p.BUT_TOAN = 1 THEN p.don_gia ELSE NULL END) don_gia1,
								MAX(CASE WHEN p.BUT_TOAN = 2 THEN p.don_gia ELSE NULL END) don_gia2,
								MAX(CASE WHEN p.BUT_TOAN = 3 THEN p.don_gia ELSE NULL END) don_gia3,
								MAX(CASE WHEN p.BUT_TOAN = 4 THEN p.don_gia ELSE NULL END) don_gia4,

								MAX(CASE WHEN p.BUT_TOAN = 0 THEN p.vnd ELSE NULL END) vnd0,
								MAX(CASE WHEN p.BUT_TOAN = 1 THEN p.vnd ELSE NULL END) vnd1,
								MAX(CASE WHEN p.BUT_TOAN = 2 THEN p.vnd ELSE NULL END) vnd2,
								MAX(CASE WHEN p.BUT_TOAN = 3 THEN p.vnd ELSE NULL END) vnd3,
								MAX(CASE WHEN p.BUT_TOAN = 4 THEN p.vnd ELSE NULL END) vnd4
							FROM #tblProductPrice p 
							GROUP BY p.InputValueRow_F_Id
						) as p ON r.F_Id = p.InputValueRow_F_Id
					WHERE r.IsDeleted=0 AND r.SubsidiaryId = @SubId AND r.InputBill_F_Id IN (SELECT DISTINCT InputBill_F_Id FROM #tblProductPrice)';
			
				EXECUTE dbo.sp_executesql @stmt = @Sql, @params = N'@SubId INT', @SubId = @SubId;

				UPDATE r 
					SET IsDeleted = 1,
						SystemLog = N'Deleted automatic by UpdateInputPrice',
						DeletedDatetimeUtc = GETUTCDATE()
					FROM dbo.InputValueRow r
					JOIN (
						SELECT DISTINCT InputBill_F_Id, BillVersion FROM #tblProductPrice
					) p ON r.InputBill_F_Id = p.InputBill_F_Id AND r.BillVersion <= p.BillVersion
					WHERE r.SubsidiaryId = @SubId AND r.IsDeleted=0;

				UPDATE b 
					SET LatestBillVersion = b.LatestBillVersion + 1,
						UpdatedDatetimeUtc = GETUTCDATE()
					FROM dbo.InputBill b
					JOIN (
						SELECT DISTINCT InputBill_F_Id FROM #tblProductPrice
					) p ON b.F_Id = p.InputBill_F_Id
					WHERE b.SubsidiaryId = @SubId;
			
				UPDATE u
					SET sum_vnd0 = (SELECT SUM(r.vnd0) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
						sum_vnd1 = (SELECT SUM(r.vnd1) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
						sum_vnd2 = (SELECT SUM(r.vnd2) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
						sum_vnd3 = (SELECT SUM(r.vnd3) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion),
						sum_vnd4 = (SELECT SUM(r.vnd4) FROM dbo.InputValueRow r WHERE r.InputBill_F_Id = u.InputBill_F_Id AND r.IsBillEntry = 0 AND u.BillVersion = r.BillVersion)
				FROM dbo.InputValueRow u
				WHERE u.SubsidiaryId = @SubId AND u.IsBillEntry = 1 AND u.IsDeleted = 0 AND u.InputBill_F_Id IN (SELECT DISTINCT InputBill_F_Id FROM #tblProductPrice)
		END
	
		SELECT  * FROM @tbl ORDER BY stt
		IF @IsUpdate = 1 OR @IsReviewUpdate = 1
		BEGIN
      
				--SELECT * FROM  @OpenningDept ORDER BY tk, vthhtp
				--SELECT * FROM  @GiaVon ORDER BY tk, vthhtp
				--SELECT * FROM @GiaVon gv;

				--;WITH _tbl AS (
				--	SELECT af.InputTypeId, f.FieldName, af.Title
				--	FROM dbo.InputAreaField af
				--	JOIN dbo.InputField f ON af.InputFieldId = f.InputFieldId
				--	WHERE f.FieldName IN(N'don_gia0', N'don_gia1', N'don_gia2', N'don_gia3', N'don_gia4',
				--			N'vnd0', N'vnd1', N'vnd2', N'vnd3', N'vnd4'
				--	)

				--)
					--SELECT * FROM @tbl
					SELECT					
						ROW_NUMBER() OVER(ORDER BY(SELECT NULL)) 
						stt,
						v.vthhtp,
						p.ProductCode vthhtp_ProductCode,
						p.ProductName vthhtp_ProductName,
						v.InputType_Title,
						v.InputTypeId,
						v.InputBill_F_Id,
						v.ngay_ct,
						v.so_ct,
						v.tk_no,
						v.tk_co,
						v.don_gia,
						v.vnd,
						gv.don_gia as don_gia_update,
						gv.vnd as vnd_update,
						v.BUT_TOAN

						FROM #tblProductPrice gv
						JOIN dbo._rc as v ON gv.InputValueRow_F_Id = v.F_Id AND gv.BUT_TOAN = v.BUT_TOAN
						LEFT JOIN dbo.v_Product p ON v.vthhtp = p.F_Id
						--LEFT JOIN _tbl l ON v.InputTypeId = l.InputTypeId AND CONCAT(''don_gia'',v.BUT_TOAN) = l.FieldName
						--LEFT JOIN _tbl vl ON v.InputTypeId = vl.InputTypeId AND CONCAT(''vnd'',v.BUT_TOAN) = vl.FieldName
						--WHERE gv.vnd > 0
						ORDER BY v.vthhtp, v.ngay_ct, v.InputTypeId, v.InputBill_F_Id, v.BUT_TOAN, v.F_Id
				
		END
		
		DROP TABLE IF EXISTS #tblProductPrice
	COMMIT TRANSACTION
END



GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcCostTransferBalanceZeroV2]
	@SubId AS INT,
	@ToDate AS datetime,
	@DuCo911 DECIMAL(32,12) OUTPUT
AS
BEGIN

	/*
	SELECT
		total.*,
		acc_no.F_Id tk_no_id,
		acc_co.F_Id tk_co_id
	FROM
	(
		SELECT
			CASE 
				WHEN bc_sum.tk IS NULL AND bc_sum.vnd > 0 THEN '4211' 
				WHEN (bc_sum.tk IS NULL AND bc_sum.vnd < 0) OR (bc_sum.tk IS NOT NULL AND bc_sum.vnd > 0) THEN '911' 
				ELSE bc_sum.tk 
			END tk_no,
			CASE 
				WHEN bc_sum.tk IS NULL AND bc_sum.vnd < 0 THEN '4211'
				WHEN (bc_sum.tk IS NULL AND bc_sum.vnd > 0) OR (bc_sum.tk IS NOT NULL AND bc_sum.vnd < 0) THEN '911' 
				ELSE bc_sum.tk
			END tk_co,
			CASE 
				WHEN bc_sum.tk IS NOT NULL AND bc_sum.vnd > 0 THEN N'Kết chuyển chi phí' 
				WHEN bc_sum.tk IS NOT NULL AND bc_sum.vnd < 0 THEN N'Kết chuyển doanh thu và thu nhập khác' 
				WHEN bc_sum.tk IS NULL AND bc_sum.vnd > 0 THEN N'Kết chuyển lỗ' 
				ELSE N'Kết chuyển lãi' 
			END noi_dung,
			ABS(bc_sum.vnd) vnd
		FROM
		(SELECT
			bc.tk tk,
			SUM(bc.vnd) vnd
		FROM 
		
		(
			SELECT 
				ISNULL(no_ck.tk,co_ck.tk) tk,
				(ISNULL(no_ck.vnd,0) - ISNULL(co_ck.vnd,0)) vnd	
			FROM 
			(
				SELECT tk.tk_no tk, SUM(ISNULL(tk.vnd,0)) vnd
				FROM
				[dbo].[_rc] tk
				WHERE (tk.tk_no LIKE '631%' OR tk.tk_no LIKE '632%' OR tk.tk_no LIKE '635%' OR tk.tk_no LIKE '641%' OR tk.tk_no LIKE '642%' OR tk.tk_no LIKE '811%' 
				OR tk.tk_no LIKE '821%' OR tk.tk_no LIKE '511%' OR tk.tk_no LIKE '515%' OR tk.tk_no LIKE '711%') 
				AND tk.ngay_ct <= @ToDate AND tk.SubsidiaryId = @SubId
				GROUP BY tk.tk_no
			) no_ck
			FULL OUTER JOIN 
			(
				SELECT tk.tk_co tk, SUM(ISNULL(tk.vnd,0)) vnd
				FROM
				[dbo].[_rc] tk
				WHERE (tk.tk_co LIKE '631%' OR tk.tk_co LIKE '632%' OR tk.tk_co LIKE '635%' OR tk.tk_co LIKE '641%' OR tk.tk_co LIKE '642%' OR tk.tk_co LIKE '811%'
				OR tk.tk_co LIKE '821%' OR tk.tk_co LIKE '511%' OR tk.tk_co LIKE '515%' OR tk.tk_co LIKE '711%') 
				AND tk.ngay_ct <= @ToDate AND tk.SubsidiaryId = @SubId
				GROUP BY tk.tk_co
			) co_ck
			ON no_ck.tk = co_ck.tk WHERE ISNULL(no_ck.vnd,0) != ISNULL(co_ck.vnd,0)
		) bc
		GROUP BY ROLLUP(bc.tk)) bc_sum
	) total
	LEFT JOIN v_AccountingAccount acc_no ON total.tk_no = acc_no.AccountNumber
	LEFT JOIN v_AccountingAccount acc_co ON total.tk_co = acc_co.AccountNumber
	*/

	DECLARE @TransferType_Cost INT = 1
	DECLARE @TransferType_Revenue INT = 2

	DROP TABLE IF EXISTS #data
	;WITH duTk AS
	(
		SELECT 
			d.Tk, 
			SUM(ISNULL(d.Vnd_no,0)) - SUM(ISNULL(d.Vnd_co,0)) Du_no,
			SUM(ISNULL(d.Vnd_co,0)) - SUM(ISNULL(d.Vnd_no,0)) Du_co
		FROM
				[dbo].[_rc_detail] d
		WHERE (
				d.Tk LIKE '631%' OR d.Tk LIKE '632%' OR d.Tk LIKE '635%' OR d.Tk LIKE '641%' OR d.Tk LIKE '642%' OR d.Tk LIKE '811%'
				OR d.Tk LIKE '821%' OR d.Tk LIKE '511%' OR d.Tk LIKE '515%' OR d.Tk LIKE '711%' 
				OR d.Tk LIKE '911%'
			) 
			AND d.ngay_ct <= @ToDate AND d.SubsidiaryId = @SubId
		GROUP BY d.Tk
	)	
	SELECT
			CASE 
				WHEN d.Tk LIKE '631%' OR d.Tk LIKE '632%' OR d.Tk LIKE '635%'  OR d.Tk LIKE '641%' OR d.Tk LIKE '642%' OR d.Tk LIKE '811%' OR d.Tk LIKE '821%' THEN @TransferType_Cost
				WHEN d.Tk LIKE '511%' OR d.Tk LIKE '512%' OR d.Tk LIKE '515%'  OR d.Tk LIKE '711%' THEN @TransferType_Revenue				
				ELSE NULL
			END TransferType,
			d.Tk,
			d.Du_no,
			d.Du_co
	INTO #data
	FROM duTk d
	
	SELECT @DuCo911 = SUM(Du_co) FROM #data WHERE Tk LIKE '911%'
	SELECT TransferType, Tk, Du_no, Du_co FROM #data WHERE TransferType > 0
END


GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcPrepaidExpenseV2] @SoTK NVARCHAR(32),
                                                     @FromDate DATETIME2,
                                                     @ToDate DATETIME2,
                                                     @SubId INT,
                                                     @TimeZoneOffset INT = -420
AS
BEGIN
    DECLARE @NumberOfMonths INT
        = DATEDIFF(MONTH, DATEADD(MINUTE, -@TimeZoneOffset, @FromDate), DATEADD(MINUTE, -@TimeZoneOffset, @FromDate))
          + 1;
    ;
    WITH cptt AS
    (
        SELECT      DISTINCT r.cptt
              FROM  dbo._rc                        r
                    LEFT JOIN dbo.v_PrepaidExpense p ON p.F_Id = r.cptt
             WHERE  r.SubsidiaryId                           = @SubId
               AND  r.tk_no LIKE CONCAT(@SoTK, '%')
               AND  r.ngay_ct                                <= @ToDate
               AND
                    (
                        ISNULL(p.PrepaidExpenseDate, r.ngay_ct) <= @ToDate
                   OR   p.F_Id IS NULL
                    )
    ),
         dau_ky_con_du AS
    (
        SELECT      d.cptt,
                    ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) du_no,
                    ISNULL(SUM(d.Vnd_co), 0)                            ps_co
              FROM  dbo._rc_detail d
                    JOIN cptt c ON c.cptt = d.cptt
                                     OR c.cptt IS NULL
                                    AND d.cptt IS NULL
             WHERE  d.Tk LIKE '242%'
               AND  d.SubsidiaryId = @SubId
               AND  d.ngay_ct      < @FromDate
             GROUP BY d.cptt
            HAVING  ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) > 0
    ),
         dauky_no AS
    (
        SELECT      d.cptt,
                    d.du_no,
                    d.ps_co
              FROM  dau_ky_con_du d
        UNION ALL
        SELECT      d.cptt,
                    0 du_no,
                    0 ps_co
              FROM  dbo._rc                 d
                    JOIN cptt               c ON c.cptt   = d.cptt
                    LEFT JOIN dau_ky_con_du dk ON dk.cptt = c.cptt
             WHERE  d.tk_no LIKE '242%'
               AND  d.SubsidiaryId = @SubId
               AND  d.ngay_ct BETWEEN @FromDate AND @ToDate
               AND  d.vnd          > 0
               AND  dk.cptt IS NULL
             GROUP BY d.cptt
    ),
         chung_tu_no AS
    (
        SELECT      d.cptt,
                    ISNULL(SUM(d.vnd), 0)              nguyen_gia,
					MIN(d.phan_xuong)				   phan_xuong,
                    STRING_AGG(d.so_ct, ', ')          ct_nos,
                    STRING_AGG(d.InputTypeId, ', ')    ct_no_types,
                    STRING_AGG(d.InputBill_F_Id, ', ') ct_no_ids
              FROM  dbo._rc       d
                    JOIN dauky_no dk ON dk.cptt = d.cptt
                                     OR dk.cptt IS NULL
                                    AND d.cptt IS NULL
             WHERE  d.tk_no LIKE '242%'
               AND  d.SubsidiaryId = @SubId
			   AND d.ngay_ct <= @ToDate
             GROUP BY d.cptt
    ),
         trong_ky AS
    (
        SELECT      d.cptt,
                    SUM(d.vnd) ps_co
              FROM  dbo._rc       d
                    JOIN dauky_no dk ON dk.cptt = d.cptt
                                     OR dk.cptt IS NULL
                                    AND d.cptt IS NULL
             WHERE  d.tk_co LIKE '242%'
               AND  d.SubsidiaryId = @SubId
               AND  d.ngay_ct BETWEEN @FromDate AND @ToDate
             GROUP BY d.cptt
    ),
         v AS
    (
        SELECT      
					ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) RowNumber,
					p.F_Id,
                    p.PrepaidExpenseDate,
                    p.PrepaidExpenseCode,
                    p.PrepaidExpenseName,
                    p.PrepaidExpenseMonthNumber,
                    p.PrepaidExpenseNote,
                    p.PrepaidExpenseTk_AccountNumber,
                    p.PrepaidExpenseTk_no_AccountNumber,
                    d.F_Id                      [DepartmentId],
                    d.DepartmentCode,
                    d.DepartmentName,
                    @NumberOfMonths             Months,
                    dk.cptt,
                    chung_tu_no.ct_nos          [Ct_nos],
					px.F_Id					    [Phan_xuong],
					px.DepartmentCode			[Phan_xuong_DepartmentCode],
					px.DepartmentName			[Phan_xuong_DepartmentName],
                    chung_tu_no.ct_no_types     [Ct_no_types],
                    chung_tu_no.ct_no_ids       [Ct_no_ids],
                    chung_tu_no.nguyen_gia      [Nguyen_gia],
                    dk.ps_co                    [Dauky_ps_co],
                    trong_ky.ps_co              [TrongKy_ps_co],
                    CASE
                         WHEN @NumberOfMonths * chung_tu_no.nguyen_gia / p.PrepaidExpenseMonthNumber > chung_tu_no.nguyen_gia - ISNULL(dk.ps_co,0) THEN
                             chung_tu_no.nguyen_gia - ISNULL(dk.ps_co,0)
                         ELSE @NumberOfMonths * chung_tu_no.nguyen_gia / p.PrepaidExpenseMonthNumber END
                    - ISNULL(trong_ky.ps_co, 0) [PhanBo]
              FROM  dauky_no                       dk
                    LEFT JOIN chung_tu_no ON chung_tu_no.cptt                = dk.cptt
                    LEFT JOIN trong_ky ON trong_ky.cptt                      = dk.cptt
                    LEFT JOIN dbo.v_PrepaidExpense p ON dk.cptt              = p.F_Id
                    LEFT JOIN dbo.v_Department     d ON p.PrepaidExpenseUsed = d.F_Id
					LEFT JOIN dbo.v_Department     px ON ISNULL(chung_tu_no.phan_xuong, p.PrepaidExpensePhan_xuong) = px.F_Id
    )
    SELECT      *, [Nguyen_gia]- ISNULL([Dauky_ps_co],0) - ISNULL([TrongKy_ps_co],0) Remaining, [Nguyen_gia]- ISNULL([Dauky_ps_co],0) - ISNULL([TrongKy_ps_co],0) - ISNULL([PhanBo],0) RemainingAfter
          FROM  v;

END;

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_FixedAsset] AS SELECT  _FixedAsset.F_Id, _FixedAsset.UpdatedDatetimeUtc, _FixedAsset.FixedAssetCode, _FixedAsset.FixedAssetName, _FixedAsset.FixedAssetUnit, _FixedAsset.FixedAssetUsedDate, _FixedAsset.FixedAssetNumber, _FixedAsset.FixedAssetCountry, _FixedAsset.FixedAssetDepreciationCriteria, _FixedAsset.FixedAssetTotalDepreciationCriteria, _FixedAsset.FixedAssetYearNumber, _FixedAsset.FixedAssetNote, _FixedAsset.FixedAssetQty, _FixedAsset.FixedAssetTk, _FixedAsset.FixedAssetUsedUsed, _AccountingAccount_0.[AccountNumber] AS [FixedAssetTk_AccountNumber], _Department_1.[DepartmentName] AS [FixedAssetUsedUsed_DepartmentName] FROM [MasterDB].[dbo]._FixedAsset LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_0 ON _FixedAsset.FixedAssetTk = _AccountingAccount_0.F_Id LEFT JOIN [MasterDB].[dbo].v_Department AS _Department_1 ON _FixedAsset.FixedAssetUsedUsed = _Department_1.F_Id WHERE _FixedAsset.IsDeleted = 0

GO

USE AccountancyDB
GO
/**
* 2022-05-22 Only delete details, update do not delete bill if not necessary
*/
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_DeleteDepreciation]
	@SoTK AS nvarchar(10),
  @FromDate AS datetime ,
  @ToDate AS datetime,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	BEGIN TRANSACTION
		EXEC dbo.asp_ValidateBillDate @SubId = @SubId, @BillDate = NULL, @OldDate = @FromDate, @ResStatus = @ResStatus OUTPUT
		IF @ResStatus = 1
		BEGIN
			
			
			DECLARE @Rows TABLE
			(
				BillId BIGINT,
				F_Id BIGINT
			);
			;WITH tscd AS
				(
					SELECT      DISTINCT r.tscd
						  FROM  dbo._rc                        r
								LEFT JOIN dbo.v_FixedAsset p ON p.F_Id = r.tscd
						 WHERE  r.SubsidiaryId                           = @SubId
						   AND  r.tk_no LIKE CONCAT(@SoTK, '%')
						   AND  r.ngay_ct                                <= @ToDate
						   AND
								(
									ISNULL(p.FixedAssetUsedDate, r.ngay_ct) <= @ToDate
							   OR   p.F_Id IS NULL
								)					
				),
					 chua_het AS
				(
					SELECT du_no.tscd, 
					du_no.du_no, 
					du_no.ps_co, 
					ISNULL(co_214.ps_co_214,0)  ps_co_214 ,
					du_no.du_no - ISNULL(co_214.ps_co_214,0) Remaining
					FROM
					(
						SELECT      d.tscd			,		
									ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) du_no,
									ISNULL(SUM(d.Vnd_co), 0)                            ps_co
							  FROM  dbo._rc_detail d
									JOIN tscd c ON c.tscd = d.tscd
													 OR c.tscd IS NULL
													AND d.tscd IS NULL
							 WHERE  (d.Tk LIKE '211%' OR d.Tk LIKE '212%' OR d.Tk LIKE '213%')
							   AND  d.SubsidiaryId = @SubId
							   AND  d.ngay_ct      < @ToDate
							 GROUP BY d.tscd
							HAVING  ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) > 0
					) du_no
					LEFT JOIN
					(
					SELECT      d.tscd			,		                  
								ISNULL(SUM(d.vnd), 0)                            ps_co_214
						  FROM  dbo._rc d
								JOIN tscd c ON c.tscd = d.tscd
												 OR c.tscd IS NULL
												AND d.tscd IS NULL
						 WHERE  --(d.tk_no LIKE '211%' OR d.tk_no LIKE '212%' OR d.tk_no LIKE '213%')
							--AND 
							d.tk_co LIKE '214%'
						   AND  d.SubsidiaryId = @SubId
						   AND  d.ngay_ct      < @ToDate
						 GROUP BY d.tscd            
					) co_214 ON du_no.tscd = co_214.tscd
					WHERE du_no.du_no > ISNULL(co_214.ps_co_214,0)
				)
			INSERT INTO @Rows (BillId,
			                   F_Id)
			SELECT r.InputBill_F_Id, r.F_Id
			FROM [dbo].[_rc] r 
			WHERE r.InputType_InputTypeCode = 'CTGS_KH_TSCD' AND r.tk_co LIKE '214%' AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.SubsidiaryId = @SubId AND EXISTS ( 
				SELECT 1 
				FROM chua_het r1
				WHERE (r.tscd IS NULL AND r1.tscd IS NULL) OR r.tscd = r1.tscd
			);

			-- delete rows
			UPDATE d
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE(),
				SystemLog =  'Deleted by depreciation'
			FROM dbo.InputValueRow d
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.F_Id = d.F_Id)

			-- delete bills
			UPDATE b
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE()
			FROM dbo.InputBill b
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.BillId = b.F_Id)
			AND NOT EXISTS (SELECT 0 FROM dbo._rc_all a WHERE a.InputBill_F_Id = b.F_Id)		
	
		END
	COMMIT TRANSACTION
END

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_AccountingAccount] AS SELECT  _AccountingAccount.F_Id, _AccountingAccount.UpdatedDatetimeUtc, _AccountingAccount.ParentId, _AccountingAccount.AccountNumber, _AccountingAccount.AccountNameVi, _AccountingAccount.AccountNameEn, _AccountingAccount.Currency, _AccountingAccount.AccountNote, _AccountingAccount.IsStock, _AccountingAccount.IsLiability, _AccountingAccount.IsForeignCurrency, _AccountingAccount.IsBranch, _AccountingAccount.IsGroup, _Currency_0.[CurrencyCode] AS [Currency_CurrencyCode] FROM [MasterDB].[dbo]._AccountingAccount LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_0 ON _AccountingAccount.Currency = _Currency_0.F_Id WHERE _AccountingAccount.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcPrepaidExpense]
	@SoTK AS nvarchar(10),
	@FromDate AS datetime,
	@ToDate AS datetime,
	@SubId AS int
AS
BEGIN
	DECLARE @NumberOfMonths INT = DATEDIFF(month, DATEADD(day,1,@FromDate), DATEADD(day,-1,@ToDate)) + 1;
	;
	WITH cptt AS(
		SELECT DISTINCT _rc.cptt FROM _rc
		WHERE _rc.SubsidiaryId = @SubId AND _rc.tk_no LIKE CONCAT(@SoTK, '%') AND _rc.ngay_ct <= @ToDate		
	)
	SELECT 
		cptt_no.cptt cptt,
		ISNULL(cptt_no.vnd,0) nguyen_gia,
		pe.PrepaidExpenseCode,
		pe.PrepaidExpenseName,
		pe.PrepaidExpenseDate,
		d.DepartmentName PrepaidExpenseUsedPlace,
		pe.PrepaidExpenseMonthNumber,
		ac.AccountNumber PrepaidExpenseTk,
		CASE WHEN pe.PrepaidExpenseMonthNumber > 0 THEN ROUND(100.0/pe.PrepaidExpenseMonthNumber,4) ELSE 0 END PrepaidExpenseRateByMonth,
		@NumberOfMonths Months,
		CASE WHEN pe.PrepaidExpenseMonthNumber > 0 THEN ROUND(100.0/pe.PrepaidExpenseMonthNumber,4) * @NumberOfMonths ELSE 0 END PrepaidExpenseRateByPeriod,
		ISNULL(cptt_no.vnd,0) - ISNULL(cptt_co.vnd,0) RemainValue
	FROM
	(
		SELECT _rc.cptt, SUM(ISNULL(_rc.vnd,0)) vnd 
		FROM _rc LEFT JOIN cptt ON (_rc.cptt IS NULL AND _rc.cptt IS NULL OR cptt.cptt = _rc.cptt)
		WHERE _rc.SubsidiaryId = @SubId AND _rc.tk_no LIKE '242%'  AND _rc.ngay_ct <= @ToDate
		GROUP BY _rc.cptt
	) cptt_no
	LEFT JOIN
	(
		SELECT _rc.cptt, SUM(ISNULL(_rc.vnd,0)) vnd 
		FROM _rc LEFT JOIN cptt ON (_rc.cptt IS NULL AND _rc.cptt IS NULL OR cptt.cptt = _rc.cptt)
		WHERE _rc.SubsidiaryId = @SubId AND _rc.tk_co LIKE '242%' AND _rc.ngay_ct <= @ToDate
		GROUP BY _rc.cptt
	) cptt_co	
	ON (cptt_no.cptt IS NULL AND cptt_co.cptt IS NULL) OR cptt_no.cptt = cptt_co.cptt
	LEFT JOIN v_PrepaidExpense pe ON  cptt_no.cptt = pe.F_Id
	LEFT JOIN v_AccountingAccount ac ON pe.PrepaidExpenseTk = ac.F_Id
	LEFT JOIN v_Department d ON pe.PrepaidExpenseUsed = d.F_Id
	WHERE ISNULL(cptt_no.vnd,0) - ISNULL(cptt_co.vnd,0) > 0
END

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_LoanConvenant] AS SELECT  _LoanConvenant.F_Id, _LoanConvenant.UpdatedDatetimeUtc, _LoanConvenant.ConvenantNumber, _LoanConvenant.PaymentTerms, _LoanConvenant.DebtAcknowledgmentDate, _LoanConvenant.DueDate, _LoanConvenant.LoanNumber, _LoanConvenant.LoanCurrency, _LoanConvenant.InterestRepaymentTermType, _LoanConvenant.InterestRepaymentTerm, _LoanConvenant.PrincipalRepaymentTermType, _LoanConvenant.PrincipalRepaymentTermOfPeriod, _LoanConvenant.PeriodAmountPaid, _LoanConvenant.InterestRate, _LoanConvenant.bank_name, _LoanConvenant.No_acc_loan_bank, _LoanConvenant.PrincipalRepaymentTerm1, _LoanConvenant.IsBorrow, _LoanConvenant.Noi_dung, _timingType_0.[Name] AS [PaymentTerms_Name], _Currency_1.[CurrencyName] AS [LoanCurrency_CurrencyName], _timingType_2.[Name] AS [InterestRepaymentTermType_Name], _timingType_3.[Name] AS [PrincipalRepaymentTermType_Name], _Partner_4.[PartnerName] AS [bank_name_PartnerName] FROM [MasterDB].[dbo]._LoanConvenant LEFT JOIN [MasterDB].[dbo].v_timingType AS _timingType_0 ON _LoanConvenant.PaymentTerms = _timingType_0.F_Id LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_1 ON _LoanConvenant.LoanCurrency = _Currency_1.F_Id LEFT JOIN [MasterDB].[dbo].v_timingType AS _timingType_2 ON _LoanConvenant.InterestRepaymentTermType = _timingType_2.F_Id LEFT JOIN [MasterDB].[dbo].v_timingType AS _timingType_3 ON _LoanConvenant.PrincipalRepaymentTermType = _timingType_3.F_Id LEFT JOIN [MasterDB].[dbo].v_Partner AS _Partner_4 ON _LoanConvenant.bank_name = _Partner_4.F_Id WHERE _LoanConvenant.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_Contract] AS SELECT  _Contract.F_Id, _Contract.UpdatedDatetimeUtc, _Contract.ContractNumber, _Contract.ContractCode, _Contract.ContractName, _Contract.ContractSigningDate, _Contract.DeliveryConditions, _Contract.ContractValue, _Contract.ContractCurrency, _Contract.ContractPaymentTerms, _Contract.WarrantyPeriod, _Contract.DeliveryPlace, _Contract.ContractNote, _Currency_0.[CurrencyCode] AS [ContractCurrency_CurrencyCode] FROM [MasterDB].[dbo]._Contract LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_0 ON _Contract.ContractCurrency = _Currency_0.F_Id WHERE _Contract.IsDeleted = 0

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcDepreciationV2]
	@SoTK AS nvarchar(10),
	@FromDate AS datetime,
	@ToDate AS datetime,
	@SubId AS INT,
	@TimeZoneOffset INT = -420
AS
BEGIN

	DECLARE @NumberOfMonths INT
        = DATEDIFF(MONTH, DATEADD(MINUTE, -@TimeZoneOffset, @FromDate), DATEADD(MINUTE, -@TimeZoneOffset, @FromDate))
          + 1;
    ;WITH tscd AS
    (
        SELECT      DISTINCT r.tscd
              FROM  dbo._rc                        r
                    LEFT JOIN dbo.v_FixedAsset p ON p.F_Id = r.tscd
             WHERE  r.SubsidiaryId                           = @SubId
               AND  r.tk_no LIKE CONCAT(@SoTK, '%')
               AND  r.ngay_ct                                <= @ToDate
               AND
                    (
                        ISNULL(p.FixedAssetUsedDate, r.ngay_ct) <= @ToDate
                   OR   p.F_Id IS NULL
                    )					
    ),
         chua_het AS
    (
		SELECT du_no.tscd, 
		du_no.du_no, 
		du_no.ps_co, 
		ISNULL(co_214.ps_co_214,0)  ps_co_214 ,
		du_no.du_no - ISNULL(co_214.ps_co_214,0) Remaining
		FROM
		(
			SELECT      d.tscd			,		
						ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) du_no,
						ISNULL(SUM(d.Vnd_co), 0)                            ps_co
				  FROM  dbo._rc_detail d
						JOIN tscd c ON c.tscd = d.tscd
										 OR c.tscd IS NULL
										AND d.tscd IS NULL
				 WHERE  (d.Tk LIKE '211%' OR d.Tk LIKE '212%' OR d.Tk LIKE '213%')
				   AND  d.SubsidiaryId = @SubId
				   AND  d.ngay_ct      < @ToDate
				 GROUP BY d.tscd
				HAVING  ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) > 0
		) du_no
		LEFT JOIN
		(
        SELECT      d.tscd			,		                  
                    ISNULL(SUM(d.vnd), 0)                            ps_co_214
              FROM  dbo._rc d
                    JOIN tscd c ON c.tscd = d.tscd
                                     OR c.tscd IS NULL
                                    AND d.tscd IS NULL
             WHERE  --(d.tk_no LIKE '211%' OR d.tk_no LIKE '212%' OR d.tk_no LIKE '213%')
				--AND 
				d.tk_co LIKE '214%'
               AND  d.SubsidiaryId = @SubId
               AND  d.ngay_ct      < @ToDate
             GROUP BY d.tscd            
		) co_214 ON du_no.tscd = co_214.tscd
		WHERE du_no.du_no > ISNULL(co_214.ps_co_214,0)
    ),         
         chung_tu_no AS
    (
		SELECT
						d.tscd,
						ISNULL(SUM(d.vnd), 0)				nguyen_gia,
						d.Remaining,
						MIN(d.phan_xuong)					phan_xuong,
						STRING_AGG(d.ct_nos, ', ')          ct_nos,
						STRING_AGG(d.ct_no_types, ', ')		ct_no_types,
						STRING_AGG(d.ct_no_ids, ', ')		ct_no_ids,
						STRING_AGG(d.tk_no, ', ')			tk_nos,
						MAX(d.tk_no)						tk_no
		FROM (
			SELECT      d.tscd,
						d.tk_no,
						ISNULL(SUM(d.vnd), 0)              vnd,
						dk.Remaining,
						MIN(d.phan_xuong)				   phan_xuong,
						STRING_AGG(d.so_ct, ', ')          ct_nos,
						STRING_AGG(d.InputTypeId, ', ')    ct_no_types,
						STRING_AGG(d.InputBill_F_Id, ', ') ct_no_ids
						
				  FROM  dbo._rc       d
						JOIN chua_het dk ON dk.tscd = d.tscd
										 OR dk.tscd IS NULL
										AND d.tscd IS NULL
				 WHERE  (d.tk_no LIKE '211%' OR d.tk_no LIKE '212%' OR d.tk_no LIKE '213%')
				   AND  d.SubsidiaryId = @SubId
				   AND d.ngay_ct <= @ToDate
				 GROUP BY d.tscd, d.tk_no, dk.Remaining
		) d GROUP BY  d.tscd, d.Remaining					
    ),      trong_ky AS
    (
        SELECT      d.tscd,
                    SUM(d.vnd) ps_co
              FROM  dbo._rc       d
                    JOIN chua_het dk ON dk.tscd = d.tscd
                                     OR dk.tscd IS NULL
                                    AND d.tscd IS NULL
             WHERE  d.tk_co LIKE '214%'
               AND  d.SubsidiaryId = @SubId
               AND  d.ngay_ct BETWEEN @FromDate AND @ToDate
             GROUP BY d.tscd
    ),    
         v AS
    (
        SELECT      
					ROW_NUMBER() OVER(ORDER BY p.F_Id) RowNumber,
					p.F_Id,
                    p.FixedAssetUsedDate,
                    p.FixedAssetCode,
                    p.FixedAssetName,
                    p.FixedAssetCountry,
					p.FixedAssetYearNumber,
                    p.FixedAssetNote,
					p.FixedAssetTk_AccountNumber,					                    
                    d.F_Id                      [DepartmentId],
                    d.DepartmentCode,
                    d.DepartmentName,
                    @NumberOfMonths             Months,                   
                    chung_tu_no.ct_nos          [Ct_nos],
					chung_tu_no.tk_nos			[tk_nos],
					chung_tu_no.phan_xuong      [Phan_xuong],
					px.DepartmentCode			[Phan_xuong_DepartmentCode],
					px.DepartmentName			[Phan_xuong_DepartmentName],
                    chung_tu_no.ct_no_types     [Ct_no_types],
                    chung_tu_no.ct_no_ids       [Ct_no_ids],
                    chung_tu_no.nguyen_gia      [Nguyen_gia],
                    chung_tu_no.Remaining       [Remaining],
					chung_tu_no.tk_no			[tk_no],
					'214'						[tk_co],
					trong_ky.ps_co              [TrongKy_ps_co],
                    CASE WHEN p.FixedAssetYearNumber > 0 THEN ROUND(100.0/p.FixedAssetYearNumber,2) ELSE 0 END FixedAssetRateByMonth,
					CASE WHEN p.FixedAssetYearNumber > 0 THEN ROUND(100.0/p.FixedAssetYearNumber,2) * @NumberOfMonths ELSE 0 END FixedAssetRateByPeriod,
                    CASE
                         WHEN @NumberOfMonths * chung_tu_no.nguyen_gia / p.FixedAssetYearNumber > chung_tu_no.Remaining THEN
                             chung_tu_no.Remaining
                         ELSE @NumberOfMonths * chung_tu_no.nguyen_gia / p.FixedAssetYearNumber END
                    - ISNULL(trong_ky.ps_co, 0) [PhanBo]
              FROM chung_tu_no
					LEFT JOIN trong_ky ON trong_ky.tscd                      = chung_tu_no.tscd
                    LEFT JOIN dbo.v_FixedAsset p ON chung_tu_no.tscd              = p.F_Id
                    LEFT JOIN dbo.v_Department     d ON p.FixedAssetUsedUsed = d.F_Id
					LEFT JOIN dbo.v_Department     px ON chung_tu_no.phan_xuong = px.F_Id
    )
    SELECT      *, [Remaining] - ISNULL([PhanBo],0) RemainingAfter
          FROM  v;
END

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[v_TK_nganhang_DN] AS SELECT  _TK_nganhang_DN.F_Id, _TK_nganhang_DN.UpdatedDatetimeUtc, _TK_nganhang_DN.Ten_tk, _TK_nganhang_DN.So_TKNH, _TK_nganhang_DN.Loai_tien, _TK_nganhang_DN.Ngan_hang, _TK_nganhang_DN.Chi_nhanh_NH, _TK_nganhang_DN.Tinh_TP, _TK_nganhang_DN.Code_NH, _TK_nganhang_DN.TK_HT, _Currency_0.[CurrencyCode] AS [Loai_tien_CurrencyCode], _AccountingAccount_1.[AccountNumber] AS [TK_HT_AccountNumber] FROM [MasterDB].[dbo]._TK_nganhang_DN LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_0 ON _TK_nganhang_DN.Loai_tien = _Currency_0.F_Id LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_1 ON _TK_nganhang_DN.TK_HT = _AccountingAccount_1.F_Id WHERE _TK_nganhang_DN.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_DeleteFixExchangeRate]
  @FromDate AS datetime ,
  @ToDate AS datetime,
	@Currency AS int,
	@AccoutantNumber AS nvarchar(128),
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	BEGIN TRANSACTION	
		EXEC asp_ValidateBillDate @SubId = @SubId, @BillDate = NULL, @OldDate = @FromDate, @ResStatus = @ResStatus OUTPUT
		IF @ResStatus = 1
		BEGIN
			DECLARE @Rows TABLE
			(
				BillId BIGINT,
				F_Id BIGINT
			)

				INSERT INTO @Rows (BillId,
			                   F_Id)
			SELECT r.InputBill_F_Id, r.F_Id
			FROM dbo._rc_all r
			WHERE r.InputType_InputTypeCode = 'CTGS_LTG' AND ngay_ct BETWEEN @FromDate AND @ToDate AND r.SubsidiaryId = @SubId AND r.loai_tien = @Currency AND (LEN(@AccoutantNumber) = 0 OR r.tk_co0 LIKE CONCAT(@AccoutantNumber, '%'));


			-- delete rows
			UPDATE d
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE(),
				SystemLog =  'Deleted by fix exchange rate'
			FROM dbo.InputValueRow d
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.F_Id = d.F_Id)

			-- delete bills
			UPDATE b
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE()
			FROM dbo.InputBill b
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.BillId = b.F_Id)
			AND NOT EXISTS (SELECT 0 FROM dbo._rc_all a WHERE a.InputBill_F_Id = b.F_Id)		
			
		END
	COMMIT TRANSACTION
END


GO

USE AccountancyPublicDB
GO
/**
* 2022-05-22 Only delete details, update do not delete bill if not necessary
*/
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_DeletePrepaidExpense]
	@SoTK AS nvarchar(10),
	  @FromDate AS datetime ,
	  @ToDate AS datetime,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	BEGIN TRANSACTION
		EXEC asp_ValidateBillDate @SubId = @SubId, @BillDate = NULL, @OldDate = @FromDate, @ResStatus = @ResStatus OUTPUT
		IF @ResStatus = 1
		BEGIN
			DECLARE @cptt TABLE
			(
				Id int
			)

			-- Danh sách chi phí tính tới kì này
			INSERT INTO @cptt
			SELECT DISTINCT r.cptt FROM _rc r
			WHERE r.SubsidiaryId = @SubId AND r.ngay_ct <= @ToDate AND r.tk_no LIKE CONCAT(@SoTK, '%')
			
			DECLARE @Rows TABLE
			(
				BillId BIGINT,
				F_Id BIGINT
			)

			INSERT INTO @Rows (BillId,
			                   F_Id)
			SELECT rc.InputBill_F_Id, rc.F_Id
			FROM dbo._rc_all rc
			WHERE rc.InputType_InputTypeCode = 'CTGS_CPTT' AND rc.tk_co LIKE '242%' AND rc.ngay_ct BETWEEN @FromDate AND @ToDate AND rc.SubsidiaryId = @SubId AND EXISTS ( 
				SELECT 1 
				FROM @cptt r1
				WHERE (rc.cptt IS NULL AND r1.Id IS NULL) OR rc.cptt = r1.Id
			)

			-- delete rows
			UPDATE d
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE(),
				SystemLog =  'Deleted by prepaid expense'
			FROM dbo.InputValueRow d
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.F_Id = d.F_Id)

			-- delete bills
			UPDATE b
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE()
			FROM dbo.InputBill b
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.BillId = b.F_Id)
			AND NOT EXISTS (SELECT 0 FROM dbo._rc_all a WHERE a.InputBill_F_Id = b.F_Id)			
		END
	COMMIT TRANSACTION
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_AccountingAccount] AS SELECT  _AccountingAccount.F_Id, _AccountingAccount.UpdatedDatetimeUtc, _AccountingAccount.ParentId, _AccountingAccount.AccountNumber, _AccountingAccount.AccountNameVi, _AccountingAccount.AccountNameEn, _AccountingAccount.Currency, _AccountingAccount.AccountNote, _AccountingAccount.IsStock, _AccountingAccount.IsLiability, _AccountingAccount.IsForeignCurrency, _AccountingAccount.IsBranch, _AccountingAccount.IsGroup, _Currency_0.[CurrencyCode] AS [Currency_CurrencyCode] FROM [MasterDB].[dbo]._AccountingAccount LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_0 ON _AccountingAccount.Currency = _Currency_0.F_Id WHERE _AccountingAccount.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_FixExchangeRateDetail]
	@FromDate AS datetime,
  @ToDate AS datetime,
	@Currency AS int,
	@SubId AS int,
	@SoTK AS nvarchar(256),
	@Kh AS nvarchar(256),
	@Du_no_dau_ky_vnd AS decimal(24,5) OUTPUT,
	@Du_co_dau_ky_vnd AS decimal(24,5) OUTPUT,
	@Du_no_dau_ky_ngoai_te AS decimal(24,5) OUTPUT,
	@Du_co_dau_ky_ngoai_te AS decimal(24,5) OUTPUT,
	@Du_no_cuoi_ky_vnd AS decimal(24,5) OUTPUT,
	@Du_co_cuoi_ky_vnd AS decimal(24,5) OUTPUT,
	@Du_no_cuoi_ky_ngoai_te AS decimal(24,5) OUTPUT,
	@Du_co_cuoi_ky_ngoai_te AS decimal(24,5) OUTPUT 
AS
BEGIN
	SELECT 
		@Du_no_dau_ky_vnd = CASE WHEN (SUM(vnd_no) - SUM(vnd_co)) > 0 THEN SUM(vnd_no) - SUM(vnd_co) ELSE 0 END,
		@Du_co_dau_ky_vnd = CASE WHEN (SUM(vnd_co) - SUM(vnd_no)) > 0 THEN SUM(vnd_co) - SUM(vnd_no) ELSE 0 END,
		@Du_no_dau_ky_ngoai_te = CASE WHEN (SUM(ngoai_te_no) - SUM(ngoai_te_co)) > 0 THEN SUM(ngoai_te_no) - SUM(ngoai_te_co) ELSE 0 END,
		@Du_co_dau_ky_ngoai_te = CASE WHEN (SUM(ngoai_te_co) - SUM(ngoai_te_no)) > 0 THEN SUM(ngoai_te_co) - SUM(ngoai_te_no) ELSE 0 END
	FROM
	(
		SELECT
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.vnd,0) ELSE 0 END vnd_no, 
			CASE WHEN tk.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.vnd,0) ELSE 0 END vnd_co, 
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.ngoai_te,0) ELSE 0 END ngoai_te_no, 
			CASE WHEN tk.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.ngoai_te,0) ELSE 0 END ngoai_te_co
		FROM
		[dbo].[_rc] tk
		INNER JOIN v_AccountingAccount a ON tk.tk_no = a.AccountNumber
		WHERE ((tk.tk_no LIKE CONCAT(@SoTK,'%') AND tk.kh_no = @kh) OR (tk.tk_co LIKE CONCAT(@SoTK,'%') AND tk.kh_co = @kh))
		AND tk.ngay_ct < @FromDate 
		AND ISNULL(tk.loai_tien_nt, tk.loai_tien) = @Currency 
		AND tk.SubsidiaryId = @SubId
	) v

	SELECT 
		@Du_no_cuoi_ky_vnd = CASE WHEN (SUM(vnd_no) - SUM(vnd_co)) > 0 THEN SUM(vnd_no) - SUM(vnd_co) ELSE 0 END,
		@Du_co_cuoi_ky_vnd = CASE WHEN (SUM(vnd_co) - SUM(vnd_no)) > 0 THEN SUM(vnd_co) - SUM(vnd_no) ELSE 0 END,
		@Du_no_cuoi_ky_ngoai_te = CASE WHEN (SUM(ngoai_te_no) - SUM(ngoai_te_co)) > 0 THEN SUM(ngoai_te_no) - SUM(ngoai_te_co) ELSE 0 END,
		@Du_co_cuoi_ky_ngoai_te = CASE WHEN (SUM(ngoai_te_co) - SUM(ngoai_te_no)) > 0 THEN SUM(ngoai_te_co) - SUM(ngoai_te_no) ELSE 0 END
	FROM
	(
		SELECT
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.vnd,0) ELSE 0 END vnd_no, 
			CASE WHEN tk.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.vnd,0) ELSE 0 END vnd_co, 
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.ngoai_te,0) ELSE 0 END ngoai_te_no, 
			CASE WHEN tk.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.ngoai_te,0) ELSE 0 END ngoai_te_co
		FROM
		[dbo].[_rc] tk
		INNER JOIN v_AccountingAccount a ON tk.tk_no = a.AccountNumber
		WHERE ((tk.tk_no LIKE CONCAT(@SoTK,'%') AND tk.kh_no = @kh) OR (tk.tk_co LIKE CONCAT(@SoTK,'%') AND tk.kh_co = @kh))
		AND tk.ngay_ct <= @ToDate 
		AND ISNULL(tk.loai_tien_nt, tk.loai_tien) = @Currency 
		AND tk.SubsidiaryId = @SubId
	) v
	
	 IF @Du_no_dau_ky_vnd IS NULL SET @Du_no_dau_ky_vnd = 0
   IF @Du_co_dau_ky_vnd IS NULL SET @Du_co_dau_ky_vnd = 0
   IF @Du_no_dau_ky_ngoai_te IS NULL SET @Du_no_dau_ky_ngoai_te = 0
   IF @Du_co_dau_ky_ngoai_te IS NULL SET @Du_co_dau_ky_ngoai_te = 0
   IF @Du_no_cuoi_ky_vnd IS NULL SET @Du_no_cuoi_ky_vnd = 0
   IF @Du_co_cuoi_ky_vnd IS NULL SET @Du_co_cuoi_ky_vnd = 0
   IF @Du_no_cuoi_ky_ngoai_te IS NULL SET @Du_no_cuoi_ky_ngoai_te = 0
   IF @Du_co_cuoi_ky_ngoai_te IS NULL SET @Du_co_cuoi_ky_ngoai_te = 0
	
	SELECT 
		v.*,
		CASE WHEN (@Du_no_dau_ky_vnd + SUM(ISNULL(vnd_no,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_co_dau_ky_vnd - SUM(ISNULL(vnd_co,0)) OVER (ORDER BY ngay_ct,F_Id)) > 0 
		THEN (@Du_no_dau_ky_vnd + SUM(ISNULL(vnd_no,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_co_dau_ky_vnd - SUM(ISNULL(vnd_co,0)) OVER (ORDER BY ngay_ct,F_Id)) ELSE 0 END du_no_vnd,
		CASE WHEN (@Du_co_dau_ky_vnd + SUM(ISNULL(vnd_co,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_no_dau_ky_vnd - SUM(ISNULL(vnd_no,0)) OVER (ORDER BY ngay_ct,F_Id)) > 0 
		THEN (@Du_co_dau_ky_vnd + SUM(ISNULL(vnd_co,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_no_dau_ky_vnd - SUM(ISNULL(vnd_no,0)) OVER (ORDER BY ngay_ct,F_Id)) ELSE 0 END du_co_vnd,
		CASE WHEN (@Du_no_dau_ky_ngoai_te + SUM(ISNULL(ngoai_te_no,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_co_dau_ky_ngoai_te - SUM(ISNULL(ngoai_te_co,0)) OVER (ORDER BY ngay_ct,F_Id)) > 0 
		THEN (@Du_no_dau_ky_ngoai_te + SUM(ISNULL(ngoai_te_no,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_co_dau_ky_ngoai_te - SUM(ISNULL(ngoai_te_co,0)) OVER (ORDER BY ngay_ct,F_Id)) ELSE 0 END du_no_ngoai_te,
		CASE WHEN (@Du_co_dau_ky_ngoai_te + SUM(ISNULL(ngoai_te_co,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_no_dau_ky_ngoai_te - SUM(ISNULL(ngoai_te_no,0)) OVER (ORDER BY ngay_ct,F_Id)) > 0 
		THEN (@Du_co_dau_ky_ngoai_te + SUM(ISNULL(ngoai_te_co,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_no_dau_ky_ngoai_te - SUM(ISNULL(ngoai_te_no,0)) OVER (ORDER BY ngay_ct,F_Id)) ELSE 0 END du_co_ngoai_te
	FROM
	(
		SELECT 
			tk.F_Id,
			tk.so_ct,
			tk.ngay_ct,
			tk.dien_giai,
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN tk.tk_co ELSE tk.tk_no END tk_du,
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.vnd,0) ELSE 0 END vnd_no, 
			CASE WHEN tk.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.vnd,0) ELSE 0 END vnd_co, 
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.ngoai_te,0)  ELSE 0 END ngoai_te_no, 
			CASE WHEN tk.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.ngoai_te,0)  ELSE 0 END ngoai_te_co
		FROM
		[dbo].[_rc] tk
		INNER JOIN v_AccountingAccount a ON tk.tk_no = a.AccountNumber
		WHERE ((tk.tk_no LIKE CONCAT(@SoTK,'%') AND tk.kh_no = @kh) OR (tk.tk_co LIKE CONCAT(@SoTK,'%') AND tk.kh_co = @kh))
		AND tk.ngay_ct BETWEEN @FromDate AND @ToDate 
		AND ISNULL(tk.loai_tien_nt, tk.loai_tien) = @Currency 
		AND tk.SubsidiaryId = @SubId
	) v
	
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_LoanConvenant] AS SELECT  _LoanConvenant.F_Id, _LoanConvenant.UpdatedDatetimeUtc, _LoanConvenant.ConvenantNumber, _LoanConvenant.PaymentTerms, _LoanConvenant.DebtAcknowledgmentDate, _LoanConvenant.DueDate, _LoanConvenant.LoanNumber, _LoanConvenant.LoanCurrency, _LoanConvenant.InterestRepaymentTermType, _LoanConvenant.InterestRepaymentTerm, _LoanConvenant.PrincipalRepaymentTermType, _LoanConvenant.PrincipalRepaymentTermOfPeriod, _LoanConvenant.PeriodAmountPaid, _LoanConvenant.InterestRate, _LoanConvenant.bank_name, _LoanConvenant.No_acc_loan_bank, _LoanConvenant.PrincipalRepaymentTerm1, _LoanConvenant.IsBorrow, _LoanConvenant.Noi_dung, _timingType_0.[Name] AS [PaymentTerms_Name], _Currency_1.[CurrencyName] AS [LoanCurrency_CurrencyName], _timingType_2.[Name] AS [InterestRepaymentTermType_Name], _timingType_3.[Name] AS [PrincipalRepaymentTermType_Name], _Partner_4.[PartnerName] AS [bank_name_PartnerName] FROM [MasterDB].[dbo]._LoanConvenant LEFT JOIN [MasterDB].[dbo].v_timingType AS _timingType_0 ON _LoanConvenant.PaymentTerms = _timingType_0.F_Id LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_1 ON _LoanConvenant.LoanCurrency = _Currency_1.F_Id LEFT JOIN [MasterDB].[dbo].v_timingType AS _timingType_2 ON _LoanConvenant.InterestRepaymentTermType = _timingType_2.F_Id LEFT JOIN [MasterDB].[dbo].v_timingType AS _timingType_3 ON _LoanConvenant.PrincipalRepaymentTermType = _timingType_3.F_Id LEFT JOIN [MasterDB].[dbo].v_Partner AS _Partner_4 ON _LoanConvenant.bank_name = _Partner_4.F_Id WHERE _LoanConvenant.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_TK_nganhang_DN] AS SELECT  _TK_nganhang_DN.F_Id, _TK_nganhang_DN.UpdatedDatetimeUtc, _TK_nganhang_DN.Ten_tk, _TK_nganhang_DN.So_TKNH, _TK_nganhang_DN.Loai_tien, _TK_nganhang_DN.Ngan_hang, _TK_nganhang_DN.Chi_nhanh_NH, _TK_nganhang_DN.Tinh_TP, _TK_nganhang_DN.Code_NH, _TK_nganhang_DN.TK_HT, _Currency_0.[CurrencyCode] AS [Loai_tien_CurrencyCode], _AccountingAccount_1.[AccountNumber] AS [TK_HT_AccountNumber] FROM [MasterDB].[dbo]._TK_nganhang_DN LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_0 ON _TK_nganhang_DN.Loai_tien = _Currency_0.F_Id LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_1 ON _TK_nganhang_DN.TK_HT = _AccountingAccount_1.F_Id WHERE _TK_nganhang_DN.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_PrepaidExpense] AS SELECT  _PrepaidExpense.F_Id, _PrepaidExpense.UpdatedDatetimeUtc, _PrepaidExpense.PrepaidExpenseCode, _PrepaidExpense.PrepaidExpenseName, _PrepaidExpense.PrepaidExpenseUnit, _PrepaidExpense.PrepaidExpenseQty, _PrepaidExpense.PrepaidExpenseDate, _PrepaidExpense.PrepaidExpenseUsed, _PrepaidExpense.PrepaidExpenseMonthNumber, _PrepaidExpense.PrepaidExpenseTk, _PrepaidExpense.PrepaidExpenseNote, _PrepaidExpense.PrepaidExpenseTk_no, _PrepaidExpense.PrepaidExpensePhan_xuong, _Department_0.[DepartmentName] AS [PrepaidExpenseUsed_DepartmentName], _AccountingAccount_1.[AccountNumber] AS [PrepaidExpenseTk_AccountNumber], _AccountingAccount_2.[AccountNumber] AS [PrepaidExpenseTk_no_AccountNumber], _Department_3.[DepartmentName] AS [PrepaidExpensePhan_xuong_DepartmentName] FROM [MasterDB].[dbo]._PrepaidExpense LEFT JOIN [MasterDB].[dbo].v_Department AS _Department_0 ON _PrepaidExpense.PrepaidExpenseUsed = _Department_0.F_Id LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_1 ON _PrepaidExpense.PrepaidExpenseTk = _AccountingAccount_1.F_Id LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_2 ON _PrepaidExpense.PrepaidExpenseTk_no = _AccountingAccount_2.F_Id LEFT JOIN [MasterDB].[dbo].v_Department AS _Department_3 ON _PrepaidExpense.PrepaidExpensePhan_xuong = _Department_3.F_Id WHERE _PrepaidExpense.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_FixedAsset] AS SELECT  _FixedAsset.F_Id, _FixedAsset.UpdatedDatetimeUtc, _FixedAsset.FixedAssetCode, _FixedAsset.FixedAssetName, _FixedAsset.FixedAssetUnit, _FixedAsset.FixedAssetUsedDate, _FixedAsset.FixedAssetNumber, _FixedAsset.FixedAssetCountry, _FixedAsset.FixedAssetDepreciationCriteria, _FixedAsset.FixedAssetTotalDepreciationCriteria, _FixedAsset.FixedAssetYearNumber, _FixedAsset.FixedAssetNote, _FixedAsset.FixedAssetQty, _FixedAsset.FixedAssetTk, _FixedAsset.FixedAssetUsedUsed, _AccountingAccount_0.[AccountNumber] AS [FixedAssetTk_AccountNumber], _Department_1.[DepartmentName] AS [FixedAssetUsedUsed_DepartmentName] FROM [MasterDB].[dbo]._FixedAsset LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_0 ON _FixedAsset.FixedAssetTk = _AccountingAccount_0.F_Id LEFT JOIN [MasterDB].[dbo].v_Department AS _Department_1 ON _FixedAsset.FixedAssetUsedUsed = _Department_1.F_Id WHERE _FixedAsset.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[vInputValueRow] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vInputBill.F_Id					AS InputBill_F_Id,
		vInputBill.CreatedByUserId		AS CreatedByUserId,
		vInputBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vInputBill.UpdatedByUserId		AS UpdatedByUserId,
		vInputBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vInputBill.LatestBillVersion	AS LatestBillVersion,
		

		row.InputTypeId					AS InputTypeId,
		vInputType.Title				AS InputType_Title,
		vInputType.IsOpenning			AS InputType_IsOpenning,
		vInputType.InputTypeCode		AS InputType_InputTypeCode
	
	,  [row].[ngay_ct],  [row].[so_ct],  [row].[mau_hd],  [row].[seri_hd],  [row].[ngay_hd],  [row].[attachment],  [row].[loai_tien], [vloai_tien].[CurrencyCode] AS [loai_tien_CurrencyCode], [vloai_tien].[DecimalPlace] AS [loai_tien_DecimalPlace],  [row].[ty_gia],  [row].[tk_no0], [vtk_no0].[AccountNumber] AS [tk_no0_AccountNumber],  [row].[tk_co0], [vtk_co0].[AccountNumber] AS [tk_co0_AccountNumber],  [row].[ong_ba],  [row].[dia_chi],  [row].[bo_phan], [vbo_phan].[DepartmentName] AS [bo_phan_DepartmentName],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[kh_co0], [vkh_co0].[PartnerCode] AS [kh_co0_PartnerCode], [vkh_co0].[PartnerName] AS [kh_co0_PartnerName],  [row].[stt],  [row].[noi_dung],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[MainImageFileId] AS [vthhtp_MainImageFileId], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace], [vvthhtp].[UnitId] AS [vthhtp_UnitId],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[thue_suat_vat],  [row].[ghi_chu],  [row].[kho], [vkho].[StockName] AS [kho_StockName],  [row].[kho_lc], [vkho_lc].[StockName] AS [kho_lc_StockName],  [row].[khe_uoc_vay], [vkhe_uoc_vay].[ConvenantNumber] AS [khe_uoc_vay_ConvenantNumber],  [row].[tk_thu_kbnn], [vtk_thu_kbnn].[Acc_code] AS [tk_thu_kbnn_Acc_code],  [row].[ma_chuong_nsnn], [vma_chuong_nsnn].[Code] AS [ma_chuong_nsnn_Code],  [row].[ma_muc_nsnn], [vma_muc_nsnn].[Cate_code] AS [ma_muc_nsnn_Cate_code],  [row].[cong_trinh], [vcong_trinh].[ConstructionName] AS [cong_trinh_ConstructionName],  [row].[phan_xuong], [vphan_xuong].[DepartmentName] AS [phan_xuong_DepartmentName],  [row].[khoan_muc_cp], [vkhoan_muc_cp].[ExpenseItemName] AS [khoan_muc_cp_ExpenseItemName],  [row].[khoan_muc_tc], [vkhoan_muc_tc].[Name] AS [khoan_muc_tc_Name],  [row].[po_code],  [row].[order_code],  [row].[ma_lsx],  [row].[dien_giai],  [row].[thue_suat_xnk],  [row].[vnd3],  [row].[vnd1],  [row].[sl_po],  [row].[sl_od],  [row].[sl_ycvt],  [row].[tk_no1], [vtk_no1].[AccountNumber] AS [tk_no1_AccountNumber],  [row].[tk_co1], [vtk_co1].[AccountNumber] AS [tk_co1_AccountNumber],  [row].[tk_no2], [vtk_no2].[AccountNumber] AS [tk_no2_AccountNumber],  [row].[tk_co2], [vtk_co2].[AccountNumber] AS [tk_co2_AccountNumber],  [row].[tk_no3], [vtk_no3].[AccountNumber] AS [tk_no3_AccountNumber],  [row].[tk_co3], [vtk_co3].[AccountNumber] AS [tk_co3_AccountNumber],  [row].[tscd], [vtscd].[FixedAssetCode] AS [tscd_FixedAssetCode], [vtscd].[FixedAssetName] AS [tscd_FixedAssetName],  [row].[kh1], [vkh1].[PartnerCode] AS [kh1_PartnerCode], [vkh1].[PartnerName] AS [kh1_PartnerName],  [row].[kh3], [vkh3].[PartnerCode] AS [kh3_PartnerCode], [vkh3].[PartnerName] AS [kh3_PartnerName],  [row].[tknh], [vtknh].[Ten_tk] AS [tknh_Ten_tk], [vtknh].[So_TKNH] AS [tknh_So_TKNH], [vtknh].[Chi_nhanh_NH] AS [tknh_Chi_nhanh_NH], [vtknh].[Ngan_hang] AS [tknh_Ngan_hang],  [row].[tknh_kh], [vtknh_kh].[Ten_TKNH] AS [tknh_kh_Ten_TKNH], [vtknh_kh].[So_TKNH] AS [tknh_kh_So_TKNH], [vtknh_kh].[Chi_nhanh_NH] AS [tknh_kh_Chi_nhanh_NH], [vtknh_kh].[Ngan_hang] AS [tknh_kh_Ngan_hang],  [row].[ky_hieu_hd],  [row].[ma_link_hd],  [row].[constrain_ty_gia],  [row].[vthhtp_dvt2], [vvthhtp_dvt2].[ProductUnitConversionName] AS [vthhtp_dvt2_ProductUnitConversionName], [vvthhtp_dvt2].[DecimalPlace] AS [vthhtp_dvt2_DecimalPlace], [vvthhtp_dvt2].[FactorExpression] AS [vthhtp_dvt2_FactorExpression],  [row].[so_luong_dv2],  [row].[don_gia_dv2_0],  [row].[dv_ql_hc], [vdv_ql_hc].[Name] AS [dv_ql_hc_Name], [vdv_ql_hc].[Province] AS [dv_ql_hc_Province],  [row].[constrain_sl_dg],  [row].[vnd2],  [row].[tk_no4], [vtk_no4].[AccountNumber] AS [tk_no4_AccountNumber],  [row].[tk_co4], [vtk_co4].[AccountNumber] AS [tk_co4_AccountNumber],  [row].[vnd4],  [row].[sum_vnd0],  [row].[sum_vnd1],  [row].[sum_vnd2],  [row].[sum_vnd3],  [row].[sum_vnd4],  [row].[sum_vnd5],  [row].[test01],  [row].[don_gia1],  [row].[don_gia2],  [row].[don_gia3],  [row].[don_gia4],  [row].[don_gia5],  [row].[don_gia_dvt2_1],  [row].[don_gia_dvt2_2],  [row].[don_gia_dvt2_3],  [row].[don_gia_dvt2_4],  [row].[Not_VAT],  [row].[CensorStatusId], [vCensorStatusId].[CensorStatusName] AS [CensorStatusId_CensorStatusName], [vCensorStatusId].[CssStyleJson] AS [CensorStatusId_CssStyleJson],  [row].[CheckStatusId], [vCheckStatusId].[CheckStatusName] AS [CheckStatusId_CheckStatusName], [vCheckStatusId].[CssStyleJson] AS [CheckStatusId_CssStyleJson],  [row].[sl_lsx],  [row].[CensorUserId], [vCensorUserId].[FullName] AS [CensorUserId_FullName],  [row].[CensorDatetimeUtc],  [row].[cptt], [vcptt].[PrepaidExpenseCode] AS [cptt_PrepaidExpenseCode], [vcptt].[PrepaidExpenseName] AS [cptt_PrepaidExpenseName],  [row].[kh4], [vkh4].[PartnerCode] AS [kh4_PartnerCode], [vkh4].[PartnerName] AS [kh4_PartnerName],  [row].[Mat_hang_VAT],  [row].[kh_co1], [vkh_co1].[PartnerCode] AS [kh_co1_PartnerCode], [vkh_co1].[PartnerName] AS [kh_co1_PartnerName],  [row].[ngoai_te1],  [row].[So_ct_goc]
		FROM InputValueRow as row WITH(NOLOCK)
			JOIN vInputBill WITH(NOLOCK) ON row.InputBill_F_Id		= vInputBill.F_Id
			JOIN vInputType WITH(NOLOCK) ON row.InputTypeId		= vInputType.F_Id	
	 LEFT JOIN [v_Currency] as [vloai_tien] WITH(NOLOCK) ON [row].[loai_tien] = [vloai_tien].[F_Id] LEFT JOIN [v_AccountingAccount] as [vtk_no0] WITH(NOLOCK) ON [row].[tk_no0] = [vtk_no0].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_co0] WITH(NOLOCK) ON [row].[tk_co0] = [vtk_co0].[AccountNumber] LEFT JOIN [v_Department] as [vbo_phan] WITH(NOLOCK) ON [row].[bo_phan] = [vbo_phan].[F_Id] LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Partner] as [vkh_co0] WITH(NOLOCK) ON [row].[kh_co0] = [vkh_co0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_Stock] as [vkho] WITH(NOLOCK) ON [row].[kho] = [vkho].[F_Id] LEFT JOIN [v_Stock] as [vkho_lc] WITH(NOLOCK) ON [row].[kho_lc] = [vkho_lc].[F_Id] LEFT JOIN [v_LoanConvenant] as [vkhe_uoc_vay] WITH(NOLOCK) ON [row].[khe_uoc_vay] = [vkhe_uoc_vay].[F_Id] LEFT JOIN [v_account_nationalbank] as [vtk_thu_kbnn] WITH(NOLOCK) ON [row].[tk_thu_kbnn] = [vtk_thu_kbnn].[F_Id] LEFT JOIN [v_nsnn] as [vma_chuong_nsnn] WITH(NOLOCK) ON [row].[ma_chuong_nsnn] = [vma_chuong_nsnn].[F_Id] LEFT JOIN [v_category_subcate] as [vma_muc_nsnn] WITH(NOLOCK) ON [row].[ma_muc_nsnn] = [vma_muc_nsnn].[F_Id] LEFT JOIN [v_Construction] as [vcong_trinh] WITH(NOLOCK) ON [row].[cong_trinh] = [vcong_trinh].[F_Id] LEFT JOIN [v_Department] as [vphan_xuong] WITH(NOLOCK) ON [row].[phan_xuong] = [vphan_xuong].[F_Id] LEFT JOIN [v_ExpenseItem] as [vkhoan_muc_cp] WITH(NOLOCK) ON [row].[khoan_muc_cp] = [vkhoan_muc_cp].[F_Id] LEFT JOIN [v_cate_inoutcome] as [vkhoan_muc_tc] WITH(NOLOCK) ON [row].[khoan_muc_tc] = [vkhoan_muc_tc].[F_Id] LEFT JOIN [v_AccountingAccount] as [vtk_no1] WITH(NOLOCK) ON [row].[tk_no1] = [vtk_no1].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_co1] WITH(NOLOCK) ON [row].[tk_co1] = [vtk_co1].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_no2] WITH(NOLOCK) ON [row].[tk_no2] = [vtk_no2].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_co2] WITH(NOLOCK) ON [row].[tk_co2] = [vtk_co2].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_no3] WITH(NOLOCK) ON [row].[tk_no3] = [vtk_no3].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_co3] WITH(NOLOCK) ON [row].[tk_co3] = [vtk_co3].[AccountNumber] LEFT JOIN [v_FixedAsset] as [vtscd] WITH(NOLOCK) ON [row].[tscd] = [vtscd].[F_Id] LEFT JOIN [v_Partner] as [vkh1] WITH(NOLOCK) ON [row].[kh1] = [vkh1].[F_Id] LEFT JOIN [v_Partner] as [vkh3] WITH(NOLOCK) ON [row].[kh3] = [vkh3].[F_Id] LEFT JOIN [v_TK_nganhang_DN] as [vtknh] WITH(NOLOCK) ON [row].[tknh] = [vtknh].[F_Id] LEFT JOIN [v_TK_nganhang_dt] as [vtknh_kh] WITH(NOLOCK) ON [row].[tknh_kh] = [vtknh_kh].[F_Id] LEFT JOIN [v_ProductUnitConversion] as [vvthhtp_dvt2] WITH(NOLOCK) ON [row].[vthhtp_dvt2] = [vvthhtp_dvt2].[F_Id] LEFT JOIN [v_gov_level] as [vdv_ql_hc] WITH(NOLOCK) ON [row].[dv_ql_hc] = [vdv_ql_hc].[F_Id] LEFT JOIN [v_AccountingAccount] as [vtk_no4] WITH(NOLOCK) ON [row].[tk_no4] = [vtk_no4].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_co4] WITH(NOLOCK) ON [row].[tk_co4] = [vtk_co4].[AccountNumber] LEFT JOIN [v_CensorStatus] as [vCensorStatusId] WITH(NOLOCK) ON [row].[CensorStatusId] = [vCensorStatusId].[CensorStatusId] LEFT JOIN [v_CheckStatus] as [vCheckStatusId] WITH(NOLOCK) ON [row].[CheckStatusId] = [vCheckStatusId].[CheckStatusId] LEFT JOIN [v_User] as [vCensorUserId] WITH(NOLOCK) ON [row].[CensorUserId] = [vCensorUserId].[F_Id] LEFT JOIN [v_PrepaidExpense] as [vcptt] WITH(NOLOCK) ON [row].[cptt] = [vcptt].[F_Id] LEFT JOIN [v_Partner] as [vkh4] WITH(NOLOCK) ON [row].[kh4] = [vkh4].[F_Id] LEFT JOIN [v_Partner] as [vkh_co1] WITH(NOLOCK) ON [row].[kh_co1] = [vkh_co1].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[afn_GetChildrenAccount]
(	
	@AccountNumbers nvarchar(max)
)
RETURNS @Result TABLE
(
	AccountNumber nvarchar(128)
)
AS
BEGIN 

	DECLARE @tblTk TABLE(
		AccountNumber nvarchar(128)
	);
	INSERT INTO @tblTk
	SELECT LTRIM(RTRIM([Value])) FROM dbo.ufn_Split(@AccountNumbers,',');
	
	INSERT INTO @Result
	SELECT a.AccountNumber 
	FROM dbo.v_AccountingAccount a  WITH(NOLOCK)
	WHERE EXISTS(SELECT 0 FROM @tblTk tk WHERE a.AccountNumber LIKE tk.AccountNumber + '%')
	OPTION(RECOMPILE);

	RETURN;
END



GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedDepreciation]
	@SoTK AS nvarchar(10),
	@FromDate AS datetime,
	@ToDate AS datetime,
	@SubId AS int,
	@ResStatus AS bit OUTPUT
AS
BEGIN
	SET @ResStatus = 0
	;WITH tscd AS
    (
        SELECT      DISTINCT r.tscd
              FROM  dbo._rc                        r
                    LEFT JOIN dbo.v_FixedAsset p ON p.F_Id = r.tscd
             WHERE  r.SubsidiaryId                           = @SubId
               AND  r.tk_no LIKE CONCAT(@SoTK, '%')
               AND  r.ngay_ct                                <= @ToDate
               AND
                    (
                        ISNULL(p.FixedAssetUsedDate, r.ngay_ct) <= @ToDate
                   OR   p.F_Id IS NULL
                    )					
    ),
         chua_het AS
    (
		SELECT du_no.tscd, 
		du_no.du_no, 
		du_no.ps_co, 
		ISNULL(co_214.ps_co_214,0)  ps_co_214 ,
		du_no.du_no - ISNULL(co_214.ps_co_214,0) Remaining
		FROM
		(
			SELECT      d.tscd			,		
						ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) du_no,
						ISNULL(SUM(d.Vnd_co), 0)                            ps_co
				  FROM  dbo._rc_detail d
						JOIN tscd c ON c.tscd = d.tscd
										 OR c.tscd IS NULL
										AND d.tscd IS NULL
				 WHERE  (d.Tk LIKE '211%' OR d.Tk LIKE '212%' OR d.Tk LIKE '213%')
				   AND  d.SubsidiaryId = @SubId
				   AND  d.ngay_ct      < @ToDate
				 GROUP BY d.tscd
				HAVING  ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) > 0
		) du_no
		LEFT JOIN
		(
        SELECT      d.tscd			,		                  
                    ISNULL(SUM(d.vnd), 0)                            ps_co_214
              FROM  dbo._rc d
                    JOIN tscd c ON c.tscd = d.tscd
                                     OR c.tscd IS NULL
                                    AND d.tscd IS NULL
             WHERE  --(d.tk_no LIKE '211%' OR d.tk_no LIKE '212%' OR d.tk_no LIKE '213%')
				--AND 
				d.tk_co LIKE '214%'
               AND  d.SubsidiaryId = @SubId
               AND  d.ngay_ct      < @ToDate
             GROUP BY d.tscd            
		) co_214 ON du_no.tscd = co_214.tscd
		WHERE du_no.du_no > ISNULL(co_214.ps_co_214,0)
    )
		SELECT TOP(1) @ResStatus = 1 
		FROM [dbo].[_rc] r 
		WHERE r.InputType_InputTypeCode = 'CTGS_KH_TSCD' AND r.tk_co LIKE '214%' AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.SubsidiaryId = @SubId AND EXISTS ( 
			SELECT 1 
			FROM chua_het r1
			WHERE (r.tscd IS NULL AND r1.tscd IS NULL) OR r.tscd = r1.tscd
		)
	
		
		
	
END


GO

USE AccountancyPublicDB
GO
/**
* 2022-05-22 Only delete details, update do not delete bill if not necessary
*/
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_DeleteDepreciation]
	@SoTK AS nvarchar(10),
  @FromDate AS datetime ,
  @ToDate AS datetime,
	@ResStatus bit OUTPUT,
	@SubId AS int
AS
BEGIN
	BEGIN TRANSACTION
		EXEC dbo.asp_ValidateBillDate @SubId = @SubId, @BillDate = NULL, @OldDate = @FromDate, @ResStatus = @ResStatus OUTPUT
		IF @ResStatus = 1
		BEGIN
			
			
			DECLARE @Rows TABLE
			(
				BillId BIGINT,
				F_Id BIGINT
			);
			;WITH tscd AS
				(
					SELECT      DISTINCT r.tscd
						  FROM  dbo._rc                        r
								LEFT JOIN dbo.v_FixedAsset p ON p.F_Id = r.tscd
						 WHERE  r.SubsidiaryId                           = @SubId
						   AND  r.tk_no LIKE CONCAT(@SoTK, '%')
						   AND  r.ngay_ct                                <= @ToDate
						   AND
								(
									ISNULL(p.FixedAssetUsedDate, r.ngay_ct) <= @ToDate
							   OR   p.F_Id IS NULL
								)					
				),
					 chua_het AS
				(
					SELECT du_no.tscd, 
					du_no.du_no, 
					du_no.ps_co, 
					ISNULL(co_214.ps_co_214,0)  ps_co_214 ,
					du_no.du_no - ISNULL(co_214.ps_co_214,0) Remaining
					FROM
					(
						SELECT      d.tscd			,		
									ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) du_no,
									ISNULL(SUM(d.Vnd_co), 0)                            ps_co
							  FROM  dbo._rc_detail d
									JOIN tscd c ON c.tscd = d.tscd
													 OR c.tscd IS NULL
													AND d.tscd IS NULL
							 WHERE  (d.Tk LIKE '211%' OR d.Tk LIKE '212%' OR d.Tk LIKE '213%')
							   AND  d.SubsidiaryId = @SubId
							   AND  d.ngay_ct      < @ToDate
							 GROUP BY d.tscd
							HAVING  ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) > 0
					) du_no
					LEFT JOIN
					(
					SELECT      d.tscd			,		                  
								ISNULL(SUM(d.vnd), 0)                            ps_co_214
						  FROM  dbo._rc d
								JOIN tscd c ON c.tscd = d.tscd
												 OR c.tscd IS NULL
												AND d.tscd IS NULL
						 WHERE  --(d.tk_no LIKE '211%' OR d.tk_no LIKE '212%' OR d.tk_no LIKE '213%')
							--AND 
							d.tk_co LIKE '214%'
						   AND  d.SubsidiaryId = @SubId
						   AND  d.ngay_ct      < @ToDate
						 GROUP BY d.tscd            
					) co_214 ON du_no.tscd = co_214.tscd
					WHERE du_no.du_no > ISNULL(co_214.ps_co_214,0)
				)
			INSERT INTO @Rows (BillId,
			                   F_Id)
			SELECT r.InputBill_F_Id, r.F_Id
			FROM [dbo].[_rc] r 
			WHERE r.InputType_InputTypeCode = 'CTGS_KH_TSCD' AND r.tk_co LIKE '214%' AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.SubsidiaryId = @SubId AND EXISTS ( 
				SELECT 1 
				FROM chua_het r1
				WHERE (r.tscd IS NULL AND r1.tscd IS NULL) OR r.tscd = r1.tscd
			);

			-- delete rows
			UPDATE d
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE(),
				SystemLog =  'Deleted by depreciation'
			FROM dbo.InputValueRow d
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.F_Id = d.F_Id)

			-- delete bills
			UPDATE b
			SET IsDeleted = 1,
				DeletedDatetimeUtc = GETUTCDATE()
			FROM dbo.InputBill b
			WHERE EXISTS (SELECT 0 FROM @Rows r WHERE r.BillId = b.F_Id)
			AND NOT EXISTS (SELECT 0 FROM dbo._rc_all a WHERE a.InputBill_F_Id = b.F_Id)		
	
		END
	COMMIT TRANSACTION
END


GO

USE AccountancyPublicDB
GO
CREATE OR ALTER FUNCTION [dbo].[fn_CalcInterestPayable]
( 
	@SoTK AS nvarchar(10),
	@FromDate AS datetime2,
	@ToDate AS datetime2,
	@ConvenantNumber AS nvarchar(64),
	@InterestRate AS int,
	@IsBorrow AS bit,
	@IsForeignCurrency AS bit
)
RETURNS @return_variable TABLE
( data bigint)
AS
BEGIN

	DECLARE @du_dau_ky bigint = 0
	DECLARE @lai_phai_tra bigint = 0

	DECLARE @prevDate datetime2 = @FromDate

	IF @IsForeignCurrency = 0
		IF @IsBorrow = 1
			BEGIN
				SELECT
					@du_dau_ky = SUM(CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END) - SUM(CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END) 
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct < @FromDate
					AND lc.ConvenantNumber = @ConvenantNumber
				IF @du_dau_ky IS NULL SET @du_dau_ky = 0
				SELECT
					@lai_phai_tra = @lai_phai_tra + @du_dau_ky * @InterestRate * (DATEDIFF(day, @prevDate, _rc.ngay_ct) + 1) / 36500,
					@prevDate = DATEADD(day, 1, _rc.ngay_ct),
					@du_dau_ky = @du_dau_ky + CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END - CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct BETWEEN @FromDate AND @ToDate
					AND lc.ConvenantNumber = @ConvenantNumber	
			END
		ELSE
			BEGIN
				SELECT
					@du_dau_ky = SUM(CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END) - SUM(CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END) 
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct < @FromDate
					AND lc.ConvenantNumber = @ConvenantNumber
				IF @du_dau_ky IS NULL SET @du_dau_ky = 0
				SELECT
					@lai_phai_tra = @lai_phai_tra + @du_dau_ky * @InterestRate * (DATEDIFF(day, @prevDate, _rc.ngay_ct) + 1) / 36500,
					@prevDate = DATEADD(day, 1, _rc.ngay_ct),
					@du_dau_ky = @du_dau_ky + CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END - CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct BETWEEN @FromDate AND @ToDate
					AND lc.ConvenantNumber = @ConvenantNumber
			END
	ELSE
		IF @IsBorrow = 1
			BEGIN
				SELECT
					@du_dau_ky = SUM(CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END) - SUM(CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END) 
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%')) 
					AND _rc.ngay_ct < @FromDate
					AND lc.ConvenantNumber = @ConvenantNumber
				IF @du_dau_ky IS NULL SET @du_dau_ky = 0
				SELECT
					@lai_phai_tra = @lai_phai_tra + @du_dau_ky * @InterestRate * (DATEDIFF(day, @prevDate, _rc.ngay_ct) + 1) / 36500,
					@prevDate = DATEADD(day, 1, _rc.ngay_ct),
					@du_dau_ky = @du_dau_ky + CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END - CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct BETWEEN @FromDate AND @ToDate
					AND lc.ConvenantNumber = @ConvenantNumber	
			END
		ELSE
			BEGIN
				SELECT
					@du_dau_ky = SUM(CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END) - SUM(CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END) 
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct < @FromDate
					AND lc.ConvenantNumber = @ConvenantNumber
				IF @du_dau_ky IS NULL SET @du_dau_ky = 0
				SELECT
					@lai_phai_tra = @lai_phai_tra + @du_dau_ky * @InterestRate * (DATEDIFF(day, @prevDate, _rc.ngay_ct) + 1) / 36500,
					@prevDate = DATEADD(day, 1, _rc.ngay_ct),
					@du_dau_ky = @du_dau_ky + CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END - CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct BETWEEN @FromDate AND @ToDate
					AND lc.ConvenantNumber = @ConvenantNumber
			END

	IF @lai_phai_tra IS NULL SET @lai_phai_tra = 0

	SET @lai_phai_tra += @du_dau_ky * @InterestRate * (DATEDIFF(day, @prevDate, @ToDate) + 1)/ 36500
		
	INSERT INTO @return_variable values (@lai_phai_tra)
	RETURN 
END


GO

USE AccountancyPublicDB
GO

CREATE OR ALTER FUNCTION [dbo].[afn_sumVndByTk]
(
	@SubId int,
	@tk_no nvarchar(max),
	@tk_co nvarchar(max),	
	@FromDate datetime2,
	@ToDate datetime2,
	@Thue_suat_VAT INT,
	@IsNotVat BIT = NULL
)
RETURNS decimal(18,5)
AS
BEGIN
	DECLARE @Result decimal(18,5)

	DECLARE @tblTkNo TABLE(
		AccountNumber nvarchar(128)
	)

	DECLARE @tblTkCo TABLE(
		AccountNumber nvarchar(128)
	)

	INSERT INTO @tblTkNo
	SELECT AccountNumber FROM dbo.afn_GetChildrenAccount(@tk_no);

	INSERT INTO @tblTkCo
	SELECT AccountNumber FROM dbo.afn_GetChildrenAccount(@tk_co);



	SELECT 
		@Result = SUM(Vnd) 
	FROM dbo._rc WITH(NOLOCK)
		WHERE
			SubsidiaryId = @SubId
			AND [Ngay_ct] BETWEEN @FromDate AND @ToDate			
			AND (LEN(@tk_no) = 0 OR (@tk_no='-' AND tk_no IS NOT NULL AND tk_no <> '') OR EXISTS (SELECT 0 FROM @tblTkNo WHERE AccountNumber = tk_no))
			AND (LEN(@tk_co) = 0 OR (@tk_co='-' AND tk_co IS NOT NULL AND tk_co <> '') OR EXISTS (SELECT 0 FROM @tblTkCo WHERE AccountNumber = tk_co))
			AND Vnd > 0
			AND (@Thue_suat_VAT IS NULL OR Thue_suat_VAT = @Thue_suat_VAT)
			AND (@IsNotVat IS NULL OR (@IsNotVat = 0 AND (Not_VAT IS NULL OR Not_VAT = 0)) OR (@IsNotVat = 1 AND Not_VAT = 1))
		OPTION(RECOMPILE);
	RETURN @Result
END



GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[v_Contract] AS SELECT  _Contract.F_Id, _Contract.UpdatedDatetimeUtc, _Contract.ContractNumber, _Contract.ContractCode, _Contract.ContractName, _Contract.ContractSigningDate, _Contract.DeliveryConditions, _Contract.ContractValue, _Contract.ContractCurrency, _Contract.ContractPaymentTerms, _Contract.WarrantyPeriod, _Contract.DeliveryPlace, _Contract.ContractNote, _Currency_0.[CurrencyCode] AS [ContractCurrency_CurrencyCode] FROM [MasterDB].[dbo]._Contract LEFT JOIN [MasterDB].[dbo].v_Currency AS _Currency_0 ON _Contract.ContractCurrency = _Currency_0.F_Id WHERE _Contract.IsDeleted = 0

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_CalcProductPrice_BuyLastest]
	@SubId int,
	@Date datetime2 = null,
	@ProductIds _INTVALUES READONLY
AS
BEGIN
	WITH tmp AS
	(
		SELECT 			
			d.vthhtp as productId,
			d.don_gia,
			ROW_NUMBER() OVER(PARTITION BY d.vthhtp ORDER BY d.ngay_ct DESC) RowNumber
		FROM dbo._rc d
			JOIN dbo.v_AccountingAccount a ON d.tk_no = a.AccountNumber
		WHERE d.SubsidiaryId = @SubId 
			AND d.ngay_ct <= @Date
			AND d.vthhtp IN(SELECT [Value] FROM @ProductIds)
			AND a.IsStock = 1
			AND d.don_gia>0
	)
	SELECT 			
			productId, 
			don_gia 
	FROM tmp
	WHERE RowNumber = 1
END

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcFixExchangeRateByLoanConvenant]	
	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@Currency INT,
	@Tk NVARCHAR(128),
	@SubId AS int
AS
BEGIN
	--SELECT @Currency loait
	SET @Tk = CONCAT(@Tk,'%')
	;WITH ps_no AS
	(
		SELECT
			tk.kh_no,
			tk.khe_uoc_vay,
			tk.ngay_ct,
			tk.so_ct,
			tk.tk_no,
			tk.InputTypeId,
			tk.InputBill_F_Id,
			SUM(tk.ngoai_te) ngoai_te,
			SUM(tk.vnd) vnd,
			AVG(tk.ty_gia) ty_gia
		FROM dbo._rc tk
		WHERE  tk.tk_no LIKE @Tk	
			AND tk.ngay_ct BETWEEN @FromDate AND @ToDate
			AND tk.loai_tien = @Currency
			AND tk.SubsidiaryId = @SubId
			AND tk.vnd>0
			AND tk.ngoai_te>0
		GROUP BY
			tk.kh_no,
			tk.khe_uoc_vay,
			tk.ngay_ct,
			tk.so_ct,
			tk.tk_no,
			tk.InputTypeId,
			tk.InputBill_F_Id
	), ps_co AS
	(
		SELECT
			tk.kh_co,
			tk.tk_co,
			tk.khe_uoc_vay,
			
			STRING_AGG(tk.InputBill_F_Id,',') InputBill_F_Ids,
			STRING_AGG(tk.InputTypeId,',') InputTypeIds,
			STRING_AGG(tk.so_ct,',') so_cts,
			STRING_AGG(DATEDIFF(second,'1970-01-01',tk.ngay_ct),',') ngay_cts,

			SUM(tk.ngoai_te) ngoai_te,
			SUM(tk.vnd) vnd,
			AVG(tk.ty_gia) ty_gia
		FROM (
			SELECT
				tk.kh_co,
				tk.tk_co,
				tk.khe_uoc_vay,

				tk.InputBill_F_Id,
				tk.InputTypeId,
				tk.so_ct,
				tk.ngay_ct,

				SUM(tk.ngoai_te) ngoai_te,
				SUM(tk.vnd) vnd,
				SUM(tk.ty_gia * tk.ngoai_te)/SUM(tk.ngoai_te) ty_gia
			FROM dbo._rc tk
			WHERE tk.tk_co LIKE @Tk
				--AND tk.ngay_ct BETWEEN @FromDate AND @ToDate
				AND tk.loai_tien = @Currency
				AND tk.SubsidiaryId = @SubId
				AND EXISTS(SELECT 0 FROM ps_no n WHERE tk.khe_uoc_vay = n.khe_uoc_vay)
			GROUP BY
				tk.kh_co,
				tk.tk_co,
				tk.khe_uoc_vay,
				tk.InputBill_F_Id,
				tk.InputTypeId,
				tk.so_ct,
				tk.ngay_ct
		) tk
		GROUP BY
				tk.kh_co,							
				tk.tk_co,
				tk.khe_uoc_vay

	),v AS(
		SELECT 
			ps_no.kh_no kh,
			ps_no.khe_uoc_vay,
			ps_co.tk_co,
			ps_co.ngoai_te			co_ngoai_te,
			ps_co.vnd				co_vnd,
			ps_co.ty_gia			co_ty_gia,
			ps_co.InputBill_F_Ids	co_InputBill_F_Ids,
			ps_co.InputTypeIds		co_InputTypeIds,
			ps_co.so_cts			co_so_cts,
			ps_co.ngay_cts			co_ngay_cts,
		
			ps_no.ngay_ct			no_ngay_ct,
			ps_no.so_ct				no_so_ct,
			ps_no.InputTypeId		no_InputTypeId,
			ps_no.InputBill_F_Id	no_InputBill_F_Id,
			ps_no.ngoai_te			no_ngoai_te,
			ps_no.vnd				no_vnd,
			ps_no.ty_gia			no_ty_gia,
			(ps_no.ty_gia - ps_co.ty_gia)*ps_no.ngoai_te chenh_lech--,
			--CONCAT('N',ps_no.tk_no,'/C',ps_co.tk_co) hach_toan
		
		FROM ps_no
		LEFT JOIN ps_co ON  ps_co.kh_co = ps_no.kh_no AND ps_no.khe_uoc_vay = ps_co.khe_uoc_vay AND ps_no.tk_no = ps_co.tk_co
	)
	SELECT
		v.kh,
		c.CustomerId customerId,
		c.PartnerCode kh_PartnerCode,
		c.PartnerName kh_PartnerName,
		v.khe_uoc_vay,
		l.ConvenantNumber convenantNumber,
		v.tk_co,
		v.co_ngoai_te,
		v.co_vnd,
		v.co_ty_gia,
		v.co_InputBill_F_Ids,
		v.co_InputTypeIds,
		v.co_so_cts,
		v.co_ngay_cts,
		
		v.no_ngay_ct,
		v.no_so_ct,
		v.no_InputTypeId,
		v.no_InputBill_F_Id,
		v.no_ngoai_te,
		v.no_vnd,
		v.no_ty_gia,
		v.chenh_lech,
		CASE WHEN v.chenh_lech>0 THEN v.tk_co ELSE '635' END ket_chuyen_no,
		CASE WHEN v.chenh_lech>0 THEN '635' ELSE v.tk_co END ket_chuyen_co,
		
		CASE WHEN v.chenh_lech IS NULL OR v.chenh_lech = 0 THEN NULL
		ELSE
		CONCAT(
			'N',
			CASE WHEN v.chenh_lech>0 THEN v.tk_co ELSE '635' END,
			'/C',
			CASE WHEN v.chenh_lech>0 THEN '635' ELSE v.tk_co END
		) 
		END
		hach_toan
	FROM v
	LEFT JOIN dbo.v_Partner c ON v.kh = c.F_Id
	JOIN dbo.v_LoanConvenant l ON v.khe_uoc_vay = l.F_Id
	ORDER BY v.no_ngay_ct, v.no_InputTypeId, v.no_InputBill_F_Id
END

GO

USE AccountancyPublicDB
GO
/*
* 
*/
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcPrepaidExpense_v1]
	@SoTK AS nvarchar(10),
	@FromDate AS datetime,
	@ToDate AS datetime,
	@SubId AS int
AS
BEGIN
	DECLARE @NumberOfMonths INT = DATEDIFF(month, DATEADD(day,1,@FromDate), DATEADD(day,-1,@ToDate)) + 1;
	;
	WITH cptt AS(
		SELECT DISTINCT _rc.cptt FROM _rc
		WHERE _rc.SubsidiaryId = @SubId AND _rc.tk_no LIKE CONCAT(@SoTK, '%') AND _rc.ngay_ct <= @ToDate		
	)
	SELECT 
		cptt_no.cptt cptt,
		ISNULL(cptt_no.vnd,0) nguyen_gia,
		pe.PrepaidExpenseCode,
		pe.PrepaidExpenseName,
		pe.PrepaidExpenseDate,
		d.DepartmentName PrepaidExpenseUsedPlace,
		pe.PrepaidExpenseMonthNumber,
		ac.AccountNumber PrepaidExpenseTk,
		CASE WHEN pe.PrepaidExpenseMonthNumber > 0 THEN ROUND(100.0/pe.PrepaidExpenseMonthNumber,4) ELSE 0 END PrepaidExpenseRateByMonth,
		@NumberOfMonths Months,
		CASE WHEN pe.PrepaidExpenseMonthNumber > 0 THEN ROUND(100.0/pe.PrepaidExpenseMonthNumber,4) * @NumberOfMonths ELSE 0 END PrepaidExpenseRateByPeriod,
		ISNULL(cptt_no.vnd,0) - ISNULL(cptt_co.vnd,0) RemainValue
	FROM
	(
		SELECT _rc.cptt, SUM(ISNULL(_rc.vnd,0)) vnd 
		FROM _rc LEFT JOIN cptt ON (_rc.cptt IS NULL AND _rc.cptt IS NULL OR cptt.cptt = _rc.cptt)
		WHERE _rc.SubsidiaryId = @SubId AND _rc.tk_no LIKE '242%'  AND _rc.ngay_ct <= @ToDate
		GROUP BY _rc.cptt
	) cptt_no
	LEFT JOIN
	(
		SELECT _rc.cptt, SUM(ISNULL(_rc.vnd,0)) vnd 
		FROM _rc LEFT JOIN cptt ON (_rc.cptt IS NULL AND _rc.cptt IS NULL OR cptt.cptt = _rc.cptt)
		WHERE _rc.SubsidiaryId = @SubId AND _rc.tk_co LIKE '242%' AND _rc.ngay_ct <= @ToDate
		GROUP BY _rc.cptt
	) cptt_co	
	ON (cptt_no.cptt IS NULL AND cptt_co.cptt IS NULL) OR cptt_no.cptt = cptt_co.cptt
	LEFT JOIN v_PrepaidExpense pe ON  cptt_no.cptt = pe.F_Id
	LEFT JOIN v_AccountingAccount ac ON pe.PrepaidExpenseTk = ac.F_Id
	LEFT JOIN v_Department d ON pe.PrepaidExpenseUsed = d.F_Id
	WHERE ISNULL(cptt_no.vnd,0) - ISNULL(cptt_co.vnd,0) > 0
END

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcPrepaidExpenseV2] @SoTK NVARCHAR(32),
                                                     @FromDate DATETIME2,
                                                     @ToDate DATETIME2,
                                                     @SubId INT,
                                                     @TimeZoneOffset INT = -420
AS
BEGIN
    DECLARE @NumberOfMonths INT
        = DATEDIFF(MONTH, DATEADD(MINUTE, -@TimeZoneOffset, @FromDate), DATEADD(MINUTE, -@TimeZoneOffset, @FromDate))
          + 1;
    ;
    WITH cptt AS
    (
        SELECT      DISTINCT r.cptt
              FROM  dbo._rc                        r
                    LEFT JOIN dbo.v_PrepaidExpense p ON p.F_Id = r.cptt
             WHERE  r.SubsidiaryId                           = @SubId
               AND  r.tk_no LIKE CONCAT(@SoTK, '%')
               AND  r.ngay_ct                                <= @ToDate
               AND
                    (
                        ISNULL(p.PrepaidExpenseDate, r.ngay_ct) <= @ToDate
                   OR   p.F_Id IS NULL
                    )
    ),
         dau_ky_con_du AS
    (
        SELECT      d.cptt,
                    ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) du_no,
                    ISNULL(SUM(d.Vnd_co), 0)                            ps_co
              FROM  dbo._rc_detail d
                    JOIN cptt c ON c.cptt = d.cptt
                                     OR c.cptt IS NULL
                                    AND d.cptt IS NULL
             WHERE  d.Tk LIKE '242%'
               AND  d.SubsidiaryId = @SubId
               AND  d.ngay_ct      < @FromDate
             GROUP BY d.cptt
            HAVING  ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) > 0
    ),
         dauky_no AS
    (
        SELECT      d.cptt,
                    d.du_no,
                    d.ps_co
              FROM  dau_ky_con_du d
        UNION ALL
        SELECT      d.cptt,
                    0 du_no,
                    0 ps_co
              FROM  dbo._rc                 d
                    JOIN cptt               c ON c.cptt   = d.cptt
                    LEFT JOIN dau_ky_con_du dk ON dk.cptt = c.cptt
             WHERE  d.tk_no LIKE '242%'
               AND  d.SubsidiaryId = @SubId
               AND  d.ngay_ct BETWEEN @FromDate AND @ToDate
               AND  d.vnd          > 0
               AND  dk.cptt IS NULL
             GROUP BY d.cptt
    ),
         chung_tu_no AS
    (
        SELECT      d.cptt,
                    ISNULL(SUM(d.vnd), 0)              nguyen_gia,
					MIN(d.phan_xuong)				   phan_xuong,
                    STRING_AGG(d.so_ct, ', ')          ct_nos,
                    STRING_AGG(d.InputTypeId, ', ')    ct_no_types,
                    STRING_AGG(d.InputBill_F_Id, ', ') ct_no_ids
              FROM  dbo._rc       d
                    JOIN dauky_no dk ON dk.cptt = d.cptt
                                     OR dk.cptt IS NULL
                                    AND d.cptt IS NULL
             WHERE  d.tk_no LIKE '242%'
               AND  d.SubsidiaryId = @SubId
			   AND d.ngay_ct <= @ToDate
             GROUP BY d.cptt
    ),
         trong_ky AS
    (
        SELECT      d.cptt,
                    SUM(d.vnd) ps_co
              FROM  dbo._rc       d
                    JOIN dauky_no dk ON dk.cptt = d.cptt
                                     OR dk.cptt IS NULL
                                    AND d.cptt IS NULL
             WHERE  d.tk_co LIKE '242%'
               AND  d.SubsidiaryId = @SubId
               AND  d.ngay_ct BETWEEN @FromDate AND @ToDate
             GROUP BY d.cptt
    ),
         v AS
    (
        SELECT      
					ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) RowNumber,
					p.F_Id,
                    p.PrepaidExpenseDate,
                    p.PrepaidExpenseCode,
                    p.PrepaidExpenseName,
                    p.PrepaidExpenseMonthNumber,
                    p.PrepaidExpenseNote,
                    p.PrepaidExpenseTk_AccountNumber,
                    p.PrepaidExpenseTk_no_AccountNumber,
                    d.F_Id                      [DepartmentId],
                    d.DepartmentCode,
                    d.DepartmentName,
                    @NumberOfMonths             Months,
                    dk.cptt,
                    chung_tu_no.ct_nos          [Ct_nos],
					px.F_Id					    [Phan_xuong],
					px.DepartmentCode			[Phan_xuong_DepartmentCode],
					px.DepartmentName			[Phan_xuong_DepartmentName],
                    chung_tu_no.ct_no_types     [Ct_no_types],
                    chung_tu_no.ct_no_ids       [Ct_no_ids],
                    chung_tu_no.nguyen_gia      [Nguyen_gia],
                    dk.ps_co                    [Dauky_ps_co],
                    trong_ky.ps_co              [TrongKy_ps_co],
                    CASE
                         WHEN @NumberOfMonths * chung_tu_no.nguyen_gia / p.PrepaidExpenseMonthNumber > chung_tu_no.nguyen_gia - ISNULL(dk.ps_co,0) THEN
                             chung_tu_no.nguyen_gia - ISNULL(dk.ps_co,0)
                         ELSE @NumberOfMonths * chung_tu_no.nguyen_gia / p.PrepaidExpenseMonthNumber END
                    - ISNULL(trong_ky.ps_co, 0) [PhanBo]
              FROM  dauky_no                       dk
                    LEFT JOIN chung_tu_no ON chung_tu_no.cptt                = dk.cptt
                    LEFT JOIN trong_ky ON trong_ky.cptt                      = dk.cptt
                    LEFT JOIN dbo.v_PrepaidExpense p ON dk.cptt              = p.F_Id
                    LEFT JOIN dbo.v_Department     d ON p.PrepaidExpenseUsed = d.F_Id
					LEFT JOIN dbo.v_Department     px ON ISNULL(chung_tu_no.phan_xuong, p.PrepaidExpensePhan_xuong) = px.F_Id
    )
    SELECT      *, [Nguyen_gia]- ISNULL([Dauky_ps_co],0) - ISNULL([TrongKy_ps_co],0) Remaining, [Nguyen_gia]- ISNULL([Dauky_ps_co],0) - ISNULL([TrongKy_ps_co],0) - ISNULL([PhanBo],0) RemainingAfter
          FROM  v;

END;

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcFixExchangeRate]
  @ToDate AS datetime,
  @TyGia AS int,
	@Currency AS int,
	@AccoutantNumber AS nvarchar(128),
	@SubId AS int
AS
BEGIN
	SELECT
		a.F_Id tk_id,
		a.AccountNumber tk,
		bc.kh,
		p.PartnerCode ma_kh,
		p.PartnerName ten_kh,
		CASE
		WHEN bc.vnd > 0 THEN bc.vnd
		ELSE 0
		END vnd_no,
		CASE
		WHEN bc.vnd < 0 THEN -bc.vnd
		ELSE 0
		END vnd_co,
		CASE
		WHEN bc.ngoai_te > 0 THEN bc.ngoai_te
		ELSE 0
		END ngoai_te_no,
		CASE
		WHEN bc.ngoai_te < 0 THEN -bc.ngoai_te
		ELSE 0
		END ngoai_te_co,
		ABS(bc.ngoai_te * @TyGia) calc,
		CASE
		WHEN (bc.ngoai_te * @TyGia - bc.vnd) > 0 THEN (bc.ngoai_te * @TyGia - bc.vnd)
		ELSE 0
		END dc_no,
		CASE
		WHEN (bc.ngoai_te * @TyGia - bc.vnd) < 0 THEN -(bc.ngoai_te * @TyGia - bc.vnd)
		ELSE 0
		END dc_co
	FROM
	(SELECT 
		ISNULL(no_ck_kh.Mask, co_ck_kh.Mask) Mask,
		ISNULL(no_ck_kh.kh, co_ck_kh.kh) kh,
		(ISNULL(no_ck_kh.vnd,0) - ISNULL(co_ck_kh.vnd,0)) vnd,
		(ISNULL(no_ck_kh.ngoai_te,0) - ISNULL(co_ck_kh.ngoai_te,0)) ngoai_te
	FROM
	(SELECT no_ck.Mask Mask, no_ck.kh_no kh, SUM(no_ck.vnd) vnd, SUM(no_ck.ngoai_te) ngoai_te FROM 
		(SELECT a.Mask, CASE WHEN a.IsLiability = 1 THEN tk.kh_no ELSE NULL END kh_no, ISNULL(tk.vnd,0) vnd, ISNULL(tk.ngoai_te,0) ngoai_te
		FROM
		(
			SELECT CONCAT(a.AccountNumber, '%') Mask, a.AccountNumber, a.IsLiability FROM v_AccountingAccount a WHERE a.ParentId IS NULL
		) a
		INNER JOIN
		[dbo].[_rc] tk 
		ON tk.tk_no LIKE a.Mask
		WHERE tk.tk_no is not null AND tk.tk_no NOT LIKE '0%' AND tk.ngay_ct <= @ToDate AND ISNULL(tk.loai_tien_nt, tk.loai_tien) = @Currency AND a.AccountNumber IN ('131', '311', '341', '331', '1112', '1122') AND tk.SubsidiaryId = @SubId AND (LEN(@AccoutantNumber) = 0 OR a.AccountNumber LIKE CONCAT(@AccoutantNumber, '%'))) no_ck
	GROUP BY no_ck.Mask, no_ck.kh_no) no_ck_kh
	FULL OUTER JOIN 
	(SELECT co_ck.Mask Mask, co_ck.kh_co kh, SUM(ISNULL(co_ck.vnd,0)) vnd, SUM(co_ck.ngoai_te) ngoai_te FROM 
		(SELECT a.Mask, CASE WHEN a.IsLiability = 1 THEN tk.kh_co ELSE NULL END kh_co, ISNULL(tk.vnd,0) vnd, ISNULL(tk.ngoai_te,0) ngoai_te
		FROM
		(
			SELECT CONCAT(a.AccountNumber, '%') Mask, a.AccountNumber, a.IsLiability FROM v_AccountingAccount a WHERE a.ParentId IS NULL
		) a
		INNER JOIN
		[dbo].[_rc] tk 
		ON tk.tk_co LIKE a.Mask
		WHERE tk.tk_co is not null AND tk.tk_co NOT LIKE '0%' AND tk.ngay_ct <= @ToDate AND ISNULL(tk.loai_tien_nt, tk.loai_tien) = @Currency AND a.AccountNumber IN ('131', '311', '341', '331', '1112', '1122') AND tk.SubsidiaryId = @SubId AND (LEN(@AccoutantNumber) = 0 OR a.AccountNumber LIKE CONCAT(@AccoutantNumber, '%'))) co_ck
	GROUP BY co_ck.Mask, co_ck.kh_co) co_ck_kh
	ON no_ck_kh.Mask = co_ck_kh.Mask AND ((no_ck_kh.kh IS NULL AND co_ck_kh.kh IS NULL) OR no_ck_kh.kh = co_ck_kh.kh)
	WHERE (ISNULL(co_ck_kh.ngoai_te,0) != ISNULL(no_ck_kh.ngoai_te,0) OR ISNULL(co_ck_kh.vnd,0) != ISNULL(no_ck_kh.vnd,0))
	) bc
	LEFT JOIN v_Partner p ON bc.kh = p.F_Id
	LEFT JOIN v_AccountingAccount a ON SUBSTRING(bc.Mask, 1, LEN(bc.Mask) - 1) = a.AccountNumber
END

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcPrepaidExpense]
	@SoTK AS nvarchar(10),
	@FromDate AS datetime,
	@ToDate AS datetime,
	@SubId AS int
AS
BEGIN
	DECLARE @NumberOfMonths INT = DATEDIFF(month, DATEADD(day,1,@FromDate), DATEADD(day,-1,@ToDate)) + 1;
	;
	WITH cptt AS(
		SELECT DISTINCT _rc.cptt FROM _rc
		WHERE _rc.SubsidiaryId = @SubId AND _rc.tk_no LIKE CONCAT(@SoTK, '%') AND _rc.ngay_ct <= @ToDate		
	)
	SELECT 
		cptt_no.cptt cptt,
		ISNULL(cptt_no.vnd,0) nguyen_gia,
		pe.PrepaidExpenseCode,
		pe.PrepaidExpenseName,
		pe.PrepaidExpenseDate,
		d.DepartmentName PrepaidExpenseUsedPlace,
		pe.PrepaidExpenseMonthNumber,
		ac.AccountNumber PrepaidExpenseTk,
		CASE WHEN pe.PrepaidExpenseMonthNumber > 0 THEN ROUND(100.0/pe.PrepaidExpenseMonthNumber,4) ELSE 0 END PrepaidExpenseRateByMonth,
		@NumberOfMonths Months,
		CASE WHEN pe.PrepaidExpenseMonthNumber > 0 THEN ROUND(100.0/pe.PrepaidExpenseMonthNumber,4) * @NumberOfMonths ELSE 0 END PrepaidExpenseRateByPeriod,
		ISNULL(cptt_no.vnd,0) - ISNULL(cptt_co.vnd,0) RemainValue
	FROM
	(
		SELECT _rc.cptt, SUM(ISNULL(_rc.vnd,0)) vnd 
		FROM _rc LEFT JOIN cptt ON (_rc.cptt IS NULL AND _rc.cptt IS NULL OR cptt.cptt = _rc.cptt)
		WHERE _rc.SubsidiaryId = @SubId AND _rc.tk_no LIKE '242%'  AND _rc.ngay_ct <= @ToDate
		GROUP BY _rc.cptt
	) cptt_no
	LEFT JOIN
	(
		SELECT _rc.cptt, SUM(ISNULL(_rc.vnd,0)) vnd 
		FROM _rc LEFT JOIN cptt ON (_rc.cptt IS NULL AND _rc.cptt IS NULL OR cptt.cptt = _rc.cptt)
		WHERE _rc.SubsidiaryId = @SubId AND _rc.tk_co LIKE '242%' AND _rc.ngay_ct <= @ToDate
		GROUP BY _rc.cptt
	) cptt_co	
	ON (cptt_no.cptt IS NULL AND cptt_co.cptt IS NULL) OR cptt_no.cptt = cptt_co.cptt
	LEFT JOIN v_PrepaidExpense pe ON  cptt_no.cptt = pe.F_Id
	LEFT JOIN v_AccountingAccount ac ON pe.PrepaidExpenseTk = ac.F_Id
	LEFT JOIN v_Department d ON pe.PrepaidExpenseUsed = d.F_Id
	WHERE ISNULL(cptt_no.vnd,0) - ISNULL(cptt_co.vnd,0) > 0
END

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcDepreciationV2]
	@SoTK AS nvarchar(10),
	@FromDate AS datetime,
	@ToDate AS datetime,
	@SubId AS INT,
	@TimeZoneOffset INT = -420
AS
BEGIN

	DECLARE @NumberOfMonths INT
        = DATEDIFF(MONTH, DATEADD(MINUTE, -@TimeZoneOffset, @FromDate), DATEADD(MINUTE, -@TimeZoneOffset, @FromDate))
          + 1;
    ;WITH tscd AS
    (
        SELECT      DISTINCT r.tscd
              FROM  dbo._rc                        r
                    LEFT JOIN dbo.v_FixedAsset p ON p.F_Id = r.tscd
             WHERE  r.SubsidiaryId                           = @SubId
               AND  r.tk_no LIKE CONCAT(@SoTK, '%')
               AND  r.ngay_ct                                <= @ToDate
               AND
                    (
                        ISNULL(p.FixedAssetUsedDate, r.ngay_ct) <= @ToDate
                   OR   p.F_Id IS NULL
                    )					
    ),
         chua_het AS
    (
		SELECT du_no.tscd, 
		du_no.du_no, 
		du_no.ps_co, 
		ISNULL(co_214.ps_co_214,0)  ps_co_214 ,
		du_no.du_no - ISNULL(co_214.ps_co_214,0) Remaining
		FROM
		(
			SELECT      d.tscd			,		
						ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) du_no,
						ISNULL(SUM(d.Vnd_co), 0)                            ps_co
				  FROM  dbo._rc_detail d
						JOIN tscd c ON c.tscd = d.tscd
										 OR c.tscd IS NULL
										AND d.tscd IS NULL
				 WHERE  (d.Tk LIKE '211%' OR d.Tk LIKE '212%' OR d.Tk LIKE '213%')
				   AND  d.SubsidiaryId = @SubId
				   AND  d.ngay_ct      < @ToDate
				 GROUP BY d.tscd
				HAVING  ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) > 0
		) du_no
		LEFT JOIN
		(
        SELECT      d.tscd			,		                  
                    ISNULL(SUM(d.vnd), 0)                            ps_co_214
              FROM  dbo._rc d
                    JOIN tscd c ON c.tscd = d.tscd
                                     OR c.tscd IS NULL
                                    AND d.tscd IS NULL
             WHERE  --(d.tk_no LIKE '211%' OR d.tk_no LIKE '212%' OR d.tk_no LIKE '213%')
				--AND 
				d.tk_co LIKE '214%'
               AND  d.SubsidiaryId = @SubId
               AND  d.ngay_ct      < @ToDate
             GROUP BY d.tscd            
		) co_214 ON du_no.tscd = co_214.tscd
		WHERE du_no.du_no > ISNULL(co_214.ps_co_214,0)
    ),         
         chung_tu_no AS
    (
		SELECT
						d.tscd,
						ISNULL(SUM(d.vnd), 0)				nguyen_gia,
						d.Remaining,
						MIN(d.phan_xuong)					phan_xuong,
						STRING_AGG(d.ct_nos, ', ')          ct_nos,
						STRING_AGG(d.ct_no_types, ', ')		ct_no_types,
						STRING_AGG(d.ct_no_ids, ', ')		ct_no_ids,
						STRING_AGG(d.tk_no, ', ')			tk_nos,
						MAX(d.tk_no)						tk_no
		FROM (
			SELECT      d.tscd,
						d.tk_no,
						ISNULL(SUM(d.vnd), 0)              vnd,
						dk.Remaining,
						MIN(d.phan_xuong)				   phan_xuong,
						STRING_AGG(d.so_ct, ', ')          ct_nos,
						STRING_AGG(d.InputTypeId, ', ')    ct_no_types,
						STRING_AGG(d.InputBill_F_Id, ', ') ct_no_ids
						
				  FROM  dbo._rc       d
						JOIN chua_het dk ON dk.tscd = d.tscd
										 OR dk.tscd IS NULL
										AND d.tscd IS NULL
				 WHERE  (d.tk_no LIKE '211%' OR d.tk_no LIKE '212%' OR d.tk_no LIKE '213%')
				   AND  d.SubsidiaryId = @SubId
				   AND d.ngay_ct <= @ToDate
				 GROUP BY d.tscd, d.tk_no, dk.Remaining
		) d GROUP BY  d.tscd, d.Remaining					
    ),      trong_ky AS
    (
        SELECT      d.tscd,
                    SUM(d.vnd) ps_co
              FROM  dbo._rc       d
                    JOIN chua_het dk ON dk.tscd = d.tscd
                                     OR dk.tscd IS NULL
                                    AND d.tscd IS NULL
             WHERE  d.tk_co LIKE '214%'
               AND  d.SubsidiaryId = @SubId
               AND  d.ngay_ct BETWEEN @FromDate AND @ToDate
             GROUP BY d.tscd
    ),    
         v AS
    (
        SELECT      
					ROW_NUMBER() OVER(ORDER BY p.F_Id) RowNumber,
					p.F_Id,
                    p.FixedAssetUsedDate,
                    p.FixedAssetCode,
                    p.FixedAssetName,
                    p.FixedAssetCountry,
					p.FixedAssetYearNumber,
                    p.FixedAssetNote,
					p.FixedAssetTk_AccountNumber,					                    
                    d.F_Id                      [DepartmentId],
                    d.DepartmentCode,
                    d.DepartmentName,
                    @NumberOfMonths             Months,                   
                    chung_tu_no.ct_nos          [Ct_nos],
					chung_tu_no.tk_nos			[tk_nos],
					chung_tu_no.phan_xuong      [Phan_xuong],
					px.DepartmentCode			[Phan_xuong_DepartmentCode],
					px.DepartmentName			[Phan_xuong_DepartmentName],
                    chung_tu_no.ct_no_types     [Ct_no_types],
                    chung_tu_no.ct_no_ids       [Ct_no_ids],
                    chung_tu_no.nguyen_gia      [Nguyen_gia],
                    chung_tu_no.Remaining       [Remaining],
					chung_tu_no.tk_no			[tk_no],
					'214'						[tk_co],
					trong_ky.ps_co              [TrongKy_ps_co],
                    CASE WHEN p.FixedAssetYearNumber > 0 THEN ROUND(100.0/p.FixedAssetYearNumber,2) ELSE 0 END FixedAssetRateByMonth,
					CASE WHEN p.FixedAssetYearNumber > 0 THEN ROUND(100.0/p.FixedAssetYearNumber,2) * @NumberOfMonths ELSE 0 END FixedAssetRateByPeriod,
                    CASE
                         WHEN @NumberOfMonths * chung_tu_no.nguyen_gia / p.FixedAssetYearNumber > chung_tu_no.Remaining THEN
                             chung_tu_no.Remaining
                         ELSE @NumberOfMonths * chung_tu_no.nguyen_gia / p.FixedAssetYearNumber END
                    - ISNULL(trong_ky.ps_co, 0) [PhanBo]
              FROM chung_tu_no
					LEFT JOIN trong_ky ON trong_ky.tscd                      = chung_tu_no.tscd
                    LEFT JOIN dbo.v_FixedAsset p ON chung_tu_no.tscd              = p.F_Id
                    LEFT JOIN dbo.v_Department     d ON p.FixedAssetUsedUsed = d.F_Id
					LEFT JOIN dbo.v_Department     px ON chung_tu_no.phan_xuong = px.F_Id
    )
    SELECT      *, [Remaining] - ISNULL([PhanBo],0) RemainingAfter
          FROM  v;
END

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcCostTransfer]
    @ToDate AS DATETIME,
	@Type AS INT,
	@by_bo_phan AS BIT,
	@by_kh AS BIT,
	@by_tscd AS BIT,
	@by_khoan_muc_cp AS BIT,
	@by_phan_xuong AS BIT,
	@by_vthhtp AS BIT,
	@by_kho AS BIT,
	@SubId AS INT
AS
BEGIN
	
	DECLARE @tblTk TABLE
	(
		Tk NVARCHAR(128)
	)

	IF @Type = 1
	BEGIN
		INSERT INTO @tblTk
		(
		    Tk
		)
		VALUES
		('621%'),('622%'),('627%');			    
	END

	IF @Type = 2 OR @Type = 3
	BEGIN
		INSERT INTO @tblTk
		(
		    Tk
		)
		VALUES
		('154%');			    
	END

	IF @Type = 3
	BEGIN
	    SET @by_bo_phan = 0
		SET @by_kh = 0
		SET @by_tscd = 0
		SET @by_khoan_muc_cp = 0
		SET @by_phan_xuong = 0
		SET @by_vthhtp = 0
		SET @by_kho = 0
	END

	SELECT 
				d.bo_phan, 
				dp.DepartmentCode bo_phan_DepartmentCode,
				dp.DepartmentName bo_phan_DepartmentName,
				d.kh,
				k.PartnerCode kh_PartnerCode,
				k.PartnerName kh_PartnerName,

				d.tscd,
				a.FixedAssetCode tscd_FixedAssetCode,
				a.FixedAssetName tscd_FixedAssetName,

				d.khoan_muc_cp,
				e.ExpenseItemCode khoan_muc_cp_ExpenseItemCode,
				e.ExpenseItemName khoan_muc_cp_ExpenseItemName,

				d.phan_xuong,
				px.DepartmentCode phan_xuong_DepartmentCode,
				px.DepartmentName phan_xuong_DepartmentName,

				d.vthhtp,
				p.ProductCode vthhtp_ProductCode,
				p.ProductName vthhtp_ProductName,

				d.kho,
				s.StockName kho_StockName,

				d.tk,
				d.vnd
			FROM
			(
				SELECT
					d.Tk tk,
					CASE WHEN @by_bo_phan = 1 THEN d.bo_phan ELSE NULL END bo_phan,
					CASE WHEN @by_kh = 1 THEN d.kh ELSE NULL END kh,
					CASE WHEN @by_tscd = 1 THEN d.tscd ELSE NULL END tscd,
					CASE WHEN @by_khoan_muc_cp = 1 THEN d.khoan_muc_cp ELSE NULL END khoan_muc_cp,
					CASE WHEN @by_phan_xuong = 1 THEN d.phan_xuong ELSE NULL END phan_xuong,
					CASE WHEN @by_vthhtp = 1 THEN d.vthhtp ELSE NULL END vthhtp,
					CASE WHEN @by_kho = 1 THEN d.kho ELSE NULL END kho,

					SUM(ISNULL(d.Vnd_no,0) - ISNULL(d.Vnd_co,0)) vnd
				FROM dbo._rc_detail d
					JOIN @tblTk t ON d.Tk LIKE t.Tk
				WHERE d.SubsidiaryId=@SubId AND d.ngay_ct <= @ToDate
				GROUP BY d.Tk,
					CASE WHEN @by_bo_phan = 1 THEN d.bo_phan ELSE NULL END,
					CASE WHEN @by_kh = 1 THEN d.kh ELSE NULL END,
					CASE WHEN @by_tscd = 1 THEN d.tscd ELSE NULL END,
					CASE WHEN @by_khoan_muc_cp = 1 THEN d.khoan_muc_cp ELSE NULL END,
					CASE WHEN @by_phan_xuong = 1 THEN d.phan_xuong ELSE NULL END,
					CASE WHEN @by_vthhtp = 1 THEN d.vthhtp ELSE NULL END,
					CASE WHEN @by_kho = 1 THEN d.kho ELSE NULL END
			) d 
			LEFT JOIN dbo.v_Department dp ON d.bo_phan = dp.F_Id
			LEFT JOIN dbo.v_Partner k ON d.kh = k.F_Id
			LEFT JOIN dbo.v_FixedAsset a ON d.tscd = a.F_Id
			LEFT JOIN dbo.v_ExpenseItem e ON d.khoan_muc_cp = e.F_Id
			LEFT JOIN dbo.v_Department px ON d.bo_phan = px.F_Id
			LEFT JOIN dbo.v_Product p ON d.vthhtp = p.F_Id
			LEFT JOIN dbo.v_Stock s ON d.kho = s.F_Id
			WHERE d.vnd <> 0
			ORDER BY d.tk, 
				bo_phan_DepartmentCode, 
				kh_PartnerCode, 
				tscd_FixedAssetCode, 
				khoan_muc_cp_ExpenseItemCode, 
				phan_xuong_DepartmentCode, 
				vthhtp_ProductCode, 
				kho_StockName
END

GO

USE AccountancyPublicDB
GO
CREATE OR ALTER VIEW [dbo].[vInputValueRowPrivate]
		AS
		SELECT 
			v.*,
			CASE WHEN pb.So_ct_goc IS NOT NULL THEN 1 ELSE 0 END IsPublicCreated,
			CASE WHEN pb.So_ct_goc IS NOT NULL THEN N'Ðã t?o' ELSE N'Chua t?o' END IsPublicCreatedTitle			
		FROM dbo.vInputValueRow v
		LEFT JOIN (
				SELECT	pb.So_ct_goc
				FROM AccountancyPublicDB.dbo.InputValueRow pb
				WHERE IsDeleted = 0
				GROUP BY pb.So_ct_goc
		) pb ON v.so_ct = pb.So_ct_goc

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_PrepaidExpense] AS SELECT  _PrepaidExpense.F_Id, _PrepaidExpense.UpdatedDatetimeUtc, _PrepaidExpense.PrepaidExpenseCode, _PrepaidExpense.PrepaidExpenseName, _PrepaidExpense.PrepaidExpenseUnit, _PrepaidExpense.PrepaidExpenseQty, _PrepaidExpense.PrepaidExpenseDate, _PrepaidExpense.PrepaidExpenseUsed, _PrepaidExpense.PrepaidExpenseMonthNumber, _PrepaidExpense.PrepaidExpenseTk, _PrepaidExpense.PrepaidExpenseNote, _PrepaidExpense.PrepaidExpenseTk_no, _PrepaidExpense.PrepaidExpensePhan_xuong, _Department_0.[DepartmentName] AS [PrepaidExpenseUsed_DepartmentName], _AccountingAccount_1.[AccountNumber] AS [PrepaidExpenseTk_AccountNumber], _AccountingAccount_2.[AccountNumber] AS [PrepaidExpenseTk_no_AccountNumber], _Department_3.[DepartmentName] AS [PrepaidExpensePhan_xuong_DepartmentName] FROM [MasterDB].[dbo]._PrepaidExpense LEFT JOIN [MasterDB].[dbo].v_Department AS _Department_0 ON _PrepaidExpense.PrepaidExpenseUsed = _Department_0.F_Id LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_1 ON _PrepaidExpense.PrepaidExpenseTk = _AccountingAccount_1.F_Id LEFT JOIN [MasterDB].[dbo].v_AccountingAccount AS _AccountingAccount_2 ON _PrepaidExpense.PrepaidExpenseTk_no = _AccountingAccount_2.F_Id LEFT JOIN [MasterDB].[dbo].v_Department AS _Department_3 ON _PrepaidExpense.PrepaidExpensePhan_xuong = _Department_3.F_Id WHERE _PrepaidExpense.IsDeleted = 0

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucherValueRow] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[tk_co0], [vtk_co0].[AccountNumber] AS [tk_co0_AccountNumber],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[ngay_gh],  [row].[dktt],  [row].[dkgh],  [row].[thhl],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[vnd1],  [row].[thue_suat_vat],  [row].[nguoi_phu_trach], [vnguoi_phu_trach].[FullName] AS [nguoi_phu_trach_FullName],  [row].[ty_gia],  [row].[loai_tien], [vloai_tien].[CurrencyCode] AS [loai_tien_CurrencyCode], [vloai_tien].[IsPrimary] AS [loai_tien_IsPrimary], [vloai_tien].[ty_gia] AS [loai_tien_ty_gia],  [row].[attachment],  [row].[ong_ba],  [row].[bo_phan], [vbo_phan].[DepartmentCode] AS [bo_phan_DepartmentCode],  [row].[kh_nguoi_lh],  [row].[kh_vt], [vkh_vt].[PartnerCode] AS [kh_vt_PartnerCode], [vkh_vt].[PartnerName] AS [kh_vt_PartnerName],  [row].[stt],  [row].[dien_giai],  [row].[vthhtp_dvt2], [vvthhtp_dvt2].[ProductUnitConversionName] AS [vthhtp_dvt2_ProductUnitConversionName], [vvthhtp_dvt2].[FactorExpression] AS [vthhtp_dvt2_FactorExpression], [vvthhtp_dvt2].[DecimalPlace] AS [vthhtp_dvt2_DecimalPlace],  [row].[so_luong_dv2],  [row].[don_gia_dv2_0],  [row].[ghi_chu],  [row].[vthhtp_yc],  [row].[dvt], [vdvt].[UnitName] AS [dvt_UnitName],  [row].[ma_vthhtp_yc],  [row].[tt_vthhtp_yc],  [row].[the_tich],  [row].[tong_the_tich],  [row].[vnd3],  [row].[thue_suat_xnk],  [row].[kho], [vkho].[StockName] AS [kho_StockName],  [row].[tk_no0], [vtk_no0].[AccountNumber] AS [tk_no0_AccountNumber],  [row].[mau_hd],  [row].[ky_hieu_hd],  [row].[seri_hd],  [row].[ngay_hd],  [row].[order_code],  [row].[sl_od],  [row].[tk_no1], [vtk_no1].[AccountNumber] AS [tk_no1_AccountNumber],  [row].[tk_co1], [vtk_co1].[AccountNumber] AS [tk_co1_AccountNumber],  [row].[ma_lsx],  [row].[CensorStatus], [vCensorStatus].[CensorStatusName] AS [CensorStatus_CensorStatusName],  [row].[so_dh], [vso_dh].[so_ct] AS [so_dh_so_ct], [vso_dh].[kh0_PartnerName] AS [so_dh_kh0_PartnerName], [vso_dh].[kh0_PartnerCode] AS [so_dh_kh0_PartnerCode], [vso_dh].[kh_vt_PartnerCode] AS [so_dh_kh_vt_PartnerCode], [vso_dh].[so_po_dt] AS [so_dh_so_po_dt],  [row].[ten_tau],  [row].[so_po_dt],  [row].[ma_scac],  [row].[phi_tai_cang],  [row].[seller_phi_tai_cang],  [row].[consignee_phi_tai_cang],  [row].[ship_to_phi_tai_cang],  [row].[cuoc_van_tai],  [row].[seller_cuoc_van_tai],  [row].[consignee_cuoc_van_tai],  [row].[ship_to_cuoc_van_tai],  [row].[manifest_fee],  [row].[seller_manifest_fee],  [row].[consignee_manifest_fee],  [row].[ship_to_manifest_fee],  [row].[container], [vcontainer].[ContainerCode] AS [container_ContainerCode],  [row].[so_container],  [row].[mo_ta],  [row].[package_dimension],  [row].[gross_weight],  [row].[total_measure],  [row].[pol],  [row].[pod],  [row].[final_destination],  [row].[delivery_place],  [row].[cargo_stuff_place],  [row].[full_laden_place],  [row].[confirmation_info],  [row].[nguoi_mua], [vnguoi_mua].[PartnerCode] AS [nguoi_mua_PartnerCode], [vnguoi_mua].[PartnerName] AS [nguoi_mua_PartnerName],  [row].[nguoi_nhan_hang], [vnguoi_nhan_hang].[PartnerCode] AS [nguoi_nhan_hang_PartnerCode], [vnguoi_nhan_hang].[PartnerName] AS [nguoi_nhan_hang_PartnerName], [vnguoi_nhan_hang].[PhoneNumber] AS [nguoi_nhan_hang_PhoneNumber], [vnguoi_nhan_hang].[Address] AS [nguoi_nhan_hang_Address], [vnguoi_nhan_hang].[LogoFileId] AS [nguoi_nhan_hang_LogoFileId],  [row].[tt_ship],  [row].[tt_nguoi_nhan_hang],  [row].[tt_nguoi_mua],  [row].[nguoi_ban_giao],  [row].[so_bh_xk], [vso_bh_xk].[so_ct] AS [so_bh_xk_so_ct],  [row].[cont_seal_no],  [row].[mhbhxk], [vmhbhxk].[ProductCode] AS [mhbhxk_ProductCode], [vmhbhxk].[ProductName] AS [mhbhxk_ProductName], [vmhbhxk].[NetWeight] AS [mhbhxk_NetWeight], [vmhbhxk].[GrossWeight] AS [mhbhxk_GrossWeight], [vmhbhxk].[Measurement] AS [mhbhxk_Measurement], [vmhbhxk].[ProductNameEng] AS [mhbhxk_ProductNameEng], [vmhbhxk].[PackingLong] AS [mhbhxk_PackingLong], [vmhbhxk].[PackingWidth] AS [mhbhxk_PackingWidth], [vmhbhxk].[PackingHeight] AS [mhbhxk_PackingHeight], [vmhbhxk].[UnitId_DecimalPlace] AS [mhbhxk_UnitId_DecimalPlace],  [row].[net_weight],  [row].[ma_vthhtp_khach],  [row].[package],  [row].[ma_bg_bh], [vma_bg_bh].[so_ct] AS [ma_bg_bh_so_ct],  [row].[kh1], [vkh1].[PartnerCode] AS [kh1_PartnerCode], [vkh1].[PartnerName] AS [kh1_PartnerName],  [row].[kh3], [vkh3].[PartnerCode] AS [kh3_PartnerCode], [vkh3].[PartnerName] AS [kh3_PartnerName],  [row].[CensorStatusId], [vCensorStatusId].[CensorStatusName] AS [CensorStatusId_CensorStatusName],  [row].[CheckStatusId], [vCheckStatusId].[CensorStatusName] AS [CheckStatusId_CensorStatusName],  [row].[vthhtp_estimatePrice],  [row].[kh_thang], [vkh_thang].[MonthPlanName] AS [kh_thang_MonthPlanName],  [row].[container_quantity],  [row].[Cont_type], [vCont_type].[ContainerCode] AS [Cont_type_ContainerCode],  [row].[don_vi_mua],  [row].[ma_so_thue],  [row].[tk0],  [row].[tk0_bank],  [row].[method_payment], [vmethod_payment].[title] AS [method_payment_title],  [row].[no],  [row].[ref_so_ct],  [row].[no_charge],  [row].[requirements],  [row].[loi_nhuan],  [row].[gia_dinh_muc],  [row].[quotationStatus], [vquotationStatus].[QuotationStatusName] AS [quotationStatus_QuotationStatusName],  [row].[requestSampleStatus], [vrequestSampleStatus].[RequestSampleStatusName] AS [requestSampleStatus_RequestSampleStatusName],  [row].[bang_chu],  [row].[einvoice_lookup_code],  [row].[einvoice_issue_date],  [row].[einvoice_invoice_status], [veinvoice_invoice_status].[title] AS [einvoice_invoice_status_title],  [row].[einvoice_ikey],  [row].[don_gia_vnd],  [row].[einvoice_pattern], [veinvoice_pattern].[title] AS [einvoice_pattern_title],  [row].[einvoice_serial], [veinvoice_serial].[title] AS [einvoice_serial_title],  [row].[einvoice_type], [veinvoice_type].[EInvoiceTypeName] AS [einvoice_type_EInvoiceTypeName],  [row].[einvoice_adjust_type], [veinvoice_adjust_type].[AdjustTitle] AS [einvoice_adjust_type_AdjustTitle],  [row].[einvoice_parent],  [row].[einvoice_tong_vnd0],  [row].[einvoice_tong_cong],  [row].[einvoice_vnd1],  [row].[einvoice_url_search],  [row].[einvoice_thue_suat_vat],  [row].[einvoice_provider], [veinvoice_provider].[title] AS [einvoice_provider_title],  [row].[not_vat],  [row].[einvoice_ProductName],  [row].[yc_code],  [row].[einvoice_invoice_status_easy_invoice],  [row].[einvoice_adjust_type_easy_invoice],  [row].[einvoice_type_easy_invoice],  [row].[bank_dn], [vbank_dn].[Ten_tk] AS [bank_dn_Ten_tk], [vbank_dn].[So_TKNH] AS [bank_dn_So_TKNH], [vbank_dn].[Ngan_hang] AS [bank_dn_Ngan_hang], [vbank_dn].[Chi_nhanh_NH] AS [bank_dn_Chi_nhanh_NH], [vbank_dn].[Tinh_TP] AS [bank_dn_Tinh_TP], [vbank_dn].[Code_NH] AS [bank_dn_Code_NH],  [row].[CensorUserId], [vCensorUserId].[FullName] AS [CensorUserId_FullName],  [row].[booking_vt_qt], [vbooking_vt_qt].[so_ct] AS [booking_vt_qt_so_ct], [vbooking_vt_qt].[ngay_ct] AS [booking_vt_qt_ngay_ct], [vbooking_vt_qt].[confirmation_info] AS [booking_vt_qt_confirmation_info], [vbooking_vt_qt].[pol] AS [booking_vt_qt_pol], [vbooking_vt_qt].[pod] AS [booking_vt_qt_pod],  [row].[ngan_hang_doanh_nghiep], [vngan_hang_doanh_nghiep].[Ten_tk] AS [ngan_hang_doanh_nghiep_Ten_tk], [vngan_hang_doanh_nghiep].[So_TKNH] AS [ngan_hang_doanh_nghiep_So_TKNH], [vngan_hang_doanh_nghiep].[Ngan_hang] AS [ngan_hang_doanh_nghiep_Ngan_hang], [vngan_hang_doanh_nghiep].[Chi_nhanh_NH] AS [ngan_hang_doanh_nghiep_Chi_nhanh_NH], [vngan_hang_doanh_nghiep].[Code_NH] AS [ngan_hang_doanh_nghiep_Code_NH], [vngan_hang_doanh_nghiep].[Tinh_TP] AS [ngan_hang_doanh_nghiep_Tinh_TP], [vngan_hang_doanh_nghiep].[Loai_tien] AS [ngan_hang_doanh_nghiep_Loai_tien],  [row].[notify_party],  [row].[shipment],  [row].[Dieu_kien_tt], [vDieu_kien_tt].[PayConditionName] AS [Dieu_kien_tt_PayConditionName],  [row].[Dkien_giao_hang], [vDkien_giao_hang].[ConditionName] AS [Dkien_giao_hang_ConditionName],  [row].[mhbhxk_dvt2], [vmhbhxk_dvt2].[ProductUnitConversionName] AS [mhbhxk_dvt2_ProductUnitConversionName], [vmhbhxk_dvt2].[FactorExpression] AS [mhbhxk_dvt2_FactorExpression], [vmhbhxk_dvt2].[DecimalPlace] AS [mhbhxk_dvt2_DecimalPlace],  [row].[tinh_gia_code],  [row].[consignee_info]
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_AccountingAccount] as [vtk_co0] WITH(NOLOCK) ON [row].[tk_co0] = [vtk_co0].[AccountNumber] LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_User] as [vnguoi_phu_trach] WITH(NOLOCK) ON [row].[nguoi_phu_trach] = [vnguoi_phu_trach].[F_Id] LEFT JOIN [v_Currency] as [vloai_tien] WITH(NOLOCK) ON [row].[loai_tien] = [vloai_tien].[F_Id] LEFT JOIN [v_Department] as [vbo_phan] WITH(NOLOCK) ON [row].[bo_phan] = [vbo_phan].[F_Id] LEFT JOIN [v_Partner] as [vkh_vt] WITH(NOLOCK) ON [row].[kh_vt] = [vkh_vt].[F_Id] LEFT JOIN [v_ProductUnitConversion] as [vvthhtp_dvt2] WITH(NOLOCK) ON [row].[vthhtp_dvt2] = [vvthhtp_dvt2].[F_Id] LEFT JOIN [v_Unit] as [vdvt] WITH(NOLOCK) ON [row].[dvt] = [vdvt].[F_Id] LEFT JOIN [v_Stock] as [vkho] WITH(NOLOCK) ON [row].[kho] = [vkho].[F_Id] LEFT JOIN [v_AccountingAccount] as [vtk_no0] WITH(NOLOCK) ON [row].[tk_no0] = [vtk_no0].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_no1] WITH(NOLOCK) ON [row].[tk_no1] = [vtk_no1].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_co1] WITH(NOLOCK) ON [row].[tk_co1] = [vtk_co1].[AccountNumber] LEFT JOIN [v_CensorStatus] as [vCensorStatus] WITH(NOLOCK) ON [row].[CensorStatus] = [vCensorStatus].[CensorStatusId] LEFT JOIN [v_CTBH_DON_HANG_ALL_INFO] as [vso_dh] WITH(NOLOCK) ON [row].[so_dh] = [vso_dh].[F_Id] LEFT JOIN [v_Container] as [vcontainer] WITH(NOLOCK) ON [row].[container] = [vcontainer].[F_Id] LEFT JOIN [v_Partner] as [vnguoi_mua] WITH(NOLOCK) ON [row].[nguoi_mua] = [vnguoi_mua].[F_Id] LEFT JOIN [v_Partner] as [vnguoi_nhan_hang] WITH(NOLOCK) ON [row].[nguoi_nhan_hang] = [vnguoi_nhan_hang].[F_Id] LEFT JOIN [v_CTBH_BH_XK_INFO] as [vso_bh_xk] WITH(NOLOCK) ON [row].[so_bh_xk] = [vso_bh_xk].[F_Id] LEFT JOIN [v_Product] as [vmhbhxk] WITH(NOLOCK) ON [row].[mhbhxk] = [vmhbhxk].[F_Id] LEFT JOIN [v_CTBH_BAO_GIA_INFO] as [vma_bg_bh] WITH(NOLOCK) ON [row].[ma_bg_bh] = [vma_bg_bh].[F_Id] LEFT JOIN [v_Partner] as [vkh1] WITH(NOLOCK) ON [row].[kh1] = [vkh1].[F_Id] LEFT JOIN [v_Partner] as [vkh3] WITH(NOLOCK) ON [row].[kh3] = [vkh3].[F_Id] LEFT JOIN [v_CensorStatus] as [vCensorStatusId] WITH(NOLOCK) ON [row].[CensorStatusId] = [vCensorStatusId].[CensorStatusId] LEFT JOIN [v_CensorStatus] as [vCheckStatusId] WITH(NOLOCK) ON [row].[CheckStatusId] = [vCheckStatusId].[CensorStatusId] LEFT JOIN [v_MonthPlan] as [vkh_thang] WITH(NOLOCK) ON [row].[kh_thang] = [vkh_thang].[F_Id] LEFT JOIN [v_Container] as [vCont_type] WITH(NOLOCK) ON [row].[Cont_type] = [vCont_type].[ContainerCode] LEFT JOIN [v_E_INVOICE_METHOD_PAYMENT] as [vmethod_payment] WITH(NOLOCK) ON [row].[method_payment] = [vmethod_payment].[code] LEFT JOIN [v_QuotationStatus] as [vquotationStatus] WITH(NOLOCK) ON [row].[quotationStatus] = [vquotationStatus].[QuotationStatus] LEFT JOIN [v_RequestSampleStatus] as [vrequestSampleStatus] WITH(NOLOCK) ON [row].[requestSampleStatus] = [vrequestSampleStatus].[RequestSampleStatusId] LEFT JOIN [v_EASY_INV_STATUS] as [veinvoice_invoice_status] WITH(NOLOCK) ON [row].[einvoice_invoice_status] = [veinvoice_invoice_status].[value] LEFT JOIN [v_E_INVOICE_PATERM_CODE] as [veinvoice_pattern] WITH(NOLOCK) ON [row].[einvoice_pattern] = [veinvoice_pattern].[code] LEFT JOIN [v_E_INVOICE_SERIAL] as [veinvoice_serial] WITH(NOLOCK) ON [row].[einvoice_serial] = [veinvoice_serial].[code] LEFT JOIN [v_E_INVOICE_TYPE] as [veinvoice_type] WITH(NOLOCK) ON [row].[einvoice_type] = [veinvoice_type].[EInvoiceTypeId] LEFT JOIN [v_E_INVOICE_ADJUST_TYPE] as [veinvoice_adjust_type] WITH(NOLOCK) ON [row].[einvoice_adjust_type] = [veinvoice_adjust_type].[AdjustTypeId] LEFT JOIN [v_E_INVOICE_PROVIDER] as [veinvoice_provider] WITH(NOLOCK) ON [row].[einvoice_provider] = [veinvoice_provider].[value] LEFT JOIN [v_TK_nganhang_DN] as [vbank_dn] WITH(NOLOCK) ON [row].[bank_dn] = [vbank_dn].[F_Id] LEFT JOIN [v_User] as [vCensorUserId] WITH(NOLOCK) ON [row].[CensorUserId] = [vCensorUserId].[F_Id] LEFT JOIN [v_CTBH_BOOKING_VT_QT] as [vbooking_vt_qt] WITH(NOLOCK) ON [row].[booking_vt_qt] = [vbooking_vt_qt].[F_Id] LEFT JOIN [v_TK_nganhang_DN] as [vngan_hang_doanh_nghiep] WITH(NOLOCK) ON [row].[ngan_hang_doanh_nghiep] = [vngan_hang_doanh_nghiep].[F_Id] LEFT JOIN [v_PayConditions] as [vDieu_kien_tt] WITH(NOLOCK) ON [row].[Dieu_kien_tt] = [vDieu_kien_tt].[F_Id] LEFT JOIN [v_DeliveryConditions] as [vDkien_giao_hang] WITH(NOLOCK) ON [row].[Dkien_giao_hang] = [vDkien_giao_hang].[F_Id] LEFT JOIN [v_ProductUnitConversion] as [vmhbhxk_dvt2] WITH(NOLOCK) ON [row].[mhbhxk_dvt2] = [vmhbhxk_dvt2].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_OrderDetailByPurchasingRequest]
	@SubId int,
	@Keyword nvarchar(128),
	@FromDate datetime2,
	@ToDate datetime2,
	@IsCreatedPurchasingRequest bit,
	@Page int,
	@Size int,
	@Total bigint output
AS
BEGIN
	SELECT @Total = COUNT(0)
			FROM dbo.vVoucherValueRow r
			JOIN dbo.v_Product p ON r.vthhtp = p.F_Id
			LEFT JOIN dbo.PurchasingRequest q ON r.F_Id = q.OrderDetailId AND q.IsDeleted = 0
			WHERE
				r.SubsidiaryId =@SubId			
				AND r.[VoucherType_VoucherTypeCode] LIKE 'CTBH_DON_HANG%'
				AND (@FromDate IS NULL OR r.ngay_ct BETWEEN @FromDate AND @ToDate)
				AND (@IsCreatedPurchasingRequest IS NULL OR (@IsCreatedPurchasingRequest=0 AND q.PurchasingRequestId IS NULL) OR (@IsCreatedPurchasingRequest=1 AND q.PurchasingRequestId IS NOT NULL))

	
	SELECT r.*, p.ProductCode, p.ProductName, p.UnitId_UnitName UnitName, p.Specification, pn.PartnerCode, pn.PartnerName,

				CONVERT(BIT,
					CASE WHEN q.PurchasingRequestId IS NOT NULL THEN 1
						ELSE 0
					END
				)
				IsCreatedPurchasingRequest

			FROM dbo.vVoucherValueRow r
			JOIN dbo.v_Product p ON r.vthhtp = p.F_Id
			LEFT JOIN dbo.v_Partner pn ON r.kh0 = pn.F_Id
			LEFT JOIN dbo.PurchasingRequest q ON r.F_Id = q.OrderDetailId AND q.IsDeleted = 0

			WHERE r.SubsidiaryId =@SubId
				AND r.[VoucherType_VoucherTypeCode] LIKE 'CTBH_DON_HANG%'
				AND (@FromDate IS NULL OR r.ngay_ct BETWEEN @FromDate AND @ToDate)
				AND (@IsCreatedPurchasingRequest IS NULL OR (@IsCreatedPurchasingRequest=0 AND q.PurchasingRequestId IS NULL) OR (@IsCreatedPurchasingRequest=1 AND q.PurchasingRequestId IS NOT NULL))
	ORDER BY IsCreatedPurchasingRequest DESC, r.ngay_ct desc, r.VoucherBill_F_Id
		OFFSET (@Page-1)*@Page ROWS
		FETCH NEXT @Size ROWS ONLY
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_BH_ND] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[tk_co0], [vtk_co0].[AccountNumber] AS [tk_co0_AccountNumber],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[vnd1],  [row].[thue_suat_vat],  [row].[ty_gia],  [row].[loai_tien], [vloai_tien].[CurrencyCode] AS [loai_tien_CurrencyCode], [vloai_tien].[IsPrimary] AS [loai_tien_IsPrimary], [vloai_tien].[ty_gia] AS [loai_tien_ty_gia],  [row].[attachment],  [row].[ong_ba],  [row].[stt],  [row].[kho], [vkho].[StockName] AS [kho_StockName],  [row].[tk_no0], [vtk_no0].[AccountNumber] AS [tk_no0_AccountNumber],  [row].[mau_hd],  [row].[ky_hieu_hd],  [row].[seri_hd],  [row].[ngay_hd],  [row].[order_code],  [row].[sl_od],  [row].[ma_lsx],  [row].[so_dh], [vso_dh].[so_ct] AS [so_dh_so_ct], [vso_dh].[kh0_PartnerName] AS [so_dh_kh0_PartnerName], [vso_dh].[kh0_PartnerCode] AS [so_dh_kh0_PartnerCode], [vso_dh].[kh_vt_PartnerCode] AS [so_dh_kh_vt_PartnerCode], [vso_dh].[so_po_dt] AS [so_dh_so_po_dt],  [row].[CensorStatusId], [vCensorStatusId].[CensorStatusName] AS [CensorStatusId_CensorStatusName],  [row].[CheckStatusId], [vCheckStatusId].[CensorStatusName] AS [CheckStatusId_CensorStatusName]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_AccountingAccount] as [vtk_co0] WITH(NOLOCK) ON [row].[tk_co0] = [vtk_co0].[AccountNumber] LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_Currency] as [vloai_tien] WITH(NOLOCK) ON [row].[loai_tien] = [vloai_tien].[F_Id] LEFT JOIN [v_Stock] as [vkho] WITH(NOLOCK) ON [row].[kho] = [vkho].[F_Id] LEFT JOIN [v_AccountingAccount] as [vtk_no0] WITH(NOLOCK) ON [row].[tk_no0] = [vtk_no0].[AccountNumber] LEFT JOIN [v_CTBH_DON_HANG_ALL_INFO] as [vso_dh] WITH(NOLOCK) ON [row].[so_dh] = [vso_dh].[F_Id] LEFT JOIN [v_CensorStatus] as [vCensorStatusId] WITH(NOLOCK) ON [row].[CensorStatusId] = [vCensorStatusId].[CensorStatusId] LEFT JOIN [v_CensorStatus] as [vCheckStatusId] WITH(NOLOCK) ON [row].[CheckStatusId] = [vCheckStatusId].[CensorStatusId]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_BH_XK] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[tk_co0], [vtk_co0].[AccountNumber] AS [tk_co0_AccountNumber],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[dktt],  [row].[dkgh],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[vnd1],  [row].[thue_suat_vat],  [row].[ty_gia],  [row].[loai_tien], [vloai_tien].[CurrencyCode] AS [loai_tien_CurrencyCode], [vloai_tien].[IsPrimary] AS [loai_tien_IsPrimary], [vloai_tien].[ty_gia] AS [loai_tien_ty_gia],  [row].[attachment],  [row].[ong_ba],  [row].[kh_vt], [vkh_vt].[PartnerCode] AS [kh_vt_PartnerCode], [vkh_vt].[PartnerName] AS [kh_vt_PartnerName],  [row].[stt],  [row].[vthhtp_dvt2], [vvthhtp_dvt2].[ProductUnitConversionName] AS [vthhtp_dvt2_ProductUnitConversionName], [vvthhtp_dvt2].[FactorExpression] AS [vthhtp_dvt2_FactorExpression], [vvthhtp_dvt2].[DecimalPlace] AS [vthhtp_dvt2_DecimalPlace],  [row].[so_luong_dv2],  [row].[don_gia_dv2_0],  [row].[ghi_chu],  [row].[vnd3],  [row].[thue_suat_xnk],  [row].[kho], [vkho].[StockName] AS [kho_StockName],  [row].[tk_no0], [vtk_no0].[AccountNumber] AS [tk_no0_AccountNumber],  [row].[mau_hd],  [row].[ky_hieu_hd],  [row].[seri_hd],  [row].[ngay_hd],  [row].[order_code],  [row].[sl_od],  [row].[ma_lsx],  [row].[so_dh], [vso_dh].[so_ct] AS [so_dh_so_ct], [vso_dh].[kh0_PartnerName] AS [so_dh_kh0_PartnerName], [vso_dh].[kh0_PartnerCode] AS [so_dh_kh0_PartnerCode], [vso_dh].[kh_vt_PartnerCode] AS [so_dh_kh_vt_PartnerCode], [vso_dh].[so_po_dt] AS [so_dh_so_po_dt],  [row].[ten_tau],  [row].[nguoi_nhan_hang], [vnguoi_nhan_hang].[PartnerCode] AS [nguoi_nhan_hang_PartnerCode], [vnguoi_nhan_hang].[PartnerName] AS [nguoi_nhan_hang_PartnerName], [vnguoi_nhan_hang].[PhoneNumber] AS [nguoi_nhan_hang_PhoneNumber], [vnguoi_nhan_hang].[Address] AS [nguoi_nhan_hang_Address], [vnguoi_nhan_hang].[LogoFileId] AS [nguoi_nhan_hang_LogoFileId],  [row].[tt_ship],  [row].[tt_nguoi_nhan_hang],  [row].[tt_nguoi_mua],  [row].[nguoi_ban_giao],  [row].[kh3], [vkh3].[PartnerCode] AS [kh3_PartnerCode], [vkh3].[PartnerName] AS [kh3_PartnerName],  [row].[CensorStatusId], [vCensorStatusId].[CensorStatusName] AS [CensorStatusId_CensorStatusName],  [row].[container_quantity],  [row].[ngan_hang_doanh_nghiep], [vngan_hang_doanh_nghiep].[Ten_tk] AS [ngan_hang_doanh_nghiep_Ten_tk], [vngan_hang_doanh_nghiep].[So_TKNH] AS [ngan_hang_doanh_nghiep_So_TKNH], [vngan_hang_doanh_nghiep].[Ngan_hang] AS [ngan_hang_doanh_nghiep_Ngan_hang], [vngan_hang_doanh_nghiep].[Chi_nhanh_NH] AS [ngan_hang_doanh_nghiep_Chi_nhanh_NH], [vngan_hang_doanh_nghiep].[Code_NH] AS [ngan_hang_doanh_nghiep_Code_NH], [vngan_hang_doanh_nghiep].[Tinh_TP] AS [ngan_hang_doanh_nghiep_Tinh_TP], [vngan_hang_doanh_nghiep].[Loai_tien] AS [ngan_hang_doanh_nghiep_Loai_tien],  [row].[notify_party],  [row].[shipment]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_AccountingAccount] as [vtk_co0] WITH(NOLOCK) ON [row].[tk_co0] = [vtk_co0].[AccountNumber] LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_Currency] as [vloai_tien] WITH(NOLOCK) ON [row].[loai_tien] = [vloai_tien].[F_Id] LEFT JOIN [v_Partner] as [vkh_vt] WITH(NOLOCK) ON [row].[kh_vt] = [vkh_vt].[F_Id] LEFT JOIN [v_ProductUnitConversion] as [vvthhtp_dvt2] WITH(NOLOCK) ON [row].[vthhtp_dvt2] = [vvthhtp_dvt2].[F_Id] LEFT JOIN [v_Stock] as [vkho] WITH(NOLOCK) ON [row].[kho] = [vkho].[F_Id] LEFT JOIN [v_AccountingAccount] as [vtk_no0] WITH(NOLOCK) ON [row].[tk_no0] = [vtk_no0].[AccountNumber] LEFT JOIN [v_CTBH_DON_HANG_ALL_INFO] as [vso_dh] WITH(NOLOCK) ON [row].[so_dh] = [vso_dh].[F_Id] LEFT JOIN [v_Partner] as [vnguoi_nhan_hang] WITH(NOLOCK) ON [row].[nguoi_nhan_hang] = [vnguoi_nhan_hang].[F_Id] LEFT JOIN [v_Partner] as [vkh3] WITH(NOLOCK) ON [row].[kh3] = [vkh3].[F_Id] LEFT JOIN [v_CensorStatus] as [vCensorStatusId] WITH(NOLOCK) ON [row].[CensorStatusId] = [vCensorStatusId].[CensorStatusId] LEFT JOIN [v_TK_nganhang_DN] as [vngan_hang_doanh_nghiep] WITH(NOLOCK) ON [row].[ngan_hang_doanh_nghiep] = [vngan_hang_doanh_nghiep].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER VIEW [dbo].[vVoucher_CTBH_DON_HANG_XK] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vVoucherBill.F_Id					AS VoucherBill_F_Id,
		vVoucherBill.CreatedByUserId		AS CreatedByUserId,
		vVoucherBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vVoucherBill.UpdatedByUserId		AS UpdatedByUserId,
		vVoucherBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vVoucherBill.LatestBillVersion	AS LatestBillVersion,
		

		row.VoucherTypeId					AS VoucherTypeId,
		vVoucherType.Title				AS VoucherType_Title,
		vVoucherType.VoucherTypeCode		AS VoucherType_VoucherTypeCode
	
	,  [row].[so_ct],  [row].[ngay_ct],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[Address] AS [kh0_Address], [vkh0].[Email] AS [kh0_Email], [vkh0].[PhoneNumber] AS [kh0_PhoneNumber], [vkh0].[Website] AS [kh0_Website], [vkh0].[LogoFileId] AS [kh0_LogoFileId], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[noi_dung],  [row].[ngay_gh],  [row].[dktt],  [row].[dkgh],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[ProductNameEng] AS [vthhtp_ProductNameEng], [vvthhtp].[Measurement] AS [vthhtp_Measurement], [vvthhtp].[PackingLong] AS [vthhtp_PackingLong], [vvthhtp].[PackingWidth] AS [vthhtp_PackingWidth], [vvthhtp].[PackingHeight] AS [vthhtp_PackingHeight], [vvthhtp].[NetWeight] AS [vthhtp_NetWeight], [vvthhtp].[GrossWeight] AS [vthhtp_GrossWeight], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[vnd1],  [row].[thue_suat_vat],  [row].[ty_gia],  [row].[loai_tien], [vloai_tien].[CurrencyCode] AS [loai_tien_CurrencyCode], [vloai_tien].[IsPrimary] AS [loai_tien_IsPrimary], [vloai_tien].[ty_gia] AS [loai_tien_ty_gia],  [row].[attachment],  [row].[ong_ba],  [row].[bo_phan], [vbo_phan].[DepartmentCode] AS [bo_phan_DepartmentCode],  [row].[kh_nguoi_lh],  [row].[kh_vt], [vkh_vt].[PartnerCode] AS [kh_vt_PartnerCode], [vkh_vt].[PartnerName] AS [kh_vt_PartnerName],  [row].[stt],  [row].[vthhtp_dvt2], [vvthhtp_dvt2].[ProductUnitConversionName] AS [vthhtp_dvt2_ProductUnitConversionName], [vvthhtp_dvt2].[FactorExpression] AS [vthhtp_dvt2_FactorExpression], [vvthhtp_dvt2].[DecimalPlace] AS [vthhtp_dvt2_DecimalPlace],  [row].[so_luong_dv2],  [row].[don_gia_dv2_0],  [row].[ghi_chu],  [row].[vnd3],  [row].[thue_suat_xnk],  [row].[so_po_dt],  [row].[so_container],  [row].[tt_nguoi_nhan_hang],  [row].[tt_nguoi_mua],  [row].[ma_bg_bh], [vma_bg_bh].[so_ct] AS [ma_bg_bh_so_ct],  [row].[CensorStatusId], [vCensorStatusId].[CensorStatusName] AS [CensorStatusId_CensorStatusName],  [row].[CheckStatusId], [vCheckStatusId].[CensorStatusName] AS [CheckStatusId_CensorStatusName],  [row].[kh_thang], [vkh_thang].[MonthPlanName] AS [kh_thang_MonthPlanName],  [row].[container_quantity],  [row].[Cont_type], [vCont_type].[ContainerCode] AS [Cont_type_ContainerCode],  [row].[bank_dn], [vbank_dn].[Ten_tk] AS [bank_dn_Ten_tk], [vbank_dn].[So_TKNH] AS [bank_dn_So_TKNH], [vbank_dn].[Ngan_hang] AS [bank_dn_Ngan_hang], [vbank_dn].[Chi_nhanh_NH] AS [bank_dn_Chi_nhanh_NH], [vbank_dn].[Tinh_TP] AS [bank_dn_Tinh_TP], [vbank_dn].[Code_NH] AS [bank_dn_Code_NH],  [row].[CensorUserId], [vCensorUserId].[FullName] AS [CensorUserId_FullName],  [row].[booking_vt_qt], [vbooking_vt_qt].[so_ct] AS [booking_vt_qt_so_ct], [vbooking_vt_qt].[ngay_ct] AS [booking_vt_qt_ngay_ct], [vbooking_vt_qt].[confirmation_info] AS [booking_vt_qt_confirmation_info], [vbooking_vt_qt].[pol] AS [booking_vt_qt_pol], [vbooking_vt_qt].[pod] AS [booking_vt_qt_pod],  [row].[notify_party],  [row].[Dieu_kien_tt], [vDieu_kien_tt].[PayConditionName] AS [Dieu_kien_tt_PayConditionName],  [row].[Dkien_giao_hang], [vDkien_giao_hang].[ConditionName] AS [Dkien_giao_hang_ConditionName],  [row].[consignee_info]
	
		FROM VoucherValueRow as row WITH(NOLOCK)
			JOIN vVoucherBill WITH(NOLOCK) ON row.VoucherBill_F_Id		= vVoucherBill.F_Id
			JOIN vVoucherType WITH(NOLOCK) ON row.VoucherTypeId		= vVoucherType.F_Id	
	 LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_Currency] as [vloai_tien] WITH(NOLOCK) ON [row].[loai_tien] = [vloai_tien].[F_Id] LEFT JOIN [v_Department] as [vbo_phan] WITH(NOLOCK) ON [row].[bo_phan] = [vbo_phan].[F_Id] LEFT JOIN [v_Partner] as [vkh_vt] WITH(NOLOCK) ON [row].[kh_vt] = [vkh_vt].[F_Id] LEFT JOIN [v_ProductUnitConversion] as [vvthhtp_dvt2] WITH(NOLOCK) ON [row].[vthhtp_dvt2] = [vvthhtp_dvt2].[F_Id] LEFT JOIN [v_CTBH_BAO_GIA_INFO] as [vma_bg_bh] WITH(NOLOCK) ON [row].[ma_bg_bh] = [vma_bg_bh].[F_Id] LEFT JOIN [v_CensorStatus] as [vCensorStatusId] WITH(NOLOCK) ON [row].[CensorStatusId] = [vCensorStatusId].[CensorStatusId] LEFT JOIN [v_CensorStatus] as [vCheckStatusId] WITH(NOLOCK) ON [row].[CheckStatusId] = [vCheckStatusId].[CensorStatusId] LEFT JOIN [v_MonthPlan] as [vkh_thang] WITH(NOLOCK) ON [row].[kh_thang] = [vkh_thang].[F_Id] LEFT JOIN [v_Container] as [vCont_type] WITH(NOLOCK) ON [row].[Cont_type] = [vCont_type].[ContainerCode] LEFT JOIN [v_TK_nganhang_DN] as [vbank_dn] WITH(NOLOCK) ON [row].[bank_dn] = [vbank_dn].[F_Id] LEFT JOIN [v_User] as [vCensorUserId] WITH(NOLOCK) ON [row].[CensorUserId] = [vCensorUserId].[F_Id] LEFT JOIN [v_CTBH_BOOKING_VT_QT] as [vbooking_vt_qt] WITH(NOLOCK) ON [row].[booking_vt_qt] = [vbooking_vt_qt].[F_Id] LEFT JOIN [v_PayConditions] as [vDieu_kien_tt] WITH(NOLOCK) ON [row].[Dieu_kien_tt] = [vDieu_kien_tt].[F_Id] LEFT JOIN [v_DeliveryConditions] as [vDkien_giao_hang] WITH(NOLOCK) ON [row].[Dkien_giao_hang] = [vDkien_giao_hang].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_OrderDetailInfo_ByFIds]
	@SubId int,
	@F_Ids _BIGINTVALUES READONLY
AS
BEGIN
	
	
	SELECT r.*

		FROM vVoucherValueRow r
			
		WHERE r.SubsidiaryId =@SubId
				--AND r.VoucherType_VoucherTypeCode = ''
				AND r.F_Id IN (SELECT [Value] FROM @F_Ids)
END

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_OrderGetByCodes]
	@SubId int,
	@OrderCodes _NVALUES READONLY
AS
BEGIN
	SELECT
  v.VoucherTypeId,
  v.VoucherBill_F_Id OrderId,
  v.so_ct OrderCode,
  v.vthhtp ProductId,
  SUM(v.so_luong) Quantity,
  AVG(v.don_gia0) UnitPrice,
  v.kh0 PartnerId,
  v.kh0_PartnerCode PartnerCode,
  v.kh0_PartnerName PartnerName,
  v.so_container ContainerNumber,
  v.so_po_dt CustomerPO,
  v.container_quantity ContainerQuantity,
  v.ngay_gh DeliveryDate
FROM PurchaseOrderDB.dbo.vVoucherValueRow v
WHERE v.so_ct IN(SELECT [NValue] FROM @OrderCodes) AND v.SubsidiaryId = @SubId AND v.vthhtp>0
GROUP BY v.so_ct,
         v.VoucherTypeId,
         v.VoucherBill_F_Id,
         v.vthhtp,
         v.kh0,
         v.kh0_PartnerCode,
         v.kh0_PartnerName,
         v.so_container,
         v.so_po_dt,
         v.container_quantity,
         v.ngay_gh

	--SELECT 
	--		r.vthhtp productId,
	--		r.VoucherBill_F_Id orderId,
	--		r.so_ct orderCode,
	--		SUM(r.so_luong) quantity		
	--	FROM dbo.vVoucherValueRow r	
		
	--	GROUP BY r.vthhtp, r.VoucherBill_F_Id, r.so_ct
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_FixExchangeRateDetail]
	@FromDate AS datetime,
  @ToDate AS datetime,
	@Currency AS int,
	@SubId AS int,
	@SoTK AS nvarchar(256),
	@Kh AS nvarchar(256),
	@Du_no_dau_ky_vnd AS decimal(24,5) OUTPUT,
	@Du_co_dau_ky_vnd AS decimal(24,5) OUTPUT,
	@Du_no_dau_ky_ngoai_te AS decimal(24,5) OUTPUT,
	@Du_co_dau_ky_ngoai_te AS decimal(24,5) OUTPUT,
	@Du_no_cuoi_ky_vnd AS decimal(24,5) OUTPUT,
	@Du_co_cuoi_ky_vnd AS decimal(24,5) OUTPUT,
	@Du_no_cuoi_ky_ngoai_te AS decimal(24,5) OUTPUT,
	@Du_co_cuoi_ky_ngoai_te AS decimal(24,5) OUTPUT 
AS
BEGIN
	SELECT 
		@Du_no_dau_ky_vnd = CASE WHEN (SUM(vnd_no) - SUM(vnd_co)) > 0 THEN SUM(vnd_no) - SUM(vnd_co) ELSE 0 END,
		@Du_co_dau_ky_vnd = CASE WHEN (SUM(vnd_co) - SUM(vnd_no)) > 0 THEN SUM(vnd_co) - SUM(vnd_no) ELSE 0 END,
		@Du_no_dau_ky_ngoai_te = CASE WHEN (SUM(ngoai_te_no) - SUM(ngoai_te_co)) > 0 THEN SUM(ngoai_te_no) - SUM(ngoai_te_co) ELSE 0 END,
		@Du_co_dau_ky_ngoai_te = CASE WHEN (SUM(ngoai_te_co) - SUM(ngoai_te_no)) > 0 THEN SUM(ngoai_te_co) - SUM(ngoai_te_no) ELSE 0 END
	FROM
	(
		SELECT
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.vnd,0) ELSE 0 END vnd_no, 
			CASE WHEN tk.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.vnd,0) ELSE 0 END vnd_co, 
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.ngoai_te,0) ELSE 0 END ngoai_te_no, 
			CASE WHEN tk.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.ngoai_te,0) ELSE 0 END ngoai_te_co
		FROM
		[dbo].[_rc] tk
		INNER JOIN v_AccountingAccount a ON tk.tk_no = a.AccountNumber
		WHERE ((tk.tk_no LIKE CONCAT(@SoTK,'%') AND tk.kh_no = @kh) OR (tk.tk_co LIKE CONCAT(@SoTK,'%') AND tk.kh_co = @kh))
		AND tk.ngay_ct < @FromDate 
		AND ISNULL(tk.loai_tien_nt, tk.loai_tien) = @Currency 
		AND tk.SubsidiaryId = @SubId
	) v

	SELECT 
		@Du_no_cuoi_ky_vnd = CASE WHEN (SUM(vnd_no) - SUM(vnd_co)) > 0 THEN SUM(vnd_no) - SUM(vnd_co) ELSE 0 END,
		@Du_co_cuoi_ky_vnd = CASE WHEN (SUM(vnd_co) - SUM(vnd_no)) > 0 THEN SUM(vnd_co) - SUM(vnd_no) ELSE 0 END,
		@Du_no_cuoi_ky_ngoai_te = CASE WHEN (SUM(ngoai_te_no) - SUM(ngoai_te_co)) > 0 THEN SUM(ngoai_te_no) - SUM(ngoai_te_co) ELSE 0 END,
		@Du_co_cuoi_ky_ngoai_te = CASE WHEN (SUM(ngoai_te_co) - SUM(ngoai_te_no)) > 0 THEN SUM(ngoai_te_co) - SUM(ngoai_te_no) ELSE 0 END
	FROM
	(
		SELECT
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.vnd,0) ELSE 0 END vnd_no, 
			CASE WHEN tk.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.vnd,0) ELSE 0 END vnd_co, 
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.ngoai_te,0) ELSE 0 END ngoai_te_no, 
			CASE WHEN tk.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.ngoai_te,0) ELSE 0 END ngoai_te_co
		FROM
		[dbo].[_rc] tk
		INNER JOIN v_AccountingAccount a ON tk.tk_no = a.AccountNumber
		WHERE ((tk.tk_no LIKE CONCAT(@SoTK,'%') AND tk.kh_no = @kh) OR (tk.tk_co LIKE CONCAT(@SoTK,'%') AND tk.kh_co = @kh))
		AND tk.ngay_ct <= @ToDate 
		AND ISNULL(tk.loai_tien_nt, tk.loai_tien) = @Currency 
		AND tk.SubsidiaryId = @SubId
	) v
	
	 IF @Du_no_dau_ky_vnd IS NULL SET @Du_no_dau_ky_vnd = 0
   IF @Du_co_dau_ky_vnd IS NULL SET @Du_co_dau_ky_vnd = 0
   IF @Du_no_dau_ky_ngoai_te IS NULL SET @Du_no_dau_ky_ngoai_te = 0
   IF @Du_co_dau_ky_ngoai_te IS NULL SET @Du_co_dau_ky_ngoai_te = 0
   IF @Du_no_cuoi_ky_vnd IS NULL SET @Du_no_cuoi_ky_vnd = 0
   IF @Du_co_cuoi_ky_vnd IS NULL SET @Du_co_cuoi_ky_vnd = 0
   IF @Du_no_cuoi_ky_ngoai_te IS NULL SET @Du_no_cuoi_ky_ngoai_te = 0
   IF @Du_co_cuoi_ky_ngoai_te IS NULL SET @Du_co_cuoi_ky_ngoai_te = 0
	
	SELECT 
		v.*,
		CASE WHEN (@Du_no_dau_ky_vnd + SUM(ISNULL(vnd_no,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_co_dau_ky_vnd - SUM(ISNULL(vnd_co,0)) OVER (ORDER BY ngay_ct,F_Id)) > 0 
		THEN (@Du_no_dau_ky_vnd + SUM(ISNULL(vnd_no,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_co_dau_ky_vnd - SUM(ISNULL(vnd_co,0)) OVER (ORDER BY ngay_ct,F_Id)) ELSE 0 END du_no_vnd,
		CASE WHEN (@Du_co_dau_ky_vnd + SUM(ISNULL(vnd_co,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_no_dau_ky_vnd - SUM(ISNULL(vnd_no,0)) OVER (ORDER BY ngay_ct,F_Id)) > 0 
		THEN (@Du_co_dau_ky_vnd + SUM(ISNULL(vnd_co,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_no_dau_ky_vnd - SUM(ISNULL(vnd_no,0)) OVER (ORDER BY ngay_ct,F_Id)) ELSE 0 END du_co_vnd,
		CASE WHEN (@Du_no_dau_ky_ngoai_te + SUM(ISNULL(ngoai_te_no,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_co_dau_ky_ngoai_te - SUM(ISNULL(ngoai_te_co,0)) OVER (ORDER BY ngay_ct,F_Id)) > 0 
		THEN (@Du_no_dau_ky_ngoai_te + SUM(ISNULL(ngoai_te_no,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_co_dau_ky_ngoai_te - SUM(ISNULL(ngoai_te_co,0)) OVER (ORDER BY ngay_ct,F_Id)) ELSE 0 END du_no_ngoai_te,
		CASE WHEN (@Du_co_dau_ky_ngoai_te + SUM(ISNULL(ngoai_te_co,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_no_dau_ky_ngoai_te - SUM(ISNULL(ngoai_te_no,0)) OVER (ORDER BY ngay_ct,F_Id)) > 0 
		THEN (@Du_co_dau_ky_ngoai_te + SUM(ISNULL(ngoai_te_co,0)) OVER (ORDER BY ngay_ct,F_Id) 
		- @Du_no_dau_ky_ngoai_te - SUM(ISNULL(ngoai_te_no,0)) OVER (ORDER BY ngay_ct,F_Id)) ELSE 0 END du_co_ngoai_te
	FROM
	(
		SELECT 
			tk.F_Id,
			tk.so_ct,
			tk.ngay_ct,
			tk.dien_giai,
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN tk.tk_co ELSE tk.tk_no END tk_du,
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.vnd,0) ELSE 0 END vnd_no, 
			CASE WHEN tk.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.vnd,0) ELSE 0 END vnd_co, 
			CASE WHEN tk.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.ngoai_te,0)  ELSE 0 END ngoai_te_no, 
			CASE WHEN tk.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(tk.ngoai_te,0)  ELSE 0 END ngoai_te_co
		FROM
		[dbo].[_rc] tk
		INNER JOIN v_AccountingAccount a ON tk.tk_no = a.AccountNumber
		WHERE ((tk.tk_no LIKE CONCAT(@SoTK,'%') AND tk.kh_no = @kh) OR (tk.tk_co LIKE CONCAT(@SoTK,'%') AND tk.kh_co = @kh))
		AND tk.ngay_ct BETWEEN @FromDate AND @ToDate 
		AND ISNULL(tk.loai_tien_nt, tk.loai_tien) = @Currency 
		AND tk.SubsidiaryId = @SubId
	) v
	
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_CalcProductPrice_BuyLastest]
	@SubId int,
	@Date datetime2 = null,
	@ProductIds _INTVALUES READONLY
AS
BEGIN
	WITH tmp AS
	(
		SELECT 			
			d.vthhtp as productId,
			d.don_gia,
			ROW_NUMBER() OVER(PARTITION BY d.vthhtp ORDER BY d.ngay_ct DESC) RowNumber
		FROM dbo._rc d
			JOIN dbo.v_AccountingAccount a ON d.tk_no = a.AccountNumber
		WHERE d.SubsidiaryId = @SubId 
			AND d.ngay_ct <= @Date
			AND d.vthhtp IN(SELECT [Value] FROM @ProductIds)
			AND a.IsStock = 1
			AND d.don_gia>0
	)
	SELECT 			
			productId, 
			don_gia 
	FROM tmp
	WHERE RowNumber = 1
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcCostTransfer]
    @ToDate AS DATETIME,
	@Type AS INT,
	@by_bo_phan AS BIT,
	@by_kh AS BIT,
	@by_tscd AS BIT,
	@by_khoan_muc_cp AS BIT,
	@by_phan_xuong AS BIT,
	@by_vthhtp AS BIT,
	@by_kho AS BIT,
	@SubId AS INT
AS
BEGIN
	
	DECLARE @tblTk TABLE
	(
		Tk NVARCHAR(128)
	)

	IF @Type = 1
	BEGIN
		INSERT INTO @tblTk
		(
		    Tk
		)
		VALUES
		('621%'),('622%'),('627%');			    
	END

	IF @Type = 2 OR @Type = 3
	BEGIN
		INSERT INTO @tblTk
		(
		    Tk
		)
		VALUES
		('154%');			    
	END

	IF @Type = 3
	BEGIN
	    SET @by_bo_phan = 0
		SET @by_kh = 0
		SET @by_tscd = 0
		SET @by_khoan_muc_cp = 0
		SET @by_phan_xuong = 0
		SET @by_vthhtp = 0
		SET @by_kho = 0
	END

	SELECT 
				d.bo_phan, 
				dp.DepartmentCode bo_phan_DepartmentCode,
				dp.DepartmentName bo_phan_DepartmentName,
				d.kh,
				k.PartnerCode kh_PartnerCode,
				k.PartnerName kh_PartnerName,

				d.tscd,
				a.FixedAssetCode tscd_FixedAssetCode,
				a.FixedAssetName tscd_FixedAssetName,

				d.khoan_muc_cp,
				e.ExpenseItemCode khoan_muc_cp_ExpenseItemCode,
				e.ExpenseItemName khoan_muc_cp_ExpenseItemName,

				d.phan_xuong,
				px.DepartmentCode phan_xuong_DepartmentCode,
				px.DepartmentName phan_xuong_DepartmentName,

				d.vthhtp,
				p.ProductCode vthhtp_ProductCode,
				p.ProductName vthhtp_ProductName,

				d.kho,
				s.StockName kho_StockName,

				d.tk,
				d.vnd
			FROM
			(
				SELECT
					d.Tk tk,
					CASE WHEN @by_bo_phan = 1 THEN d.bo_phan ELSE NULL END bo_phan,
					CASE WHEN @by_kh = 1 THEN d.kh ELSE NULL END kh,
					CASE WHEN @by_tscd = 1 THEN d.tscd ELSE NULL END tscd,
					CASE WHEN @by_khoan_muc_cp = 1 THEN d.khoan_muc_cp ELSE NULL END khoan_muc_cp,
					CASE WHEN @by_phan_xuong = 1 THEN d.phan_xuong ELSE NULL END phan_xuong,
					CASE WHEN @by_vthhtp = 1 THEN d.vthhtp ELSE NULL END vthhtp,
					CASE WHEN @by_kho = 1 THEN d.kho ELSE NULL END kho,

					SUM(ISNULL(d.Vnd_no,0) - ISNULL(d.Vnd_co,0)) vnd
				FROM dbo._rc_detail d
					JOIN @tblTk t ON d.Tk LIKE t.Tk
				WHERE d.SubsidiaryId=@SubId AND d.ngay_ct <= @ToDate
				GROUP BY d.Tk,
					CASE WHEN @by_bo_phan = 1 THEN d.bo_phan ELSE NULL END,
					CASE WHEN @by_kh = 1 THEN d.kh ELSE NULL END,
					CASE WHEN @by_tscd = 1 THEN d.tscd ELSE NULL END,
					CASE WHEN @by_khoan_muc_cp = 1 THEN d.khoan_muc_cp ELSE NULL END,
					CASE WHEN @by_phan_xuong = 1 THEN d.phan_xuong ELSE NULL END,
					CASE WHEN @by_vthhtp = 1 THEN d.vthhtp ELSE NULL END,
					CASE WHEN @by_kho = 1 THEN d.kho ELSE NULL END
			) d 
			LEFT JOIN dbo.v_Department dp ON d.bo_phan = dp.F_Id
			LEFT JOIN dbo.v_Partner k ON d.kh = k.F_Id
			LEFT JOIN dbo.v_FixedAsset a ON d.tscd = a.F_Id
			LEFT JOIN dbo.v_ExpenseItem e ON d.khoan_muc_cp = e.F_Id
			LEFT JOIN dbo.v_Department px ON d.bo_phan = px.F_Id
			LEFT JOIN dbo.v_Product p ON d.vthhtp = p.F_Id
			LEFT JOIN dbo.v_Stock s ON d.kho = s.F_Id
			WHERE d.vnd <> 0
			ORDER BY d.tk, 
				bo_phan_DepartmentCode, 
				kh_PartnerCode, 
				tscd_FixedAssetCode, 
				khoan_muc_cp_ExpenseItemCode, 
				phan_xuong_DepartmentCode, 
				vthhtp_ProductCode, 
				kho_StockName
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcFixExchangeRateByLoanConvenant]	
	@FromDate DATETIME2,
	@ToDate DATETIME2,
	@Currency INT,
	@Tk NVARCHAR(128),
	@SubId AS int
AS
BEGIN
	--SELECT @Currency loait
	SET @Tk = CONCAT(@Tk,'%')
	;WITH ps_no AS
	(
		SELECT
			tk.kh_no,
			tk.khe_uoc_vay,
			tk.ngay_ct,
			tk.so_ct,
			tk.tk_no,
			tk.InputTypeId,
			tk.InputBill_F_Id,
			SUM(tk.ngoai_te) ngoai_te,
			SUM(tk.vnd) vnd,
			AVG(tk.ty_gia) ty_gia
		FROM dbo._rc tk
		WHERE  tk.tk_no LIKE @Tk	
			AND tk.ngay_ct BETWEEN @FromDate AND @ToDate
			AND tk.loai_tien = @Currency
			AND tk.SubsidiaryId = @SubId
			AND tk.vnd>0
			AND tk.ngoai_te>0
		GROUP BY
			tk.kh_no,
			tk.khe_uoc_vay,
			tk.ngay_ct,
			tk.so_ct,
			tk.tk_no,
			tk.InputTypeId,
			tk.InputBill_F_Id
	), ps_co AS
	(
		SELECT
			tk.kh_co,
			tk.tk_co,
			tk.khe_uoc_vay,
			
			STRING_AGG(tk.InputBill_F_Id,',') InputBill_F_Ids,
			STRING_AGG(tk.InputTypeId,',') InputTypeIds,
			STRING_AGG(tk.so_ct,',') so_cts,
			STRING_AGG(DATEDIFF(second,'1970-01-01',tk.ngay_ct),',') ngay_cts,

			SUM(tk.ngoai_te) ngoai_te,
			SUM(tk.vnd) vnd,
			AVG(tk.ty_gia) ty_gia
		FROM (
			SELECT
				tk.kh_co,
				tk.tk_co,
				tk.khe_uoc_vay,

				tk.InputBill_F_Id,
				tk.InputTypeId,
				tk.so_ct,
				tk.ngay_ct,

				SUM(tk.ngoai_te) ngoai_te,
				SUM(tk.vnd) vnd,
				SUM(tk.ty_gia * tk.ngoai_te)/SUM(tk.ngoai_te) ty_gia
			FROM dbo._rc tk
			WHERE tk.tk_co LIKE @Tk
				--AND tk.ngay_ct BETWEEN @FromDate AND @ToDate
				AND tk.loai_tien = @Currency
				AND tk.SubsidiaryId = @SubId
				AND EXISTS(SELECT 0 FROM ps_no n WHERE tk.khe_uoc_vay = n.khe_uoc_vay)
			GROUP BY
				tk.kh_co,
				tk.tk_co,
				tk.khe_uoc_vay,
				tk.InputBill_F_Id,
				tk.InputTypeId,
				tk.so_ct,
				tk.ngay_ct
		) tk
		GROUP BY
				tk.kh_co,							
				tk.tk_co,
				tk.khe_uoc_vay

	),v AS(
		SELECT 
			ps_no.kh_no kh,
			ps_no.khe_uoc_vay,
			ps_co.tk_co,
			ps_co.ngoai_te			co_ngoai_te,
			ps_co.vnd				co_vnd,
			ps_co.ty_gia			co_ty_gia,
			ps_co.InputBill_F_Ids	co_InputBill_F_Ids,
			ps_co.InputTypeIds		co_InputTypeIds,
			ps_co.so_cts			co_so_cts,
			ps_co.ngay_cts			co_ngay_cts,
		
			ps_no.ngay_ct			no_ngay_ct,
			ps_no.so_ct				no_so_ct,
			ps_no.InputTypeId		no_InputTypeId,
			ps_no.InputBill_F_Id	no_InputBill_F_Id,
			ps_no.ngoai_te			no_ngoai_te,
			ps_no.vnd				no_vnd,
			ps_no.ty_gia			no_ty_gia,
			(ps_no.ty_gia - ps_co.ty_gia)*ps_no.ngoai_te chenh_lech--,
			--CONCAT('N',ps_no.tk_no,'/C',ps_co.tk_co) hach_toan
		
		FROM ps_no
		LEFT JOIN ps_co ON  ps_co.kh_co = ps_no.kh_no AND ps_no.khe_uoc_vay = ps_co.khe_uoc_vay AND ps_no.tk_no = ps_co.tk_co
	)
	SELECT
		v.kh,
		c.CustomerId customerId,
		c.PartnerCode kh_PartnerCode,
		c.PartnerName kh_PartnerName,
		v.khe_uoc_vay,
		l.ConvenantNumber convenantNumber,
		v.tk_co,
		v.co_ngoai_te,
		v.co_vnd,
		v.co_ty_gia,
		v.co_InputBill_F_Ids,
		v.co_InputTypeIds,
		v.co_so_cts,
		v.co_ngay_cts,
		
		v.no_ngay_ct,
		v.no_so_ct,
		v.no_InputTypeId,
		v.no_InputBill_F_Id,
		v.no_ngoai_te,
		v.no_vnd,
		v.no_ty_gia,
		v.chenh_lech,
		CASE WHEN v.chenh_lech>0 THEN v.tk_co ELSE '635' END ket_chuyen_no,
		CASE WHEN v.chenh_lech>0 THEN '635' ELSE v.tk_co END ket_chuyen_co,
		
		CASE WHEN v.chenh_lech IS NULL OR v.chenh_lech = 0 THEN NULL
		ELSE
		CONCAT(
			'N',
			CASE WHEN v.chenh_lech>0 THEN v.tk_co ELSE '635' END,
			'/C',
			CASE WHEN v.chenh_lech>0 THEN '635' ELSE v.tk_co END
		) 
		END
		hach_toan
	FROM v
	LEFT JOIN dbo.v_Partner c ON v.kh = c.F_Id
	JOIN dbo.v_LoanConvenant l ON v.khe_uoc_vay = l.F_Id
	ORDER BY v.no_ngay_ct, v.no_InputTypeId, v.no_InputBill_F_Id
END

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[vInputValueRow] AS 
	SELECT 	 
		row.F_Id						AS F_Id,
		row.IsBillEntry					AS IsBillEntry,
		row.SubsidiaryId 				AS SubsidiaryId,
		vInputBill.F_Id					AS InputBill_F_Id,
		vInputBill.CreatedByUserId		AS CreatedByUserId,
		vInputBill.CreatedDatetimeUtc	AS CreatedDatetimeUtc,
		vInputBill.UpdatedByUserId		AS UpdatedByUserId,
		vInputBill.UpdatedDatetimeUtc	AS UpdatedDatetimeUtc,
		vInputBill.LatestBillVersion	AS LatestBillVersion,
		

		row.InputTypeId					AS InputTypeId,
		vInputType.Title				AS InputType_Title,
		vInputType.IsOpenning			AS InputType_IsOpenning,
		vInputType.InputTypeCode		AS InputType_InputTypeCode
	
	,  [row].[ngay_ct],  [row].[so_ct],  [row].[mau_hd],  [row].[seri_hd],  [row].[ngay_hd],  [row].[attachment],  [row].[loai_tien], [vloai_tien].[CurrencyCode] AS [loai_tien_CurrencyCode], [vloai_tien].[DecimalPlace] AS [loai_tien_DecimalPlace],  [row].[ty_gia],  [row].[tk_no0], [vtk_no0].[AccountNumber] AS [tk_no0_AccountNumber],  [row].[tk_co0], [vtk_co0].[AccountNumber] AS [tk_co0_AccountNumber],  [row].[ong_ba],  [row].[dia_chi],  [row].[bo_phan], [vbo_phan].[DepartmentName] AS [bo_phan_DepartmentName],  [row].[kh0], [vkh0].[PartnerCode] AS [kh0_PartnerCode], [vkh0].[PartnerName] AS [kh0_PartnerName], [vkh0].[TaxIdNo] AS [kh0_TaxIdNo],  [row].[kh_co0], [vkh_co0].[PartnerCode] AS [kh_co0_PartnerCode], [vkh_co0].[PartnerName] AS [kh_co0_PartnerName],  [row].[stt],  [row].[noi_dung],  [row].[vthhtp], [vvthhtp].[ProductCode] AS [vthhtp_ProductCode], [vvthhtp].[ProductName] AS [vthhtp_ProductName], [vvthhtp].[UnitId_UnitName] AS [vthhtp_UnitId_UnitName], [vvthhtp].[Specification] AS [vthhtp_Specification], [vvthhtp].[MainImageFileId] AS [vthhtp_MainImageFileId], [vvthhtp].[UnitId_DecimalPlace] AS [vthhtp_UnitId_DecimalPlace], [vvthhtp].[UnitId] AS [vthhtp_UnitId],  [row].[so_luong],  [row].[don_gia0],  [row].[ngoai_te0],  [row].[vnd0],  [row].[thue_suat_vat],  [row].[ghi_chu],  [row].[kho], [vkho].[StockName] AS [kho_StockName],  [row].[kho_lc], [vkho_lc].[StockName] AS [kho_lc_StockName],  [row].[khe_uoc_vay], [vkhe_uoc_vay].[ConvenantNumber] AS [khe_uoc_vay_ConvenantNumber],  [row].[tk_thu_kbnn], [vtk_thu_kbnn].[Acc_code] AS [tk_thu_kbnn_Acc_code],  [row].[ma_chuong_nsnn], [vma_chuong_nsnn].[Code] AS [ma_chuong_nsnn_Code],  [row].[ma_muc_nsnn], [vma_muc_nsnn].[Cate_code] AS [ma_muc_nsnn_Cate_code],  [row].[cong_trinh], [vcong_trinh].[ConstructionName] AS [cong_trinh_ConstructionName],  [row].[phan_xuong], [vphan_xuong].[DepartmentName] AS [phan_xuong_DepartmentName],  [row].[khoan_muc_cp], [vkhoan_muc_cp].[ExpenseItemName] AS [khoan_muc_cp_ExpenseItemName],  [row].[khoan_muc_tc], [vkhoan_muc_tc].[Name] AS [khoan_muc_tc_Name],  [row].[po_code],  [row].[order_code],  [row].[ma_lsx],  [row].[dien_giai],  [row].[thue_suat_xnk],  [row].[vnd3],  [row].[vnd1],  [row].[sl_po],  [row].[sl_od],  [row].[sl_ycvt],  [row].[tk_no1], [vtk_no1].[AccountNumber] AS [tk_no1_AccountNumber],  [row].[tk_co1], [vtk_co1].[AccountNumber] AS [tk_co1_AccountNumber],  [row].[tk_no2], [vtk_no2].[AccountNumber] AS [tk_no2_AccountNumber],  [row].[tk_co2], [vtk_co2].[AccountNumber] AS [tk_co2_AccountNumber],  [row].[tk_no3], [vtk_no3].[AccountNumber] AS [tk_no3_AccountNumber],  [row].[tk_co3], [vtk_co3].[AccountNumber] AS [tk_co3_AccountNumber],  [row].[tscd], [vtscd].[FixedAssetCode] AS [tscd_FixedAssetCode], [vtscd].[FixedAssetName] AS [tscd_FixedAssetName],  [row].[kh1], [vkh1].[PartnerCode] AS [kh1_PartnerCode], [vkh1].[PartnerName] AS [kh1_PartnerName],  [row].[kh3], [vkh3].[PartnerCode] AS [kh3_PartnerCode], [vkh3].[PartnerName] AS [kh3_PartnerName],  [row].[tknh], [vtknh].[Ten_tk] AS [tknh_Ten_tk], [vtknh].[So_TKNH] AS [tknh_So_TKNH], [vtknh].[Chi_nhanh_NH] AS [tknh_Chi_nhanh_NH], [vtknh].[Ngan_hang] AS [tknh_Ngan_hang],  [row].[tknh_kh], [vtknh_kh].[Ten_TKNH] AS [tknh_kh_Ten_TKNH], [vtknh_kh].[So_TKNH] AS [tknh_kh_So_TKNH], [vtknh_kh].[Chi_nhanh_NH] AS [tknh_kh_Chi_nhanh_NH], [vtknh_kh].[Ngan_hang] AS [tknh_kh_Ngan_hang],  [row].[ky_hieu_hd],  [row].[ma_link_hd],  [row].[constrain_ty_gia],  [row].[vthhtp_dvt2], [vvthhtp_dvt2].[ProductUnitConversionName] AS [vthhtp_dvt2_ProductUnitConversionName], [vvthhtp_dvt2].[DecimalPlace] AS [vthhtp_dvt2_DecimalPlace], [vvthhtp_dvt2].[FactorExpression] AS [vthhtp_dvt2_FactorExpression],  [row].[so_luong_dv2],  [row].[don_gia_dv2_0],  [row].[dv_ql_hc], [vdv_ql_hc].[Name] AS [dv_ql_hc_Name], [vdv_ql_hc].[Province] AS [dv_ql_hc_Province],  [row].[constrain_sl_dg],  [row].[vnd2],  [row].[tk_no4], [vtk_no4].[AccountNumber] AS [tk_no4_AccountNumber],  [row].[tk_co4], [vtk_co4].[AccountNumber] AS [tk_co4_AccountNumber],  [row].[vnd4],  [row].[sum_vnd0],  [row].[sum_vnd1],  [row].[sum_vnd2],  [row].[sum_vnd3],  [row].[sum_vnd4],  [row].[sum_vnd5],  [row].[test01],  [row].[don_gia1],  [row].[don_gia2],  [row].[don_gia3],  [row].[don_gia4],  [row].[don_gia5],  [row].[don_gia_dvt2_1],  [row].[don_gia_dvt2_2],  [row].[don_gia_dvt2_3],  [row].[don_gia_dvt2_4],  [row].[Not_VAT],  [row].[CensorStatusId], [vCensorStatusId].[CensorStatusName] AS [CensorStatusId_CensorStatusName], [vCensorStatusId].[CssStyleJson] AS [CensorStatusId_CssStyleJson],  [row].[CheckStatusId], [vCheckStatusId].[CheckStatusName] AS [CheckStatusId_CheckStatusName], [vCheckStatusId].[CssStyleJson] AS [CheckStatusId_CssStyleJson],  [row].[sl_lsx],  [row].[CensorUserId], [vCensorUserId].[FullName] AS [CensorUserId_FullName],  [row].[CensorDatetimeUtc],  [row].[cptt], [vcptt].[PrepaidExpenseCode] AS [cptt_PrepaidExpenseCode], [vcptt].[PrepaidExpenseName] AS [cptt_PrepaidExpenseName],  [row].[kh4], [vkh4].[PartnerCode] AS [kh4_PartnerCode], [vkh4].[PartnerName] AS [kh4_PartnerName],  [row].[Mat_hang_VAT],  [row].[kh_co1], [vkh_co1].[PartnerCode] AS [kh_co1_PartnerCode], [vkh_co1].[PartnerName] AS [kh_co1_PartnerName],  [row].[ngoai_te1],  [row].[So_ct_goc]
		FROM InputValueRow as row WITH(NOLOCK)
			JOIN vInputBill WITH(NOLOCK) ON row.InputBill_F_Id		= vInputBill.F_Id
			JOIN vInputType WITH(NOLOCK) ON row.InputTypeId		= vInputType.F_Id	
	 LEFT JOIN [v_Currency] as [vloai_tien] WITH(NOLOCK) ON [row].[loai_tien] = [vloai_tien].[F_Id] LEFT JOIN [v_AccountingAccount] as [vtk_no0] WITH(NOLOCK) ON [row].[tk_no0] = [vtk_no0].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_co0] WITH(NOLOCK) ON [row].[tk_co0] = [vtk_co0].[AccountNumber] LEFT JOIN [v_Department] as [vbo_phan] WITH(NOLOCK) ON [row].[bo_phan] = [vbo_phan].[F_Id] LEFT JOIN [v_Partner] as [vkh0] WITH(NOLOCK) ON [row].[kh0] = [vkh0].[F_Id] LEFT JOIN [v_Partner] as [vkh_co0] WITH(NOLOCK) ON [row].[kh_co0] = [vkh_co0].[F_Id] LEFT JOIN [v_Product] as [vvthhtp] WITH(NOLOCK) ON [row].[vthhtp] = [vvthhtp].[F_Id] LEFT JOIN [v_Stock] as [vkho] WITH(NOLOCK) ON [row].[kho] = [vkho].[F_Id] LEFT JOIN [v_Stock] as [vkho_lc] WITH(NOLOCK) ON [row].[kho_lc] = [vkho_lc].[F_Id] LEFT JOIN [v_LoanConvenant] as [vkhe_uoc_vay] WITH(NOLOCK) ON [row].[khe_uoc_vay] = [vkhe_uoc_vay].[F_Id] LEFT JOIN [v_account_nationalbank] as [vtk_thu_kbnn] WITH(NOLOCK) ON [row].[tk_thu_kbnn] = [vtk_thu_kbnn].[F_Id] LEFT JOIN [v_nsnn] as [vma_chuong_nsnn] WITH(NOLOCK) ON [row].[ma_chuong_nsnn] = [vma_chuong_nsnn].[F_Id] LEFT JOIN [v_category_subcate] as [vma_muc_nsnn] WITH(NOLOCK) ON [row].[ma_muc_nsnn] = [vma_muc_nsnn].[F_Id] LEFT JOIN [v_Construction] as [vcong_trinh] WITH(NOLOCK) ON [row].[cong_trinh] = [vcong_trinh].[F_Id] LEFT JOIN [v_Department] as [vphan_xuong] WITH(NOLOCK) ON [row].[phan_xuong] = [vphan_xuong].[F_Id] LEFT JOIN [v_ExpenseItem] as [vkhoan_muc_cp] WITH(NOLOCK) ON [row].[khoan_muc_cp] = [vkhoan_muc_cp].[F_Id] LEFT JOIN [v_cate_inoutcome] as [vkhoan_muc_tc] WITH(NOLOCK) ON [row].[khoan_muc_tc] = [vkhoan_muc_tc].[F_Id] LEFT JOIN [v_AccountingAccount] as [vtk_no1] WITH(NOLOCK) ON [row].[tk_no1] = [vtk_no1].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_co1] WITH(NOLOCK) ON [row].[tk_co1] = [vtk_co1].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_no2] WITH(NOLOCK) ON [row].[tk_no2] = [vtk_no2].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_co2] WITH(NOLOCK) ON [row].[tk_co2] = [vtk_co2].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_no3] WITH(NOLOCK) ON [row].[tk_no3] = [vtk_no3].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_co3] WITH(NOLOCK) ON [row].[tk_co3] = [vtk_co3].[AccountNumber] LEFT JOIN [v_FixedAsset] as [vtscd] WITH(NOLOCK) ON [row].[tscd] = [vtscd].[F_Id] LEFT JOIN [v_Partner] as [vkh1] WITH(NOLOCK) ON [row].[kh1] = [vkh1].[F_Id] LEFT JOIN [v_Partner] as [vkh3] WITH(NOLOCK) ON [row].[kh3] = [vkh3].[F_Id] LEFT JOIN [v_TK_nganhang_DN] as [vtknh] WITH(NOLOCK) ON [row].[tknh] = [vtknh].[F_Id] LEFT JOIN [v_TK_nganhang_dt] as [vtknh_kh] WITH(NOLOCK) ON [row].[tknh_kh] = [vtknh_kh].[F_Id] LEFT JOIN [v_ProductUnitConversion] as [vvthhtp_dvt2] WITH(NOLOCK) ON [row].[vthhtp_dvt2] = [vvthhtp_dvt2].[F_Id] LEFT JOIN [v_gov_level] as [vdv_ql_hc] WITH(NOLOCK) ON [row].[dv_ql_hc] = [vdv_ql_hc].[F_Id] LEFT JOIN [v_AccountingAccount] as [vtk_no4] WITH(NOLOCK) ON [row].[tk_no4] = [vtk_no4].[AccountNumber] LEFT JOIN [v_AccountingAccount] as [vtk_co4] WITH(NOLOCK) ON [row].[tk_co4] = [vtk_co4].[AccountNumber] LEFT JOIN [v_CensorStatus] as [vCensorStatusId] WITH(NOLOCK) ON [row].[CensorStatusId] = [vCensorStatusId].[CensorStatusId] LEFT JOIN [v_CheckStatus] as [vCheckStatusId] WITH(NOLOCK) ON [row].[CheckStatusId] = [vCheckStatusId].[CheckStatusId] LEFT JOIN [v_User] as [vCensorUserId] WITH(NOLOCK) ON [row].[CensorUserId] = [vCensorUserId].[F_Id] LEFT JOIN [v_PrepaidExpense] as [vcptt] WITH(NOLOCK) ON [row].[cptt] = [vcptt].[F_Id] LEFT JOIN [v_Partner] as [vkh4] WITH(NOLOCK) ON [row].[kh4] = [vkh4].[F_Id] LEFT JOIN [v_Partner] as [vkh_co1] WITH(NOLOCK) ON [row].[kh_co1] = [vkh_co1].[F_Id]
	WHERE [row].IsDeleted = 0
	

GO

USE AccountancyDB
GO
CREATE OR ALTER VIEW [dbo].[vInputValueRowPrivate]
		AS
		SELECT 
			v.*,
			CASE WHEN pb.So_ct_goc IS NOT NULL THEN 1 ELSE 0 END IsPublicCreated,
			CASE WHEN pb.So_ct_goc IS NOT NULL THEN N'Ðã t?o' ELSE N'Chua t?o' END IsPublicCreatedTitle			
		FROM dbo.vInputValueRow v
		LEFT JOIN (
				SELECT	pb.So_ct_goc
				FROM AccountancyPublicDB.dbo.InputValueRow pb
				WHERE IsDeleted = 0
				GROUP BY pb.So_ct_goc
		) pb ON v.so_ct = pb.So_ct_goc

GO

USE AccountancyDB
GO
/*
* 
*/
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcPrepaidExpense_v1]
	@SoTK AS nvarchar(10),
	@FromDate AS datetime,
	@ToDate AS datetime,
	@SubId AS int
AS
BEGIN
	DECLARE @NumberOfMonths INT = DATEDIFF(month, DATEADD(day,1,@FromDate), DATEADD(day,-1,@ToDate)) + 1;
	;
	WITH cptt AS(
		SELECT DISTINCT _rc.cptt FROM _rc
		WHERE _rc.SubsidiaryId = @SubId AND _rc.tk_no LIKE CONCAT(@SoTK, '%') AND _rc.ngay_ct <= @ToDate		
	)
	SELECT 
		cptt_no.cptt cptt,
		ISNULL(cptt_no.vnd,0) nguyen_gia,
		pe.PrepaidExpenseCode,
		pe.PrepaidExpenseName,
		pe.PrepaidExpenseDate,
		d.DepartmentName PrepaidExpenseUsedPlace,
		pe.PrepaidExpenseMonthNumber,
		ac.AccountNumber PrepaidExpenseTk,
		CASE WHEN pe.PrepaidExpenseMonthNumber > 0 THEN ROUND(100.0/pe.PrepaidExpenseMonthNumber,4) ELSE 0 END PrepaidExpenseRateByMonth,
		@NumberOfMonths Months,
		CASE WHEN pe.PrepaidExpenseMonthNumber > 0 THEN ROUND(100.0/pe.PrepaidExpenseMonthNumber,4) * @NumberOfMonths ELSE 0 END PrepaidExpenseRateByPeriod,
		ISNULL(cptt_no.vnd,0) - ISNULL(cptt_co.vnd,0) RemainValue
	FROM
	(
		SELECT _rc.cptt, SUM(ISNULL(_rc.vnd,0)) vnd 
		FROM _rc LEFT JOIN cptt ON (_rc.cptt IS NULL AND _rc.cptt IS NULL OR cptt.cptt = _rc.cptt)
		WHERE _rc.SubsidiaryId = @SubId AND _rc.tk_no LIKE '242%'  AND _rc.ngay_ct <= @ToDate
		GROUP BY _rc.cptt
	) cptt_no
	LEFT JOIN
	(
		SELECT _rc.cptt, SUM(ISNULL(_rc.vnd,0)) vnd 
		FROM _rc LEFT JOIN cptt ON (_rc.cptt IS NULL AND _rc.cptt IS NULL OR cptt.cptt = _rc.cptt)
		WHERE _rc.SubsidiaryId = @SubId AND _rc.tk_co LIKE '242%' AND _rc.ngay_ct <= @ToDate
		GROUP BY _rc.cptt
	) cptt_co	
	ON (cptt_no.cptt IS NULL AND cptt_co.cptt IS NULL) OR cptt_no.cptt = cptt_co.cptt
	LEFT JOIN v_PrepaidExpense pe ON  cptt_no.cptt = pe.F_Id
	LEFT JOIN v_AccountingAccount ac ON pe.PrepaidExpenseTk = ac.F_Id
	LEFT JOIN v_Department d ON pe.PrepaidExpenseUsed = d.F_Id
	WHERE ISNULL(cptt_no.vnd,0) - ISNULL(cptt_co.vnd,0) > 0
END

GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[afn_GetChildrenAccount]
(	
	@AccountNumbers nvarchar(max)
)
RETURNS @Result TABLE
(
	AccountNumber nvarchar(128)
)
AS
BEGIN 

	DECLARE @tblTk TABLE(
		AccountNumber nvarchar(128)
	);
	INSERT INTO @tblTk
	SELECT LTRIM(RTRIM([Value])) FROM dbo.ufn_Split(@AccountNumbers,',');
	
	INSERT INTO @Result
	SELECT a.AccountNumber 
	FROM dbo.v_AccountingAccount a  WITH(NOLOCK)
	WHERE EXISTS(SELECT 0 FROM @tblTk tk WHERE a.AccountNumber LIKE tk.AccountNumber + '%')
	OPTION(RECOMPILE);

	RETURN;
END


GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CheckExistedDepreciation]
	@SoTK AS nvarchar(10),
	@FromDate AS datetime,
	@ToDate AS datetime,
	@SubId AS int,
	@ResStatus AS bit OUTPUT
AS
BEGIN
	SET @ResStatus = 0
	;WITH tscd AS
    (
        SELECT      DISTINCT r.tscd
              FROM  dbo._rc                        r
                    LEFT JOIN dbo.v_FixedAsset p ON p.F_Id = r.tscd
             WHERE  r.SubsidiaryId                           = @SubId
               AND  r.tk_no LIKE CONCAT(@SoTK, '%')
               AND  r.ngay_ct                                <= @ToDate
               AND
                    (
                        ISNULL(p.FixedAssetUsedDate, r.ngay_ct) <= @ToDate
                   OR   p.F_Id IS NULL
                    )					
    ),
         chua_het AS
    (
		SELECT du_no.tscd, 
		du_no.du_no, 
		du_no.ps_co, 
		ISNULL(co_214.ps_co_214,0)  ps_co_214 ,
		du_no.du_no - ISNULL(co_214.ps_co_214,0) Remaining
		FROM
		(
			SELECT      d.tscd			,		
						ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) du_no,
						ISNULL(SUM(d.Vnd_co), 0)                            ps_co
				  FROM  dbo._rc_detail d
						JOIN tscd c ON c.tscd = d.tscd
										 OR c.tscd IS NULL
										AND d.tscd IS NULL
				 WHERE  (d.Tk LIKE '211%' OR d.Tk LIKE '212%' OR d.Tk LIKE '213%')
				   AND  d.SubsidiaryId = @SubId
				   AND  d.ngay_ct      < @ToDate
				 GROUP BY d.tscd
				HAVING  ISNULL(SUM(d.Vnd_no), 0) - ISNULL(SUM(d.Vnd_co), 0) > 0
		) du_no
		LEFT JOIN
		(
        SELECT      d.tscd			,		                  
                    ISNULL(SUM(d.vnd), 0)                            ps_co_214
              FROM  dbo._rc d
                    JOIN tscd c ON c.tscd = d.tscd
                                     OR c.tscd IS NULL
                                    AND d.tscd IS NULL
             WHERE  --(d.tk_no LIKE '211%' OR d.tk_no LIKE '212%' OR d.tk_no LIKE '213%')
				--AND 
				d.tk_co LIKE '214%'
               AND  d.SubsidiaryId = @SubId
               AND  d.ngay_ct      < @ToDate
             GROUP BY d.tscd            
		) co_214 ON du_no.tscd = co_214.tscd
		WHERE du_no.du_no > ISNULL(co_214.ps_co_214,0)
    )
		SELECT TOP(1) @ResStatus = 1 
		FROM [dbo].[_rc] r 
		WHERE r.InputType_InputTypeCode = 'CTGS_KH_TSCD' AND r.tk_co LIKE '214%' AND r.ngay_ct BETWEEN @FromDate AND @ToDate AND r.SubsidiaryId = @SubId AND EXISTS ( 
			SELECT 1 
			FROM chua_het r1
			WHERE (r.tscd IS NULL AND r1.tscd IS NULL) OR r.tscd = r1.tscd
		)
	
		
		
	
END

GO

USE AccountancyDB
GO
CREATE OR ALTER FUNCTION [dbo].[fn_CalcInterestPayable]
( 
	@SoTK AS nvarchar(10),
	@FromDate AS datetime2,
	@ToDate AS datetime2,
	@ConvenantNumber AS nvarchar(64),
	@InterestRate AS int,
	@IsBorrow AS bit,
	@IsForeignCurrency AS bit
)
RETURNS @return_variable TABLE
( data bigint)
AS
BEGIN

	DECLARE @du_dau_ky bigint = 0
	DECLARE @lai_phai_tra bigint = 0

	DECLARE @prevDate datetime2 = @FromDate

	IF @IsForeignCurrency = 0
		IF @IsBorrow = 1
			BEGIN
				SELECT
					@du_dau_ky = SUM(CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END) - SUM(CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END) 
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct < @FromDate
					AND lc.ConvenantNumber = @ConvenantNumber
				IF @du_dau_ky IS NULL SET @du_dau_ky = 0
				SELECT
					@lai_phai_tra = @lai_phai_tra + @du_dau_ky * @InterestRate * (DATEDIFF(day, @prevDate, _rc.ngay_ct) + 1) / 36500,
					@prevDate = DATEADD(day, 1, _rc.ngay_ct),
					@du_dau_ky = @du_dau_ky + CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END - CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct BETWEEN @FromDate AND @ToDate
					AND lc.ConvenantNumber = @ConvenantNumber	
			END
		ELSE
			BEGIN
				SELECT
					@du_dau_ky = SUM(CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END) - SUM(CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END) 
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct < @FromDate
					AND lc.ConvenantNumber = @ConvenantNumber
				IF @du_dau_ky IS NULL SET @du_dau_ky = 0
				SELECT
					@lai_phai_tra = @lai_phai_tra + @du_dau_ky * @InterestRate * (DATEDIFF(day, @prevDate, _rc.ngay_ct) + 1) / 36500,
					@prevDate = DATEADD(day, 1, _rc.ngay_ct),
					@du_dau_ky = @du_dau_ky + CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END - CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.vnd,0) ELSE 0 END
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct BETWEEN @FromDate AND @ToDate
					AND lc.ConvenantNumber = @ConvenantNumber
			END
	ELSE
		IF @IsBorrow = 1
			BEGIN
				SELECT
					@du_dau_ky = SUM(CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END) - SUM(CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END) 
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%')) 
					AND _rc.ngay_ct < @FromDate
					AND lc.ConvenantNumber = @ConvenantNumber
				IF @du_dau_ky IS NULL SET @du_dau_ky = 0
				SELECT
					@lai_phai_tra = @lai_phai_tra + @du_dau_ky * @InterestRate * (DATEDIFF(day, @prevDate, _rc.ngay_ct) + 1) / 36500,
					@prevDate = DATEADD(day, 1, _rc.ngay_ct),
					@du_dau_ky = @du_dau_ky + CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END - CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct BETWEEN @FromDate AND @ToDate
					AND lc.ConvenantNumber = @ConvenantNumber	
			END
		ELSE
			BEGIN
				SELECT
					@du_dau_ky = SUM(CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END) - SUM(CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END) 
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct < @FromDate
					AND lc.ConvenantNumber = @ConvenantNumber
				IF @du_dau_ky IS NULL SET @du_dau_ky = 0
				SELECT
					@lai_phai_tra = @lai_phai_tra + @du_dau_ky * @InterestRate * (DATEDIFF(day, @prevDate, _rc.ngay_ct) + 1) / 36500,
					@prevDate = DATEADD(day, 1, _rc.ngay_ct),
					@du_dau_ky = @du_dau_ky + CASE WHEN _rc.tk_no LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END - CASE WHEN _rc.tk_co LIKE CONCAT(@SoTK,'%') THEN ISNULL(_rc.ngoai_te,0) ELSE 0 END
				FROM _rc 
				LEFT JOIN [dbo].v_LoanConvenant lc ON _rc.khe_uoc_vay = lc.F_Id
				WHERE lc.IsBorrow = @IsBorrow
					AND (_rc.tk_co LIKE CONCAT(@SoTK,'%') OR _rc.tk_no LIKE CONCAT(@SoTK,'%'))
					AND _rc.ngay_ct BETWEEN @FromDate AND @ToDate
					AND lc.ConvenantNumber = @ConvenantNumber
			END

	IF @lai_phai_tra IS NULL SET @lai_phai_tra = 0

	SET @lai_phai_tra += @du_dau_ky * @InterestRate * (DATEDIFF(day, @prevDate, @ToDate) + 1)/ 36500
		
	INSERT INTO @return_variable values (@lai_phai_tra)
	RETURN 
END

GO

USE AccountancyDB
GO
CREATE OR ALTER PROCEDURE [dbo].[usp_TK_CalcFixExchangeRate]
  @ToDate AS datetime,
  @TyGia AS int,
	@Currency AS int,
	@AccoutantNumber AS nvarchar(128),
	@SubId AS int
AS
BEGIN
	SELECT
		a.F_Id tk_id,
		a.AccountNumber tk,
		bc.kh,
		p.PartnerCode ma_kh,
		p.PartnerName ten_kh,
		CASE
		WHEN bc.vnd > 0 THEN bc.vnd
		ELSE 0
		END vnd_no,
		CASE
		WHEN bc.vnd < 0 THEN -bc.vnd
		ELSE 0
		END vnd_co,
		CASE
		WHEN bc.ngoai_te > 0 THEN bc.ngoai_te
		ELSE 0
		END ngoai_te_no,
		CASE
		WHEN bc.ngoai_te < 0 THEN -bc.ngoai_te
		ELSE 0
		END ngoai_te_co,
		ABS(bc.ngoai_te * @TyGia) calc,
		CASE
		WHEN (bc.ngoai_te * @TyGia - bc.vnd) > 0 THEN (bc.ngoai_te * @TyGia - bc.vnd)
		ELSE 0
		END dc_no,
		CASE
		WHEN (bc.ngoai_te * @TyGia - bc.vnd) < 0 THEN -(bc.ngoai_te * @TyGia - bc.vnd)
		ELSE 0
		END dc_co
	FROM
	(SELECT 
		ISNULL(no_ck_kh.Mask, co_ck_kh.Mask) Mask,
		ISNULL(no_ck_kh.kh, co_ck_kh.kh) kh,
		(ISNULL(no_ck_kh.vnd,0) - ISNULL(co_ck_kh.vnd,0)) vnd,
		(ISNULL(no_ck_kh.ngoai_te,0) - ISNULL(co_ck_kh.ngoai_te,0)) ngoai_te
	FROM
	(SELECT no_ck.Mask Mask, no_ck.kh_no kh, SUM(no_ck.vnd) vnd, SUM(no_ck.ngoai_te) ngoai_te FROM 
		(SELECT a.Mask, CASE WHEN a.IsLiability = 1 THEN tk.kh_no ELSE NULL END kh_no, ISNULL(tk.vnd,0) vnd, ISNULL(tk.ngoai_te,0) ngoai_te
		FROM
		(
			SELECT CONCAT(a.AccountNumber, '%') Mask, a.AccountNumber, a.IsLiability FROM v_AccountingAccount a WHERE a.ParentId IS NULL
		) a
		INNER JOIN
		[dbo].[_rc] tk 
		ON tk.tk_no LIKE a.Mask
		WHERE tk.tk_no is not null AND tk.tk_no NOT LIKE '0%' AND tk.ngay_ct <= @ToDate AND ISNULL(tk.loai_tien_nt, tk.loai_tien) = @Currency AND a.AccountNumber IN ('131', '311', '341', '331', '1112', '1122') AND tk.SubsidiaryId = @SubId AND (LEN(@AccoutantNumber) = 0 OR a.AccountNumber LIKE CONCAT(@AccoutantNumber, '%'))) no_ck
	GROUP BY no_ck.Mask, no_ck.kh_no) no_ck_kh
	FULL OUTER JOIN 
	(SELECT co_ck.Mask Mask, co_ck.kh_co kh, SUM(ISNULL(co_ck.vnd,0)) vnd, SUM(co_ck.ngoai_te) ngoai_te FROM 
		(SELECT a.Mask, CASE WHEN a.IsLiability = 1 THEN tk.kh_co ELSE NULL END kh_co, ISNULL(tk.vnd,0) vnd, ISNULL(tk.ngoai_te,0) ngoai_te
		FROM
		(
			SELECT CONCAT(a.AccountNumber, '%') Mask, a.AccountNumber, a.IsLiability FROM v_AccountingAccount a WHERE a.ParentId IS NULL
		) a
		INNER JOIN
		[dbo].[_rc] tk 
		ON tk.tk_co LIKE a.Mask
		WHERE tk.tk_co is not null AND tk.tk_co NOT LIKE '0%' AND tk.ngay_ct <= @ToDate AND ISNULL(tk.loai_tien_nt, tk.loai_tien) = @Currency AND a.AccountNumber IN ('131', '311', '341', '331', '1112', '1122') AND tk.SubsidiaryId = @SubId AND (LEN(@AccoutantNumber) = 0 OR a.AccountNumber LIKE CONCAT(@AccoutantNumber, '%'))) co_ck
	GROUP BY co_ck.Mask, co_ck.kh_co) co_ck_kh
	ON no_ck_kh.Mask = co_ck_kh.Mask AND ((no_ck_kh.kh IS NULL AND co_ck_kh.kh IS NULL) OR no_ck_kh.kh = co_ck_kh.kh)
	WHERE (ISNULL(co_ck_kh.ngoai_te,0) != ISNULL(no_ck_kh.ngoai_te,0) OR ISNULL(co_ck_kh.vnd,0) != ISNULL(no_ck_kh.vnd,0))
	) bc
	LEFT JOIN v_Partner p ON bc.kh = p.F_Id
	LEFT JOIN v_AccountingAccount a ON SUBSTRING(bc.Mask, 1, LEN(bc.Mask) - 1) = a.AccountNumber
END

GO

USE ManufacturingDB
GO


CREATE OR ALTER VIEW [dbo].[vProductionDepartmentHandover] 
AS 
WITH podp
  AS (SELECT      pod.ProductionOrderId,
                  po.ProductionOrderCode,
                  pod.SubsidiaryId,
                  STRING_AGG(CONCAT(ISNULL(p.ProductCode, N'N/A'), '/', ISNULL(p.ProductName, N'N/A')), N', ')WITHIN GROUP(ORDER BY p.ProductCode) ProductTitle,
                  STRING_AGG(pod.Quantity + pod.ReserveQuantity, N'/ ')WITHIN GROUP(ORDER BY p.ProductCode) ProductQuantity,
                  STRING_AGG(ISNULL(r.so_ct, N'N/A'), N', ') OrderCode
        FROM      ProductionOrderDetail pod
       INNER JOIN ProductionOrder po
          ON pod.ProductionOrderId = po.ProductionOrderId
        LEFT JOIN StockDB.dbo.Product p
          ON pod.ProductId         = p.ProductId
         AND pod.SubsidiaryId      = p.SubsidiaryId
        LEFT JOIN PurchaseOrderDB.dbo.vVoucherValueRow r
          ON pod.OrderDetailId     = r.F_Id
         AND pod.SubsidiaryId      = r.SubsidiaryId
       WHERE      pod.IsDeleted = 0
       GROUP BY pod.ProductionOrderId,
                po.ProductionOrderCode,
                pod.SubsidiaryId),
     handover
  AS (SELECT h.ProductionOrderId,
             h.ObjectTypeId,
             h.ObjectId,
             h.FromProductionStepId ProductionStepId,
             h.FromDepartmentId DepartmentId,
             ISNULL(SUM(ISNULL(h.HandoverQuantity, 0)), 0) Quantity
        FROM ProductionHandover h
       WHERE h.Status = 2
       GROUP BY h.ProductionOrderId,
                h.ObjectTypeId,
                h.ObjectId,
                h.FromProductionStepId,
                h.FromDepartmentId),
     receive
  AS (SELECT h.ProductionOrderId,
             h.ObjectTypeId,
             h.ObjectId,
             h.ToProductionStepId ProductionStepId,
             h.ToDepartmentId DepartmentId,
             ISNULL(SUM(ISNULL(h.HandoverQuantity, 0)), 0) Quantity
        FROM ProductionHandover h
       WHERE h.Status = 2
       GROUP BY h.ProductionOrderId,
                h.ObjectTypeId,
                h.ObjectId,
                h.ToProductionStepId,
                h.ToDepartmentId),
     inv
  AS (SELECT      ird.ProductionOrderCode,
                  ir.ProductionStepId,
                  ird.DepartmentId,
                  i.InventoryTypeId,
                  id.ProductId,
                  i.SubsidiaryId,
                  SUM(ISNULL(ISNULL(id.PrimaryQuantity, 0), 0)) Quantity
        FROM      StockDB.dbo.InventoryDetail id
       INNER JOIN StockDB.dbo.Inventory i
          ON id.InventoryId                  = i.InventoryId
         AND id.IsDeleted                    = 0
         AND i.IsDeleted                     = 0
         AND id.SubsidiaryId                 = i.SubsidiaryId
       INNER JOIN StockDB.dbo.InventoryRequirementDetail ird
          ON id.InventoryRequirementDetailId = ird.InventoryRequirementDetailId
         AND ird.IsDeleted                   = 0
         AND id.SubsidiaryId                 = ird.SubsidiaryId
       INNER JOIN StockDB.dbo.InventoryRequirement ir
          ON ird.InventoryRequirementId      = ir.InventoryRequirementId
         AND ir.IsDeleted                    = 0
         AND id.SubsidiaryId                 = ir.SubsidiaryId
       WHERE      i.IsApproved    = 1
         AND      ir.CensorStatus      = 2
         AND      ir.ProductionOrderId > 0
         AND      ir.ProductionStepId  > 0
         AND      ird.DepartmentId     > 0
       GROUP BY ird.ProductionOrderCode,
                ir.ProductionStepId,
                ird.DepartmentId,
                i.InventoryTypeId,
                id.ProductId,
                i.SubsidiaryId),
     ld
  AS (SELECT      ldr.ProductionStepLinkDataRoleTypeId,
                  ldr.ProductionStepId,
                  ld.ProductionStepLinkDataId,
                  ld.LinkDataObjectTypeId,
                  ld.LinkDataObjectId,
                  ld.SubsidiaryId,
                  SUM(ld.QuantityOrigin - ISNULL(ld.OutsourcePartQuantity, 0)) Quantity
        FROM      ProductionStepLinkDataRole ldr
       INNER JOIN ProductionStepLinkData ld
          ON ldr.ProductionStepLinkDataId = ld.ProductionStepLinkDataId
         AND ld.IsDeleted                 = 0
       GROUP BY ldr.ProductionStepLinkDataRoleTypeId,
                ldr.ProductionStepId,
                ld.ProductionStepLinkDataId,
                ld.LinkDataObjectTypeId,
                ld.LinkDataObjectId,
                ld.SubsidiaryId)
SELECT      po.ProductionOrderId,
            po.ProductionOrderCode,
            po.StartDate,
            po.EndDate,
            pa.ProductionStepId,
            gps.ProductionStepId GroupId,
            ISNULL(gps.Title, gs.StepName) GroupTitle,
            ISNULL(ps.Title, s.StepName) StepName,
            podp.ProductTitle,
            podp.ProductQuantity,
            podp.OrderCode OrderCode,
            ps.SubsidiaryId,
            pa.DepartmentId,
            CASE
                 WHEN ld.LinkDataObjectTypeId = 1 THEN CONCAT(prd.ProductCode, ' / ', prd.ProductName)
                 ELSE prdsm.Title END Material,
            CASE
                 WHEN ld.ProductionStepLinkDataRoleTypeId = 1 THEN N'Đầu vào'
                 ELSE N'Đầu ra' END InOutType,
            pa.AssignmentQuantity * ld.Quantity / (lda.QuantityOrigin - ISNULL(lda.OutsourcePartQuantity, 0)) AssignmentQuantity,
            ISNULL(ho.Quantity, ISNULL(rc.Quantity, ISNULL(inv.Quantity, 0))) HandoveredQuantity,
            pa.AssignedProgressStatus
  FROM      ProductionAssignment pa
 INNER JOIN ProductionStep ps
    ON pa.ProductionStepId                         = ps.ProductionStepId
   AND ps.IsDeleted                                = 0
  LEFT JOIN ProductionStep gps
    ON ps.ParentId                                 = gps.ProductionStepId
   AND gps.IsDeleted                               = 0
   AND ps.ContainerId                              = gps.ContainerId
   AND ps.ContainerTypeId                          = gps.ContainerTypeId
 INNER JOIN Step gs
    ON gps.StepId                                  = gs.StepId
   AND gs.IsDeleted                                = 0
   AND gps.SubsidiaryId                            = gs.SubsidiaryId
 INNER JOIN Step s
    ON ps.StepId                                   = s.StepId
   AND s.IsDeleted                                 = 0
   AND ps.SubsidiaryId                             = s.SubsidiaryId
 INNER JOIN ProductionOrder po
    ON pa.ProductionOrderId                        = po.ProductionOrderId
   AND po.IsDeleted                                = 0
   AND ps.SubsidiaryId                             = po.SubsidiaryId
  LEFT JOIN podp podp
    ON po.ProductionOrderId                        = podp.ProductionOrderId
   AND ps.SubsidiaryId                             = podp.SubsidiaryId
 INNER JOIN ld ld
    ON ps.ProductionStepId                         = ld.ProductionStepId
  LEFT JOIN ProductSemi prdsm
    ON ld.LinkDataObjectTypeId                             = 2
   AND ld.LinkDataObjectId                                 = prdsm.ProductSemiId
   AND prdsm.IsDeleted                             = 0
   AND ps.SubsidiaryId                             = prdsm.SubsidiaryId
  LEFT JOIN StockDB.dbo.Product prd
    ON ld.LinkDataObjectTypeId                             = 1
   AND ld.LinkDataObjectId                                 = prd.ProductId
   AND ps.SubsidiaryId                             = prd.SubsidiaryId
  LEFT JOIN ProductionStepLinkDataRole ldr2
    ON ld.ProductionStepLinkDataId                 = ldr2.ProductionStepLinkDataId
   AND ld.ProductionStepId                         <> ldr2.ProductionStepId
 INNER JOIN ProductionStepLinkData lda
    ON pa.ProductionStepLinkDataId                 = lda.ProductionStepLinkDataId
   AND lda.IsDeleted                               = 0
  LEFT JOIN handover ho
    ON pa.ProductionOrderId                        = ho.ProductionOrderId
   AND ld.LinkDataObjectTypeId                             = ho.ObjectTypeId
   AND ld.LinkDataObjectId                                 = ho.ObjectId
   AND pa.ProductionStepId                         = ho.ProductionStepId
   AND pa.DepartmentId                             = ho.DepartmentId
  LEFT JOIN receive rc
    ON pa.ProductionOrderId                        = rc.ProductionOrderId
   AND ld.LinkDataObjectTypeId                             = rc.ObjectTypeId
   AND ld.LinkDataObjectId                                 = rc.ObjectId
   AND pa.ProductionStepId                         = rc.ProductionStepId
   AND pa.DepartmentId                             = rc.DepartmentId
  LEFT JOIN inv inv
    ON po.ProductionOrderCode                      = inv.ProductionOrderCode
   AND ld.LinkDataObjectTypeId                             = 1
   AND ld.LinkDataObjectId                                 = inv.ProductId
   AND pa.ProductionStepId                         = inv.ProductionStepId
   AND pa.DepartmentId                             = inv.DepartmentId
   AND (   (   inv.InventoryTypeId                 = 1
         AND   ld.ProductionStepLinkDataRoleTypeId = 2)
      OR   (   inv.InventoryTypeId                   = 2
         AND   ld.ProductionStepLinkDataRoleTypeId   = 1));
 



GO

USE ManufacturingDB
GO






CREATE OR ALTER VIEW [dbo].[vProductionOrderDetail]
AS
WITH po
AS (
   SELECT v.so_ct,
          v.so_po_dt,
          v.vthhtp,
          MAX(v.don_gia0) UnitPrice,
          CONVERT(BIGINT, MAX(v.loai_tien)) loai_tien,
          MAX(v.ty_gia) ty_gia
   FROM PurchaseOrderDB.dbo.vVoucherValueRow v
   GROUP BY v.so_ct,
            v.so_po_dt,
            v.vthhtp
)
SELECT od.ProductionOrderDetailId,
       od.ProductionOrderId,
       od.ProductId,
       od.Quantity,
       od.ReserveQuantity,
       od.Note,
       o.ProductionOrderStatus,
       o.InvalidPlan,
       o.ProductionOrderCode,
       o.CreatedDatetimeUtc,
	   o.UpdatedDatetimeUtc,
       o.StartDate,
       o.EndDate,
       o.PlanEndDate,
       o.[Date],
	   o.MonthPlanId,
	   o.FromWeekPlanId,
	   o.ToWeekPlanId,
	   o.FactoryDepartmentId,
	   o.[Description],
       p.ProductCode,
       p.ProductName,
       p.MainImageFileId,
       od.OrderCode,
       od.PartnerId,
       u.UnitId,
       u.UnitName,
       od.SubsidiaryId,
       rq.OutsourcePartRequestId,
       CONVERT(   BIT,
                  CASE
                      WHEN asg.ProductionOrderId IS NOT NULL THEN
                          1
                      ELSE
                          0
                  END
              ) AS HasAssignment,
       o.IsInvalid,
       pex.Specification,
       po.so_po_dt CustomerPO,
       po.UnitPrice,
       po.loai_tien CurrencyId,
       po.ty_gia CurrencyRate,
       od.ProductionProcessVersion,
	   o.ProductionOrderAssignmentStatusId,
       CAST(CASE
                WHEN ISNULL(od.ProductionProcessVersion, 0) <> ISNULL(p.ProductionProcessVersion, 0) THEN
                    1
                ELSE
                    0
            END AS BIT) HasNewProductionProcessVersion,
       o.IsUpdateQuantity

FROM dbo.ProductionOrderDetail AS od
    INNER JOIN dbo.ProductionOrder AS o
        ON od.ProductionOrderId = o.ProductionOrderId
           AND o.IsDeleted = 0
    LEFT JOIN po
        ON od.OrderCode = po.so_ct
           AND od.ProductId = po.vthhtp
    LEFT OUTER JOIN StockDB.dbo.Product AS p
        ON od.ProductId = p.ProductId
    LEFT OUTER JOIN StockDB.dbo.ProductExtraInfo AS pex
        ON p.ProductId = pex.ProductId
    LEFT OUTER JOIN MasterDB.dbo.Unit AS u
        ON p.UnitId = u.UnitId
    LEFT OUTER JOIN dbo.OutsourcePartRequest AS rq
        ON od.ProductionOrderDetailId = rq.ProductionOrderDetailId
           AND rq.IsDeleted = 0
    LEFT OUTER JOIN MasterDB.dbo.v_Partner AS c
        ON c.F_Id = od.PartnerId
    LEFT OUTER JOIN
    (
        SELECT ROW_NUMBER() OVER (PARTITION BY ProductionOrderId ORDER BY ProductionOrderId ASC) [Index],
               asg.ProductionOrderId
        FROM dbo.ProductionAssignment asg
    ) AS asg
        ON asg.ProductionOrderId = o.ProductionOrderId
           AND asg.[Index] = 1
WHERE (od.IsDeleted = 0);


GO

USE ManufacturingDB
GO

CREATE OR ALTER VIEW [dbo].[vProductionOrder] AS WITH podp AS (
	SELECT 
		pod.ProductionOrderId,
		pod.SubsidiaryId,
		STRING_AGG(ISNULL(p.ProductCode, N'N/A'), N', ') WITHIN GROUP (ORDER BY p.ProductCode) ProductCode,
		STRING_AGG(ISNULL(p.ProductName, N'N/A'), N', ') WITHIN GROUP (ORDER BY p.ProductCode) ProductName,
		STRING_AGG(CONCAT(ISNULL(p.ProductCode, N'N/A'), N' / ', ISNULL(p.ProductName, N'N/A')), N', ') WITHIN GROUP (ORDER BY p.ProductCode) ProductTitle,
		STRING_AGG(ISNULL(u.UnitName, N'N/A'), N', ') WITHIN GROUP (ORDER BY p.ProductCode) UnitName,
		STRING_AGG(pod.Quantity + pod.ReserveQuantity, N'/ ') WITHIN GROUP (ORDER BY p.ProductCode) ProductQuantity,
		STRING_AGG(ISNULL(r.so_ct, N'N/A'), N', ') OrderCode
	FROM [ManufacturingDB].[dbo].ProductionOrderDetail pod
	LEFT JOIN [StockDB].[dbo].Product p ON pod.ProductId = p.ProductId AND pod.SubsidiaryId = p.SubsidiaryId
	LEFT JOIN [MasterDB].[dbo].Unit u ON p.UnitId = u.UnitId
	LEFT JOIN [PurchaseOrderDB].[dbo].vVoucherValueRow r ON pod.OrderDetailId = r.F_Id AND pod.SubsidiaryId = r.SubsidiaryId
	WHERE pod.IsDeleted = 0 
	GROUP BY pod.ProductionOrderId, pod.SubsidiaryId
)
SELECT 
	podp.*,
	po.ProductionOrderCode,
	po.StartDate,
	po.EndDate,
	po.Date,
	po.ProductionOrderStatus
FROM podp podp 
INNER JOIN [ManufacturingDB].[dbo].ProductionOrder po ON podp.ProductionOrderId = po.ProductionOrderId 
WHERE po.IsDeleted = 0


GO

USE ManufacturingDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_ProductionOrder_GetExtraInfoByOrderId]
  @OrderId AS int ,
  @SubId AS int 
AS
BEGIN
	SELECT 
		r.F_Id OrderDetailId,
		r.vthhtp ProductId,
		CONCAT(r.vthhtp_ProductCode, '/' ,r.vthhtp_ProductName) ProductTitle,
		r.so_ct OrderCode,
		r.kh0 PartnerId,
		CASE WHEN r.kh0_PartnerCode IS NULL THEN NULL ELSE CONCAT(r.kh0_PartnerCode, '/' ,r.kh0_PartnerName) END PartnerTitle,
		r.vthhtp_UnitId_UnitName UnitName,
		r.so_luong OrderQuantity,
		ISNULL(ordered.OrderedQuantity,0) OrderedQuantity
	FROM PurchaseOrderDB.dbo.vVoucherValueRow r
	CROSS APPLY
	(
		SELECT 
			SUM(od.Quantity) OrderedQuantity
		FROM ProductionOrderDetail od
		WHERE od.OrderDetailId = r.F_Id AND od.IsDeleted = 0 AND od.SubsidiaryId = r.SubsidiaryId
	) ordered
	WHERE r.VoucherBill_F_Id = @OrderId AND r.SubsidiaryId = @SubId
END

GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[vOutsourcePartRequestExtractInfo] AS SELECT        rq.OutsourcePartRequestId, rqd.OutsourcePartRequestDetailId, rq.OutsourcePartRequestCode, rq.ProductionOrderDetailId, pod.ProductionOrderId, pod.ProductionOrderCode, pod.OrderCode, rq.OutsourcePartRequestFinishDate, 
                         rq.CreatedDatetimeUtc AS OutsourcePartRequestDate, pod.ProductId, pod.ProductCode, pod.ProductName, rqd.ProductId AS ProductPartId, CONCAT(p2.ProductCode, '/ ', p2.ProductName)  AS ProductPartTitle, 
                         p2.ProductName AS ProductPartName, p2.ProductCode AS ProductPartCode, rqd.Quantity, u.UnitName, u.UnitId, pod.Quantity + pod.ReserveQuantity AS ProductOrderDetailQuantity, CONCAT(pod.ProductCode, '/ ', 
                         pod.ProductName) AS ProductTitle, rq.OutsourcePartRequestStatusId, rqd.PathProductIdInBom, rq.MarkInvalid, rqd.OutsourcePartRequestDetailFinishDate, p2.ProductId AS Expr1, ucv.DecimalPlace, 
                         ucv.ProductUnitConversionId
FROM            dbo.OutsourcePartRequest AS rq LEFT OUTER JOIN
                         dbo.OutsourcePartRequestDetail AS rqd ON rq.OutsourcePartRequestId = rqd.OutsourcePartRequestId AND rqd.IsDeleted = 0 LEFT OUTER JOIN
                         dbo.vProductionOrderDetail AS pod ON rq.ProductionOrderDetailId = pod.ProductionOrderDetailId LEFT OUTER JOIN
                         StockDB.dbo.Product AS p2 ON rqd.ProductId = p2.ProductId LEFT OUTER JOIN
                         MasterDB.dbo.Unit AS u ON u.UnitId = p2.UnitId LEFT OUTER JOIN
                         StockDB.dbo.ProductUnitConversion AS ucv ON ucv.ProductId = p2.ProductId AND ucv.SecondaryUnitId = p2.UnitId
WHERE        (rq.IsDeleted = 0) AND (rq.ProductionOrderDetailId is NOT null AND rq.ProductionOrderDetailId > 0)
UNION
SELECT        rq.OutsourcePartRequestId, rqd.OutsourcePartRequestDetailId, rq.OutsourcePartRequestCode, rq.ProductionOrderDetailId, rq.ProductionOrderId, po.ProductionOrderCode, NULL OrderCode, rq.OutsourcePartRequestFinishDate, 
                         rq.CreatedDatetimeUtc AS OutsourcePartRequestDate, NULL ProductId, NULL ProductCode, NULL ProductName, rqd.ProductId AS ProductPartId, CONCAT(p2.ProductCode, '/ ', p2.ProductName)  AS ProductPartTitle, 
                         p2.ProductName AS ProductPartName, p2.ProductCode AS ProductPartCode, rqd.Quantity, u.UnitName, u.UnitId, NULL AS ProductOrderDetailQuantity, '' AS ProductTitle, rq.OutsourcePartRequestStatusId, rqd.PathProductIdInBom, rq.MarkInvalid, rqd.OutsourcePartRequestDetailFinishDate, p2.ProductId AS Expr1, ucv.DecimalPlace, 
                         ucv.ProductUnitConversionId
FROM            dbo.OutsourcePartRequest AS rq LEFT OUTER JOIN
                         dbo.OutsourcePartRequestDetail AS rqd ON rq.OutsourcePartRequestId = rqd.OutsourcePartRequestId AND rqd.IsDeleted = 0 LEFT OUTER JOIN
						 dbo.ProductionOrder po on po.ProductionOrderId = rq.ProductionOrderId LEFT OUTER JOIN
                          StockDB.dbo.Product AS p2 ON rqd.ProductId = p2.ProductId LEFT OUTER JOIN
                         MasterDB.dbo.Unit AS u ON u.UnitId = p2.UnitId LEFT OUTER JOIN
                         StockDB.dbo.ProductUnitConversion AS ucv ON ucv.ProductId = p2.ProductId AND ucv.SecondaryUnitId = p2.UnitId
WHERE        (rq.IsDeleted = 0) AND (rq.ProductionOrderDetailId is null OR rq.ProductionOrderDetailId = 0)

GO

USE ManufacturingDB
GO

CREATE OR ALTER VIEW [dbo].[vOutsourceStepRequestExtractInfo2] AS WITH productionOrderInfo AS (SELECT  DISTINCT a.ProductionOrderId,a.ProductionOrderCode, a.OrderCode
                                 FROM  vProductionOrderDetail AS a)
SELECT        o.OutsourceStepRequestId, o.OutsourceStepRequestCode,  v.ProductionOrderId, v.ProductionOrderCode, v.OrderCode, o.OutsourceStepRequestFinishDate, 
                         o.CreatedDatetimeUtc AS OutsourceStepRequestDate, o.IsInvalid, o.OutsourceStepRequestStatusId
FROM            dbo.OutsourceStepRequest AS o LEFT OUTER JOIN
                         productionOrderInfo AS v ON o.ProductionOrderId = v.ProductionOrderId 
WHERE        (o.IsDeleted = 0)   


GO

USE MasterDB
GO
-- =============================================
-- Author:		trung.vo
-- Create date: 2021-12-16
-- Description:	Lấy thông tin chứng từ dựa vào mã
-- =============================================
CREATE OR ALTER FUNCTION [dbo].[afn_GetObjectInfoFromCodes]
(
	@ObjectTypeId INT,
	@BillTypeId INT,
	@ObjectCodes _NVALUES READONLY,
	@ObjectIds _BIGINTVALUES READONLY
)
RETURNS 
@data TABLE 
(
	ObjectTypeId INT NOT NULL,
	BillTypeId INT NOT NULL,
	ObjectId BIGINT NOT NULL,
	ObjectCode NVARCHAR(256) NOT NULL,
	ObjectTitle NVARCHAR(256) NOT NULL,
	ObjectDate DATETIME2 NULL
)
AS
BEGIN
	
	DECLARE @ObjectType_VoucherBill INT = 49
	DECLARE @ObjectType_InventoryInput INT = 30
	DECLARE @ObjectType_InventoryOutput INT = 31
	DECLARE @ObjectType_InputBill INT = 39
	DECLARE @ObjectType_PO INT = 25
	DECLARE @ObjectType_ProductionOrder INT = 70


	IF @ObjectTypeId = @ObjectType_InventoryInput
	BEGIN
		DECLARE @INV_TYPE_INPUT INT = 1;

		INSERT INTO @data(ObjectTypeId, BillTypeId, ObjectId, ObjectCode, ObjectTitle, ObjectDate)		
		SELECT
			DISTINCT
			@ObjectTypeId,
			@INV_TYPE_INPUT,
			iv.InventoryId, 
			iv.InventoryCode, 
			N'Phiếu nhập kho',
			iv.[Date]
		FROM [StockDB].dbo.Inventory iv 
		WHERE iv.IsDeleted = 0 AND iv.InventoryTypeId = @INV_TYPE_INPUT
			AND (
				EXISTS
				(
					SELECT 0 FROM @ObjectCodes v WHERE iv.InventoryCode = v.[Nvalue]			
				)
				OR EXISTS
				(				
					SELECT 0 FROM @ObjectIds v WHERE iv.InventoryId = v.[Value]
				)
			)
	END


	IF @ObjectTypeId = @ObjectType_InventoryOutput
	BEGIN
		DECLARE @INV_TYPE_OUTPUT INT = 2;

		INSERT INTO @data(ObjectTypeId, BillTypeId, ObjectId, ObjectCode, ObjectTitle, ObjectDate)		
		SELECT
			DISTINCT
			@ObjectTypeId,
			@INV_TYPE_OUTPUT,
			iv.InventoryId, 
			iv.InventoryCode,			
			N'Phiếu xuất kho',
			iv.[Date]
		FROM [StockDB].dbo.Inventory iv 
		WHERE iv.IsDeleted = 0 AND iv.InventoryTypeId = @INV_TYPE_OUTPUT			
			AND (
				EXISTS
				(
					SELECT 0 FROM @ObjectCodes v WHERE iv.InventoryCode = v.[Nvalue]			
				)
				OR EXISTS
				(				
					SELECT 0 FROM @ObjectIds v WHERE iv.InventoryId = v.[Value]
				)
			)
	END


	IF @ObjectTypeId = @ObjectType_PO
	BEGIN
		INSERT INTO @data(ObjectTypeId, BillTypeId, ObjectId, ObjectCode, ObjectTitle, ObjectDate)		
		SELECT
			DISTINCT
			@ObjectTypeId,
			po.PurchaseOrderType,
			po.PurchaseOrderId, 
			po.PurchaseOrderCode,
			N'Đơn mua',
			po.[Date]
		FROM [PurchaseOrderDB].dbo.PurchaseOrder po
		WHERE po.IsDeleted = 0						
			AND (
				EXISTS
				(
					SELECT 0 FROM @ObjectCodes v WHERE po.PurchaseOrderCode = v.[Nvalue]
				)
				OR EXISTS
				(				
					SELECT 0 FROM @ObjectIds v WHERE po.PurchaseOrderId = v.[Value]
				)
			)
	END


	IF @ObjectTypeId = @ObjectType_InputBill
	BEGIN	
		INSERT INTO @data(ObjectTypeId, BillTypeId, ObjectId, ObjectCode, ObjectTitle, ObjectDate)		
		SELECT
			DISTINCT
			@ObjectTypeId,
			r.InputTypeId,
			r.InputBill_F_Id, 
			r.so_ct,	
			CONCAT('CTGS ',r.InputType_Title) Title,
			r.ngay_ct
		FROM [AccountancyDB].dbo.vInputValueRow r
		WHERE (r.InputTypeId = @BillTypeId OR @BillTypeId IS NULL)
			AND (
				EXISTS
				(
					SELECT 0 FROM @ObjectCodes v WHERE r.so_ct = v.[Nvalue]
				)
				OR EXISTS
				(				
					SELECT 0 FROM @ObjectIds v WHERE r.InputBill_F_Id = v.[Value]
				)
			)
	END



	IF @ObjectTypeId = @ObjectType_VoucherBill
	BEGIN
		INSERT INTO @data(ObjectTypeId, BillTypeId, ObjectId, ObjectCode, ObjectTitle, ObjectDate)		
		SELECT
			DISTINCT
			@ObjectTypeId,
			r.VoucherTypeId,
			r.VoucherBill_F_Id, 
			r.so_ct,
			CONCAT('CTBH ',r.VoucherType_Title) Title,
			r.ngay_ct
		FROM [PurchaseOrderDB].dbo.vVoucherBillRow r
		WHERE  (r.VoucherTypeId = @BillTypeId OR @BillTypeId IS NULL)
		AND (
				EXISTS
				(
					SELECT 0 FROM @ObjectCodes v WHERE r.so_ct = v.[Nvalue]
				)
				OR EXISTS
				(				
					SELECT 0 FROM @ObjectIds v WHERE r.VoucherBill_F_Id = v.[Value]
				)
			)
	END


	IF @ObjectTypeId = @ObjectType_ProductionOrder
	BEGIN
		INSERT INTO @data(ObjectTypeId, BillTypeId, ObjectId, ObjectCode, ObjectTitle, ObjectDate)		
		SELECT 
			DISTINCT
			@ObjectTypeId,
			0,
			pod.ProductionOrderId, 
			pod.ProductionOrderCode Code, 
			N'Lệnh sản xuất',
			pod.[Date]
		FROM [ManufacturingDB].dbo.ProductionOrder pod
		WHERE  (
				EXISTS
				(
					SELECT 0 FROM @ObjectCodes v WHERE pod.ProductionOrderCode = v.[Nvalue]
				)
				OR EXISTS
				(				
					SELECT 0 FROM @ObjectIds v WHERE pod.ProductionOrderId = v.[Value]
				)
			)
	END
	
	RETURN 
END


GO

USE MasterDB
GO
-- =============================================
-- Author:		trung.vo
-- Create date: 2021-12-16
-- Description:	Lấy danh sách chứng từ liên quan
-- =============================================
CREATE OR ALTER PROCEDURE [dbo].[asp_ObjectGetRef]
	@Id BIGINT = NULL,
    @Code NVARCHAR(256) = NULL,
    @TypeId INT,
	@SubId int
AS
BEGIN
	SET TRAN ISOLATION LEVEL READ UNCOMMITTED
    DECLARE @ObjectType_VoucherBill INT = 49;
    DECLARE @ObjectType_InventoryInput INT = 30;
    DECLARE @ObjectType_InventoryOutput INT = 31;
    DECLARE @ObjectType_InputBill INT = 39;
    DECLARE @ObjectType_PO INT = 25;
    DECLARE @ObjectType_ProductionOrder INT = 70;

    DECLARE @INV_TYPE_INPUT INT = 1;
    DECLARE @INV_TYPE_OUTPUT INT = 2;


	DECLARE @EmptyObjectIds _BIGINTVALUES;
	DECLARE @EmptyObjectCodes _NVALUES;

	IF @Id > 0 AND ISNULL(@Code,'') = ''
	BEGIN
		DECLARE @ObjectIds _BIGINTVALUES;
		INSERT INTO @ObjectIds (Value)
		VALUES (@Id -- Value - bigint
		    )
		SELECT @Code = ObjectCode FROM dbo.afn_GetObjectInfoFromCodes(@TypeId, NULL, @EmptyObjectCodes, @ObjectIds)
	END


    DECLARE @tblRule TABLE (RuleId INT IDENTITY(1,1) NOT NULL,
							ObjectTypeId INT NULL,
                            BillTypeId INT NULL,
                            Parent_ObjectTypeId INT NULL,
                            Parent_BillTypeId INT NULL);
    --INSERT @tblRule (ObjectTypeId,
    --                 BillTypeId,
    --                 Parent_ObjectTypeId,
    --                 Parent_BillTypeId)
    --SELECT f.ObjectTypeId,
    --       f.InputTypeId,
    --       f.SourceObjectTypeId,
    --       f.SourceInputTypeId
    --  FROM dbo.OutsideImportMappingFunction f;

    INSERT INTO @tblRule (ObjectTypeId,
                          BillTypeId,
                          Parent_ObjectTypeId,
                          Parent_BillTypeId)
    VALUES
    -- orderCode, poCode, productionOrder => inventory input

    (   @ObjectType_InventoryInput, -- ObjectTypeId - int
        @INV_TYPE_INPUT, -- BillTypeId - int
        @ObjectType_PO, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
        ),
    (   @ObjectType_InventoryInput, -- ObjectTypeId - int
        @INV_TYPE_INPUT, -- BillTypeId - int
        @ObjectType_VoucherBill, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
    ),
    (   @ObjectType_InventoryInput, -- ObjectTypeId - int
        @INV_TYPE_INPUT, -- BillTypeId - int
        @ObjectType_ProductionOrder, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
    ),

    -- orderCode, poCode, productionOrder => inventory output
    (   @ObjectType_InventoryOutput, -- ObjectTypeId - int
        @INV_TYPE_OUTPUT, -- BillTypeId - int
        @ObjectType_PO, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
    ),
    (   @ObjectType_InventoryOutput, -- ObjectTypeId - int
        @INV_TYPE_OUTPUT, -- BillTypeId - int
        @ObjectType_VoucherBill, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
    ),
    (   @ObjectType_InventoryOutput, -- ObjectTypeId - int
        @INV_TYPE_OUTPUT, -- BillTypeId - int
        @ObjectType_ProductionOrder, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
    ),

    -- orderCode, productionOrder => po
    (   @ObjectType_PO, -- ObjectTypeId - int
        NULL, -- BillTypeId - int
        @ObjectType_VoucherBill, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
    ),
    (   @ObjectType_PO, -- ObjectTypeId - int
        NULL, -- BillTypeId - int
        @ObjectType_ProductionOrder, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
    ),

    ---- productionOrder, input bill => order
    --(   @ObjectType_VoucherBill, -- ObjectTypeId - int
    --    NULL, -- BillTypeId - int
    --    @ObjectType_ProductionOrder, -- ParentObjectTypeId - int
    --    NULL -- ParentBillTypeId - int
    --),
    --(   @ObjectType_VoucherBill, -- ObjectTypeId - int
    --    NULL, -- BillTypeId - int
    --    @ObjectType_InputBill, -- ParentObjectTypeId - int
    --    NULL -- ParentBillTypeId - int
    --),

	 -- order => productionOrder
    (   @ObjectType_ProductionOrder, -- ObjectTypeId - int
        NULL, -- BillTypeId - int
        @ObjectType_VoucherBill, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
    ),

    -- inv input, inv output, order, po  =>  input bill
    (   @ObjectType_InputBill, -- ObjectTypeId - int
        NULL, -- BillTypeId - int
        @ObjectType_InventoryInput, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
    ),
    (   @ObjectType_InputBill, -- ObjectTypeId - int
        NULL, -- BillTypeId - int
        @ObjectType_InventoryOutput, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
    ),
    (   @ObjectType_InputBill, -- ObjectTypeId - int
        NULL, -- BillTypeId - int
        @ObjectType_ProductionOrder, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
    ),
    (   @ObjectType_InputBill, -- ObjectTypeId - int
        NULL, -- BillTypeId - int
        @ObjectType_VoucherBill, -- ParentObjectTypeId - int
        NULL -- ParentBillTypeId - int
    );



    DECLARE @tbl TABLE (ObjectTypeId INT NULL,
                        ObjectCode NVARCHAR(256) NULL,
						RuleId INT NULL,
                        Parent_ObjectTypeId INT NULL,
                        Parent_ObjectCode NVARCHAR(256) NULL);

    INSERT INTO @tbl (ObjectTypeId,
                      ObjectCode,
					  RuleId,
                      Parent_ObjectTypeId,
                      Parent_ObjectCode)
    VALUES (@TypeId, -- ObjectTypeId - int
            @Code, -- ObjectCode - nvarchar(256)
			0,
            NULL, -- Parent_ObjectTypeId - int
            NULL -- Parent_ObjectCode - nvarchar(256)
        );

    DECLARE @old_length INT = 1;

    SELECT @old_length = COUNT(0)
      FROM @tbl;

    DECLARE @new_length INT = 0;
	DECLARE @hasNew BIT = 1;

	DECLARE @dem INT = 1
    WHILE @old_length <> @new_length AND @dem<3
    BEGIN
        SET @old_length = @new_length;

		SET @dem = @dem + 1
        DECLARE @RuleId				INT,
				@ObjectTypeId       INT,
                @BillTypeId         INT,
                @ParentObjectTypeId INT,
                @ParentBillTypeId   INT;
        PRINT 'start';
        DECLARE @idx INT = 0;
        DECLARE rule_cursor CURSOR LOCAL READ_ONLY FAST_FORWARD FOR
        SELECT DISTINCT RuleId,
						ObjectTypeId,
                        BillTypeId,
                        Parent_ObjectTypeId,
                        Parent_BillTypeId
          FROM @tblRule;
        --WHERE @ObjectTypeId = @ObjectTypeId
        --  AND @BillTypeId   = @BillTypeId;
        OPEN rule_cursor;
        FETCH NEXT FROM rule_cursor
         INTO @RuleId,
			  @ObjectTypeId,
              @BillTypeId,
              @ParentObjectTypeId,
              @ParentBillTypeId;
        WHILE @@FETCH_STATUS = 0
        BEGIN

            PRINT CONCAT('@idx', @idx);
            SET @idx = @idx + 1;


            DECLARE @tblParent TABLE (ObjectTypeId INT NULL,
                                      ObjectCode NVARCHAR(256) NULL,
                                      Parent_ObjectTypeId INT NULL,
                                      Parent_ObjectCode NVARCHAR(256) NULL);

            --DECLARE @VoucherTypeCode NVARCHAR(250) =N'';
            DECLARE @Parent_VoucherTypeCode NVARCHAR(250) = N'';
            IF @ObjectTypeId = @ObjectType_InventoryInput
            BEGIN
				PRINT CONCAT('@ObjectType_InventoryInput',@ObjectType_InventoryInput)

                INSERT INTO @tblParent (ObjectTypeId,
                                        ObjectCode,
                                        Parent_ObjectTypeId,
                                        Parent_ObjectCode)
                SELECT DISTINCT @ObjectTypeId,
                                iv.InventoryCode,
                                @ParentObjectTypeId,
                               CASE @ParentObjectTypeId
                                     WHEN @ObjectType_PO THEN iv.POCode
                                     WHEN @ObjectType_VoucherBill THEN iv.OrderCode
                                     WHEN @ObjectType_ProductionOrder THEN iv.ProductionOrderCode
                                ELSE NULL END
                  FROM (
					  SELECT 
						iv.InventoryId, 
						iv.InventoryCode,
						CASE WHEN ISNULL(id.POCode,'') = '' AND ISNULL(id.ProductionOrderCode,'') ='' THEN  id.OrderCode ELSE NULL END OrderCode,
						CASE WHEN ISNULL(id.POCode,'') = '' THEN  id.ProductionOrderCode ELSE NULL END ProductionOrderCode,
						id.POCode

					  FROM [StockDB].dbo.Inventory iv JOIN [StockDB].dbo.InventoryDetail id ON iv.InventoryId = id.InventoryId
					  WHERE iv.IsDeleted   = 0
						   AND id.IsDeleted   = 0
						   AND iv.InventoryTypeId = @INV_TYPE_INPUT
					) iv
                  JOIN @tbl t ON  iv.InventoryCode = t.ObjectCode AND t.ObjectTypeId = @ObjectTypeId
							OR iv.POCode = t.ObjectCode AND t.ObjectTypeId = @ObjectType_PO
							OR iv.OrderCode = t.ObjectCode AND t.ObjectTypeId = @ObjectType_VoucherBill
							OR iv.ProductionOrderCode = t.ObjectCode AND t.ObjectTypeId = @ObjectType_ProductionOrder
                 WHERE t.Parent_ObjectTypeId IS NULL;
                  -- AND t.ObjectTypeId = @ObjectTypeId;
				 

				   --input ct gs
				   
				INSERT INTO @tblParent (ObjectTypeId,
                                        ObjectCode,
                                        Parent_ObjectTypeId,
                                        Parent_ObjectCode)
                SELECT DISTINCT @ObjectType_InputBill,
                                t.ObjectCode,
                                t.ObjectTypeId,
                                t.ObjectCode
                  FROM @tbl t                  
					JOIN [AccountancyDB].dbo.vInputValueRow r ON t.ObjectCode = r.so_ct
                 WHERE t.ObjectTypeId = @ObjectTypeId
				 AND  t.Parent_ObjectTypeId IS NULL;

            END;


            IF @ObjectTypeId = @ObjectType_InventoryOutput
            BEGIN
				PRINT CONCAT('@ObjectType_InventoryOutput',@ObjectType_InventoryOutput)

                INSERT INTO @tblParent (ObjectTypeId,
                                        ObjectCode,
                                        Parent_ObjectTypeId,
                                        Parent_ObjectCode)
                SELECT DISTINCT @ObjectTypeId,
                                iv.InventoryCode,
                                @ParentObjectTypeId,
                                CASE @ParentObjectTypeId
                                     WHEN @ObjectType_PO THEN iv.POCode
                                     WHEN @ObjectType_VoucherBill THEN iv.OrderCode
                                     WHEN @ObjectType_ProductionOrder THEN iv.ProductionOrderCode
                                ELSE NULL END
                   FROM (
					  SELECT 
						iv.InventoryId, 
						iv.InventoryCode,
						CASE WHEN ISNULL(id.POCode,'') = '' AND ISNULL(id.ProductionOrderCode,'') ='' THEN  id.OrderCode ELSE NULL END OrderCode,
						CASE WHEN ISNULL(id.POCode,'') = '' THEN  id.ProductionOrderCode ELSE NULL END ProductionOrderCode,
						id.POCode

					  FROM [StockDB].dbo.Inventory iv JOIN [StockDB].dbo.InventoryDetail id ON iv.InventoryId = id.InventoryId
					  WHERE iv.IsDeleted   = 0
						   AND id.IsDeleted   = 0
						   AND iv.InventoryTypeId = @INV_TYPE_OUTPUT
					) iv
                  JOIN @tbl t ON  iv.InventoryCode = t.ObjectCode AND t.ObjectTypeId = @ObjectTypeId
							OR iv.POCode = t.ObjectCode AND t.ObjectTypeId = @ObjectType_PO
							OR iv.OrderCode = t.ObjectCode AND t.ObjectTypeId = @ObjectType_VoucherBill
							OR iv.ProductionOrderCode = t.ObjectCode AND t.ObjectTypeId = @ObjectType_ProductionOrder
                 WHERE t.Parent_ObjectTypeId IS NULL;
                  -- AND t.ObjectTypeId = @ObjectTypeId;

				 

				   --input ct gs
				   
				INSERT INTO @tblParent (ObjectTypeId,
                                        ObjectCode,
                                        Parent_ObjectTypeId,
                                        Parent_ObjectCode)
                SELECT DISTINCT @ObjectType_InputBill,
                                t.ObjectCode,
                                t.ObjectTypeId,
                                t.ObjectCode
                  FROM @tbl t                  
					JOIN [AccountancyDB].dbo.vInputValueRow r ON t.ObjectCode = r.so_ct
                 WHERE t.ObjectTypeId = @ObjectTypeId
					AND  t.Parent_ObjectTypeId IS NULL;

            END;

            IF @ObjectTypeId = @ObjectType_PO
            BEGIN
				PRINT CONCAT('@ObjectType_PO',@ObjectType_PO)

                INSERT INTO @tblParent (ObjectTypeId,
                                        ObjectCode,
                                        Parent_ObjectTypeId,
                                        Parent_ObjectCode)
                SELECT DISTINCT @ObjectTypeId,
                                o.PurchaseOrderCode,
                                @ParentObjectTypeId,
                                CASE @ParentObjectTypeId
                                     WHEN @ObjectType_VoucherBill THEN CASE WHEN ISNULL(od.ProductionOrderCode,'')='' THEN od.OrderCode ELSE NULL END                                     
                                     WHEN @ObjectType_ProductionOrder THEN od.ProductionOrderCode
                                     ELSE NULL END
                  FROM [PurchaseOrderDB].dbo.PurchaseOrder o
                  JOIN [PurchaseOrderDB].dbo.PurchaseOrderDetail od
                    ON od.PurchaseOrderId  = o.PurchaseOrderId
                  JOIN @tbl t
                    ON o.PurchaseOrderCode = t.ObjectCode AND t.ObjectTypeId = @ObjectTypeId
					OR od.OrderCode = t.ObjectCode AND t.ObjectTypeId = @ObjectType_VoucherBill
					OR od.ProductionOrderCode = t.ObjectCode AND t.ObjectTypeId = @ObjectType_ProductionOrder
                 WHERE o.IsDeleted    = 0
                   AND od.IsDeleted   = 0
				   AND  t.Parent_ObjectTypeId IS NULL;
                  -- AND t.ObjectTypeId = @ObjectTypeId;
            END;


            IF @ObjectTypeId = @ObjectType_VoucherBill
            BEGIN
				PRINT CONCAT('@ObjectType_VoucherBill',@ObjectType_VoucherBill)

                --SELECT @VoucherTypeCode = VoucherTypeCode FROM PurchaseOrderDB.dbo.VoucherType WHERE VoucherTypeId = @BillTypeId
                SELECT @Parent_VoucherTypeCode = VoucherTypeCode
                  FROM PurchaseOrderDB.dbo.VoucherType
                 WHERE VoucherTypeId = @ParentBillTypeId;
                INSERT INTO @tblParent (ObjectTypeId,
                                        ObjectCode,
                                        Parent_ObjectTypeId,
                                        Parent_ObjectCode)
                SELECT DISTINCT @ObjectTypeId,
                                o.so_ct,
                                @ParentObjectTypeId,
                                CASE @ParentObjectTypeId
                                     WHEN @ObjectType_VoucherBill THEN CASE @Parent_VoucherTypeCode
                                                                            WHEN N'CTBH_PHIEU_YEU_CAU' THEN o.yc_code
                                                                            WHEN N'CTBH_BAO_GIA' THEN bg_bh.so_ct
                                                                            --WHEN N'CTBH_BAO_GIA_XK' THEN bg_bh_xk.so_ct
                                                                            WHEN N'CTBH_DON_HANG' THEN o.order_code
                                                                            WHEN N'CTBH_DON_HANG_XK' THEN o.order_code
                                                                            --WHEN N'CTBH_BH_XK' THEN bh_xk.so_ct
                                                                            ELSE NULL END
                                     WHEN @ObjectType_ProductionOrder THEN o.ma_lsx
                                     WHEN @ObjectType_InputBill THEN o.ref_so_ct
                                     ELSE NULL END
                  FROM [PurchaseOrderDB].dbo.vVoucherValueRow o
				  LEFT JOIN [PurchaseOrderDB].dbo.vVoucherValueRow bg_bh ON o.ma_bg_bh = bg_bh.F_Id AND bg_bh.VoucherType_VoucherTypeCode = 'CTBH_BAO_GIA'
				  --LEFT JOIN [PurchaseOrderDB].dbo.vVoucherValueRow bg_bh_xk ON o.ma = bg_bh.F_Id AND bg_bh_xk.VoucherType_VoucherTypeCode = 'CTBH_BAO_GIA_XK'
				  --LEFT JOIN [PurchaseOrderDB].dbo.vVoucherValueRow bh_xk ON o.so_bh_xk = bh_xk.F_Id AND bg_bh_xk.VoucherType_VoucherTypeCode = 'CTBH_BH_XK'
                  JOIN @tbl t 
						ON o.so_ct = t.ObjectCode AND t.ObjectTypeId = @ObjectTypeId
						OR o.yc_code = t.ObjectCode AND t.ObjectTypeId = @ObjectType_VoucherBill AND @Parent_VoucherTypeCode = N'CTBH_PHIEU_YEU_CAU'
						OR bg_bh.so_ct = t.ObjectCode AND t.ObjectTypeId = @ObjectType_VoucherBill AND @Parent_VoucherTypeCode = N'CTBH_BAO_GIA'
						--OR bg_bh_xk.so_ct = t.ObjectCode AND t.ObjectTypeId = @ObjectType_VoucherBill AND @Parent_VoucherTypeCode = N'CTBH_BAO_GIA_XK'
						OR o.order_code = t.ObjectCode AND t.ObjectTypeId = @ObjectType_VoucherBill AND @Parent_VoucherTypeCode = N'CTBH_DON_HANG'
						OR o.order_code = t.ObjectCode AND t.ObjectTypeId = @ObjectType_VoucherBill AND @Parent_VoucherTypeCode = N'CTBH_DON_HANG_XK'
						--OR bh_xk.so_ct = t.ObjectCode AND t.ObjectTypeId = @ObjectType_VoucherBill AND @Parent_VoucherTypeCode = N'CTBH_BH_XK'
				WHERE t.Parent_ObjectTypeId IS NULL;
                 --WHERE t.ObjectTypeId = @ObjectTypeId;
            END;

            IF @ObjectTypeId = @ObjectType_ProductionOrder
            BEGIN
				PRINT CONCAT('@ObjectType_ProductionOrder',@ObjectType_ProductionOrder)
                --SELECT @VoucherTypeCode = VoucherTypeCode FROM PurchaseOrderDB.dbo.VoucherType WHERE VoucherTypeId = @BillTypeId
                SELECT @Parent_VoucherTypeCode = VoucherTypeCode
                  FROM PurchaseOrderDB.dbo.VoucherType
                 WHERE VoucherTypeId = @ParentBillTypeId;
                INSERT INTO @tblParent (ObjectTypeId,
                                        ObjectCode,
                                        Parent_ObjectTypeId,
                                        Parent_ObjectCode)
                SELECT DISTINCT @ObjectTypeId,
                                o.ProductionOrderCode,
                                @ParentObjectTypeId,
                                CASE @ParentObjectTypeId
                                     WHEN @ObjectType_VoucherBill THEN od.OrderCode
                                     --CASE @Parent_VoucherTypeCode
                                     --	WHEN N'CTBH_PHIEU_YEU_CAU' THEN o.yc_code
                                     --	WHEN N'CTBH_BAO_GIA' THEN o.ma_bg_bh
                                     --	WHEN N'CTBH_BAO_GIA_XK' THEN o.ma_bg_bh_xk
                                     --	WHEN N'CTBH_DON_HANG' THEN o.order_code
                                     --	WHEN N'CTBH_DON_HANG_XK' THEN o.order_code
                                     --	WHEN N'CTBH_BH_XK' THEN o.so_bh_xk
                                     --	ELSE NULL
                                     --END							
                                     ELSE NULL END
                  FROM [ManufacturingDB].dbo.ProductionOrder o
                  JOIN [ManufacturingDB].dbo.ProductionOrderDetail od
                    ON od.ProductionOrderId  = o.ProductionOrderId
                  JOIN @tbl t
                    ON o.ProductionOrderCode = t.ObjectCode AND t.ObjectTypeId = @ObjectTypeId
					OR od.OrderCode = t.ObjectCode AND t.ObjectTypeId = @ObjectType_VoucherBill
                 WHERE o.IsDeleted    = 0
                   AND od.IsDeleted   = 0
				   AND t.Parent_ObjectTypeId IS NULL;
                   --AND t.ObjectTypeId = @ObjectTypeId;
            END;

            IF @ObjectTypeId = @ObjectType_InputBill
            BEGIN
				PRINT CONCAT('@ObjectType_InputBill',@ObjectType_InputBill)
                --SELECT @VoucherTypeCode = VoucherTypeCode FROM PurchaseOrderDB.dbo.VoucherType WHERE VoucherTypeId = @BillTypeId
                SELECT @Parent_VoucherTypeCode = VoucherTypeCode
                  FROM PurchaseOrderDB.dbo.VoucherType
                 WHERE VoucherTypeId = @ParentBillTypeId;
                INSERT INTO @tblParent (ObjectTypeId,
                                        ObjectCode,
                                        Parent_ObjectTypeId,
                                        Parent_ObjectCode)
                SELECT DISTINCT @ObjectTypeId,
                                o.so_ct,
                                @ParentObjectTypeId,
                                CASE @ParentObjectTypeId
                                     WHEN @ObjectType_VoucherBill THEN o.order_code
                                     WHEN @ObjectType_ProductionOrder THEN o.ma_lsx
                                     WHEN @ObjectType_PO THEN o.po_code
                                     WHEN @ObjectType_InventoryInput THEN CASE WHEN iv.InventoryId>0 AND iv.InventoryTypeId=@INV_TYPE_INPUT THEn o.so_ct ELSE NULL END
                                     WHEN @ObjectType_InventoryOutput THEN  CASE WHEN iv.InventoryId>0 AND iv.InventoryTypeId=@INV_TYPE_OUTPUT THEn o.so_ct ELSE NULL END
                                     ELSE NULL END
                  FROM [AccountancyDB].dbo.vInputValueRow o
                  JOIN @tbl t
                    ON o.so_ct = t.ObjectCode AND t.ObjectTypeId = @ObjectTypeId
					OR o.order_code = t.ObjectCode AND t.ObjectTypeId = @ObjectType_VoucherBill
					OR o.ma_lsx = t.ObjectCode AND t.ObjectTypeId = @ObjectType_ProductionOrder
					OR o.po_code = t.ObjectCode AND t.ObjectTypeId = @ObjectType_PO

					LEFT JOIN [StockDB].dbo.Inventory iv ON t.ObjectCode = iv.InventoryCode
                 WHERE iv.IsDeleted = 0 AND t.Parent_ObjectTypeId IS NULL;;
            END;

			IF(NOT EXISTS (SELECT 0 FROM @tbl e WHERE  e.RuleId = @RuleId))
			BEGIN
			    INSERT INTO @tbl (ObjectTypeId,
                              ObjectCode,
							  RuleId,
                              Parent_ObjectTypeId,
                              Parent_ObjectCode)
				SELECT DISTINCT ObjectTypeId,
								ObjectCode,
								@RuleId,
								Parent_ObjectTypeId,
								Parent_ObjectCode
				  FROM @tblParent p
				 WHERE p.Parent_ObjectCode IS NOT NULL
				   AND p.Parent_ObjectCode <> ''
				   AND NOT EXISTS (   SELECT 0
										FROM @tbl e
									   WHERE p.ObjectTypeId        = e.ObjectTypeId
										 AND p.ObjectCode          = e.ObjectCode
										 AND p.Parent_ObjectTypeId = e.Parent_ObjectTypeId
										 AND p.Parent_ObjectCode   = e.Parent_ObjectCode);

				INSERT INTO @tbl (ObjectTypeId,
								  ObjectCode,
								  Parent_ObjectTypeId,
								  Parent_ObjectCode)
				SELECT DISTINCT Parent_ObjectTypeId,
								Parent_ObjectCode,
								NULL,
								NULL
				  FROM @tblParent p
				 WHERE p.Parent_ObjectCode IS NOT NULL
				   AND p.Parent_ObjectCode <> ''
				   AND NOT EXISTS (   SELECT 0
										FROM @tbl e
									   WHERE e.ObjectTypeId = p.Parent_ObjectTypeId
										 AND e.ObjectCode   = p.Parent_ObjectCode
										 AND e.Parent_ObjectTypeId IS NULL
										 AND e.Parent_ObjectCode IS NULL);
			END
            

            PRINT CONCAT('end rule', @RuleId);

            FETCH NEXT FROM rule_cursor
             INTO @RuleId,
				  @ObjectTypeId,
                  @BillTypeId,
                  @ParentObjectTypeId,
                  @ParentBillTypeId;
        END;
        CLOSE rule_cursor;
        DEALLOCATE rule_cursor;

        PRINT CONCAT('new_length', @new_length);
        SELECT @new_length = COUNT(0)
          FROM @tbl;

		--SELECT * FROM @tblParent
    END;

    DECLARE @tblObjects TABLE (ObjectTypeId INT NOT NULL,
                               BillTypeId INT NOT NULL,
                               ObjectId BIGINT NOT NULL,
                               ObjectCode NVARCHAR(256) NOT NULL,
                               ObjectTitle NVARCHAR(256) NOT NULL,
							   ObjectDate DATETIME2 NULL);


    DECLARE bill_cursor CURSOR LOCAL FAST_FORWARD FOR
    SELECT DISTINCT ObjectTypeId
      FROM @tbl;

    OPEN bill_cursor;
    FETCH NEXT FROM bill_cursor
     INTO @ObjectTypeId;
    WHILE @@FETCH_STATUS = 0
    BEGIN
        DECLARE @codes _NVALUES;
        INSERT INTO @codes (NValue)
        SELECT DISTINCT ObjectCode
          FROM @tbl
         WHERE ObjectTypeId = @ObjectTypeId;

        INSERT INTO @tblObjects (ObjectTypeId,
                                 BillTypeId,
                                 ObjectId,
                                 ObjectCode,
                                 ObjectTitle,
								 ObjectDate)
        SELECT ObjectTypeId,
               BillTypeId,
               ObjectId,
               ObjectCode,
               ObjectTitle,
			   ObjectDate
          FROM dbo.afn_GetObjectInfoFromCodes(@ObjectTypeId, NULL, @codes, @EmptyObjectIds);

        FETCH NEXT FROM bill_cursor
         INTO @ObjectTypeId;
    END;
    CLOSE bill_cursor;
    DEALLOCATE bill_cursor;



    SELECT      t.ObjectTypeId,
                t.ObjectCode,
                o.BillTypeId,
                o.ObjectId,
                o.ObjectTitle,
				o.ObjectDate,
                t.Parent_ObjectTypeId,
                t.Parent_ObjectCode
      FROM      @tbl t
      LEFT JOIN @tblObjects o
        ON o.ObjectTypeId = t.ObjectTypeId
       AND o.ObjectCode   = t.ObjectCode
	   ORDER BY t.ObjectTypeId, t.ObjectCode;

END;

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_CTBH_DON_HANG_LSX_INFO] AS 
							SELECT 
  r.VoucherTypeId,
  r.so_po_dt so_po_dt,
  r.so_ct,
  r.SubsidiaryId,
  r.ngay_ct,
  r.ma_bg_bh,
  r.attachment,
  r.ong_ba,
  r.bo_phan,
  r.kh0,
  r.noi_dung,
  r.ngay_gh,
  r.kh_nguoi_lh,
  r.dktt,
  r.dkgh,
  r.kh_vt,
  r.loai_tien,
  r.ty_gia,
  r.VoucherBill_F_Id,
  r.F_Id,
  p1.PartnerCode kh_vt_PartnerCode,
  p2.PartnerCode kh0_PartnerCode,
  p2.PartnerName kh0_PartnerName,
  p2.Address kh0_Address,
  c.CurrencyCode loai_tien_CurrencyCode,
  d.DepartmentCode bo_phan_DepartmentCode,
  r.vthhtp ProductId,
  r.vthhtp_ProductCode ProductCode,
  r.vthhtp_ProductName ProductName,
  CONCAT(r.vthhtp_ProductCode, '/ ', r.vthhtp_ProductName) ProductTitle,
  pex.Specification,
  r.so_ct OrderCode,
  r.kh0 PartnerId,
  CASE
     WHEN r.kh0_PartnerCode IS NULL THEN NULL
     ELSE CONCAT(r.kh0_PartnerCode, '/ ', r.kh0_PartnerName)
  END PartnerTitle,
  r.kh0_PartnerCode PartnerCode,
  r.kh0_PartnerName PartnerName,
  r.vthhtp_UnitId_UnitName UnitName,
  r.so_luong OrderQuantity,
  ISNULL(ordered.OrderedQuantity, 0) OrderedQuantity,
  r.so_luong - ISNULL(ordered.OrderedQuantity, 0) OrderRemainQuantity,
  r.vnd0 TotalMoney,
  r.ngoai_te0 ForeignMoney,
  sl.sl_ton RemainQuantity,
  ISNULL(r.don_gia0, p.EstimatePrice) UnitPrice,
  r.kh_thang,
  r.kh_thang_MonthPlanName,
  r.so_container ContainerNumber,
  r.container_quantity ContainerQuantity
FROM
  (SELECT r.VoucherTypeId,
          r.so_ct,
          r.so_po_dt,
          r.SubsidiaryId,
          r.ngay_ct,
          r.ma_bg_bh,
          r.attachment,
          r.ong_ba,
          r.bo_phan,
          r.kh0,
          r.noi_dung,
          r.ngay_gh,
          r.kh_nguoi_lh,
          r.dktt,
          r.dkgh,
          r.kh_vt,
          r.loai_tien,
          r.ty_gia,
          r.VoucherBill_F_Id,
          r.vthhtp,
          r.vthhtp_UnitId_UnitName,
          r.vthhtp_ProductCode,
          r.vthhtp_ProductName,
          r.kh0_PartnerCode,
          r.kh0_PartnerName,
          r.IsBillEntry,
          max(r.F_Id) F_Id,
          max(r.don_gia0) don_gia0,
          sum(r.so_luong) so_luong,
          sum(r.vnd0) vnd0,
          sum(r.ngoai_te0) ngoai_te0,
          r.kh_thang,
          r.kh_thang_MonthPlanName,
          r.so_container,
          r.container_quantity
   FROM [PurchaseOrderDB].[dbo].vVoucherValueRow r WHERE r.CensorStatusId = 1
   GROUP BY r.VoucherTypeId,
            r.so_ct,
            r.so_po_dt,
            r.SubsidiaryId,
            r.ngay_ct,
            r.ma_bg_bh,
            r.attachment,
            r.ong_ba,
            r.bo_phan,
            r.kh0,
            r.noi_dung,
            r.ngay_gh,
            r.kh_nguoi_lh,
            r.dktt,
            r.dkgh,
            r.kh_vt,
            r.loai_tien,
            r.ty_gia,
            r.VoucherBill_F_Id,
            r.vthhtp,
            r.vthhtp_UnitId_UnitName,
            r.vthhtp_ProductCode,
            r.vthhtp_ProductName,
            r.kh0_PartnerCode,
            r.kh0_PartnerName,
            r.IsBillEntry,
            r.kh_thang,
            r.kh_thang_MonthPlanName,
            r.so_container,
            r.container_quantity) r
INNER JOIN PurchaseOrderDB.dbo.VoucherType t ON r.VoucherTypeId = t.VoucherTypeId
LEFT JOIN StockDB.dbo.Product p ON r.vthhtp = p.ProductId
LEFT JOIN MasterDB.dbo.v_Partner p1 ON r.kh_vt = p1.F_Id
LEFT JOIN MasterDB.dbo.v_Partner p2 ON r.kh0 = p2.F_Id
LEFT JOIN MasterDB.dbo.v_Currency c ON r.loai_tien = c.F_Id
LEFT JOIN MasterDB.dbo.v_Department d ON r.bo_phan = d.F_Id
LEFT JOIN StockDB.dbo.ProductExtraInfo pex ON r.vthhtp = pex.ProductId
LEFT JOIN
(SELECT rc.vthhtp,
          rc.SubsidiaryId,
          ISNULL(SUM(CASE
                         WHEN ac_no.IsStock = 1 THEN ISNULL(rc.so_luong, 0)
                         ELSE 0
                     END), 0) - ISNULL(SUM(CASE
                                               WHEN ac_co.IsStock = 1 THEN ISNULL(rc.so_luong, 0)
                                               ELSE 0
                                           END), 0) sl_ton
   FROM [AccountancyDB].[dbo]._rc rc
   LEFT JOIN [MasterDB].[dbo]._AccountingAccount ac_no ON rc.tk_no = ac_no.AccountNumber
   LEFT JOIN [MasterDB].[dbo]._AccountingAccount ac_co ON rc.tk_co = ac_co.AccountNumber
   GROUP BY rc.vthhtp,
            rc.SubsidiaryId
) sl ON r.vthhtp = sl.vthhtp AND r.SubsidiaryId = sl.SubsidiaryId 
CROSS APPLY
(SELECT SUM(od.Quantity) OrderedQuantity
  FROM [ManufacturingDB].[dbo].ProductionOrderDetail od
  WHERE od.OrderCode = r.so_ct
     AND od.ProductId = r.vthhtp
     AND od.IsDeleted = 0
     AND od.SubsidiaryId = r.SubsidiaryId
) ordered
WHERE (t.VoucherTypeCode = 'CTBH_DON_HANG_XK'
       OR t.VoucherTypeCode = 'CTBH_DON_HANG')
  AND r.IsBillEntry = 0
  AND r.vthhtp IS NOT NULL

GO

USE MasterDB
GO
CREATE OR ALTER VIEW [dbo].[v_ProductionOrderDetail] AS 
							SELECT 
	pod.ProductionOrderDetailId F_Id,
	pod.ProductionOrderCode,
	pod.ProductionOrderId,
	pod.ProductCode, 
	pod.ProductName,
	pod.UnitName,
	pod.Quantity,
	pod.ReserveQuantity, 
	pod.[Date],
	pod.StartDate,
	pod.PlanEndDate,
	pod.EndDate,
	pod.Note,
	pod.ProductId
FROM [ManufacturingDB].[dbo].[vProductionOrderDetail] pod

GO

USE PurchaseOrderDB
GO
CREATE OR ALTER PROCEDURE [dbo].[asp_OrderRowsGetByCodes]
	@SubId int,
	@OrderCodes _NVALUES READONLY
AS
BEGIN
	
	SELECT 
			r.*		
		FROM dbo.vVoucherValueRow r	
		WHERE r.so_ct IN(SELECT [NValue] FROM @OrderCodes) AND r.SubsidiaryId = @SubId		
END

GO

USE AccountancyDB
GO

CREATE OR ALTER FUNCTION [dbo].[afn_sumVndByTk]
(
	@SubId int,
	@tk_no nvarchar(max),
	@tk_co nvarchar(max),	
	@FromDate datetime2,
	@ToDate datetime2,
	@Thue_suat_VAT INT,
	@IsNotVat BIT = NULL
)
RETURNS decimal(18,5)
AS
BEGIN
	DECLARE @Result decimal(18,5)

	DECLARE @tblTkNo TABLE(
		AccountNumber nvarchar(128)
	)

	DECLARE @tblTkCo TABLE(
		AccountNumber nvarchar(128)
	)

	INSERT INTO @tblTkNo
	SELECT AccountNumber FROM dbo.afn_GetChildrenAccount(@tk_no);

	INSERT INTO @tblTkCo
	SELECT AccountNumber FROM dbo.afn_GetChildrenAccount(@tk_co);



	SELECT 
		@Result = SUM(Vnd) 
	FROM dbo._rc WITH(NOLOCK)
		WHERE
			SubsidiaryId = @SubId
			AND [Ngay_ct] BETWEEN @FromDate AND @ToDate			
			AND (LEN(@tk_no) = 0 OR (@tk_no='-' AND tk_no IS NOT NULL AND tk_no <> '') OR EXISTS (SELECT 0 FROM @tblTkNo WHERE AccountNumber = tk_no))
			AND (LEN(@tk_co) = 0 OR (@tk_co='-' AND tk_co IS NOT NULL AND tk_co <> '') OR EXISTS (SELECT 0 FROM @tblTkCo WHERE AccountNumber = tk_co))
			AND Vnd > 0
			AND (@Thue_suat_VAT IS NULL OR Thue_suat_VAT = @Thue_suat_VAT)
			AND (@IsNotVat IS NULL OR (@IsNotVat = 0 AND (Not_VAT IS NULL OR Not_VAT = 0)) OR (@IsNotVat = 1 AND Not_VAT = 1))
		OPTION(RECOMPILE);
	RETURN @Result
END


GO

USE ManufacturingDB
GO
CREATE OR ALTER VIEW [dbo].[v_ProductionOrderDetail] AS 
							SELECT 
	pod.ProductionOrderDetailId F_Id,
	pod.ProductionOrderCode,
	pod.ProductionOrderId,
	pod.ProductCode, 
	pod.ProductName,
	pod.UnitName,
	pod.Quantity,
	pod.ReserveQuantity, 
	pod.[Date],
	pod.StartDate,
	pod.PlanEndDate,
	pod.EndDate,
	pod.Note,
	pod.ProductId
FROM [ManufacturingDB].[dbo].[vProductionOrderDetail] pod

GO

